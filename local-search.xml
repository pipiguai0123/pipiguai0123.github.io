<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>keepalive一键安装脚本</title>
    <link href="/2023/07/13/%E8%84%9A%E6%9C%AC/keepalive%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/"/>
    <url>/2023/07/13/%E8%84%9A%E6%9C%AC/keepalive%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="keepalive安装"><a href="#keepalive安装" class="headerlink" title="keepalive安装"></a>keepalive安装</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#####离线安装####</span><br><span class="hljs-built_in">echo</span> -e  <span class="hljs-string">&quot;请输入安装方式：\n 1.离线安装\n 2.在线安装&quot;</span><br><span class="hljs-built_in">read</span>   select<br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$select</span> <span class="hljs-keyword">in</span><br>1)<br>wget http://www.keepalived.org/software/keepalived-1.2.10.tar.gz<br><br>yum install popt-devel openssl openssl-devel libnl-devel<br><br>tar zxvf keepalived-1.2.10.tar.gz  &amp;&amp;  <span class="hljs-built_in">cd</span> keepalived-1.2.10<br><br>./configure --prefix=/usr/local/keepalived<br><br>make<br><br>make install<br><br><span class="hljs-built_in">cp</span> /usr/local/keepalived/sbin/keepalived  /usr/sbin<br><span class="hljs-built_in">cp</span> /usr/local/keepalived/etc/rc.d/init.d/keepalived  /etc/init.d/keepalived<br><span class="hljs-built_in">cp</span> /usr/local/keepalived/etc/sysconfig/keepalived   /etc/sysconfig/<br><br><span class="hljs-built_in">mkdir</span> /etc/keepalived<br><br><span class="hljs-built_in">touch</span> /etc/keepalived/keepalived.conf<br>;;<br><br>2)<br><span class="hljs-comment">####在线安装######</span><br>yum install -y keepalived<br>;;<br><br>  3)<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>脚本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>keepalive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>geth安装，并加入以太坊测试网Goerli</title>
    <link href="/2023/07/13/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%92%8C%E6%B3%A2%E5%9C%BA/%E4%BB%A5%E5%A4%AA%E5%9D%8A/geth%E5%AE%89%E8%A3%85%EF%BC%8C%E5%B9%B6%E5%8A%A0%E5%85%A5%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91Goerli/"/>
    <url>/2023/07/13/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%92%8C%E6%B3%A2%E5%9C%BA/%E4%BB%A5%E5%A4%AA%E5%9D%8A/geth%E5%AE%89%E8%A3%85%EF%BC%8C%E5%B9%B6%E5%8A%A0%E5%85%A5%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91Goerli/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="geth安装，并加入以太坊测试网Goerli"><a href="#geth安装，并加入以太坊测试网Goerli" class="headerlink" title="geth安装，并加入以太坊测试网Goerli"></a>geth安装，并加入以太坊测试网Goerli</h1><p>了解以太坊节点：<a href="https://ethereum.org/en/developers/docs/nodes-and-clients/">https://ethereum.org/en/developers/docs/nodes-and-clients/</a><br>geth安装官方文档：<a href="https://geth.ethereum.org/docs/install-and-build/installing-geth#most-linux-systems-and-macos">https://geth.ethereum.org/docs/install-and-build/installing-geth#most-linux-systems-and-macos</a><br>以太坊网络文档：<a href="https://ethereum.org/zh/developers/docs/networks/">https://ethereum.org/zh/developers/docs/networks/</a><br>运行以太坊全节点：<a href="https://docs.prylabs.network/docs/install/install-with-script">https://docs.prylabs.network/docs/install/install-with-script</a><br>加入主网参考文档：<a href="https://ethereum.org/zh/developers/docs/nodes-and-clients/run-a-node/">https://ethereum.org/zh/developers/docs/nodes-and-clients/run-a-node/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2022年9月15日，随着以太坊成功「合并」，即网络的共识机制从「工作量证明」转为「权益证明」，使用显卡挖矿也成为了历史。合并后，原来的以太坊eth1变为执行层，只负责执行交易，而共识层则由信标链（beacon chain）完成，负责决定谁来出块（下图）。</p><p><img src="/2023/07/13/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%92%8C%E6%B3%A2%E5%9C%BA/%E4%BB%A5%E5%A4%AA%E5%9D%8A/geth%E5%AE%89%E8%A3%85%EF%BC%8C%E5%B9%B6%E5%8A%A0%E5%85%A5%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91Goerli/geth%E5%AE%89%E8%A3%85%EF%BC%8C%E5%B9%B6%E5%8A%A0%E5%85%A5%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91Goerli%5C%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221123141113.png" alt="微信图片_20221123141113"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.为什么要自建节点？<br>一是以太坊的硬件要求门槛较低。节点想要同步验证网络的话只需要一台服务器即可，而想要成为验证节点只需要质押<span class="hljs-number">32</span>个以太坊，不再需要购买显卡或矿机。<br>二是自建节点后可以拥有专属的JSON-RPC节点。用户可以使用该节点随时获取区块链上的数据，或向区块链发送交易。<br>更多：https:<span class="hljs-regexp">//</span>ethereum.org<span class="hljs-regexp">/en/</span>developers<span class="hljs-regexp">/docs/</span>apis<span class="hljs-regexp">/json-rpc/</span><br>三是拥有对节点和质押收益的全部所有权。用户还可以在节点上运行MEV Bot获得额外收益。<br><br><span class="hljs-number">2</span>、自建节点有什么风险？<br>一是硬件和软件的维护成本，软件没有及时升级可能因为漏洞面临黑客攻击。<br>二是运行节点的服务器掉线时会面临质押收益率相等的罚没损失。<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">硬件和软件要求：<br>一台至少拥有1TB SSD硬盘，16GB 内存，4核CPU，25Mb/s网速的服务器；软件方面，Linux, Windows和Mac OS都可以，但考虑到维护成本和稳定性，优先推荐Linux。<br></code></pre></td></tr></table></figure><h2 id="部署以太坊全节点（不参与验证的话）需要完成2个步骤："><a href="#部署以太坊全节点（不参与验证的话）需要完成2个步骤：" class="headerlink" title="部署以太坊全节点（不参与验证的话）需要完成2个步骤："></a>部署以太坊全节点（不参与验证的话）需要完成2个步骤：</h2><p>1.运行执行层客户端，可以选择Geth，Nethermind，Besu 等其中之一<br>2.运行共识层客户端，可以选择Prysm, Lighthouse, Teku 等其中之一</p><h2 id="一、）安装执行层客户端"><a href="#一、）安装执行层客户端" class="headerlink" title="一、）安装执行层客户端"></a>一、）安装执行层客户端</h2><h3 id="1-安装依赖环境"><a href="#1-安装依赖环境" class="headerlink" title="1. 安装依赖环境"></a>1. 安装依赖环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum update -y &amp;&amp; yum install git bzip2 gcc-c++ ntp epel-release nodejs wget make -y<br></code></pre></td></tr></table></figure><h3 id="2-安装go（go版本太新会有bug）"><a href="#2-安装go（go版本太新会有bug）" class="headerlink" title="2.安装go（go版本太新会有bug）"></a>2.安装go（go版本太新会有bug）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://golang.google.cn/dl/go1.19.3.linux-amd64.tar.gz<br>tar -C /usr/local -xnf go1.19.3.linux-amd64.tar.gz <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export GOROOT=/usr/local/go&quot;</span> &gt;&gt; /etc/profile<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=/usr/local/go/bin:<span class="hljs-variable">$PATH</span>&quot;</span> &gt;&gt; /etc/profile<br><span class="hljs-built_in">source</span> /etc/profile<br>go version<br></code></pre></td></tr></table></figure><h3 id="3-下载最新的ethereum包"><a href="#3-下载最新的ethereum包" class="headerlink" title="3.下载最新的ethereum包"></a>3.下载最新的ethereum包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/local<br>git <span class="hljs-built_in">clone</span> https://github.com/ethereum/go-ethereum<br></code></pre></td></tr></table></figure><h3 id="4-编译并设置环境变量"><a href="#4-编译并设置环境变量" class="headerlink" title="4.编译并设置环境变量"></a>4.编译并设置环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> go-ethereum<br><br><span class="hljs-comment">#make geth</span><br>make all<br><br><span class="hljs-comment">#编译后会提示通过./build/bin/geth启动</span><br>./build/bin/geth version<br><br><span class="hljs-comment">#设置环境变量</span><br><span class="hljs-built_in">echo</span> GETH_HOME=/usr/local/go-ethereum/build/bin &gt;&gt; /etc/profile<br><span class="hljs-built_in">echo</span> PATH=\<span class="hljs-variable">$PATH</span>:\<span class="hljs-variable">$GETH_HOME</span> &gt;&gt; /etc/profile<br><span class="hljs-built_in">echo</span> <span class="hljs-built_in">export</span> PATH &gt;&gt; /etc/profile<br><br><span class="hljs-built_in">source</span> /etc/profile<br><br><span class="hljs-comment">#查看是否生效</span><br>geth version<br></code></pre></td></tr></table></figure><h3 id="5-运行以下命令启动Geth并在Goerli测试网运行-需后台运行时，请参考步骤三"><a href="#5-运行以下命令启动Geth并在Goerli测试网运行-需后台运行时，请参考步骤三" class="headerlink" title="5.运行以下命令启动Geth并在Goerli测试网运行(需后台运行时，请参考步骤三)"></a>5.运行以下命令启动Geth并在Goerli测试网运行(<strong>需后台运行时，请参考步骤三</strong>)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">geth --goerli --http --http.api eth,net,engine,admin --authrpc.jwtsecret /app/ethereum/consensus/jwt.hex<br></code></pre></td></tr></table></figure><h2 id="二、）安装共识层客户端Prysm"><a href="#二、）安装共识层客户端Prysm" class="headerlink" title="二、）安装共识层客户端Prysm"></a>二、）安装共识层客户端Prysm</h2><h3 id="1-在服务器上创建名为ethereum的文件夹，并在该文件夹中创建名为execution和consensus文件夹"><a href="#1-在服务器上创建名为ethereum的文件夹，并在该文件夹中创建名为execution和consensus文件夹" class="headerlink" title="1.在服务器上创建名为ethereum的文件夹，并在该文件夹中创建名为execution和consensus文件夹"></a>1.在服务器上创建名为ethereum的文件夹，并在该文件夹中创建名为execution和consensus文件夹</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app/ethereum/&#123;consensus,execution&#125;<br></code></pre></td></tr></table></figure><h3 id="2-进入consensus文件夹并运行以下命令下载Prysm客户端："><a href="#2-进入consensus文件夹并运行以下命令下载Prysm客户端：" class="headerlink" title="2.进入consensus文件夹并运行以下命令下载Prysm客户端："></a>2.进入consensus文件夹并运行以下命令下载Prysm客户端：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/ethereum/consensus &amp;&amp; <span class="hljs-built_in">mkdir</span> prysm &amp;&amp; <span class="hljs-built_in">cd</span> prysm<br><br><span class="hljs-comment">#国内网络无法下载时，可下载：https://github.com/prysmaticlabs/prysm/blob/develop/prysm.sh</span><br>curl https://raw.githubusercontent.com/prysmaticlabs/prysm/master/prysm.sh --output prysm.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x prysm.sh<br><br><span class="hljs-comment">#或者上传该文件，我的已经存放在该撰写文件的同级目录下</span><br></code></pre></td></tr></table></figure><h3 id="3-使用prysm-sh创建jwt-token。"><a href="#3-使用prysm-sh创建jwt-token。" class="headerlink" title="3.使用prysm.sh创建jwt token。"></a>3.使用prysm.sh创建jwt token。</h3><p><strong>jwt token将用来帮助验证共识层和执行层的客户端的数据交互。确保生成的jwt.hex文件放在consensus文件目录下。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">./prysm.sh beacon-chain generate-auth-secret<br><br><span class="hljs-built_in">mv</span> ./jwt.hex /app/ethereum/consensus/<br></code></pre></td></tr></table></figure><h3 id="4、运行共识层客户端"><a href="#4、运行共识层客户端" class="headerlink" title="4、运行共识层客户端"></a>4、运行共识层客户端</h3><p>第一次运行节点时，通常等待节点同步完成2-3天时间，这是由于客户端需要从第一个区块开始重新验证和同步。<br>为了加快节点同步速度，需要将Goerli测试网的原始状态数据genesis.ssz下载到&#x2F;app&#x2F;ethereum&#x2F;consensus&#x2F;prysm 目录下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/ethereum/consensus/prysm<br>wget https://github.com/eth-clients/eth2-networks/raw/master/shared/prater/genesis.ssz<br><br></code></pre></td></tr></table></figure><p>此外，推荐使用checkpoint sync加快同步速度，即选择受信任的别的信标链最新确认区块开始同步，并假设此前的所有区块已经被验证。添加checkpoint sync的方法也很简单，只要在运行.&#x2F;prysm.sh时，额外添加两个参数，如果是在测试网Goerli的话：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">--checkpoint-sync-url=https://goerli.checkpoint-sync.ethpandaops.io<br>--genesis-beacon-api-url=https://goerli.checkpoint-sync.ethpandaops.io<br><br><span class="hljs-comment">#以上节点来自：https://notes.ethereum.org/@launchpad/checkpoint-sync</span><br><span class="hljs-comment">#更多的checkpoints，包括主网的可以选择下面的节点：https://eth-clients.github.io/checkpoint-sync-endpoints/#goerli</span><br></code></pre></td></tr></table></figure><p>完整的使用prysm客户端运行测试网Goerli的命令如下（后台运行请参考如下步骤三）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./prysm.sh beacon-chain --execution-endpoint=http://localhost:8551 --prater --jwt-secret=/app/ethereum/consensus/jwt.hex --datadir /app/ethereum/consensus/prysm/data --genesis-state=genesis.ssz --checkpoint-sync-url=https://goerli.checkpoint-sync.ethpandaops.io --genesis-beacon-api-url=https://goerli.checkpoint-sync.ethpandaops.io<br></code></pre></td></tr></table></figure><p><strong>推荐了checkpoint sync，但这仅针对共识层节点，执行层节点要同步的区块更多（主网需要同步600多G），因此需等待更多时间，大约为4-5个小时</strong></p><h2 id="三、）后台运行共识层和执行层客户端"><a href="#三、）后台运行共识层和执行层客户端" class="headerlink" title="三、）后台运行共识层和执行层客户端"></a>三、）后台运行共识层和执行层客户端</h2><p>为了保证程序在窗口关闭后仍能保持运行，这里使用nohup，并将log存入&#x2F;app&#x2F;ethereum&#x2F;log 下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">nohup</span> geth --goerli --http --http.api eth,net,engine,admin --authrpc.jwtsecret /app/ethereum/consensus/jwt.hex &gt; /app/ethereum/log/geth.txt &amp;<br><br><span class="hljs-built_in">nohup</span> ./prysm.sh beacon-chain --datadir=/app/ethereum/consensus/prysm/data --execution-endpoint=http://localhost:8551 --prater --jwt-secret=/app/ethereum/consensus/jwt.hex --genesis-state=genesis.ssz --checkpoint-sync-url=https://goerli.checkpoint-sync.ethpandaops.io --genesis-beacon-api-url=https://goerli.checkpoint-sync.ethpandaops.io &gt; /app/ethereum/log/prysm.txt &amp;<br></code></pre></td></tr></table></figure><h2 id="四、）确认共识层节点同步完成"><a href="#四、）确认共识层节点同步完成" class="headerlink" title="四、）确认共识层节点同步完成"></a>四、）确认共识层节点同步完成</h2><p>首先，可以通过Goerli Beacon Chain网站查看最新的slot：<a href="https://prater.beaconcha.in/">https://prater.beaconcha.in/</a></p><p><img src="/2023/07/13/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%92%8C%E6%B3%A2%E5%9C%BA/%E4%BB%A5%E5%A4%AA%E5%9D%8A/geth%E5%AE%89%E8%A3%85%EF%BC%8C%E5%B9%B6%E5%8A%A0%E5%85%A5%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91Goerli/geth%E5%AE%89%E8%A3%85%EF%BC%8C%E5%B9%B6%E5%8A%A0%E5%85%A5%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91Goerli%5Cimage-20221123152609183.png" alt="image-20221123152609183"></p><p>再去查看运行prysm的日志：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">tail</span> -100f /app/ethereum/log/prysm.txt<br><br><span class="hljs-comment">#信标节点同步状态,当您看到 时&quot;is_syncing&quot;:false，您的信标节点已与信标链完全同步。当您看到 时&quot;is_optimistic&quot;:false，您的信标节点会看到您的执行节点 1) 尚未启动，2) 尚未同步通过合并块或 3) 与执行层区块链完全同步。</span><br>curl http://localhost:3500/eth/v1/node/syncing | jq<br></code></pre></td></tr></table></figure><p><img src="/2023/07/13/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%92%8C%E6%B3%A2%E5%9C%BA/%E4%BB%A5%E5%A4%AA%E5%9D%8A/geth%E5%AE%89%E8%A3%85%EF%BC%8C%E5%B9%B6%E5%8A%A0%E5%85%A5%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91Goerli/geth%E5%AE%89%E8%A3%85%EF%BC%8C%E5%B9%B6%E5%8A%A0%E5%85%A5%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91Goerli%5Cimage-20221123152742525.png" alt="image-20221123152742525"></p><p>可以看到slot是匹配的，因此证明共识层节点已经完成了同步。</p><h2 id="五、）验证执行层节点同步完成"><a href="#五、）验证执行层节点同步完成" class="headerlink" title="五、）验证执行层节点同步完成"></a>五、）验证执行层节点同步完成</h2><p>命令行查询<br>输入以下命令查询geth是否完成同步</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#登录</span><br>geth attach http://localhost:8545<br><br><span class="hljs-comment">#查看同步状态，如果返回 false则表示未同步或同步到最新了</span><br>eth.syncing<br><span class="hljs-comment">#当curentBlock和highestBlock一致时，就表示区块同步成功了。</span><br><br><span class="hljs-comment">#查看状态</span><br>eth<br><br><span class="hljs-comment">#查看区块信息</span><br>eth.getBlock(0)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
      <category>ETH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ETH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建波场节点</title>
    <link href="/2023/07/13/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%92%8C%E6%B3%A2%E5%9C%BA/%E6%B3%A2%E5%9C%BA/%E6%90%AD%E5%BB%BA%E6%B3%A2%E5%9C%BA%E8%8A%82%E7%82%B9/"/>
    <url>/2023/07/13/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%92%8C%E6%B3%A2%E5%9C%BA/%E6%B3%A2%E5%9C%BA/%E6%90%AD%E5%BB%BA%E6%B3%A2%E5%9C%BA%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="搭建波场节点"><a href="#搭建波场节点" class="headerlink" title="搭建波场节点"></a>搭建波场节点</h1><p>官方文档：<a href="https://cn.developers.tron.network/docs/deploy-the-fullnode-or-supernode">https://cn.developers.tron.network/docs/deploy-the-fullnode-or-supernode</a><br>参考文档：<a href="https://tronprotocol.github.io/documentation-zh/developers/deployment/">https://tronprotocol.github.io/documentation-zh/developers/deployment/</a><br>参考博主文档：<a href="https://juejin.cn/post/6940832101742673957">https://juejin.cn/post/6940832101742673957</a><br>参考博主文档：<a href="https://www.361shipin.com/blog/1514302185595207680">https://www.361shipin.com/blog/1514302185595207680</a></p><p><strong>服务器配置： 8核16G 2TSSD硬盘（基础配置）<br>推荐配置：16核32G、2.5TSSD硬盘、100M带宽<br>超级代表产块节点建议配置：32核CPU、64G内存</strong></p><p><strong>环境：Java-tron节点支持部署在 Linux 或 MacOS 操作系统上，并且依赖Oracle JDK 1.8 ，不支持其它版本的JDK</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install git java-1.8.0-openjdk  java-1.8.0-openjdk-devel wget ntp -y<br></code></pre></td></tr></table></figure><h2 id="1、下载最新tron代码及修改配置文件："><a href="#1、下载最新tron代码及修改配置文件：" class="headerlink" title="1、下载最新tron代码及修改配置文件："></a>1、下载最新tron代码及修改配置文件：</h2><h3 id="1-1、创建代码目录并克隆到本地"><a href="#1-1、创建代码目录并克隆到本地" class="headerlink" title="1.1、创建代码目录并克隆到本地"></a>1.1、创建代码目录并克隆到本地</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> data<br><span class="hljs-built_in">cd</span> /data<br><span class="hljs-built_in">mkdir</span> fullNode/<br><span class="hljs-built_in">mkdir</span> solidityNode/<br>git <span class="hljs-built_in">clone</span> https://github.com/tronprotocol/java-tron.git<br></code></pre></td></tr></table></figure><h3 id="1-2、编译代码"><a href="#1-2、编译代码" class="headerlink" title="1.2、编译代码"></a>1.2、编译代码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> java-tron<br>./gradlew clean build -x <span class="hljs-built_in">test</span><br><br><span class="hljs-comment">#参数-x test表示跳过执行测试用例，也可以去掉这个参数，以在编译的过程中执行测试代码，这将使编译时间更长。编译完成之后，FullNode.jar会生成在 java-tron/build/libs/目录下</span><br></code></pre></td></tr></table></figure><h3 id="1-3、复制FullNode-jar和SolidityNode-jar以及相应的配置文件到各自的目录"><a href="#1-3、复制FullNode-jar和SolidityNode-jar以及相应的配置文件到各自的目录" class="headerlink" title="1.3、复制FullNode.jar和SolidityNode.jar以及相应的配置文件到各自的目录"></a>1.3、复制FullNode.jar和SolidityNode.jar以及相应的配置文件到各自的目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /data/java-tron/build/libs<br><span class="hljs-built_in">cp</span> -r FullNode.jar /data/fullNode/<br><span class="hljs-built_in">cp</span> -r SolidityNode.jar /data/solidityNode/<br></code></pre></td></tr></table></figure><h3 id="1-4、复制config-conf配置文件到指定目录（直接wget下载主网配置文件可跳过此步骤）"><a href="#1-4、复制config-conf配置文件到指定目录（直接wget下载主网配置文件可跳过此步骤）" class="headerlink" title="1.4、复制config.conf配置文件到指定目录（直接wget下载主网配置文件可跳过此步骤）"></a>1.4、复制config.conf配置文件到指定目录（直接wget下载主网配置文件可跳过此步骤）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /data/java-tron/framework/src/main/resources<br><span class="hljs-built_in">cp</span> -r config.conf /data/fullNode/<br></code></pre></td></tr></table></figure><h3 id="1-5、修改配置文件"><a href="#1-5、修改配置文件" class="headerlink" title="1.5、修改配置文件"></a>1.5、修改配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#获取主网配置文件：https://github.com/tronprotocol/tron-deployment/blob/master/main_net_config.conf</span><br>vim main_net_config.conf<br><span class="hljs-comment">#复制主网配置文件内容</span><br><br><span class="hljs-comment">#获取测试网配置文件：https://raw.githubusercontent.com/tronprotocol/tron-deployment/master/test_net_config.conf</span><br><br><span class="hljs-comment">#更多配置文件：https://github.com/tronprotocol/tron-deployment</span><br><br><span class="hljs-comment">##直接wget下载主网配置文件可跳过此步骤</span><br>vim  /data/fullNode/config.conf<br><span class="hljs-comment">#修改vm.supportConstant = true</span><br>vm = &#123;<br>  supportConstant = <span class="hljs-literal">true</span><br>  saveInternalTx = <span class="hljs-literal">true</span><br>  <br></code></pre></td></tr></table></figure><h2 id="2、获取快照"><a href="#2、获取快照" class="headerlink" title="2、获取快照"></a>2、获取快照</h2><p>​拉取最新的快照 <a href="http://47.74.159.117/saveInternalTx/">快照链接</a></p><p><strong>注意：对于主网和nile测试网，由于新节点启动后，需要同步的数据量较大，因此同步数据需要较长的时间。可以使用数据快照来加快节点同步速度。首先下载最新的数据快照，并将其解压至tron项目的output-directory目录下，然后再启动节点，这样节点将在数据快照的基础上进行同步。</strong></p><p><strong>选好最新的快照目录拉取即可（一定要是最新的才可以）</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">例如：<br>cd /data/fullNode/<br>wget http://47.74.159.117/saveInternalTx/backup20221010/FullNode_output-directory.tgz<br>#下载完毕之后，解压到当前目录即可（硬盘一定要够大。压缩包和解压文件都非常大）<br><br></code></pre></td></tr></table></figure><p><strong>数据比较大，下载时间长，可使用脚步后台执行</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#脚本：</span><br><span class="hljs-comment">#!/bin/bash</span><br>wget http://47.74.159.117/saveInternalTx/backup20221013/FullNode_output-directory.tgz -P /data/fullNode/<br><span class="hljs-comment">#mwget多线程下载</span><br><span class="hljs-comment">#mwget -n 200 http://47.74.159.117/saveInternalTx/backup20221013/FullNode_output-directory.tgz -d /data/fullNode/</span><br><span class="hljs-keyword">if</span> [ $? == 0 ];<span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;is ok!&quot;</span> &gt;&gt; /data/log<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment">#后台执行</span><br><span class="hljs-built_in">nohup</span> bash pull.sh &gt;/dev/null 2&gt;&amp;1 &amp;<br><br><span class="hljs-comment">#下载完成后将生成：/data/log</span><br><span class="hljs-comment">#下载完毕之后，解压到当前目录即可（硬盘一定要够大。压缩包和解压文件都非常大）</span><br><br><span class="hljs-comment">#解压时间长，后台执行</span><br><span class="hljs-built_in">nohup</span> tar -xnf FullNode_output-directory.tgz &amp;<br></code></pre></td></tr></table></figure><h2 id="3、运行FullNode"><a href="#3、运行FullNode" class="headerlink" title="3、运行FullNode"></a>3、运行FullNode</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /data/fullNode<br><span class="hljs-built_in">nohup</span> java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -c main_net_config.conf &amp;<br><br>-XX:+UseConcMarkSweepGC ：指定并行垃圾回收。要放在 -jar 参数前面，不能放在最后面。<br>-Xmx ：JVM堆的最大值，可以设置成物理内存的80%<br><span class="hljs-comment">#注意该conf文件名称</span><br><span class="hljs-comment">#启动后在可查看/data/fullNode/logs/tron.log日志，看到类似于 [DB](Manager.java:994) pushBlock block number:25286844, cost/txs:432/88的日志则成功启动节点，正在同步，number：是同步到的对应的块高</span><br></code></pre></td></tr></table></figure><h2 id="4、验证"><a href="#4、验证" class="headerlink" title="4、验证"></a>4、验证</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">1.查看节点最新区块号<br><span class="hljs-comment"># 查看节点当前同步的最新区块号，与tron官方区块链浏览器进行对比，查看是否一致，是否已与公网节点的区块一致</span><br>curl -X POST http://127.0.0.1:8090/wallet/getnowblock<br><span class="hljs-comment">#curl -X POST http://127.0.0.1:8091/walletsolidity/getnowblock</span><br><br>2.查询链上最新的块内的交易信息列表<br><span class="hljs-comment"># 查询链上最新的块内的交易信息列表，确认是否可获取，如果可获取，说明已同步区块信息</span><br>curl -X POST http://127.0.0.1:8090/wallet/gettransactioninfobyblocknum -d <span class="hljs-string">&#x27;&#123;&quot;num&quot;:457312&#125;&#x27;</span><br><br></code></pre></td></tr></table></figure><h2 id="5、关闭节点"><a href="#5、关闭节点" class="headerlink" title="5、关闭节点"></a>5、关闭节点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">kill</span> -15 进程<span class="hljs-built_in">id</span>   <span class="hljs-comment">#来关闭全节点</span><br><br><span class="hljs-comment">#kill -9 对应的fullnode程序即可</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
      <category>tron</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tron</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>geth安装，并加入以太坊rinkeby测试网</title>
    <link href="/2023/07/12/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%92%8C%E6%B3%A2%E5%9C%BA/%E4%BB%A5%E5%A4%AA%E5%9D%8A/geth%E5%AE%89%E8%A3%85%EF%BC%8C%E5%B9%B6%E5%8A%A0%E5%85%A5%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91(rinkeby)/"/>
    <url>/2023/07/12/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%92%8C%E6%B3%A2%E5%9C%BA/%E4%BB%A5%E5%A4%AA%E5%9D%8A/geth%E5%AE%89%E8%A3%85%EF%BC%8C%E5%B9%B6%E5%8A%A0%E5%85%A5%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91(rinkeby)/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="geth安装，并加入以太坊rinkeby测试网"><a href="#geth安装，并加入以太坊rinkeby测试网" class="headerlink" title="geth安装，并加入以太坊rinkeby测试网"></a>geth安装，并加入以太坊rinkeby测试网</h1><p>以太坊安装官方文档：<a href="https://geth.ethereum.org/docs/install-and-build/installing-geth#most-linux-systems-and-macos">https://geth.ethereum.org/docs/install-and-build/installing-geth#most-linux-systems-and-macos</a><br>安装文档：<a href="https://ethereum.org/zh/developers/docs/networks/">https://ethereum.org/zh/developers/docs/networks/</a></p><p>备注：Rinkeby 测试网不会进行合并升级。它被 Sepolia 取代了，并将在 Sepolia 过渡到权益证明大约一年后，即在 2023 年 Q2&#x2F;Q3 左右关停</p><p>#安装依赖环境</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">yum update -y &amp;&amp; yum install git bzip<span class="hljs-number">2</span> gcc-<span class="hljs-keyword">c</span>++ ntp epel-<span class="hljs-keyword">release</span> nodejs wget make -y<br></code></pre></td></tr></table></figure><p>#安装go（go版本太新会有bug）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//g</span>olang.google.cn<span class="hljs-regexp">/dl/g</span>o1.<span class="hljs-number">18.5</span>.linux-amd64.tar.gz<br>tar -C <span class="hljs-regexp">/usr/</span>local -xnf go1.<span class="hljs-number">18.5</span>.linux-amd64.tar.gz <br>echo <span class="hljs-string">&quot;export GOROOT=/usr/local/go&quot;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile<br>echo <span class="hljs-string">&quot;export PATH=/usr/local/go/bin:$PATH&quot;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile<br>source <span class="hljs-regexp">/etc/</span>profile<br>go version<br></code></pre></td></tr></table></figure><p>#下载最新的ethereum包</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/ethereum/g</span>o-ethereum<br></code></pre></td></tr></table></figure><p>#编译并设置环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> go-ethereum<br><br><span class="hljs-comment">#make geth</span><br>make all<br><br><span class="hljs-comment">#编译后会提示通过./build/bin/geth启动</span><br>./build/bin/geth version<br><br><span class="hljs-comment">#设置环境变量</span><br><span class="hljs-built_in">echo</span> GETH_HOME=/usr/local/go-ethereum/build/bin &gt;&gt; /etc/profile<br><span class="hljs-built_in">echo</span> PATH=\<span class="hljs-variable">$PATH</span>:\<span class="hljs-variable">$GETH_HOME</span> &gt;&gt; /etc/profile<br><span class="hljs-built_in">echo</span> <span class="hljs-built_in">export</span> PATH &gt;&gt; /etc/profile<br><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><p><strong>连接到以太坊测试网络rinkeby</strong></p><p>官方文档：<a href="https://ethereum.org/zh/developers/docs/networks/#ropsten">https://ethereum.org/zh/developers/docs/networks/#ropsten</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建数据目录</span><br><span class="hljs-built_in">mkdir</span> /data<br><span class="hljs-comment">#后台运行(命令行启动) rinkeby网络</span><br><span class="hljs-built_in">nohup</span> geth --rinkeby --datadir=/data --port=30304 --cache=2048 --http --http.api db,eth,net,web3,personal,admin,miner,debug --http.port 8545 --http.addr 0.0.0.0 --http.corsdomain <span class="hljs-string">&quot;*&quot;</span>  &gt;/data/geth.log 2&gt;&amp;1 &amp;<br><br><span class="hljs-comment">#生成配置文件启动</span><br>geth --rinkeby --datadir=/data --port=30304 --cache=2048 --http --http.api db,eth,net,web3,personal,admin,miner,debug --http.port 8545 --http.addr 0.0.0.0 --http.corsdomain <span class="hljs-string">&quot;*&quot;</span>  dumpconfig &gt; rinkeby.toml<br><span class="hljs-comment">#启动配置文件，后台运行</span><br><span class="hljs-built_in">nohup</span> geth  --config /data/rinkeby.toml &gt;/data/geth.log 2&gt;&amp;1 &amp;<br><br><br><span class="hljs-comment">#----------------ropsten网络（已在2022年Q3关停）--------------------</span><br><span class="hljs-built_in">nohup</span> geth --ropsten --syncmode <span class="hljs-string">&quot;snap&quot;</span> --port <span class="hljs-string">&quot;30303&quot;</span> --cache=4096 --datadir /data --http --http.api db,eth,net,web3,personal,admin,miner,debug --http.port 8545 --http.addr 0.0.0.0 --http.corsdomain <span class="hljs-string">&quot;*&quot;</span> --maxpendpeers 999 &gt; /data/geth.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#登录</span><br>geth attach http://localhost:8545<br><br><span class="hljs-comment">#查看同步状态，如果返回 false则表示未同步或同步到最新了</span><br>eth.syncing<br><span class="hljs-comment">#当curentBlock和highestBlock一致时，就表示区块同步成功了。</span><br><br><span class="hljs-comment">#查看状态</span><br>eth<br><br><span class="hljs-comment">#查看最新区块高度</span><br>eth.blockNumber<br><br><br><span class="hljs-comment">#查看区块信息</span><br>eth.getBlock(0)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
      <category>ETH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ETH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>国产开源堡垒机（跳板机）JumpServer安装以及使用</title>
    <link href="/2023/07/12/%E6%93%8D%E4%BD%9C%E5%92%8C%E6%9C%8D%E5%8A%A1/%E6%90%AD%E5%BB%BA%E5%A0%A1%E5%9E%92%E6%9C%BA/%E5%9B%BD%E4%BA%A7%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BA%EF%BC%88%E8%B7%B3%E6%9D%BF%E6%9C%BA%EF%BC%89JumpServer%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/07/12/%E6%93%8D%E4%BD%9C%E5%92%8C%E6%9C%8D%E5%8A%A1/%E6%90%AD%E5%BB%BA%E5%A0%A1%E5%9E%92%E6%9C%BA/%E5%9B%BD%E4%BA%A7%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BA%EF%BC%88%E8%B7%B3%E6%9D%BF%E6%9C%BA%EF%BC%89JumpServer%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="国产开源堡垒机（跳板机）JumpServer安装以及使用"><a href="#国产开源堡垒机（跳板机）JumpServer安装以及使用" class="headerlink" title="国产开源堡垒机（跳板机）JumpServer安装以及使用"></a>国产开源堡垒机（跳板机）JumpServer安装以及使用</h1><h2 id="一、安装JumpServer"><a href="#一、安装JumpServer" class="headerlink" title="一、安装JumpServer"></a>一、安装JumpServer</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">官方安装文档：https://docs.jumpserver.org/zh/master/install/setup_by_fast/<br>非官方参考安装文档1：https://blog.csdn.net/Stesin/article/details/122172257<br>非官方参考安装文档2：https://www.cnblogs.com/diantong/p/11444142.html<br></code></pre></td></tr></table></figure><p><strong>因Jumpserver需要使用redis和数据库，建议使用外置 数据库 和 Redis</strong></p><table><thead><tr><th>DB</th><th>Version</th><th></th><th>Cache</th><th>Version</th></tr></thead><tbody><tr><td>MySQL</td><td>&gt;&#x3D; 5.7</td><td></td><td>Redis</td><td>&gt;&#x3D; 5.0</td></tr><tr><td>MariaDB</td><td>&gt;&#x3D; 10.2</td><td></td><td></td><td></td></tr></tbody></table><h3 id="1、在服务器有网的情况下可采用《一键部署》方式"><a href="#1、在服务器有网的情况下可采用《一键部署》方式" class="headerlink" title="1、在服务器有网的情况下可采用《一键部署》方式"></a>1、在服务器有网的情况下可采用《一键部署》方式</h3><p>默认会安装到 &#x2F;opt&#x2F;jumpserver-installer-v2.20.2 目录</p><p>备注：如果需要安装2.16.2版本，只需要将curl命令中的v2.20.2替换为v2.16.2</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -sSL https://github.com/jumpserver/jumpserver/releases/download/v2.20.2/quick_start.sh | bash<br></code></pre></td></tr></table></figure><h3 id="2、安装完成后会生成配置文件-x2F-opt-x2F-jumpserver-x2F-config-x2F-config-txt"><a href="#2、安装完成后会生成配置文件-x2F-opt-x2F-jumpserver-x2F-config-x2F-config-txt" class="headerlink" title="2、安装完成后会生成配置文件 &#x2F;opt&#x2F;jumpserver&#x2F;config&#x2F;config.txt"></a>2、安装完成后会生成配置文件 &#x2F;opt&#x2F;jumpserver&#x2F;config&#x2F;config.txt</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">注意：如果有外置数据库和redis，则需要修改config.txt文件内的配置！需配置到对应的地址！<br></code></pre></td></tr></table></figure><h3 id="3、修改配置文件后，因安装的不同的版本会生成不同的版本文件夹"><a href="#3、修改配置文件后，因安装的不同的版本会生成不同的版本文件夹" class="headerlink" title="3、修改配置文件后，因安装的不同的版本会生成不同的版本文件夹"></a>3、修改配置文件后，因安装的不同的版本会生成不同的版本文件夹</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /opt/jumpserver-installer-v2.20.2<br><br><span class="hljs-comment"># 启动</span><br>./jmsctl.sh start<br><br><span class="hljs-comment"># 停止</span><br>./jmsctl.sh down<br><br><span class="hljs-comment"># 卸载</span><br>./jmsctl.sh uninstall<br><br><span class="hljs-comment"># 帮助</span><br>./jmsctl.sh -h<br></code></pre></td></tr></table></figure><p><strong>启动后&gt;&gt;访问本机ip+80端口，初始账号和密码都为：admin</strong></p><p>备注：官方文档上有</p><h2 id="二、资产和登录账户配置"><a href="#二、资产和登录账户配置" class="headerlink" title="二、资产和登录账户配置"></a>二、资产和登录账户配置</h2><p>前言：在JumpServer中，有服务器资产的登录账户和JumpServer平台的登录账户</p><h3 id="1、配置邮件发送"><a href="#1、配置邮件发送" class="headerlink" title="1、配置邮件发送"></a>1、配置邮件发送</h3><p><img src="/2023/07/12/%E6%93%8D%E4%BD%9C%E5%92%8C%E6%9C%8D%E5%8A%A1/%E6%90%AD%E5%BB%BA%E5%A0%A1%E5%9E%92%E6%9C%BA/%E5%9B%BD%E4%BA%A7%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BA%EF%BC%88%E8%B7%B3%E6%9D%BF%E6%9C%BA%EF%BC%89JumpServer%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220407170151739.png" alt="image-20220407170151739"></p><h3 id="2、配置登录JumpServer平台账号"><a href="#2、配置登录JumpServer平台账号" class="headerlink" title="2、配置登录JumpServer平台账号"></a>2、配置登录JumpServer平台账号</h3><p><img src="/2023/07/12/%E6%93%8D%E4%BD%9C%E5%92%8C%E6%9C%8D%E5%8A%A1/%E6%90%AD%E5%BB%BA%E5%A0%A1%E5%9E%92%E6%9C%BA/%E5%9B%BD%E4%BA%A7%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BA%EF%BC%88%E8%B7%B3%E6%9D%BF%E6%9C%BA%EF%BC%89JumpServer%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220407170317716.png" alt="image-20220407170317716"></p><h3 id="3、新增资产并对资产授权"><a href="#3、新增资产并对资产授权" class="headerlink" title="3、新增资产并对资产授权"></a>3、新增资产并对资产授权</h3><h4 id="3-1、设置资产（服务器）登录的系统用户"><a href="#3-1、设置资产（服务器）登录的系统用户" class="headerlink" title="3.1、设置资产（服务器）登录的系统用户"></a>3.1、设置资产（服务器）登录的系统用户</h4><p><img src="/2023/07/12/%E6%93%8D%E4%BD%9C%E5%92%8C%E6%9C%8D%E5%8A%A1/%E6%90%AD%E5%BB%BA%E5%A0%A1%E5%9E%92%E6%9C%BA/%E5%9B%BD%E4%BA%A7%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BA%EF%BC%88%E8%B7%B3%E6%9D%BF%E6%9C%BA%EF%BC%89JumpServer%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220407170415776.png" alt="image-20220407170415776"></p><p>或者设置普通用户，该普通账号应该是：远程到的机器的服务器设置的登录账号</p><p><img src="/2023/07/12/%E6%93%8D%E4%BD%9C%E5%92%8C%E6%9C%8D%E5%8A%A1/%E6%90%AD%E5%BB%BA%E5%A0%A1%E5%9E%92%E6%9C%BA/%E5%9B%BD%E4%BA%A7%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BA%EF%BC%88%E8%B7%B3%E6%9D%BF%E6%9C%BA%EF%BC%89JumpServer%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220407170508238.png" alt="image-20220407170508238"></p><h4 id="3-2、设置资产用户后，创建资产（服务器）"><a href="#3-2、设置资产用户后，创建资产（服务器）" class="headerlink" title="3.2、设置资产用户后，创建资产（服务器）"></a>3.2、设置资产用户后，创建资产（服务器）</h4><p><img src="/2023/07/12/%E6%93%8D%E4%BD%9C%E5%92%8C%E6%9C%8D%E5%8A%A1/%E6%90%AD%E5%BB%BA%E5%A0%A1%E5%9E%92%E6%9C%BA/%E5%9B%BD%E4%BA%A7%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BA%EF%BC%88%E8%B7%B3%E6%9D%BF%E6%9C%BA%EF%BC%89JumpServer%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220407170558723.png" alt="image-20220407170558723"></p><h4 id="3-3、给资产授权，能让登录JumpServer的用户拥有权限"><a href="#3-3、给资产授权，能让登录JumpServer的用户拥有权限" class="headerlink" title="3.3、给资产授权，能让登录JumpServer的用户拥有权限"></a>3.3、给资产授权，能让登录JumpServer的用户拥有权限</h4><p><img src="/2023/07/12/%E6%93%8D%E4%BD%9C%E5%92%8C%E6%9C%8D%E5%8A%A1/%E6%90%AD%E5%BB%BA%E5%A0%A1%E5%9E%92%E6%9C%BA/%E5%9B%BD%E4%BA%A7%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BA%EF%BC%88%E8%B7%B3%E6%9D%BF%E6%9C%BA%EF%BC%89JumpServer%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220407170715613.png" alt="image-20220407170715613"></p><h4 id="3-4、查看是否授权成功"><a href="#3-4、查看是否授权成功" class="headerlink" title="3.4、查看是否授权成功"></a>3.4、查看是否授权成功</h4><p><img src="/2023/07/12/%E6%93%8D%E4%BD%9C%E5%92%8C%E6%9C%8D%E5%8A%A1/%E6%90%AD%E5%BB%BA%E5%A0%A1%E5%9E%92%E6%9C%BA/%E5%9B%BD%E4%BA%A7%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BA%EF%BC%88%E8%B7%B3%E6%9D%BF%E6%9C%BA%EF%BC%89JumpServer%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220407170814290.png" alt="image-20220407170814290"></p><p><img src="/2023/07/12/%E6%93%8D%E4%BD%9C%E5%92%8C%E6%9C%8D%E5%8A%A1/%E6%90%AD%E5%BB%BA%E5%A0%A1%E5%9E%92%E6%9C%BA/%E5%9B%BD%E4%BA%A7%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BA%EF%BC%88%E8%B7%B3%E6%9D%BF%E6%9C%BA%EF%BC%89JumpServer%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220407170832704.png" alt="image-20220407170832704"></p><h4 id="3-5、远程资产"><a href="#3-5、远程资产" class="headerlink" title="3.5、远程资产"></a>3.5、远程资产</h4><p><img src="/2023/07/12/%E6%93%8D%E4%BD%9C%E5%92%8C%E6%9C%8D%E5%8A%A1/%E6%90%AD%E5%BB%BA%E5%A0%A1%E5%9E%92%E6%9C%BA/%E5%9B%BD%E4%BA%A7%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BA%EF%BC%88%E8%B7%B3%E6%9D%BF%E6%9C%BA%EF%BC%89JumpServer%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220407170854750.png" alt="image-20220407170854750"></p><p><img src="/2023/07/12/%E6%93%8D%E4%BD%9C%E5%92%8C%E6%9C%8D%E5%8A%A1/%E6%90%AD%E5%BB%BA%E5%A0%A1%E5%9E%92%E6%9C%BA/%E5%9B%BD%E4%BA%A7%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BA%EF%BC%88%E8%B7%B3%E6%9D%BF%E6%9C%BA%EF%BC%89JumpServer%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220407170909468.png" alt="image-20220407170909468"></p><p><img src="/2023/07/12/%E6%93%8D%E4%BD%9C%E5%92%8C%E6%9C%8D%E5%8A%A1/%E6%90%AD%E5%BB%BA%E5%A0%A1%E5%9E%92%E6%9C%BA/%E5%9B%BD%E4%BA%A7%E5%BC%80%E6%BA%90%E5%A0%A1%E5%9E%92%E6%9C%BA%EF%BC%88%E8%B7%B3%E6%9D%BF%E6%9C%BA%EF%BC%89JumpServer%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220407170944860.png" alt="image-20220407170944860"></p>]]></content>
    
    
    <categories>
      
      <category>服务</category>
      
      <category>JumpServer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JumpServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>geth安装，并加入以太坊正式网</title>
    <link href="/2023/07/11/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%92%8C%E6%B3%A2%E5%9C%BA/%E4%BB%A5%E5%A4%AA%E5%9D%8A/geth%E5%AE%89%E8%A3%85%EF%BC%8C%E5%B9%B6%E5%8A%A0%E5%85%A5%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%AD%A3%E5%BC%8F%E7%BD%91/"/>
    <url>/2023/07/11/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%92%8C%E6%B3%A2%E5%9C%BA/%E4%BB%A5%E5%A4%AA%E5%9D%8A/geth%E5%AE%89%E8%A3%85%EF%BC%8C%E5%B9%B6%E5%8A%A0%E5%85%A5%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%AD%A3%E5%BC%8F%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="geth安装，并加入以太坊正式网"><a href="#geth安装，并加入以太坊正式网" class="headerlink" title="geth安装，并加入以太坊正式网"></a>geth安装，并加入以太坊正式网</h1><p><code>官方文档：https://docs.prylabs.network/docs/install/install-with-script</code></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2022年9月15日，随着以太坊成功「合并」，即网络的共识机制从「工作量证明」转为「权益证明」，使用显卡挖矿也成为了历史。合并后，原来的以太坊eth1变为执行层，只负责执行交易，而共识层则由信标链（beacon chain）完成，负责决定谁来出块（下图）。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.为什么要自建节点？<br>一是以太坊的硬件要求门槛较低。节点想要同步验证网络的话只需要一台服务器即可，而想要成为验证节点只需要质押<span class="hljs-number">32</span>个以太坊，不再需要购买显卡或矿机。<br>二是自建节点后可以拥有专属的JSON-RPC节点。用户可以使用该节点随时获取区块链上的数据，或向区块链发送交易。<br>更多：https:<span class="hljs-regexp">//</span>ethereum.org<span class="hljs-regexp">/en/</span>developers<span class="hljs-regexp">/docs/</span>apis<span class="hljs-regexp">/json-rpc/</span><br>三是拥有对节点和质押收益的全部所有权。用户还可以在节点上运行MEV Bot获得额外收益。<br><br><span class="hljs-number">2</span>、自建节点有什么风险？<br>一是硬件和软件的维护成本，软件没有及时升级可能因为漏洞面临黑客攻击。<br>二是运行节点的服务器掉线时会面临质押收益率相等的罚没损失。<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">硬件和软件要求：<br>一台至少拥有1.5TB SSD硬盘，16GB 内存，4核CPU，25Mb/s网速的服务器；软件方面，Linux, Windows和Mac OS都可以，但考虑到维护成本和稳定性，优先推荐Linux。<br></code></pre></td></tr></table></figure><h2 id="部署以太坊全节点（不参与验证的话）需要完成2个步骤："><a href="#部署以太坊全节点（不参与验证的话）需要完成2个步骤：" class="headerlink" title="部署以太坊全节点（不参与验证的话）需要完成2个步骤："></a>部署以太坊全节点（不参与验证的话）需要完成2个步骤：</h2><p>1.运行执行层客户端，可以选择Geth，Nethermind，Besu 等其中之一<br>2.运行共识层客户端，可以选择Prysm, Lighthouse, Teku 等其中之一</p><h2 id="一、）安装执行层客户端"><a href="#一、）安装执行层客户端" class="headerlink" title="一、）安装执行层客户端"></a>一、）安装执行层客户端</h2><h3 id="1-安装依赖环境"><a href="#1-安装依赖环境" class="headerlink" title="1. 安装依赖环境"></a>1. 安装依赖环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum update -y &amp;&amp; yum install git bzip2 gcc-c++ ntp epel-release nodejs wget make -y<br></code></pre></td></tr></table></figure><h3 id="2-安装go（go版本太新会有bug）"><a href="#2-安装go（go版本太新会有bug）" class="headerlink" title="2.安装go（go版本太新会有bug）"></a>2.安装go（go版本太新会有bug）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://golang.google.cn/dl/go1.19.3.linux-amd64.tar.gz<br>tar -C /usr/local -xnf go1.19.3.linux-amd64.tar.gz <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export GOROOT=/usr/local/go&quot;</span> &gt;&gt; /etc/profile<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=/usr/local/go/bin:<span class="hljs-variable">$PATH</span>&quot;</span> &gt;&gt; /etc/profile<br><span class="hljs-built_in">source</span> /etc/profile<br>go version<br></code></pre></td></tr></table></figure><h3 id="3-下载最新的ethereum包"><a href="#3-下载最新的ethereum包" class="headerlink" title="3.下载最新的ethereum包"></a>3.下载最新的ethereum包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/local<br>git <span class="hljs-built_in">clone</span> https://github.com/ethereum/go-ethereum<br></code></pre></td></tr></table></figure><h3 id="4-编译并设置环境变量"><a href="#4-编译并设置环境变量" class="headerlink" title="4.编译并设置环境变量"></a>4.编译并设置环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> go-ethereum<br><br><span class="hljs-comment">#make geth</span><br>make all<br><br><span class="hljs-comment">#编译后会提示通过./build/bin/geth启动</span><br>./build/bin/geth version<br><br><span class="hljs-comment">#设置环境变量</span><br><span class="hljs-built_in">echo</span> GETH_HOME=/usr/local/go-ethereum/build/bin &gt;&gt; /etc/profile<br><span class="hljs-built_in">echo</span> PATH=\<span class="hljs-variable">$PATH</span>:\<span class="hljs-variable">$GETH_HOME</span> &gt;&gt; /etc/profile<br><span class="hljs-built_in">echo</span> <span class="hljs-built_in">export</span> PATH &gt;&gt; /etc/profile<br><br><span class="hljs-built_in">source</span> /etc/profile<br><br><span class="hljs-comment">#查看是否生效</span><br>geth version<br></code></pre></td></tr></table></figure><h2 id="二、）安装共识层客户端Prysm"><a href="#二、）安装共识层客户端Prysm" class="headerlink" title="二、）安装共识层客户端Prysm"></a>二、）安装共识层客户端Prysm</h2><h3 id="1-在服务器上创建名为ethereum的文件夹，并在该文件夹中创建名为execution和consensus文件夹"><a href="#1-在服务器上创建名为ethereum的文件夹，并在该文件夹中创建名为execution和consensus文件夹" class="headerlink" title="1.在服务器上创建名为ethereum的文件夹，并在该文件夹中创建名为execution和consensus文件夹"></a>1.在服务器上创建名为ethereum的文件夹，并在该文件夹中创建名为execution和consensus文件夹</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app/ethereum/&#123;consensus,execution&#125;<br></code></pre></td></tr></table></figure><h3 id="2-进入consensus文件夹并运行以下命令下载Prysm客户端："><a href="#2-进入consensus文件夹并运行以下命令下载Prysm客户端：" class="headerlink" title="2.进入consensus文件夹并运行以下命令下载Prysm客户端："></a>2.进入consensus文件夹并运行以下命令下载Prysm客户端：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/ethereum/consensus &amp;&amp; <span class="hljs-built_in">mkdir</span> prysm &amp;&amp; <span class="hljs-built_in">cd</span> prysm<br><br><span class="hljs-comment">#国内网络无法下载时，可下载：https://github.com/prysmaticlabs/prysm/blob/develop/prysm.sh</span><br>curl https://raw.githubusercontent.com/prysmaticlabs/prysm/master/prysm.sh --output prysm.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x prysm.sh<br><br><span class="hljs-comment">#或者上传该文件，我的已经存放在该撰写文件的同级目录下</span><br></code></pre></td></tr></table></figure><h3 id="3-使用prysm-sh创建jwt-token。"><a href="#3-使用prysm-sh创建jwt-token。" class="headerlink" title="3.使用prysm.sh创建jwt token。"></a>3.使用prysm.sh创建jwt token。</h3><p><strong>jwt token将用来帮助验证共识层和执行层的客户端的数据交互。确保生成的jwt.hex文件放在consensus文件目录下。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">./prysm.sh beacon-chain generate-auth-secret<br><br><span class="hljs-built_in">mv</span> ./jwt.hex /app/ethereum/consensus/<br></code></pre></td></tr></table></figure><h2 id="三、）运行共识层和执行层"><a href="#三、）运行共识层和执行层" class="headerlink" title="三、）运行共识层和执行层"></a>三、）运行共识层和执行层</h2><h3 id="1、后台运行执行客户端"><a href="#1、后台运行执行客户端" class="headerlink" title="1、后台运行执行客户端"></a>1、后台运行执行客户端</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">nohup</span> geth --mainnet \<br>    --datadir <span class="hljs-string">&quot;/app/ethereum-data&quot;</span> \<br>    --http --http.api db,eth,net,web3,personal,admin,miner,debug \<br>    --authrpc.vhosts=<span class="hljs-string">&quot;*&quot;</span> \<br>    --http.addr=<span class="hljs-string">&quot;0.0.0.0&quot;</span> \<br>    --http.vhosts=<span class="hljs-string">&quot;*&quot;</span> \<br>    --authrpc.jwtsecret=/app/ethereum/consensus/jwt.hex &gt; /app/log/geth.txt &amp;<br>    <br>参数解释：https://geth.ethereum.org/docs/fundamentals/command-line-options<br></code></pre></td></tr></table></figure><h3 id="2、运行共识层客户端"><a href="#2、运行共识层客户端" class="headerlink" title="2、运行共识层客户端"></a>2、运行共识层客户端</h3><p>第一次运行节点时，通常等待节点同步完成2-3天时间，这是由于客户端需要从第一个区块开始重新验证和同步。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">nohup</span> /mnt/data/ethereum/consensus/prysm/prysm.sh beacon-chain \<br>--datadir /app/ethereum  \<br>--accept-terms-of-use \<br>--execution-endpoint=http://localhost:8551 \<br>--jwt-secret=/app/ethereum/consensus/jwt.hex  &gt; /mnt/data/log/prysm.txt &amp;<br></code></pre></td></tr></table></figure><p>可以使用checkpoint sync加快同步速度，即选择受信任的别的信标链最新确认区块开始同步，并假设此前的所有区块已经被验证。添加checkpoint sync的方法也很简单，只要在运行.&#x2F;prysm.sh时，额外添加两个参数(<strong>主网未实际操作</strong>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">--checkpoint-sync-url=https://mainnet-checkpoint-sync.attestant.io<br>--genesis-beacon-api-url=https://mainnet-checkpoint-sync.attestant.io<br><br>更多的checkpoints，包括主网的可以选择下面的节点：https://eth-clients.github.io/checkpoint-sync-endpoints/<span class="hljs-comment">#goerli</span><br></code></pre></td></tr></table></figure><p><strong>推荐了checkpoint sync，但这仅针对共识层节点，执行层节点要同步的区块更多（主网需要同步600多G），因此需等待更多时间，大约为4-5个小时</strong></p><h2 id="四、）验证"><a href="#四、）验证" class="headerlink" title="四、）验证"></a>四、）验证</h2><h3 id="1-查看运行prysm的日志"><a href="#1-查看运行prysm的日志" class="headerlink" title="1.查看运行prysm的日志"></a>1.查看运行prysm的日志</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">tail</span> -100f /app/ethereum/log/prysm.txt<br><br><span class="hljs-comment">#信标节点同步状态,当您看到 时&quot;is_syncing&quot;:false，您的信标节点已与信标链完全同步。当您看到 时&quot;is_optimistic&quot;:false，您的信标节点会看到您的执行节点 1) 尚未启动，2) 尚未同步通过合并块或 3) 与执行层区块链完全同步。</span><br>curl http://localhost:3500/eth/v1/node/syncing | jq<br></code></pre></td></tr></table></figure><h3 id="2-验证执行层节点同步完成"><a href="#2-验证执行层节点同步完成" class="headerlink" title="2.验证执行层节点同步完成"></a>2.验证执行层节点同步完成</h3><p>命令行查询<br>输入以下命令查询geth是否完成同步</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#登录</span><br>geth attach http://localhost:8545<br><br><span class="hljs-comment">#查看同步状态，如果返回 false则表示未同步或同步到最新了</span><br>eth.syncing<br><span class="hljs-comment">#当curentBlock和highestBlock一致时，就表示区块同步成功了。</span><br><br><span class="hljs-comment">#查看状态</span><br>eth<br><br><span class="hljs-comment">#查看区块信息</span><br>eth.getBlock(0)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
      <category>ETH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ETH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis清空缓存(docker安装)</title>
    <link href="/2023/07/04/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/docker%E8%BF%90%E8%A1%8C%E7%9A%84redis%E6%B8%85%E7%A9%BA%E7%BC%93%E5%AD%98/"/>
    <url>/2023/07/04/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/docker%E8%BF%90%E8%A1%8C%E7%9A%84redis%E6%B8%85%E7%A9%BA%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="redis清空缓存-docker安装"><a href="#redis清空缓存-docker安装" class="headerlink" title="redis清空缓存(docker安装)"></a>redis清空缓存(docker安装)</h1><h2 id="1-查看redis-镜像"><a href="#1-查看redis-镜像" class="headerlink" title="1.查看redis 镜像"></a>1.查看redis 镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker ps<br></code></pre></td></tr></table></figure><h2 id="2-进入-redis-所在镜像-使用docker运行时"><a href="#2-进入-redis-所在镜像-使用docker运行时" class="headerlink" title="2.进入 redis 所在镜像(使用docker运行时)"></a>2.进入 redis 所在镜像(使用docker运行时)</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it redis bash<br></code></pre></td></tr></table></figure><h2 id="3-进入-redis"><a href="#3-进入-redis" class="headerlink" title="3.进入 redis"></a>3.进入 redis</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli -h 127.0.0.1 -p 6379<br></code></pre></td></tr></table></figure><h2 id="4-认证（如果有密码）"><a href="#4-认证（如果有密码）" class="headerlink" title="4.认证（如果有密码）"></a>4.认证（如果有密码）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">auth <span class="hljs-built_in">test</span>@123<br></code></pre></td></tr></table></figure><h2 id="5-查看所有keys"><a href="#5-查看所有keys" class="headerlink" title="5.查看所有keys"></a>5.查看所有keys</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">keys *<br></code></pre></td></tr></table></figure><h2 id="6-清空所有缓存"><a href="#6-清空所有缓存" class="headerlink" title="6.清空所有缓存"></a>6.清空所有缓存</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">FLUSHALL<br><span class="hljs-comment">#或者全部清空执行命令 dbsize &amp;&amp; flushall</span><br><br>删除指定索引的值<br>del key<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis备份和恢复</title>
    <link href="/2023/07/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/redis%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D/"/>
    <url>/2023/07/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/redis%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="redis备份和恢复"><a href="#redis备份和恢复" class="headerlink" title="redis备份和恢复"></a>redis备份和恢复</h1><h2 id="redis备份"><a href="#redis备份" class="headerlink" title="redis备份"></a>redis备份</h2><p><code>SAVE</code>命令用于创建当前数据库的备份。</p><p>语法:<br>redis Save 命令基本语法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis 127.0.0.1:6379&gt; SAVE <br>OK<br><br><span class="hljs-comment">#该命令将在 redis 安装目录中创建dump.rdb文件。</span><br></code></pre></td></tr></table></figure><p>创建 redis 备份文件也可以使用命令 <code>BGSAVE</code>，该命令在后台执行。</p><p>实例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">127.0.0.1:6379&gt; BGSAVE<br><br>Background saving started<br><br></code></pre></td></tr></table></figure><h2 id="redis恢复数据"><a href="#redis恢复数据" class="headerlink" title="redis恢复数据"></a>redis恢复数据</h2><p>如果需要恢复数据，只需将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可。获取 redis 目录可以使用 CONFIG 命令，如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis 127.0.0.1:6379&gt; CONFIG GET <span class="hljs-built_in">dir</span><br>1) <span class="hljs-string">&quot;dir&quot;</span><br>2) <span class="hljs-string">&quot;/usr/local/redis/bin&quot;</span><br>以上命令 CONFIG GET <span class="hljs-built_in">dir</span> 输出的 redis 安装目录为 /usr/local/redis/bin。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker、docker-compose运行nacos</title>
    <link href="/2023/06/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/Nacos/%E4%BD%BF%E7%94%A8docker%E3%80%81docker-compose%E8%BF%90%E8%A1%8Cnacos/"/>
    <url>/2023/06/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/Nacos/%E4%BD%BF%E7%94%A8docker%E3%80%81docker-compose%E8%BF%90%E8%A1%8Cnacos/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker、docker-compose运行nacos"><a href="#使用docker、docker-compose运行nacos" class="headerlink" title="使用docker、docker-compose运行nacos"></a>使用docker、docker-compose运行nacos</h1><h2 id="使用docker运行nacos单节点"><a href="#使用docker运行nacos单节点" class="headerlink" title="使用docker运行nacos单节点"></a>使用docker运行nacos单节点</h2><p><code>可参考文档：https://blog.csdn.net/u011651342/article/details/128413487?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-128413487-blog-128923648.235%5Ev27%5Epc_relevant_t0_download&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-128413487-blog-128923648.235%5Ev27%5Epc_relevant_t0_download&amp;utm_relevant_index=3</code></p><h3 id="1、安装mysql（已略过）"><a href="#1、安装mysql（已略过）" class="headerlink" title="1、安装mysql（已略过）"></a>1、安装mysql（已略过）</h3><h3 id="2、去下载nacos-mysql-sql脚本，并执行"><a href="#2、去下载nacos-mysql-sql脚本，并执行" class="headerlink" title="2、去下载nacos-mysql.sql脚本，并执行"></a>2、去下载nacos-mysql.sql脚本，并执行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/alibaba/nacos/blob/master/config/src/main/resources/META-INF/nacos-db.sql<br><br><br><span class="hljs-comment">#连接数据库，创建数据库</span><br>&gt; create database nacos_config;<br><br><span class="hljs-comment">#执行导入脚本</span><br>&gt; <span class="hljs-built_in">source</span> nacos-db.sql<br></code></pre></td></tr></table></figure><h3 id="3、拉取对应的nacos镜像"><a href="#3、拉取对应的nacos镜像" class="headerlink" title="3、拉取对应的nacos镜像"></a>3、拉取对应的nacos镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull nacos/nacos-server<br></code></pre></td></tr></table></figure><h3 id="4、启动nacos服务"><a href="#4、启动nacos服务" class="headerlink" title="4、启动nacos服务"></a>4、启动nacos服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br>docker run -d -p 8848:8848 \<br>-e MODE=standalone \<br>-e PREFER_HOST_MODE=hostname \<br>-e SPRING_DATASOURCE_PLATFORM=mysql \<br>-e MYSQL_SERVICE_HOST=192.168.0.28 \<br>-e MYSQL_SERVICE_PORT=3306 \<br>-e MYSQL_SERVICE_DB_NAME=nacos_config \<br>-e MYSQL_SERVICE_USER=root \<br>-e MYSQL_SERVICE_PASSWORD=123456 \<br>-e MYSQL_DATABASE_NUM=1 \<br>-v /data/nacos/logs:/home/nacos/logs \<br>--restart always --name nacos nacos/nacos-server:2.0.3<br><br><br><span class="hljs-comment">#配置文件解释</span><br>-e MODE=standalone 表示单机模式<br></code></pre></td></tr></table></figure><h3 id="5、访问Nacos"><a href="#5、访问Nacos" class="headerlink" title="5、访问Nacos"></a>5、访问Nacos</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">ip:8848/nacos<br><br>账号：nacos,密码：nacos <br></code></pre></td></tr></table></figure><h2 id="使用docker-compose运行nacos"><a href="#使用docker-compose运行nacos" class="headerlink" title="使用docker-compose运行nacos"></a>使用docker-compose运行nacos</h2><p><code>可参考文档：https://blog.csdn.net/qq_45518774/article/details/129097386?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-129097386-blog-128413487.235%5Ev27%5Epc_relevant_t0_download&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-129097386-blog-128413487.235%5Ev27%5Epc_relevant_t0_download&amp;utm_relevant_index=2</code></p><h3 id="1、安装mysql（已略过）-1"><a href="#1、安装mysql（已略过）-1" class="headerlink" title="1、安装mysql（已略过）"></a>1、安装mysql（已略过）</h3><h3 id="2、去下载nacos-mysql-sql脚本，并执行（参考前面docker安装步骤）"><a href="#2、去下载nacos-mysql-sql脚本，并执行（参考前面docker安装步骤）" class="headerlink" title="2、去下载nacos-mysql.sql脚本，并执行（参考前面docker安装步骤）"></a>2、去下载nacos-mysql.sql脚本，并执行（参考前面docker安装步骤）</h3><h3 id="3、拉取项目，修改配置文件-已略过部分对数据库修改步骤"><a href="#3、拉取项目，修改配置文件-已略过部分对数据库修改步骤" class="headerlink" title="3、拉取项目，修改配置文件(已略过部分对数据库修改步骤)"></a>3、拉取项目，修改配置文件(已略过部分对数据库修改步骤)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/nacos-group/nacos-docker.git<br><span class="hljs-built_in">cd</span> nacos-docker<br><br></code></pre></td></tr></table></figure><h3 id="4、修改mysql连接配置文件"><a href="#4、修改mysql连接配置文件" class="headerlink" title="4、修改mysql连接配置文件"></a>4、修改mysql连接配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi nacos-docker/env/nacos-standlone-mysql.env<br><br>PREFER_HOST_MODE=192.168.62.128<br>MODE=standalone<br>SPRING_DATASOURCE_PLATFORM=mysql<br>MYSQL_SERVICE_HOST=192.168.62.128<br>MYSQL_SERVICE_DB_NAME=nacos_config<br>MYSQL_SERVICE_PORT=3306<br>MYSQL_SERVICE_USER=root<br>MYSQL_SERVICE_PASSWORD=123456<br>MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;allowPublicKeyRetrieval=<span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><h3 id="5、修改单机部署的yaml文件"><a href="#5、修改单机部署的yaml文件" class="headerlink" title="5、修改单机部署的yaml文件"></a>5、修改单机部署的yaml文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim nacos-docker/example/standalone-mysql-5.7.yaml<br><br>version: <span class="hljs-string">&quot;3.8&quot;</span><br>services:<br>  nacos:<br>    image: nacos/nacos-server:<span class="hljs-variable">$&#123;NACOS_VERSION&#125;</span><br>    container_name: nacos-standalone-mysql<br>    env_file:<br>      - ../env/nacos-standlone-mysql.env  <span class="hljs-comment"># 指定配置文件</span><br>    volumes:<br>      - ./standalone-logs/:/home/nacos/logs<br>      - ./init.d/application.properties:/home/nacos/conf/application.properties<br>    ports:<br>      - <span class="hljs-string">&quot;8848:8848&quot;</span><br>      - <span class="hljs-string">&quot;9848:9848&quot;</span><br>      - <span class="hljs-string">&quot;9555:9555&quot;</span><br><span class="hljs-comment">#自己搭建了数据库，所以后面启动mysql的内容就不需要了</span><br><br></code></pre></td></tr></table></figure><h3 id="6、修改nacos的application-properties文件"><a href="#6、修改nacos的application-properties文件" class="headerlink" title="6、修改nacos的application.properties文件"></a>6、修改nacos的application.properties文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">db.url.0=jdbc:mysql://<span class="hljs-variable">$&#123;MYSQL_SERVICE_HOST&#125;</span>:<span class="hljs-variable">$&#123;MYSQL_SERVICE_PORT&#125;</span>/<span class="hljs-variable">$&#123;MYSQL_SERVICE_DB_NAME&#125;</span>?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=<span class="hljs-literal">true</span>&amp;useUnicode=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC&amp;useSSL=<span class="hljs-literal">false</span>&amp;allowPublicKeyRetrieval=<span class="hljs-literal">true</span><br>db.user.0=<span class="hljs-variable">$&#123;MYSQL_SERVICE_USER&#125;</span><br>db.password.0=<span class="hljs-variable">$&#123;MYSQL_SERVICE_PASSWORD&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="7、启动"><a href="#7、启动" class="headerlink" title="7、启动"></a>7、启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 单机模式</span><br><span class="hljs-comment">#启动mysql 5.7</span><br>docker-compose -f example/standalone-mysql-5.7.yaml up -d<br><br><span class="hljs-comment">#如果希望使用MySQL8</span><br>docker-compose -f example/standalone-mysql-8.yaml up<br></code></pre></td></tr></table></figure><h3 id="8、访问Nacos"><a href="#8、访问Nacos" class="headerlink" title="8、访问Nacos"></a>8、访问Nacos</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">ip:</span><span class="hljs-number">8848</span>/nacos<br><br>账号：nacos,密码：nacos <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Nacos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建Keepalived+Nginx高可用集群</title>
    <link href="/2023/06/23/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/Keepalived+Nginx%20%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/Keepalived+Nginx%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/"/>
    <url>/2023/06/23/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/Keepalived+Nginx%20%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/Keepalived+Nginx%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="搭建Keepalived-Nginx高可用集群"><a href="#搭建Keepalived-Nginx高可用集群" class="headerlink" title="搭建Keepalived+Nginx高可用集群"></a>搭建Keepalived+Nginx高可用集群</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">文档参考地址：https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/yanjieli/</span>p/<span class="hljs-number">10682064</span>.html<br></code></pre></td></tr></table></figure><h2 id="1-服务器表"><a href="#1-服务器表" class="headerlink" title="1.服务器表"></a>1.服务器表</h2><p>| 机器名 | 备注 |<br>| — |<br>| LB-01 | Keepalived主服务器（nginx主负载均衡器） |<br>| LB-02 | Keepalived备服务器（nginx辅负载均衡器） |</p><h2 id="2-在所有节点上面进行配置"><a href="#2-在所有节点上面进行配置" class="headerlink" title="2.在所有节点上面进行配置"></a>2.在所有节点上面进行配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#关闭防火墙</span><br>systemctl stop firewalld<br><span class="hljs-comment">#关闭SELiunx</span><br>sed -i <span class="hljs-string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/selinux/config<br><span class="hljs-comment">#时间同步</span><br>ntpdate 0.centos.pool.ntp.org <br><span class="hljs-comment">#安装nginx</span><br>yum install nginx -y<br></code></pre></td></tr></table></figure><h2 id="3-服务器安装keepalived"><a href="#3-服务器安装keepalived" class="headerlink" title="3.服务器安装keepalived"></a>3.服务器安装keepalived</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install keepalived -y<br></code></pre></td></tr></table></figure><h2 id="4-配置keepalived-conf"><a href="#4-配置keepalived-conf" class="headerlink" title="4.配置keepalived.conf"></a>4.配置keepalived.conf</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/keepalived/keepalived.conf<br><br>! Configuration File <span class="hljs-keyword">for</span> keepalived<br>global_defs &#123;<br><span class="hljs-comment">#   notification_email &#123;    ####此处定义发生替换会邮件通知</span><br><span class="hljs-comment">#     cuimingkun@yinwuweiye.com</span><br><span class="hljs-comment">#   &#125;</span><br><span class="hljs-comment">#   notification_email_from keepalived@domain.com</span><br><span class="hljs-comment">#   smtp_server 127.0.0.1</span><br><span class="hljs-comment">#   smtp_connect_timeout 30</span><br>   router_id NGINX_BACK<br>&#125;<br>vrrp_script chk_http_port &#123;<br>                script <span class="hljs-string">&quot;/usr/local/sbin/nginx_pid.sh&quot;</span> <span class="hljs-comment">##nginx挂了以后，启动nginx 监控脚本位置</span><br>                interval 2<br>                weight 2<br>&#125;<br>vrrp_instance VI_1 &#123;<br>    state MASTER        <span class="hljs-comment">#####备机为BACKUP</span><br>    interface eth1<span class="hljs-comment">######网卡名字</span><br>    virtual_router_id 51<br>    priority 100        <span class="hljs-comment">#####备机要小于主</span><br>    advert_int 1<br>    track_script &#123;<br>       chk_http_port<br>    &#125;<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass 1111<br>    &#125;<br>    virtual_ipaddress &#123;<br><span class="hljs-comment">#        118.145.0.41  ####虚拟IP</span><br>118.145.0.36/28<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /usr/local/sbin/nginx_pid.sh &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">#!/bin/bash</span><br><span class="hljs-string">A=`ps -C nginx --no-header |wc -l`     #判断是否启动了nginx      </span><br><span class="hljs-string">if [ $A -eq 0 ];then</span><br><span class="hljs-string">    /usr/local/nginx/sbin/nginx  -c /usr/local/nginx/conf/nginx.conf         #启动nginx服务：二进制安装的启动路径</span><br><span class="hljs-string">    #systemctl start nginx   #启动nginx服务：rpm包或者yum包安装的启动路径</span><br><span class="hljs-string">        sleep 3</span><br><span class="hljs-string">    if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then</span><br><span class="hljs-string">        killall keepalived</span><br><span class="hljs-string">        fi</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="5-启动keepalived并加入开机自启动"><a href="#5-启动keepalived并加入开机自启动" class="headerlink" title="5.启动keepalived并加入开机自启动"></a>5.启动keepalived并加入开机自启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start keepalived<br><br>systemctl <span class="hljs-built_in">enable</span> keepalived<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>Keepalived</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>keepalived_conf文件详解</title>
    <link href="/2023/06/23/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/Keepalived+Nginx%20%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/keepalived_conf%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/06/23/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/Keepalived+Nginx%20%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/keepalived_conf%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="keepalived-conf文件详解"><a href="#keepalived-conf文件详解" class="headerlink" title="keepalived_conf文件详解"></a>keepalived_conf文件详解</h1><h2 id="yum安装的keepalived，keepalived-conf文件在-x2F-etc-x2F-keepalived-x2F-目录下"><a href="#yum安装的keepalived，keepalived-conf文件在-x2F-etc-x2F-keepalived-x2F-目录下" class="headerlink" title="yum安装的keepalived，keepalived.conf文件在&#x2F;etc&#x2F;keepalived&#x2F;目录下"></a>yum安装的keepalived，keepalived.conf文件在&#x2F;etc&#x2F;keepalived&#x2F;目录下</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@localhost ~]<span class="hljs-comment"># cat keepalived.conf</span><br><br><br>! Configuration File <span class="hljs-keyword">for</span> keepalived<br>global_defs &#123;<br><span class="hljs-comment">#   notification_email &#123;    ####此处定义发生替换会邮件通知</span><br><span class="hljs-comment">#     cuimingkun@yinwuweiye.com</span><br><span class="hljs-comment">#   &#125;</span><br><span class="hljs-comment">#   notification_email_from keepalived@domain.com</span><br><span class="hljs-comment">#   smtp_server 127.0.0.1</span><br><span class="hljs-comment">#   smtp_connect_timeout 30</span><br>   router_id NGINX_BACK<br>&#125;<br>vrrp_script chk_http_port &#123;<br>                script <span class="hljs-string">&quot;/usr/local/sbin/nginx_pid.sh&quot;</span> <span class="hljs-comment">##nginx挂了以后，启动nginx 监控脚本位置</span><br>                interval 2<br>                interval 2<br>                weight 2<br>&#125;<br>vrrp_instance VI_1 &#123;<br>    state MASTER        <span class="hljs-comment">#####备机为BACKUP</span><br>    interface eth1<br>    virtual_router_id 51<br>    priority 100        <span class="hljs-comment">#####备机要小于主</span><br>    advert_int 1<br>    track_script &#123;<br>       chk_http_port<br>    &#125;<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass 1111<br>    &#125;<br>    virtual_ipaddress &#123;<br><span class="hljs-comment">#        118.145.0.41  ####虚拟IP</span><br>118.145.0.36/28<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@localhost ~]<span class="hljs-comment"># cat /etc/keepalived/keepalived.conf </span><br>! Configuration File <span class="hljs-keyword">for</span> keepalived<br>global_defs &#123;<br>   <span class="hljs-comment"># 邮件通知信息</span><br>   notification_email &#123;<br>     <span class="hljs-comment"># 定义收件人</span><br>    1962821461@qq.com <br>   &#125;<br>   <span class="hljs-comment"># 定义发件人</span><br>   notification_email_from Alexandre.Cassen@firewall.loc<br>   <span class="hljs-comment"># SMTP服务器地址</span><br>   smtp_server 192.168.62.128<br>   smtp_connect_timeout 30<br>   <span class="hljs-comment"># 路由器标识，一般不用改，也可以写成每个主机自己的主机名</span><br>   router_id LVS_DEVEL<br>   vrrp_skip_check_adv_addr<br>   vrrp_strict<br>   vrrp_garp_interval 0<br>   vrrp_gna_interval 0<br>&#125;<br><br><span class="hljs-comment"># 定义用于实例执行的脚本内容，比如可以在线降低优先级，用于强制切换</span><br>vrrp_script check_pg_alived &#123; <br>script <span class="hljs-string">&quot;/data/scripts/pg_monitor.sh&quot;</span> <br>interval 10 <br>fall 3 <br>&#125;<br><br><span class="hljs-comment"># 一个vrrp_instance就是定义一个虚拟路由器的，实例名称</span><br>vrrp_instance VI_1 &#123;<br>    <span class="hljs-comment"># 定义初始状态，可以是MASTER或者BACKUP</span><br>    state MASTER<br>    <span class="hljs-comment">#非抢占模式</span><br>    nopreempt<br>    <span class="hljs-comment"># 工作接口，通告选举使用哪个接口进行</span><br>    interface ens33<br>    <span class="hljs-comment"># 虚拟路由ID，如果是一组虚拟路由就定义一个ID，如果是多组就要定义多个，而且这个虚拟</span><br>    <span class="hljs-comment"># ID还是虚拟MAC最后一段地址的信息，取值范围0-255</span><br>    virtual_router_id 51<br>    <span class="hljs-comment">#权重 如果你上面定义了MASTER,这里的优先级就需要定义的比其他的高</span><br>    priority 100<br>    <span class="hljs-comment">#通告频率 单位s</span><br>    advert_int 1<br>    <span class="hljs-comment"># 通信认证机制，这里是明文认证还有一种是加密认证</span><br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass 1111<br>    &#125;<br>    <span class="hljs-comment"># 设置虚拟VIP地址</span><br>    virtual_ipaddress &#123;<br>        192.168.62.123<br>    &#125;<br>    <span class="hljs-comment"># 追踪脚本，通常用于去执行上面的vrrp_script定义的脚本内容</span><br>    track_script &#123;<br>      check_pg_alived<br>    &#125;<br>   <span class="hljs-comment"># 如果主机状态变成Master|Backup|Fault之后会去执行的通知脚本，脚本要自己写</span><br>    notify_master <span class="hljs-string">&quot;/data/scripts/failover.sh&quot;</span><br>    notify_fault  <span class="hljs-string">&quot;/data/scripts/fault.sh&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs sh">! Configuration File <span class="hljs-keyword">for</span> keepalived<br>global_defs &#123;                                     <span class="hljs-comment">#全局定义部分</span><br>    notification_email &#123;                          <span class="hljs-comment">#设置报警邮件地址，可设置多个</span><br>        acassen@firewall.loc                      <span class="hljs-comment">#接收通知的邮件地址</span><br>    &#125;                        <br>    notification_email_from test0@163.com         <span class="hljs-comment">#设置 发送邮件通知的地址</span><br>    smtp_server smtp.163.com                      <span class="hljs-comment">#设置 smtp server 地址，可是ip或域名.可选端口号 （默认25）</span><br>    smtp_connect_timeout 30                       <span class="hljs-comment">#设置 连接 smtp server的超时时间</span><br>    router_id LVS_DEVEL                           <span class="hljs-comment">#主机标识，用于邮件通知</span><br>    vrrp_skip_check_adv_addr                   <br>    vrrp_strict                                   <span class="hljs-comment">#严格执行VRRP协议规范，此模式不支持节点单播</span><br>    vrrp_garp_interval 0                       <br>    vrrp_gna_interval 0     <br>    script_user keepalived_script                 <span class="hljs-comment">#指定运行脚本的用户名和组。默认使用用户的默认组。如未指定，默认为keepalived_script 用户，如无此用户，则使用root</span><br>    enable_script_security                        <span class="hljs-comment">#如过路径为非root可写，不要配置脚本为root用户执行。</span><br>&#125;       <br><br>vrrp_script chk_nginx_service &#123;                   <span class="hljs-comment">#VRRP 脚本声明</span><br>    script <span class="hljs-string">&quot;/etc/keepalived/chk_nginx.sh&quot;</span>         <span class="hljs-comment">#周期性执行的脚本</span><br>    interval 3                                    <span class="hljs-comment">#运行脚本的间隔时间，秒</span><br>    weight -20                                    <span class="hljs-comment">#权重，priority值减去此值要小于备服务的priority值</span><br>    fall 3                                        <span class="hljs-comment">#检测几次失败才为失败，整数</span><br>    rise 2                                        <span class="hljs-comment">#检测几次状态为正常的，才确认正常，整数</span><br>    user keepalived_script                        <span class="hljs-comment">#执行脚本的用户或组</span><br>&#125;                                             <br><br>vrrp_instance VI_1 &#123;                              <span class="hljs-comment">#vrrp 实例部分定义，VI_1自定义名称</span><br>    state MASTER                                  <span class="hljs-comment">#指定 keepalived 的角色，必须大写 可选值：MASTER|BACKUP</span><br>    interface ens33                               <span class="hljs-comment">#网卡设置，lvs需要绑定在网卡上，realserver绑定在回环口。区别：lvs对访问为外，realserver为内不易暴露本机信息</span><br>    virtual_router_id 51                          <span class="hljs-comment">#虚拟路由标识，是一个数字，同一个vrrp 实例使用唯一的标识，MASTER和BACKUP 的 同一个 vrrp_instance 下 这个标识必须保持一致</span><br>    priority 100                                  <span class="hljs-comment">#定义优先级，数字越大，优先级越高。</span><br>    advert_int 1                                  <span class="hljs-comment">#设定 MASTER 与 BACKUP 负载均衡之间同步检查的时间间隔，单位为秒，两个节点设置必须一样</span><br>    authentication &#123;                              <span class="hljs-comment">#设置验证类型和密码，两个节点必须一致</span><br>        auth_type PASS                        <br>        auth_pass 1111                        <br>    &#125;                                         <br>    virtual_ipaddress &#123;                           <span class="hljs-comment">#设置虚拟IP地址，可以设置多个虚拟IP地址，每行一个</span><br>        192.168.119.130                       <br>    &#125;<br>    track_script &#123;                                <span class="hljs-comment">#脚本监控状态</span><br>        chk_nginx_service                         <span class="hljs-comment">#可加权重，但会覆盖声明的脚本权重值。chk_nginx_service weight -20</span><br>    &#125;<br>        notify_master <span class="hljs-string">&quot;/etc/keepalived/start_haproxy.sh start&quot;</span>  <span class="hljs-comment">#当前节点成为master时，通知脚本执行任务</span><br>        notify_backup <span class="hljs-string">&quot;/etc/keepalived/start_haproxy.sh stop&quot;</span>   <span class="hljs-comment">#当前节点成为backup时，通知脚本执行任务</span><br>        notify_fault  <span class="hljs-string">&quot;/etc/keepalived/start_haproxy.sh stop&quot;</span>   <span class="hljs-comment">#当当前节点出现故障，执行的任务; </span><br>&#125;                                             <br><br>virtual_server 192.168.119.130 80  &#123;          <span class="hljs-comment">#定义RealServer对应的VIP及服务端口，IP和端口之间用空格隔开</span><br>    delay_loop 6                              <span class="hljs-comment">#每隔6秒查询realserver状态</span><br>    lb_algo rr                                <span class="hljs-comment">#后端调试算法（load balancing algorithm）</span><br>    lb_kind DR                                <span class="hljs-comment">#LVS调度类型NAT/DR/TUN</span><br>    <span class="hljs-comment">#persistence_timeout 60                   同一IP的连接60秒内被分配到同一台realserver</span><br>    protocol TCP                              <span class="hljs-comment">#用TCP协议检查realserver状态</span><br>    real_server 192.168.119.120 80 &#123;          <br>        weight 1                              <span class="hljs-comment">#权重，最大越高，lvs就越优先访问</span><br>        TCP_CHECK &#123;                           <span class="hljs-comment">#keepalived的健康检查方式HTTP_GET | SSL_GET | TCP_CHECK | SMTP_CHECK | MISC</span><br>            connect_timeout 10                <span class="hljs-comment">#10秒无响应超时</span><br>            retry 3                           <span class="hljs-comment">#重连次数3次</span><br>            delay_before_retry 3              <span class="hljs-comment">#重连间隔时间</span><br>            connect_port 80                   <span class="hljs-comment">#健康检查realserver的端口</span><br>        &#125;                                     <br>    &#125;                                         <br>    real_server 192.168.119.121 80 &#123;          <br>        weight 1                              <span class="hljs-comment">#权重，最大越高，lvs就越优先访问</span><br>        TCP_CHECK &#123;                           <span class="hljs-comment">#keepalived的健康检查方式HTTP_GET | SSL_GET | TCP_CHECK | SMTP_CHECK | MISC</span><br>            connect_timeout 10                <span class="hljs-comment">#10秒无响应超时</span><br>            retry 3                           <span class="hljs-comment">#重连次数3次</span><br>            delay_before_retry 3              <span class="hljs-comment">#重连间隔时间</span><br>            connect_port 80                   <span class="hljs-comment">#健康检查realserver的端口</span><br>        &#125;                                     <br>    &#125;                                         <br>&#125;                                             <br><br>vrrp_instance VI_2 &#123;                          <span class="hljs-comment">#vrrp 实例部分定义，VI_1自定义名称</span><br>    state   BACKUP                            <span class="hljs-comment">#指定 keepalived 的角色，必须大写 可选值：MASTER|BACKUP 分别表示（主|备）</span><br>    interface ens33                           <span class="hljs-comment">#网卡设置，绑定vip的子接口，lvs需要绑定在网卡上，realserver绑定在回环口。区别：lvs对访问为外，realserver为内不易暴露本机信息</span><br>    virtual_router_id 52                      <span class="hljs-comment">#虚拟路由标识，是一个数字，同一个vrrp 实例使用唯一的标识，MASTER和BACKUP 的 同一个 vrrp_instance 下 这个标识必须保持一致</span><br>    priority 90                               <span class="hljs-comment">#定义优先级，数字越大，优先级越高。</span><br>    advert_int 1                              <span class="hljs-comment">#设定 MASTER 与 BACKUP 负载均衡之间同步检查的时间间隔，单位为秒，两个节点设置必须一样</span><br>    authentication &#123;                          <span class="hljs-comment">#设置验证类型和密码，两个节点必须一致</span><br>        auth_type PASS                        <br>        auth_pass 1111                        <br>    &#125;                                         <br>    virtual_ipaddress &#123;                       <span class="hljs-comment">#设置虚拟IP地址，可以设置多个虚拟IP地址，每行一个</span><br>        192.168.119.131                       <br>    &#125;                                         <br>&#125;                                             <br><br>virtual_server 192.168.119.131 80 &#123;           <span class="hljs-comment">#定义RealServer对应的VIP及服务端口，IP和端口之间用空格隔开</span><br>    delay_loop 6                              <span class="hljs-comment">#每隔6秒查询realserver状态</span><br>    lb_algo rr                                <span class="hljs-comment">#后端调试算法（load balancing algorithm）</span><br>    lb_kind DR                                <span class="hljs-comment">#LVS调度类型NAT/DR/TUN</span><br>    <span class="hljs-comment">#persistence_timeout 60                   #同一IP的连接60秒内被分配到同一台realserver</span><br>    protocol TCP                              <span class="hljs-comment">#用TCP协议检查realserver状态</span><br>    real_server 192.168.119.120 80 &#123;          <br>        weight 1                              <span class="hljs-comment">#权重，最大越高，lvs就越优先访问</span><br>        TCP_CHECK &#123;                           <span class="hljs-comment">#keepalived的健康检查方式HTTP_GET | SSL_GET | TCP_CHECK | SMTP_CHECK | MISC</span><br>            connect_timeout 10                <span class="hljs-comment">#10秒无响应超时</span><br>            retry 3                           <span class="hljs-comment">#重连次数3次</span><br>            delay_before_retry 3              <span class="hljs-comment">#重连间隔时间</span><br>            connect_port 80                   <span class="hljs-comment">#健康检查realserver的端口</span><br>        &#125;                                     <br>    &#125;                                         <br>    real_server 192.168.119.121 80 &#123;          <br>        weight 1                              <span class="hljs-comment">#权重，最大越高，lvs就越优先访问</span><br>        TCP_CHECK &#123;                           <span class="hljs-comment">#keepalived的健康检查方式HTTP_GET | SSL_GET | TCP_CHECK | SMTP_CHECK | MISC</span><br>            connect_timeout 10                <span class="hljs-comment">#10秒无响应超时</span><br>            retry 3                           <span class="hljs-comment">#重连次数3次</span><br>            delay_before_retry 3              <span class="hljs-comment">#重连间隔时间</span><br>            connect_port 80                   <span class="hljs-comment">#健康检查realserver的端口</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Keepalived</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Keepalived</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>keepalived单播模式conf</title>
    <link href="/2023/06/22/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/Keepalived+Nginx%20%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/keepalived_conf%E5%8D%95%E6%92%AD%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/06/22/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/Keepalived+Nginx%20%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/keepalived_conf%E5%8D%95%E6%92%AD%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="keepalived单播模式conf文件"><a href="#keepalived单播模式conf文件" class="headerlink" title="keepalived单播模式conf文件"></a>keepalived单播模式conf文件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs conf">! Configuration File for keepalived<br>global_defs &#123;<br>   router_id LVS_DEVEL<br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    # 主机: MASTER<br>    # 备机: BACKUP<br>    state MASTER<br>    # 实例绑定的网卡, 用ip a命令查看网卡编号<br>    interface eth0<br>    unicast_src_ip 10.210.144.99<br>    unicast_peer &#123;<br> 10.210.144.100<br>&#125; <br>    # 虚拟路由标识，这个标识是一个数字(1-255)，在一个VRRP实例中主备服务器ID必须一样<br>    virtual_router_id 88<br>    # 优先级，数字越大优先级越高，在一个实例中主服务器优先级要高于备服务器<br>    priority 100<br>    # 主备之间同步检查的时间间隔单位秒<br>    advert_int 1<br>    # 验证类型和密码<br>    authentication &#123;<br>        # 验证类型有两种 PASS和HA<br>        auth_type PASS<br>        # 验证密码，在一个实例中主备密码保持一样<br>        auth_pass 11111111<br>    &#125;<br>    # 虚拟IP地址,可以有多个，每行一个<br>    virtual_ipaddress &#123;<br>        10.210.144.150/20 dev eth0<br>    &#125;<br>&#125;<br><br>virtual_server 10.210.144.150  8443 &#123;<br>    # 健康检查时间间隔<br>    delay_loop 6<br>    # 调度算法<br>    # Doc: http://www.keepalived.org/doc/scheduling_algorithms.html<br>    # Round Robin (rr)<br>    # Weighted Round Robin (wrr)<br>    # Least Connection (lc)<br>    # Weighted Least Connection (wlc)<br>    # Locality-Based Least Connection (lblc)<br>    # Locality-Based Least Connection with Replication (lblcr)<br>    # Destination Hashing (dh)<br>    # Source Hashing (sh)<br>    # Shortest Expected Delay (seq)<br>    # Never Queue (nq)<br>    # Overflow-Connection (ovf)<br>    lb_algo rr<br>    lb_kind NAT<br>    persistence_timeout 50<br>    protocol TCP<br>    # 通过调度算法把Master切换到真实的负载均衡服务器上<br>    # 真实的主机会定期确定进行健康检查，如果MASTER不可用，则切换到备机上<br>    real_server 10.210.144.99 8443 &#123;<br>        weight 1<br>        TCP_CHECK &#123;<br>            # 连接超端口<br>            connect_port 8443<br>            # 连接超时时间<br>            connect_timeout 3<br>        &#125;<br>    &#125;<br>    real_server 10.210.144.100 8443 &#123;<br>        weight 1<br>        TCP_CHECK &#123;<br>            connect_port 8443<br>            connect_timeout 3<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Keepalived</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Keepalived</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用NGINX内置模块mirror进行流量复制等操作原创</title>
    <link href="/2023/06/21/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E7%9A%84%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/%E5%88%A9%E7%94%A8NGINX%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97mirror%E8%BF%9B%E8%A1%8C%E6%B5%81%E9%87%8F%E5%A4%8D%E5%88%B6%E7%AD%89%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/06/21/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E7%9A%84%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/%E5%88%A9%E7%94%A8NGINX%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97mirror%E8%BF%9B%E8%A1%8C%E6%B5%81%E9%87%8F%E5%A4%8D%E5%88%B6%E7%AD%89%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="利用NGINX内置模块mirror进行流量复制等操作原创"><a href="#利用NGINX内置模块mirror进行流量复制等操作原创" class="headerlink" title="利用NGINX内置模块mirror进行流量复制等操作原创"></a>利用NGINX内置模块mirror进行流量复制等操作原创</h1><p>参考文档：<a href="https://cloud.tencent.com/developer/article/2087482">https://cloud.tencent.com/developer/article/2087482</a></p><p><code>备注： nginx 1.13.4 及后续版本内置 ngx_http_mirror_module 模块，提供流量镜像 (复制) 的功能。 支持流量放大，做法为：配置多份相同镜像。 相比 tcp-copy 的优势：无需录制流量，实时可用；配置相当简单。 源站请求，直接原路返回；正常配置下，mirror 请求不影响源站请求及响应，源站 nginx-server 将流量复制到 mirror 站后，两者不再有任何交集。 mirror 模块在 Nginx 1.13.4 以后的版本中默认是启用的，只需看一下版本即可，不必重新编译。 </code></p><p>##以下在本地中运行了mirror1和mirror2，其中f流量代理到mirror1上，镜像复制到mirror2上</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#mirror1的端口为：10000</span><br><br>docker run -itd -p 10000:10000 --name mirror1  registry.cn-hangzhou.aliyuncs.com/hecvstyle/mirror1<br><br><span class="hljs-comment">#mirror2的端口为：20000</span><br>docker run -itd -p 20000:20000 --name mirror1  registry.cn-hangzhou.aliyuncs.com/hecvstyle/mirror2<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh">upstream mirror1 &#123;<br>      server 127.0.0.1:10000 max_fails=3 fail_timeout=30s;<br>&#125;<br>upstream backup_mirror1 &#123;<br>      server 127.0.0.1:20000 max_fails=3 fail_timeout=30s;<br>&#125;<br><br>server &#123;<br>    listen       80;<br>    server_name  localhost;<br><br>    location / &#123;<br>        mirror /mirror1; <span class="hljs-comment"># mirror 指令制定镜像 uri 为 /mirror1</span><br>        proxy_pass http://mirror1;<br>    &#125;<br>    location /mirror1 &#123;<br>         <span class="hljs-comment">#internal;       # 指定此location只能被“内部的”请求调用，外部的调用请求会返回”Not found” (404)</span><br>         proxy_pass http://backup_mirror1<span class="hljs-variable">$request_uri</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#请求该nginx服务，我的nginx服务为80端口</span><br>curl http://127.0.0.1:80/ping?k=hello<br><br><span class="hljs-comment">#可以看到相关的服务日志有请求信息</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker安装kafka单节点</title>
    <link href="/2023/06/20/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/docker%E5%AE%89%E8%A3%85kafka%E5%8D%95%E8%8A%82%E7%82%B9/"/>
    <url>/2023/06/20/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/docker%E5%AE%89%E8%A3%85kafka%E5%8D%95%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker安装kafka单节点"><a href="#docker安装kafka单节点" class="headerlink" title="docker安装kafka单节点"></a>docker安装kafka单节点</h1><h2 id="一、启动zookeeper"><a href="#一、启动zookeeper" class="headerlink" title="一、启动zookeeper"></a>一、启动zookeeper</h2><p><strong>创建zookeeper工作目录：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p zookeeper/data<br></code></pre></td></tr></table></figure><p><strong>编写docker启动zookeeper脚本：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br>docker <span class="hljs-built_in">rm</span> -f zookeeper<br><br>docker run -d --name zookeeper --restart always \<br>        -e TZ=<span class="hljs-string">&quot;Asia/Shanghai&quot;</span> -p 2181:2181 \<br>        -v <span class="hljs-variable">$PWD</span>/zookeeper/data:/data \<br>        wurstmeister/zookeeper<br><br></code></pre></td></tr></table></figure><h2 id="二、启动kafka"><a href="#二、启动kafka" class="headerlink" title="二、启动kafka"></a>二、启动kafka</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>docker <span class="hljs-built_in">rm</span> -f kafka<br><br><span class="hljs-comment">#注意ip地址</span><br>docker run --name kafka \<br>-p 9092:9092 \<br>-e KAFKA_BROKER_ID=1 \<br>-e KAFKA_ZOOKEEPER_CONNECT=192.168.0.44:2181 \<br>-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.0.44:9092 \<br>-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \<br>-d wurstmeister/kafka<br></code></pre></td></tr></table></figure><h2 id="三、kafka工具"><a href="#三、kafka工具" class="headerlink" title="三、kafka工具"></a>三、kafka工具</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>docker <span class="hljs-built_in">rm</span> -f kafka-map<br><br>docker run --name kafka-map \<br>-p 9000:8080 \<br>-e DEFAULT_USERNAME=admin \<br>-e DEFAULT_PASSWORD=admin123 \<br>-d dushixiang/kafka-map<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>问题处理，解决方法</title>
    <link href="/2023/06/20/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%EF%BC%8C%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
    <url>/2023/06/20/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%EF%BC%8C%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="问题处理，解决方法："><a href="#问题处理，解决方法：" class="headerlink" title="问题处理，解决方法："></a>问题处理，解决方法：</h1><p>使用proxy_pass进行代理详细文档：<a href="https://www.jianshu.com/p/b010c9302cd0">https://www.jianshu.com/p/b010c9302cd0</a><br>Nginx location 匹配:<a href="https://juejin.cn/post/6844903849166110733">https://juejin.cn/post/6844903849166110733</a><br>详细文档：<a href="https://www.bookstack.cn/read/dunwu-nginx-tutorial/spilt.1.docs-nginx-configuration.md">https://www.bookstack.cn/read/dunwu-nginx-tutorial/spilt.1.docs-nginx-configuration.md</a></p><h2 id="1、重写地址"><a href="#1、重写地址" class="headerlink" title="1、重写地址"></a>1、重写地址</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">location  <span class="hljs-regexp">/idcard/</span> &#123;<br>    root <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/txt/</span>;<br>    <span class="hljs-comment">#重写地址 https://xxx.com/idcard/BPWeJvwhrT.txt</span><br>    rewrite ^<span class="hljs-regexp">/idcard/</span>(.*)$ /<span class="hljs-variable">$1</span> <span class="hljs-keyword">break</span>; <br>  &#125;<br><br></code></pre></td></tr></table></figure><h2 id="2、去掉访问地址的后缀"><a href="#2、去掉访问地址的后缀" class="headerlink" title="2、去掉访问地址的后缀"></a>2、去掉访问地址的后缀</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">location ^~ /mobile/ &#123;<br>       proxy_pass http://192.168.4.138:9360/;  <span class="hljs-comment">#去掉访问时的/mobile/</span><br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="3、访问某个端口的-x2F-下任何数据都返回某一个页面"><a href="#3、访问某个端口的-x2F-下任何数据都返回某一个页面" class="headerlink" title="3、访问某个端口的&#x2F;下任何数据都返回某一个页面"></a>3、访问某个端口的&#x2F;下任何数据都返回某一个页面</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">server &#123;<br>    listen      8081;  <span class="hljs-comment">#监听的端口</span><br>    root /home/dist;   <span class="hljs-comment">#页面存放的路径</span><br>    server_name  localhost;  <span class="hljs-comment">#访问的名称</span><br>        location / &#123;<br>        rewrite ^/(.*)$ /index.html <span class="hljs-built_in">break</span>;  <span class="hljs-comment">#重写地址  break：重写路径结束后，不再重新匹配路径。 last：重写路径结束后，将得到的路径重新进行一次路径匹配</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、把以show-php结尾的url全部路由到index-php文件。"><a href="#4、把以show-php结尾的url全部路由到index-php文件。" class="headerlink" title="4、把以show.php结尾的url全部路由到index.php文件。"></a>4、把以show.php结尾的url全部路由到index.php文件。</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rewrite <span class="hljs-string">&quot;^/+(.*)(show\.php)$&quot;</span> /index.php <span class="hljs-built_in">break</span>;<br></code></pre></td></tr></table></figure><h2 id="5、nginx-80端口重定向到443端口，也就是http访问自动跳转到https"><a href="#5、nginx-80端口重定向到443端口，也就是http访问自动跳转到https" class="headerlink" title="5、nginx 80端口重定向到443端口，也就是http访问自动跳转到https"></a>5、nginx 80端口重定向到443端口，也就是http访问自动跳转到https</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs sh">server &#123;<br>    listen 80;<br>    server_name www.域名.com;<br>    rewrite ^(.*)$ https://<span class="hljs-variable">$&#123;server_name&#125;</span><span class="hljs-variable">$1</span> permanent; <span class="hljs-comment">#重定向</span><br>&#125;<br>server &#123;<br>    listen 443;<br>    server_name www.域名.com;<br>    root /home/wwwroot;<br>    ssl on;<br>    ssl_certificate /etc/nginx/ssl/server.crt;<br>    ssl_certificate_key /etc/nginx/ssl/server.key;<br>    ....<br>&#125;<br><span class="hljs-comment">#跳转一：实现访问80端口跳转到443端口，端口的跳转！</span><br>upstream web &#123;<br>   server 192.168.94.157:8081;<br>&#125;<br>server &#123;<br>    listen       80;<br>    server_name  192.168.94.156 ;<br>    rewrite ^(.*)$ http://<span class="hljs-variable">$&#123;server_name&#125;</span>:443<span class="hljs-variable">$1</span> permanent;<br>&#125;<br>server &#123;<br>     listen 443 ;<br>     server_name localhost;<br>     location / &#123;<br>       proxy_pass http://web/;<br>    &#125;<br>&#125;<br><span class="hljs-comment">#跳转二：举例：重定向、http到https，https协议跳转。</span><br>server &#123;<br>    listen 80;<br>    server_name test_jira321.com;<br>    rewrite ^(.*) https://$server_name<span class="hljs-variable">$1</span> permanent;<br>&#125;<br>server &#123;<br>  listen 443 ssl;<br>  server_name test_jira321.com;<br><br>  ssl_certificate /etc/letsencrypt/live/test_jira321.com/fullchain.pem;<br>  ssl_certificate_key /etc/letsencrypt/live/test_jira321.com/privkey.pem;<br>  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>  ssl_session_tickets on;<br><br>  proxy_set_header Host <span class="hljs-variable">$host</span>;<br>  proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>  proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>  proxy_set_header X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br><br>  gzip_buffers 32 4K;<br>  gzip_comp_level 6;<br>  gzip_min_length 100;<br>  gzip_types application/javascript text/css text/xml;<br>  gzip_disable <span class="hljs-string">&quot;MSIE [1-6]\.&quot;</span>;<br>  gzip_vary on;<br><br>  location / &#123;<br>    proxy_pass http://192.168.94.129:8080/;<br>    proxy_read_timeout 300;<br>    client_max_body_size    100m;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6、实现nginx转发某个端口：tcp协议转发"><a href="#6、实现nginx转发某个端口：tcp协议转发" class="headerlink" title="6、实现nginx转发某个端口：tcp协议转发"></a>6、实现nginx转发某个端口：tcp协议转发</h2><p>以rpm安装的nginx为例： 修改&#x2F;etc&#x2F;nginx&#x2F;nginx.conf  </p><p><strong>要求stream{}和http{}同级</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/nginx/nginx.conf<br><span class="hljs-comment">#......以上内容省略</span><br>  <span class="hljs-comment">#gzip  on;</span><br><br>       include /etc/nginx/conf.d/*.conf;  <span class="hljs-comment">#rpm安装的时候自己写入的路径</span><br>&#125;<br>stream &#123;<br>    include /etc/nginx/conf.d/tcp/*.conf;  <span class="hljs-comment">#要转发的端口conf路径</span><br>&#125;<br><span class="hljs-comment">#---------------------------</span><br>vim /etc/nginx/conf.d/tcp/xxx.conf  <span class="hljs-comment">#修改转发端口的conf文件</span><br><br>server &#123;<br>    listen       8036;  <span class="hljs-comment">#设置访问时候的端口</span><br>    proxy_pass 172.26.0.26:3306;  <span class="hljs-comment">#转发的ip+端口</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-解决docker-push-报错：413-Request-Entity-Too-Large"><a href="#7-解决docker-push-报错：413-Request-Entity-Too-Large" class="headerlink" title="7.解决docker push 报错：413 Request Entity Too Large"></a>7.解决docker push 报错：413 Request Entity Too Large</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">修改nginx配置文件:nginx.conf<br><br>http &#123;<br>    include       /etc/nginx/mime.types;<br>   <span class="hljs-comment">#....</span><br>    client_max_body_size 102400m;    <br>    <span class="hljs-comment">#client_max_body_size默认为0， 修改0为特定的大小即可。如 client_max_body_size 102400M</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-实现页面访问localhost-x2F-download-x2F-xxx-docx链接，下载xxx-docx文件！"><a href="#8-实现页面访问localhost-x2F-download-x2F-xxx-docx链接，下载xxx-docx文件！" class="headerlink" title="8.实现页面访问localhost&#x2F;download&#x2F;xxx.docx链接，下载xxx.docx文件！"></a>8.实现页面访问localhost&#x2F;download&#x2F;xxx.docx链接，下载xxx.docx文件！</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim default.conf<br><span class="hljs-comment">#-----------------------------------</span><br>server &#123;<br>    listen       80;<br>    server_name  localhost;<br><br>    location  /download/ &#123;<br>        root /etc/nginx/txt/html/;  <span class="hljs-comment"># xxx.docx文件存放目录</span><br>        rewrite ^/download/(.*)$ /<span class="hljs-variable">$1</span> <span class="hljs-built_in">break</span>;  <span class="hljs-comment"># 将访问时的download去掉，直接获取链接中的xxx.docx名</span><br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-实现nginx登录验证"><a href="#9-实现nginx登录验证" class="headerlink" title="9.实现nginx登录验证"></a>9.实现nginx登录验证</h2><p>参考文档：<a href="https://blog.51cto.com/u_15076224/3332559">https://blog.51cto.com/u_15076224/3332559</a></p><h3 id="9-1-安装httpd-tools工具"><a href="#9-1-安装httpd-tools工具" class="headerlink" title="9.1.安装httpd-tools工具"></a>9.1.安装httpd-tools工具</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install httpd-tools -y<br></code></pre></td></tr></table></figure><h3 id="9-2-生成用户名密码文件"><a href="#9-2-生成用户名密码文件" class="headerlink" title="9.2.生成用户名密码文件"></a>9.2.生成用户名密码文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">htpasswd -c /etc/nginx/conf.d/.ngpasswd flink<br>备注：flink为用户名,回车后会提示你输入密码。<br></code></pre></td></tr></table></figure><h3 id="9-3-配置nginx的conf文件"><a href="#9-3-配置nginx的conf文件" class="headerlink" title="9.3.配置nginx的conf文件"></a>9.3.配置nginx的conf文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">server &#123;<br>    listen       80;<br>    server_name  localhost;<br>    location / &#123;<br>        auth_basic           <span class="hljs-string">&quot;input you user name and password&quot;</span>;<br>        auth_basic_user_file /etc/nginx/conf.d/.ngpasswd;<br>        proxy_pass http://flink:8081; <span class="hljs-comment">#改地址为flink转发</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-实现nginx只允许指定的ip访问"><a href="#10-实现nginx只允许指定的ip访问" class="headerlink" title="10.实现nginx只允许指定的ip访问"></a>10.实现nginx只允许指定的ip访问</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">server &#123;<br>    listen       80;<br>    server_name  localhost;<br>    location / &#123;<br>        auth_basic           <span class="hljs-string">&quot;input you user name and password&quot;</span>;<br>        auth_basic_user_file /etc/nginx/conf.d/.ngpasswd;<br>        proxy_pass http://flink:8081; <span class="hljs-comment">#改地址为flink转发</span><br>        allow 192.168.91.159;<br>        deny all;<br>    &#125;<br>&#125;<br><br>allow:允许访问<br>deny：不允许访问<br>注意！上面的配置中allow必须在deny的前面配置，不然allow不生效。<br></code></pre></td></tr></table></figure><h2 id="11-nginx配置socket连接"><a href="#11-nginx配置socket连接" class="headerlink" title="11.nginx配置socket连接"></a>11.nginx配置socket连接</h2><p>#Nginx通过在客户端和后端服务器之间建立隧道来支持WebSockets通信。为了让Nginx可以将来自客户端的Upgrade请求发送到后端服务器，Upgrade和Connection的头信息必须被显式的设置。<br>#参考文档：<a href="https://blog.csdn.net/weixin_43931358/article/details/111039750">https://blog.csdn.net/weixin_43931358/article/details/111039750</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">location /wsapp/ &#123;<br>        proxy_pass http://wsbackend;<br>        proxy_http_version 1.1;<br>        <span class="hljs-comment">#以下为socket连接</span><br>        proxy_set_header Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>        proxy_set_header Connection <span class="hljs-string">&quot;upgrade&quot;</span>;<br>    &#125;<br><span class="hljs-comment">#生产配置实例：</span><br>   location  / &#123; <br>        proxy_pass http://192.168.10.3:8702/;<br>            proxy_http_version 1.1;<br>            proxy_redirect off;<br>            proxy_buffering off;<br>            proxy_set_header X-NginX-Proxy <span class="hljs-literal">true</span>;<br>            proxy_set_header Host <span class="hljs-variable">$host</span>;<br>            proxy_set_header Http-Host <span class="hljs-variable">$http_host</span>;<br>            proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>            proxy_set_header REMOTE-HOST <span class="hljs-variable">$remote_addr</span>;<br>            proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>            <span class="hljs-comment">#socket</span><br>            proxy_set_header Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>            proxy_set_header Connection <span class="hljs-variable">$connection_upgrade</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="12-nginx转发携带请求头，nginx转发headers内容丢失解决"><a href="#12-nginx转发携带请求头，nginx转发headers内容丢失解决" class="headerlink" title="12.nginx转发携带请求头，nginx转发headers内容丢失解决"></a>12.nginx转发携带请求头，nginx转发headers内容丢失解决</h2><p>修改nginx配置文件:<code>nginx.conf</code>,添加：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">underscores_in_headers on;<br>默认为off，需要开启<br></code></pre></td></tr></table></figure><h2 id="13-nginx配置不缓存某种特定文件"><a href="#13-nginx配置不缓存某种特定文件" class="headerlink" title="13.nginx配置不缓存某种特定文件"></a>13.nginx配置不缓存某种特定文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">    location / &#123;<br>        root   /usr/share/nginx/html;<br>        index  index.html index.htm;<br>        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.html;<br>        gzip_static on;<br>        <span class="hljs-comment">#不缓存以wasm和wasmd结尾的文件</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$request_filename</span> ~* .*\.(?:wasm|wasmd)$) &#123;<br>            add_header Cache-Control <span class="hljs-string">&quot;no-cache&quot;</span>;<br>        &#125;<br>     &#125;<br>上面的可能需要强制刷新，下面为每次普通刷新：<br>    location / &#123;<br>        root   /usr/share/nginx/html;<br>        index  index.html index.htm;<br>        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.html;<br>        gzip_static on;<br>    &#125;<br>    location ~ .*\.(wasm|wasmd)$ &#123;<br>        root   /usr/share/nginx/html;<br>        index  index.html index.htm;<br>        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.html;<br>        gzip_static on;<br>        add_header Cache-Control <span class="hljs-string">&quot;no-cache&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="14-nginx代理websocket-因为cookie过大导致连接失败"><a href="#14-nginx代理websocket-因为cookie过大导致连接失败" class="headerlink" title="14.nginx代理websocket 因为cookie过大导致连接失败"></a>14.nginx代理websocket 因为cookie过大导致连接失败</h2><p><strong>问题：</strong><br>由于前端cookie都时经过加密。所以导致长度大小会很大。此时nginx代理。如果是跨域代理的话不会携带cookie，但是如果是同源代理的话会携带cookie。nginx默认请求头大小为1k ，此时因为cookie导致大小溢出，导致连接ws时会fail。</p><p><strong>解决方案：</strong></p><h3 id="14-1、忽略cookie信息"><a href="#14-1、忽略cookie信息" class="headerlink" title="14.1、忽略cookie信息"></a>14.1、忽略cookie信息</h3><p>由于cookie信息后端时不用的。所以我选择了这个。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">##覆盖</span><br>proxy_set_header Cookie <span class="hljs-string">&quot;la=1&quot;</span>;<br><span class="hljs-comment">##或者忽略</span><br>proxy_no_cache <span class="hljs-variable">$cookie_nocache</span> $arg_nocache<span class="hljs-variable">$arg_comment</span>;<br></code></pre></td></tr></table></figure><h3 id="14-2、修改nginx请求头默认大小"><a href="#14-2、修改nginx请求头默认大小" class="headerlink" title="14.2、修改nginx请求头默认大小"></a>14.2、修改nginx请求头默认大小</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#client_header_buffer_size 8k;</span><br><span class="hljs-comment">#large_client_header_buffers 4 32k;</span><br></code></pre></td></tr></table></figure><h3 id="15-nginx配置robots协议"><a href="#15-nginx配置robots协议" class="headerlink" title="15.nginx配置robots协议"></a>15.nginx配置robots协议</h3><p>详细：robots协议也叫robots.txt（统一小写）是一种存放于网站根目录下的ASCII编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。因为一些系统中的URL是大小写敏感的，所以robots.txt的文件名应统一为小写。robots.txt应放置于网站的根目录下。如果想单独定义搜索引擎的漫游器访问子目录时的行为，那么可以将自定的设置合并到根目录下的robots.txt，或者使用robots元数据（Metadata，又称元数据）。<br>robots协议并不是一个规范，而只是约定俗成的，所以并不能保证网站的隐私。<br>nginx配置文件中添加：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">location =/robots.txt &#123;<br>        default_type text/html;<br>        add_header Content-Type <span class="hljs-string">&quot;text/plain; charset=UTF-8&quot;</span>;<br>        <span class="hljs-built_in">return</span> 200 <span class="hljs-string">&quot;User-Agent: *\nDisallow: /&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8s常见故障解决方法</title>
    <link href="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/"/>
    <url>/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="K8s常见故障解决方法"><a href="#K8s常见故障解决方法" class="headerlink" title="K8s常见故障解决方法"></a>K8s常见故障解决方法</h1><p>原文🔗：<a href="https://www.cnblogs.com/chalon/p/14415252.html">https://www.cnblogs.com/chalon/p/14415252.html</a></p><h2 id="问题1：K8S集群服务访问失败？"><a href="#问题1：K8S集群服务访问失败？" class="headerlink" title="问题1：K8S集群服务访问失败？"></a>问题1：K8S集群服务访问失败？</h2><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210603104322054-411822980.png" alt="img"></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210603104344862-437503062.png" alt="img"></p><p>原因分析：证书不能被识别，其原因为：自定义证书，过期等。</p><p>解决方法：更新证书即可。</p><h2 id="问题2：K8S集群服务访问失败？"><a href="#问题2：K8S集群服务访问失败？" class="headerlink" title="问题2：K8S集群服务访问失败？"></a>问题2：K8S集群服务访问失败？</h2><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210603105044708-1737680663.png" alt="img"></p><p>curl: (7) Failed connect to 10.103.22.158:3000; Connection refused</p><p>原因分析：端口映射错误，服务正常工作，但不能提供服务。</p><p>解决方法：删除svc，重新映射端口即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl delete svc nginx-deployment<br></code></pre></td></tr></table></figure><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210603122454382-1766701516.png" alt="img"></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210603122652066-1288164700.png" alt="img"></p><h2 id="问题3：K8S集群服务暴露失败？"><a href="#问题3：K8S集群服务暴露失败？" class="headerlink" title="问题3：K8S集群服务暴露失败？"></a>问题3：K8S集群服务暴露失败？</h2><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210603111123847-1730917423.png" alt="img"></p><p>Error from server (AlreadyExists): services “nginx-deployment” already exists</p><p>原因分析：该容器已暴露服务了。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210603111239103-1497174416.png" alt="img"></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210603111220362-852021078.png" alt="img"></p><p>解决方法：删除svc，重新映射端口即可。</p><h2 id="问题4：外网无法访问K8S集群提供的服务？"><a href="#问题4：外网无法访问K8S集群提供的服务？" class="headerlink" title="问题4：外网无法访问K8S集群提供的服务？"></a>问题4：外网无法访问K8S集群提供的服务？</h2><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210603123538080-142331168.png" alt="img"></p><p>原因分析：K8S集群的type为ClusterIP，未将服务暴露至外网。</p><p>解决方法：修改K8S集群的type为NodePort即可，于是可通过所有K8S集群节点访问服务。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl edit svc nginx-deployment<br></code></pre></td></tr></table></figure><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210603123956011-84144343.png" alt="img"></p><h2 id="问题5：pod状态为ErrImagePull？"><a href="#问题5：pod状态为ErrImagePull？" class="headerlink" title="问题5：pod状态为ErrImagePull？"></a>问题5：pod状态为ErrImagePull？</h2><p> readiness-httpget-pod  0&#x2F;1   ErrImagePull  0     10s</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210609111855527-1561009834.png" alt="img"></p><p>原因分析：image无法拉取；</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210609111921747-76967801.png" alt="img"></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210609112056358-1704997375.png" alt="img"></p><p> Warning Failed 59m (x4 over 61m) kubelet, k8s-node01 Error: ErrImagePull</p><p>解决方法：更换镜像即可。</p><h2 id="问题6：创建init-C容器后，其状态不正常？"><a href="#问题6：创建init-C容器后，其状态不正常？" class="headerlink" title="问题6：创建init C容器后，其状态不正常？"></a>问题6：创建init C容器后，其状态不正常？</h2><p>NAME READY STATUS RESTARTS AGE<br>myapp-pod 0&#x2F;1 Init:0&#x2F;2 0 20s</p><p>原因分析：查看日志发现，pod一直出于初始化中；然后查看pod详细信息，定位pod创建失败的原因为：初始化容器未执行完毕。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210608142139646-2015534421.png" alt="img"></p><p> Error from server (BadRequest): container “myapp-container” in pod “myapp-pod” is waiting to start: PodInitializing</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210608141834587-828337105.png" alt="img"></p><p> <img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210608141907458-1152976452.png" alt="img"></p><p> <img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210608142357313-1045982108.png" alt="img"></p><p>解决方法：创建相关service，将SVC的name写入K8S集群的coreDNS服务器中，于是coreDNS就能对POD的initC容器执行过程中的域名解析了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sg">kubectl apply -f myservice.yaml<br></code></pre></td></tr></table></figure><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210608143516835-51702057.png" alt="img"></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210608143529358-1445097125.png" alt="img"></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210608143743700-2132332485.png" alt="img"></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210608145508975-1757531963.png" alt="img"></p><h2 id="问题7：探测存活pod状态为CrashLoopBackOff？"><a href="#问题7：探测存活pod状态为CrashLoopBackOff？" class="headerlink" title="问题7：探测存活pod状态为CrashLoopBackOff？"></a>问题7：探测存活pod状态为CrashLoopBackOff？</h2><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210611154104880-82982759.png" alt="img"></p><p>原因分析：镜像问题，导致容器重启失败。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210611153121868-358978531.png" alt="img"></p><p>解决方法：更换镜像即可。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210611155102173-1536637770.png" alt="img"></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210611155032150-1121427176.png" alt="img"></p><h2 id="问题8：POD创建失败？"><a href="#问题8：POD创建失败？" class="headerlink" title="问题8：POD创建失败？"></a>问题8：POD创建失败？</h2><p>原因分析：镜像问题导致容器无法启动。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl logs readiness-httpget-pod</span><br>url.js:106<br>throw new errors.TypeError(<span class="hljs-string">&#x27;ERR_INVALID_ARG_TYPE&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>, <span class="hljs-string">&#x27;string&#x27;</span>, url);<br>^<br><br>TypeError [ERR_INVALID_ARG_TYPE]: The <span class="hljs-string">&quot;url&quot;</span> argument must be of <span class="hljs-built_in">type</span> string. Received <span class="hljs-built_in">type</span> undefined<br>at Url.parse (url.js:106:11)<br>at Object.urlParse [as parse] (url.js:100:13)<br>at module.exports (/myapp/node_modules/mongodb/lib/url_parser.js:17:23)<br>at connect (/myapp/node_modules/mongodb/lib/mongo_client.js:159:16)<br>at Function.MongoClient.connect (/myapp/node_modules/mongodb/lib/mongo_client.js:110:3)<br>at Object.&lt;anonymous&gt; (/myapp/app.js:12:13)<br>at Module._compile (module.js:641:30)<br>at Object.Module._extensions..js (module.js:652:10)<br>at Module.load (module.js:560:32)<br>at tryModuleLoad (module.js:503:12)<br>at Function.Module._load (module.js:495:3)<br>at Function.Module.runMain (module.js:682:10)<br>at startup (bootstrap_node.js:191:16)<br>at bootstrap_node.js:613:3<br></code></pre></td></tr></table></figure><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210611155933220-1626419175.png" alt="img"></p><p>解决方法：更换镜像。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210611160715287-1013020495.png" alt="img"></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210611160654971-1535070994.png" alt="img"></p><h2 id="问题9：POD的ready状态未进入？"><a href="#问题9：POD的ready状态未进入？" class="headerlink" title="问题9：POD的ready状态未进入？"></a>问题9：POD的ready状态未进入？</h2><p>readiness-httpget-pod  0&#x2F;1   Running  0     116s</p><p>原因分析：POD的执行命令失败，无法获取资源。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210611161118476-2133736578.png" alt="img"></p><p>解决方法：进入容器内部，创建yaml定义的资源</p><p><em><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210611163546862-1553169573.png" alt="img"></em></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210611163604060-258577761.png" alt="img"></p><h2 id="问题10：pod创建失败？"><a href="#问题10：pod创建失败？" class="headerlink" title="问题10：pod创建失败？"></a>问题10：pod创建失败？</h2><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210624102404105-704505228.png" alt="img"></p><p>原因分析：yml文件内容出错—使用中文字符；</p><p>解决方法：修改myregistrykey内容即可。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210624105624772-504456968.png" alt="img"></p><h2 id="问题11、kube-flannel-ds-amd64-ndsf7插件pod的status为Init-0-x2F-1？"><a href="#问题11、kube-flannel-ds-amd64-ndsf7插件pod的status为Init-0-x2F-1？" class="headerlink" title="问题11、kube-flannel-ds-amd64-ndsf7插件pod的status为Init:0&#x2F;1？"></a>问题11、kube-flannel-ds-amd64-ndsf7插件pod的status为Init:0&#x2F;1？</h2><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210219105458263-1617541950.png" alt="img"></p><p> 排查思路：kubectl -n kube-system describe pod kube-flannel-ds-amd64-ndsf7 #查询pod描述信息；</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210219105646263-1373412665.png" alt="img"></p><p>原因分析：k8s-slave1节点拉取镜像失败。</p><p>解决方法：登录k8s-slave1，重启docker服务，手动拉取镜像。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210219112357117-362606443.png" alt="img"></p><p>k8s-master节点，重新安装插件即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create -f kube-flannel.yml;kubectl get nodes<br></code></pre></td></tr></table></figure><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210219112507651-116731499.png" alt="img"></p><h2 id="问题12、K8S创建服务status为ErrImagePull？"><a href="#问题12、K8S创建服务status为ErrImagePull？" class="headerlink" title="问题12、K8S创建服务status为ErrImagePull？"></a>问题12、K8S创建服务status为ErrImagePull？</h2><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210219113310917-478327760.png" alt="img"></p><p>排查思路：kubectl describe pod test-nginx</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210219113604736-125404248.png" alt="img"></p><p>原因分析：拉取镜像名称问题。</p><p>解决方法：删除错误pod；重新拉取镜像；</p><p>kubectl delete pod test-nginx;kubectl run test-nginx –image&#x3D;10.0.0.81:5000&#x2F;nginx:alpine</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210219114452861-657767230.png" alt="img"></p><h2 id="问题13、不能进入指定容器内部？"><a href="#问题13、不能进入指定容器内部？" class="headerlink" title="问题13、不能进入指定容器内部？"></a>问题13、不能进入指定容器内部？</h2><p>Error from server (BadRequest): container volume-test-container is not valid for pod volume-test-pod</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210624135341043-415174052.png" alt="img"></p><p> 原因分析：yml文件comtainers字段重复，导致该pod没有该容器。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210624135659659-1654041649.png" alt="img"> <img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210624135717240-2062172087.png" alt="img"></p><p> <img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210624135958216-1463656156.png" alt="img"></p><p> 解决方法：去掉yml文件中多余的containers字段，重新生成pod。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210624140430692-1813759677.png" alt="img"></p><p> <img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210624140544838-1223478937.png" alt="img"></p><h2 id="问题14、创建PV失败？"><a href="#问题14、创建PV失败？" class="headerlink" title="问题14、创建PV失败？"></a>问题14、创建PV失败？</h2><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210625095834663-1316004106.png" alt="img"></p><p> 原因分析：pv的name字段重复。</p><p>解决方法：修改pv的name字段即可。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210625095942938-422508268.png" alt="img"></p><h2 id="问题15、pod无法挂载PVC？"><a href="#问题15、pod无法挂载PVC？" class="headerlink" title="问题15、pod无法挂载PVC？"></a>问题15、pod无法挂载PVC？</h2><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210625101452262-920564710.png" alt="img"></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210625101435371-442855016.png" alt="img"></p><p> 原因分析：pod无法挂载PVC。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210625103917835-653085243.png" alt="img"></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210625101745179-1317079111.png" alt="img"></p><p>accessModes与可使用的PV不一致，导致无法挂载PVC，由于只能挂载大于1G且accessModes为RWO的PV，故只能成功创建1个pod，第2个pod一致pending，按序创建时则第3个pod一直未被创建；</p><p>解决方法：修改yml文件中accessModes或PV的accessModes即可。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210625105130441-757342407.png" alt="img"></p><h2 id="问题16、问题：pod使用PV后，无法访问其内容？"><a href="#问题16、问题：pod使用PV后，无法访问其内容？" class="headerlink" title="问题16、问题：pod使用PV后，无法访问其内容？"></a>问题16、问题：pod使用PV后，无法访问其内容？</h2><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210625113835452-1904340625.png" alt="img"></p><p> 原因分析：nfs卷中没有文件或权限不对。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210625114032336-1008503957.png" alt="img"></p><p> <img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210625114018810-1389908339.png" alt="img"></p><p> 解决方法：在nfs卷中创建文件并授予权限。</p><p> <img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210625114555727-1428567866.png" alt="img"></p><p> <img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210625114653101-898239459.png" alt="img"></p><h2 id="问题17、查看节点状态失败？"><a href="#问题17、查看节点状态失败？" class="headerlink" title="问题17、查看节点状态失败？"></a>问题17、查看节点状态失败？</h2><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210628091707454-1294021117.png" alt="img"></p><p>原因分析：没有heapster服务。</p><p>解决方法：安装promethus监控组件即可。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210628110841093-816405284.png" alt="img"></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210628110856426-578465221.png" alt="img"></p><h2 id="问题18、pod一直处于pending’状态？"><a href="#问题18、pod一直处于pending’状态？" class="headerlink" title="问题18、pod一直处于pending’状态？"></a>问题18、pod一直处于pending’状态？</h2><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210629151950882-422456884.png" alt="img"></p><p> 原因分析：由于已使用同样镜像发布了pod，导致无节点可调度。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210629152051352-1225823433.png" alt="img"></p><p><em>解决方法：删除所有pod后部署pod即可。</em></p><p><em><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210629152510721-328871187.png" alt="img"></em></p><h2 id="问题19、helm安装组件失败？"><a href="#问题19、helm安装组件失败？" class="headerlink" title="问题19、helm安装组件失败？"></a>问题19、helm安装组件失败？</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"> [root@k8s-master01 hello-world]<span class="hljs-comment"># helm install</span><br><br>Error: This <span class="hljs-built_in">command</span> needs 1 argument: chart nam<br><br>[root@k8s-master01 hello-world]<span class="hljs-comment"># helm install ./</span><br>Error: no Chart.yaml exists <span class="hljs-keyword">in</span> directory <span class="hljs-string">&quot;/root/hello-world&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210707212133091-1095838688.png" alt="img"></p><p> 原因分析：文件名格式不对。</p><p><em>解决方法：mv chart.yaml Chart.yaml</em></p><p> <img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210707213220258-1665790330.png" alt="img"></p><h2 id="问题20、helm更新release失败？"><a href="#问题20、helm更新release失败？" class="headerlink" title="问题20、helm更新release失败？"></a>问题20、helm更新release失败？</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@k8s-master01 hello-world]<span class="hljs-comment"># helm upgrade joyous-wasp ./</span><br>UPGRADE FAILED<br>ROLLING BACK<br>Error: render error <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;hello-world/templates/deployment.yaml&quot;</span>: template: hello-world/templates/deployment.yaml:14:35: executing <span class="hljs-string">&quot;hello-world/templates/deployment.yaml&quot;</span> at &lt;.values.image.reposi...&gt;: can<span class="hljs-string">&#x27;t evaluate field image in type interface &#123;&#125;</span><br><span class="hljs-string">Error: UPGRADE FAILED: render error in &quot;hello-world/templates/deployment.yaml&quot;: template: hello-world/templates/deployment.yaml:14:35: executing &quot;hello-world/templates/deployment.yaml&quot; at &lt;.values.image.reposi...&gt;: can&#x27;</span>t evaluate field image <span class="hljs-keyword">in</span> <span class="hljs-built_in">type</span> interface &#123;&#125;<br></code></pre></td></tr></table></figure><p>原因分析：yaml文件语法错误。</p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210708095055294-1249964591.png" alt="img"></p><p> 解决方法：修改yaml文件即可。</p><p> <img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210708095335158-562240764.png" alt="img"></p><h2 id="问题21、etcd启动失败？"><a href="#问题21、etcd启动失败？" class="headerlink" title="问题21、etcd启动失败？"></a>问题21、etcd启动失败？</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@k8s-master01 ~]<span class="hljs-comment"># systemctl enable --now etcd</span><br>Created symlink from /etc/systemd/system/etcd3.service to /usr/lib/systemd/system/etcd.service.<br>Created symlink from /etc/systemd/system/multi-user.target.wants/etcd.service to /usr/lib/systemd/system/etcd.service.<br>Job <span class="hljs-keyword">for</span> etcd.service failed because a <span class="hljs-built_in">timeout</span> was exceeded. See <span class="hljs-string">&quot;systemctl status etcd.service&quot;</span> and <span class="hljs-string">&quot;journalctl -xe&quot;</span> <span class="hljs-keyword">for</span> details.<br></code></pre></td></tr></table></figure><p>原因分析：认证失败原因可能为证书、配置、端口等。检查配置符合etcd版本要求，证书生成过程有效。最后确认端口被占用导致认证失败。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@k8s-master01 ~]``<span class="hljs-comment"># systemctl status etcd``● etcd.service - Etcd.service``Loaded: loaded (``/usr/lib/systemd/system/etcd``.service; enabled; vendor preset: disabled)``Active: activating (start) since Wed 2021-07-14 09:53:03 CST; 1min 6s ago``Docs: https:``//coreos``.com``/etcd/docs/latest/``Main PID: 39692 (etcd)``CGroup: ``/system``.slice``/etcd``.service``└─39692 ``/usr/local/bin/etcd` `--config-``file``=``/etc/etcd/etcd``.config.yml` `Jul 14 09:54:09 k8s-master01 etcd[39692]: rejected connection from ``&quot;192.168.0.108:46168&quot;` `(error ``&quot;remote error: tls: bad certificate&quot;``, ServerName ``&quot;&quot;``)``Jul 14 09:54:09 k8s-master01 etcd[39692]: rejected connection from ``&quot;192.168.0.108:46166&quot;` `(error ``&quot;remote error: tls: bad certificate&quot;``, ServerName ``&quot;&quot;``)``Jul 14 09:54:09 k8s-master01 etcd[39692]: rejected connection from ``&quot;192.168.0.108:46170&quot;` `(error ``&quot;remote error: tls: bad certificate&quot;``, ServerName ``&quot;&quot;``)``Jul 14 09:54:09 k8s-master01 etcd[39692]: rejected connection from ``&quot;192.168.0.108:46172&quot;` `(error ``&quot;remote error: tls: bad certificate&quot;``, ServerName ``&quot;&quot;``)``Jul 14 09:54:09 k8s-master01 etcd[39692]: rejected connection from ``&quot;192.168.0.108:46176&quot;` `(error ``&quot;remote error: tls: bad certificate&quot;``, ServerName ``&quot;&quot;``)``Jul 14 09:54:09 k8s-master01 etcd[39692]: rejected connection from ``&quot;192.168.0.108:46174&quot;` `(error ``&quot;remote error: tls: bad certificate&quot;``, ServerName ``&quot;&quot;``)``Jul 14 09:54:09 k8s-master01 etcd[39692]: rejected connection from ``&quot;192.168.0.108:46178&quot;` `(error ``&quot;remote error: tls: bad certificate&quot;``, ServerName ``&quot;&quot;``)``Jul 14 09:54:09 k8s-master01 etcd[39692]: rejected connection from ``&quot;192.168.0.108:46180&quot;` `(error ``&quot;remote error: tls: bad certificate&quot;``, ServerName ``&quot;&quot;``)``Jul 14 09:54:10 k8s-master01 etcd[39692]: rejected connection from ``&quot;192.168.0.108:46182&quot;` `(error ``&quot;remote error: tls: bad certificate&quot;``, ServerName ``&quot;&quot;``)``Jul 14 09:54:10 k8s-master01 etcd[39692]: rejected connection from ``&quot;192.168.0.108:46186&quot;` `(error ``&quot;remote error: tls: bad certificate&quot;``, ServerName ``&quot;&quot;``)　</span><br></code></pre></td></tr></table></figure><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210714110933328-892431856.png" alt="img"></p><p><em>解决方法：kill占用2379端口的进程，重启etcd即可。</em></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210714111148067-685810349.png" alt="img"></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210714111939253-1593125774.png" alt="img"></p><h2 id="问题22、svc反代理服务，跨域访问失败？"><a href="#问题22、svc反代理服务，跨域访问失败？" class="headerlink" title="问题22、svc反代理服务，跨域访问失败？"></a>问题22、svc反代理服务，跨域访问失败？</h2><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210826164716944-163445187.png" alt="img"></p><p><img src="/2023/06/19/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/1617751-20210826164902328-1366795862.png" alt="img"></p><p>原因分析：pod跨域访问，被百度禁止访问；</p><p>解决方法：修改访问策略即可（略略）。</p>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
      <category>问题处理和基础命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>彻底删除k8s环境</title>
    <link href="/2023/06/18/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E5%88%A0%E9%99%A4k8s%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/06/18/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E5%88%A0%E9%99%A4k8s%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="彻底删除k8s环境"><a href="#彻底删除k8s环境" class="headerlink" title="彻底删除k8s环境"></a>彻底删除k8s环境</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm reset -f<br>modprobe -r ipip<br>lsmod<br><span class="hljs-built_in">rm</span> -rf ~/.kube/<br><span class="hljs-built_in">rm</span> -rf /etc/kubernetes/<br><span class="hljs-built_in">rm</span> -rf /etc/systemd/system/kubelet.service.d<br><span class="hljs-built_in">rm</span> -rf /etc/systemd/system/kubelet.service<br><span class="hljs-built_in">rm</span> -rf /usr/bin/kube*<br><span class="hljs-built_in">rm</span> -rf /etc/cni<br><span class="hljs-built_in">rm</span> -rf /opt/cni<br><span class="hljs-built_in">rm</span> -rf /var/lib/etcd<br><span class="hljs-built_in">rm</span> -rf /var/etcd<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
      <category>问题处理和基础命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优雅升级 Kubernetes 集群的 Docker 和 Containerd 版本</title>
    <link href="/2023/06/18/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%8D%87%E7%BA%A7%20Kubernetes%20%E9%9B%86%E7%BE%A4%E7%9A%84%20Docker%20%E5%92%8C%20Containerd%20%E7%89%88%E6%9C%AC/"/>
    <url>/2023/06/18/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%8D%87%E7%BA%A7%20Kubernetes%20%E9%9B%86%E7%BE%A4%E7%9A%84%20Docker%20%E5%92%8C%20Containerd%20%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="如何优雅升级-Kubernetes-集群的-Docker-和-Containerd-版本"><a href="#如何优雅升级-Kubernetes-集群的-Docker-和-Containerd-版本" class="headerlink" title="如何优雅升级 Kubernetes 集群的 Docker 和 Containerd 版本"></a>如何优雅升级 Kubernetes 集群的 Docker 和 Containerd 版本</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>公司用的k8s集群是“多环境合一”的方式，集群流量入口也摒弃了常见的traefik和ingress-nginx，直接用了一个国内不常见的底层基于Envoy的API Gateway网关服务。当然还有非常多的其他集群流量入口组件可供选择。</p><p>由于这个组件更新迭代也是非常的快速，并且官方文档很快不展示旧版本文档了，那么随着版本更新，API版本自然发生了改变，新版本的API就没有任何的参考意义了，因此需要升级组件版本。升级组件版本前提是docker版本至少需要20.10.11，containerd版本至少是1.4.11。于是这里先原地升级这两个组件。</p><h2 id="k8s的node节点维护"><a href="#k8s的node节点维护" class="headerlink" title="k8s的node节点维护"></a>k8s的node节点维护</h2><p>尽可能在维护节点之前保证你的有另外的冗余节点，能够支撑你当前维护节点上的所有pod。或者保证你维护这个节点驱逐了所有pod后，其他节点能够承载你这个节点上所有pod。非常可怜也非常可惜，我这里节点内存都跑到了95%以上，并且领导不给机器，让我夜里升级。pod目前集群上有超过5000个。此时只能硬着头皮上了。理念是升级完一台正常后再接着升下一台。</p><h2 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h2><h3 id="1、查看原先的containerd和docker版本"><a href="#1、查看原先的containerd和docker版本" class="headerlink" title="1、查看原先的containerd和docker版本"></a>1、查看原先的containerd和docker版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ containerd -v<br>containerd containerd.io 1.2.13 7ad184331fa3e55e52b890ea95e65ba581ae3429<br><br>$ docker -v<br>Docker version 19.03.12, build 48a66213fe<br></code></pre></td></tr></table></figure><h3 id="2、驱逐pod"><a href="#2、驱逐pod" class="headerlink" title="2、驱逐pod"></a>2、驱逐pod</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ kubectl drain k8s-node02.ayunw.cn --ignore-daemonsets --delete-local-data --force<br><br>$ kubectl get node<br>NAME                    STATUS                        <br>k8s-master01.ayunw.cn   Ready                         <br>k8s-node01.ayunw.cn     Ready                         <br>k8s-node02.ayunw.cn     NotReady,SchedulingDisabled<br>...<br></code></pre></td></tr></table></figure><h3 id="3、停止节点上docker和kubelet"><a href="#3、停止节点上docker和kubelet" class="headerlink" title="3、停止节点上docker和kubelet"></a>3、停止节点上docker和kubelet</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl stop kubelet<br><br>systemctl stop docker<br>systemctl stop docker.socket<br>systemctl stop containerd<br></code></pre></td></tr></table></figure><h3 id="4、卸载老版本docker并安装新版本docker和containerd"><a href="#4、卸载老版本docker并安装新版本docker和containerd" class="headerlink" title="4、卸载老版本docker并安装新版本docker和containerd"></a>4、卸载老版本docker并安装新版本docker和containerd</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y remove docker \<br>              docker-client \<br>              docker-client-latest \<br>              docker-common \<br>              docker-latest \<br>              docker-latest-logrotate \<br>              docker-logrotate \<br>              docker-engine<br><br>dnf -y install yum-utils device-mapper-persistent-data lvm2<br><br>yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br><br>yum makecache<br><br>dnf -y install containerd.io-1.4.12-3.1.el8.x86_64.rpm<br><br>dnf -y install docker-ce-20.10.11 docker-ce-cli-20.10.11<br><br>systemctl daemon-reload<br>systemctl start docker<br>systemctl <span class="hljs-built_in">enable</span> docker<br>systemctl status docker<br><br>systemctl status containerd<br>systemctl <span class="hljs-built_in">enable</span> containerd.service<br></code></pre></td></tr></table></figure><h3 id="5、检查docker和containerd版本"><a href="#5、检查docker和containerd版本" class="headerlink" title="5、检查docker和containerd版本"></a>5、检查docker和containerd版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ containerd -v &amp;&amp; docker -v<br>containerd containerd.io 1.4.12 7b11cfaabd73bb80907dd23182b9347b4245eb5d<br>Docker version 20.10.11, build dea9396<br></code></pre></td></tr></table></figure><h3 id="6、启动kubelet并恢复节点"><a href="#6、启动kubelet并恢复节点" class="headerlink" title="6、启动kubelet并恢复节点"></a>6、启动kubelet并恢复节点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start kubelet<br>systemctl status kubelet<br><br>kubectl uncordon k8s-node02.ayunw.cn<br><br>kubectl get node -o wide <br></code></pre></td></tr></table></figure><p>最后就能看到版本已经升级完成。</p>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
      <category>问题处理和基础命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8s证书过期处理</title>
    <link href="/2023/06/17/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E8%AF%81%E4%B9%A6%E8%BF%87%E6%9C%9F%E8%A7%A3%E5%86%B3/"/>
    <url>/2023/06/17/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E8%AF%81%E4%B9%A6%E8%BF%87%E6%9C%9F%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="K8s证书过期处理"><a href="#K8s证书过期处理" class="headerlink" title="K8s证书过期处理"></a>K8s证书过期处理</h1><h2 id="一、kubeadm证书过期解决"><a href="#一、kubeadm证书过期解决" class="headerlink" title="一、kubeadm证书过期解决"></a>一、kubeadm证书过期解决</h2><h3 id="1、openssl-查看证书有效期"><a href="#1、openssl-查看证书有效期" class="headerlink" title="1、openssl 查看证书有效期"></a>1、openssl 查看证书有效期</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl x509 -<span class="hljs-keyword">in</span> XX.crt -noout -dates<br></code></pre></td></tr></table></figure><p><strong>使用for循环输出有效期:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> `find /etc/kubernetes/pki -maxdepth 2 -name <span class="hljs-string">&quot;*.crt&quot;</span>`;<span class="hljs-keyword">do</span> openssl x509 -<span class="hljs-keyword">in</span> <span class="hljs-variable">$item</span> -text -noout| grep Not;\<br><span class="hljs-built_in">echo</span> ======================<span class="hljs-variable">$item</span>===================;<span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="2、备份证书和etcd数据目录"><a href="#2、备份证书和etcd数据目录" class="headerlink" title="2、备份证书和etcd数据目录"></a>2、备份证书和etcd数据目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> -r /etc/kubernetes/  /tmp/kubernetes_bak<br><span class="hljs-built_in">cp</span> -r /var/lib/etcd    /tmp/etcd_bak<br></code></pre></td></tr></table></figure><h3 id="3、生成证书"><a href="#3、生成证书" class="headerlink" title="3、生成证书"></a>3、生成证书</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm alpha certs renew all --config=kubeadm.yml<br></code></pre></td></tr></table></figure><p><strong>没有kubeadm.yaml文件的可以导出配置文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm config <span class="hljs-built_in">print</span> init-defaults --kubeconfig ClusterConfiguration &gt; kubeadm.yml<br></code></pre></td></tr></table></figure><h3 id="4、kubeadm再次查看证书有效期-version-1-15"><a href="#4、kubeadm再次查看证书有效期-version-1-15" class="headerlink" title="4、kubeadm再次查看证书有效期(version:1.15+)"></a>4、kubeadm再次查看证书有效期(version:1.15+)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm alpha certs check-expiration<br></code></pre></td></tr></table></figure><h3 id="5、更新-kubeconfig-文件"><a href="#5、更新-kubeconfig-文件" class="headerlink" title="5、更新 kubeconfig 文件"></a>5、更新 kubeconfig 文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm init phase kubeconfig all --config kubeadm.yml<br></code></pre></td></tr></table></figure><h3 id="6、将新生成的-admin-配置文件覆盖掉原本的-admin-文件"><a href="#6、将新生成的-admin-配置文件覆盖掉原本的-admin-文件" class="headerlink" title="6、将新生成的 admin 配置文件覆盖掉原本的 admin 文件"></a>6、将新生成的 admin 配置文件覆盖掉原本的 admin 文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> <span class="hljs-variable">$HOME</span>/.kube/config <span class="hljs-variable">$HOME</span>/.kube/config.old<br><span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br><span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><h3 id="7、重启-kube-apiserver、kube-controller、kube-scheduler、etcd-这4个容器"><a href="#7、重启-kube-apiserver、kube-controller、kube-scheduler、etcd-这4个容器" class="headerlink" title="7、重启 kube-apiserver、kube-controller、kube-scheduler、etcd 这4个容器"></a>7、重启 kube-apiserver、kube-controller、kube-scheduler、etcd 这4个容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker ps |grep -E <span class="hljs-string">&#x27;k8s_kube-apiserver|k8s_kube-controller-manager|k8s_kube-scheduler|k8s_etcd_etcd&#x27;</span> | awk -F <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> |xargs docker restart<br></code></pre></td></tr></table></figure><h3 id="8、使用kubeadm查看证书有效期-version-1-20"><a href="#8、使用kubeadm查看证书有效期-version-1-20" class="headerlink" title="8、使用kubeadm查看证书有效期 (version:1.20+)"></a>8、使用kubeadm查看证书有效期 (version:1.20+)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm certs check-expiration<br></code></pre></td></tr></table></figure><h3 id="9、同步证书到其他master机器上"><a href="#9、同步证书到其他master机器上" class="headerlink" title="9、同步证书到其他master机器上"></a>9、同步证书到其他master机器上</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">scp etc/kubernetes/pki/apiserver* etc/kubernetes/pki/front-proxy* 192.168.94.155:/etc/kubernetes/pki/<br><br>scp etc/kubernetes/admin.conf 192.168.94.155:/etc/kubernetes/<br></code></pre></td></tr></table></figure><h2 id="二、二进制安装的k8s，node节点notready，证书过期处理"><a href="#二、二进制安装的k8s，node节点notready，证书过期处理" class="headerlink" title="二、二进制安装的k8s，node节点notready，证书过期处理"></a>二、二进制安装的k8s，node节点notready，证书过期处理</h2><h3 id="1、重启node节点kubelete"><a href="#1、重启node节点kubelete" class="headerlink" title="1、重启node节点kubelete"></a>1、重启node节点kubelete</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl  restart kubelet &amp;&amp; systemctl  status  kubelet<br></code></pre></td></tr></table></figure><h3 id="2、使用CSR重新生产证书"><a href="#2、使用CSR重新生产证书" class="headerlink" title="2、使用CSR重新生产证书"></a>2、使用CSR重新生产证书</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl get csr<br><span class="hljs-comment">#-----------以下为输出内容:-------------------</span><br>NAME                        AGE       REQUESTOR           CONDITION<br>node-csr-NsKZSz-myrv   11s       kubelet-bootstrap   Pending<br><span class="hljs-comment">#------------------------------------------</span><br><br>kubectl certificate approve node-csr-NsKZSz-myrv<br><span class="hljs-comment">#------------以下为输出内容:-----------------</span><br>certificatesigningrequest.certificates.k8s.io/node-csr-NsKZSz-myrv approved<br><br>备注：CSR授权完成后，kubelete会自动发起CSR请求更新证书。<br></code></pre></td></tr></table></figure><h3 id="3、-查看集群状态"><a href="#3、-查看集群状态" class="headerlink" title="3、 查看集群状态"></a>3、 查看集群状态</h3><p><strong>大概等待10秒，运行如下命令:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl get node<br></code></pre></td></tr></table></figure><p>备注：直接生成三十年有效期：<a href="https://blog.csdn.net/warlice/article/details/105402449%EF%BC%88%E6%9C%AA%E9%AA%8C%E8%AF%81%EF%BC%89">https://blog.csdn.net/warlice/article/details/105402449（未验证）</a></p><h2 id="三、master节点修改默认证书期限（在master节点操作）"><a href="#三、master节点修改默认证书期限（在master节点操作）" class="headerlink" title="三、master节点修改默认证书期限（在master节点操作）"></a>三、master节点修改默认证书期限（在master节点操作）</h2><h3 id="1：拉取源码"><a href="#1：拉取源码" class="headerlink" title="1：拉取源码"></a>1：拉取源码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /data &amp;&amp; git <span class="hljs-built_in">clone</span> https://github.com/kubernetes/kubernetes.git<br></code></pre></td></tr></table></figure><h3 id="2：切换到1-13-0版本"><a href="#2：切换到1-13-0版本" class="headerlink" title="2：切换到1.13.0版本"></a>2：切换到1.13.0版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git checkout -b remotes/origin/release-1.13 v1.13.0<br></code></pre></td></tr></table></figure><h3 id="3：安装go环境"><a href="#3：安装go环境" class="headerlink" title="3：安装go环境"></a>3：安装go环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /data/soft &amp;&amp; wgethttps://dl.google.com/go/go1.11.2.linux-amd64.tar.gz<br>tar zxvf go1.11.2.linux-amd64.tar.gz  -C /usr/local<br></code></pre></td></tr></table></figure><h3 id="4：编辑-x2F-etc-x2F-profile文件，添加如下："><a href="#4：编辑-x2F-etc-x2F-profile文件，添加如下：" class="headerlink" title="4：编辑&#x2F;etc&#x2F;profile文件，添加如下："></a>4：编辑&#x2F;etc&#x2F;profile文件，添加如下：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#go setting</span><br><span class="hljs-built_in">export</span> GOROOT=/usr/local/go<br><span class="hljs-built_in">export</span> GOPATH=/usr/local/gopath<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$GOROOT</span>/bin<br></code></pre></td></tr></table></figure><h3 id="5：生效"><a href="#5：生效" class="headerlink" title="5：生效"></a>5：生效</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="6：修改源码-原来1年，-100表示100年"><a href="#6：修改源码-原来1年，-100表示100年" class="headerlink" title="6：修改源码,原来1年，*100表示100年"></a>6：修改源码,原来1年，<code>*100</code>表示100年</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /data/kubernetes/staging/src/k8s.io/client-go/util/cert/cert.go<br><span class="hljs-comment">#...</span><br>&gt;112  NotAfter:     time.Now().Add(duration365d * 100).UTC(),<br>&gt;187  NotAfter:  validFrom.Add(maxAge *100),<br>&gt;215  NotAfter:  validFrom.Add(maxAge * 100),<br></code></pre></td></tr></table></figure><h3 id="7：编译"><a href="#7：编译" class="headerlink" title="7：编译"></a>7：编译</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /data/kubernetes/ &amp;&amp; make WHAT=cmd/kubeadm<br><span class="hljs-comment">#查看编译后的文件</span><br><span class="hljs-built_in">ls</span> -l /data/kubernetes/_output/bin/kubeadm<br></code></pre></td></tr></table></figure><h3 id="8：替换kubeadm"><a href="#8：替换kubeadm" class="headerlink" title="8：替换kubeadm"></a>8：替换kubeadm</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> /usr/bin/kubeadm /usr/bin/kubeadm_backup<br><span class="hljs-built_in">ln</span> -s /data/kubernetes/_output/bin/kubeadm /usr/bin/kubeadm<br></code></pre></td></tr></table></figure><h3 id="9-查看证书期限"><a href="#9-查看证书期限" class="headerlink" title="9.查看证书期限"></a>9.查看证书期限</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl x509 -<span class="hljs-keyword">in</span> front-proxy-client.crt   -noout -text  |grep Not<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
      <category>问题处理和基础命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s容器与容器之间的通信</title>
    <link href="/2023/06/16/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%AE%B9%E5%99%A8%E4%B8%8E%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <url>/2023/06/16/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%AE%B9%E5%99%A8%E4%B8%8E%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="k8s容器与容器之间的通信"><a href="#k8s容器与容器之间的通信" class="headerlink" title="k8s容器与容器之间的通信"></a>k8s容器与容器之间的通信</h1><p>参考：<a href="https://www.it1352.com/1536010.html">https://www.it1352.com/1536010.html</a></p><h2 id="1、举例：实现两个mongo容器之间可以互相连接mongo"><a href="#1、举例：实现两个mongo容器之间可以互相连接mongo" class="headerlink" title="1、举例：实现两个mongo容器之间可以互相连接mongo"></a>1、举例：实现两个mongo容器之间可以互相连接mongo</h2><h3 id="mongo-test容器的yaml文件"><a href="#mongo-test容器的yaml文件" class="headerlink" title="mongo-test容器的yaml文件"></a>mongo-test容器的yaml文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> db-test.yaml<br><br>apiVersion: apps/v1 <br>kind: Deployment<br>metadata:<br>  namespace: default<br>  name: dbtest<br>  labels:<br>    app: dbtest<br> <span class="hljs-comment">#..省略了部分信息</span><br>---<br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  namespace: default <span class="hljs-comment">#命名空间</span><br>  name: dbtest <span class="hljs-comment">#定义的service-name的名称</span><br>  labels:<br>    app: db <span class="hljs-comment">#需要通信的service-name名称</span><br>spec:<br>  <span class="hljs-built_in">type</span>: NodePort<br>  selector:<br>    app: dbtest<br>  ports:<br>  - port: 27017<br>    nodePort: 9027<br>    protocol: TCP<br>    targetPort: 27017<br></code></pre></td></tr></table></figure><h3 id="mongo容器的yaml文件"><a href="#mongo容器的yaml文件" class="headerlink" title="mongo容器的yaml文件"></a>mongo容器的yaml文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> mongo.yaml<br><br>apiVersion: apps/v1 <br>kind: Deployment<br>metadata:<br>  namespace: default<br>  name: dbtest<br>  labels:<br>    app: dbtest<br> <span class="hljs-comment">#...省略了部分信息</span><br>---<br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  namespace: default <span class="hljs-comment">#命名空间</span><br>  name: db  <span class="hljs-comment">#定义的service-name的名称</span><br>  labels:<br>    app: dbtest <span class="hljs-comment">#需要通信的service-name名称</span><br>spec:<br>  <span class="hljs-built_in">type</span>: NodePort<br>  selector:<br>    app: db<br>  ports:<br>  - port: 27017<br>    nodePort: 9017<br>    protocol: TCP<br>    targetPort: 27017<br><br></code></pre></td></tr></table></figure><h2 id="启动两个容器后"><a href="#启动两个容器后" class="headerlink" title="启动两个容器后"></a>启动两个容器后</h2><p>在容器内部使用如下规则进行连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;service-name&gt;.&lt;namespace-name&gt;.svc.cluster.local<br></code></pre></td></tr></table></figure><h2 id="例如，我这边进入mongo容器内部连接mongo-test的mongo"><a href="#例如，我这边进入mongo容器内部连接mongo-test的mongo" class="headerlink" title="例如，我这边进入mongo容器内部连接mongo-test的mongo"></a>例如，我这边进入mongo容器内部连接mongo-test的mongo</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubect <span class="hljs-built_in">exec</span> -it db-7892j24590 bash <br>&gt;mongo -u<span class="hljs-string">&quot;admin&quot;</span> -p<span class="hljs-string">&quot;adminTest&quot;</span> dbtest.default.svc.cluster.local<br><span class="hljs-comment">#即可连接</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
      <category>问题处理和基础命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes1.21.1安装kube-prometheus</title>
    <link href="/2023/06/15/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
    <url>/2023/06/15/k8s/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/k8s%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="k8s基础命令及问题处理"><a href="#k8s基础命令及问题处理" class="headerlink" title="k8s基础命令及问题处理"></a>k8s基础命令及问题处理</h1><h2 id="1-k8s常见补全命令"><a href="#1-k8s常见补全命令" class="headerlink" title="1.k8s常见补全命令"></a>1.k8s常见补全命令</h2><h3 id="1-1、kubectl补齐命令一"><a href="#1-1、kubectl补齐命令一" class="headerlink" title="1.1、kubectl补齐命令一:"></a>1.1、kubectl补齐命令一:</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install -y bash-completion<br><span class="hljs-built_in">source</span> /usr/share/bash-completion/bash_completion<br><span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br>kubectl completion bash &gt; ~/.kube/completion.bash.inc<br><span class="hljs-built_in">source</span> <span class="hljs-string">&#x27;/root/.kube/completion.bash.inc&#x27;</span>  <br><span class="hljs-built_in">source</span> <span class="hljs-variable">$HOME</span>/.bash_profile<br></code></pre></td></tr></table></figure><h3 id="1-2、kubectl补齐命令二"><a href="#1-2、kubectl补齐命令二" class="headerlink" title="1.2、kubectl补齐命令二:"></a>1.2、kubectl补齐命令二:</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure><h3 id="1-3、kubeadm补齐命令"><a href="#1-3、kubeadm补齐命令" class="headerlink" title="1.3、kubeadm补齐命令"></a>1.3、kubeadm补齐命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> &lt;(kubeadm completion bash)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source &lt;(kubeadm completion bash)&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure><h2 id="2-k8s正确删除一个pod"><a href="#2-k8s正确删除一个pod" class="headerlink" title="2.k8s正确删除一个pod"></a>2.k8s正确删除一个pod</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">1、先删除pod<br><span class="hljs-comment">#kubectl get pod -n 命名空间</span><br>kubectl delete pod pod名 -n 命名空间<br><br>2、删除对应的deployment<br><span class="hljs-comment">#kubectl get deployment -n 命名空间</span><br>kubectl delete deployment pod名 -n 命名空间<br><br>强制删除pod:<br>kubectl delete pods aos-apiserver-5f8f5b5585-s9l92 --grace-period=0 --force<br></code></pre></td></tr></table></figure><h2 id="3-查看证书的过期时间"><a href="#3-查看证书的过期时间" class="headerlink" title="3.查看证书的过期时间"></a>3.查看证书的过期时间</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> crt <span class="hljs-keyword">in</span> $(find /app/kubernetes/ssl/ -name <span class="hljs-string">&quot;*.crt&quot;</span>); <span class="hljs-keyword">do</span> openssl x509 -<span class="hljs-keyword">in</span> <span class="hljs-variable">$crt</span> -noout -dates; <span class="hljs-keyword">done</span><br><span class="hljs-keyword">for</span> crt <span class="hljs-keyword">in</span> $(find /app/kubernetes/ssl/ -name <span class="hljs-string">&quot;*.pem&quot;</span>); <span class="hljs-keyword">do</span> openssl x509 -<span class="hljs-keyword">in</span> <span class="hljs-variable">$crt</span> -noout -dates; <span class="hljs-keyword">done</span><br><span class="hljs-keyword">for</span> crt <span class="hljs-keyword">in</span> $(find /app/kubernetes/ssl/ -name <span class="hljs-string">&quot;*.pem&quot;</span>|grep -v <span class="hljs-string">&quot;key&quot;</span>); <span class="hljs-keyword">do</span> openssl x509 -<span class="hljs-keyword">in</span> <span class="hljs-variable">$crt</span> -noout -dates; <span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> `find /etc/kubernetes/pki -maxdepth 2 -name <span class="hljs-string">&quot;*.crt&quot;</span>`;<span class="hljs-keyword">do</span> openssl x509 -<span class="hljs-keyword">in</span> <span class="hljs-variable">$item</span> -text -noout| grep Not;<span class="hljs-built_in">echo</span> ======================<span class="hljs-variable">$item</span>===================;<span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="4-导出配置文件到工作目录"><a href="#4-导出配置文件到工作目录" class="headerlink" title="4.导出配置文件到工作目录"></a>4.导出配置文件到工作目录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm config <span class="hljs-built_in">print</span> init-defaults --kubeconfig ClusterConfiguration &gt; kubeadm.yml<br></code></pre></td></tr></table></figure><h2 id="5-kubectl检查组件健康状态异常处理"><a href="#5-kubectl检查组件健康状态异常处理" class="headerlink" title="5.kubectl检查组件健康状态异常处理"></a>5.kubectl检查组件健康状态异常处理</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl get cs<br><span class="hljs-comment">#------------------------------------------------</span><br>Warning: v1 ComponentStatus is deprecated <span class="hljs-keyword">in</span> v1.19+<br>NAME                 STATUS      MESSAGE                                                                                       ERROR<br>controller-manager   Unhealthy   Get <span class="hljs-string">&quot;http://127.0.0.1:10252/healthz&quot;</span>: dial tcp 127.0.0.1:10252: connect: connection refused   <br>scheduler            Unhealthy   Get <span class="hljs-string">&quot;http://127.0.0.1:10251/healthz&quot;</span>: dial tcp 127.0.0.1:10251: connect: connection refused   <br>etcd-0               Healthy     &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125; <br></code></pre></td></tr></table></figure><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /etc/kubernetes/manifests<br><br>[root@k8s-master1 manifests]<span class="hljs-comment"># ls</span><br>etcd.yaml  kube-apiserver.yaml  kube-controller-manager.yaml  kube-scheduler.yaml<br><br>vim kube-controller-manager.yaml   //注释 --port=0<br>vim kube-scheduler.yaml   //注释 --port=0<br><br><span class="hljs-comment">#重启kubelet服务：</span><br>如果集群运行很久不建议重启kubelet服务，可以对kube-controller-manager、kube-scheduler的deployment重启<br><br>systemctl restart kubelet.service<br></code></pre></td></tr></table></figure><h2 id="6-iptables内容未设置为1"><a href="#6-iptables内容未设置为1" class="headerlink" title="6.iptables内容未设置为1"></a>6.iptables内容未设置为1</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@k8s-master1 ~]<span class="hljs-comment"># kubeadm init --config kubeadm-config.yaml</span><br><br>[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables contents are not <span class="hljs-built_in">set</span> to 1<br></code></pre></td></tr></table></figure><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;1&quot;</span> &gt;/proc/sys/net/bridge/bridge-nf-call-iptables<br></code></pre></td></tr></table></figure><h2 id="7-kube-proxy无法运行成功-状态一直为：CrashLoopBackOff"><a href="#7-kube-proxy无法运行成功-状态一直为：CrashLoopBackOff" class="headerlink" title="7.kube-proxy无法运行成功 状态一直为：CrashLoopBackOff"></a>7.kube-proxy无法运行成功 状态一直为：CrashLoopBackOff</h2><h3 id="问题描述：-1"><a href="#问题描述：-1" class="headerlink" title="问题描述："></a>问题描述：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">在1.20.2版本中,使用kubeadm进行集群初始化时,虽然可以正常部署,但是查看pod情况的时候可以看到kube-proxy无法运行成功 状态一直为：CrashLoopBackOff<br></code></pre></td></tr></table></figure><h3 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl edit cm kube-proxy -n kube-system<br><span class="hljs-comment">#在编辑模式中找到以下字段，删除后保存</span><br>featureGates: <br>  SupportIPVSProxyMode: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="8-kubeadm加入master机器时token过期处理"><a href="#8-kubeadm加入master机器时token过期处理" class="headerlink" title="8.kubeadm加入master机器时token过期处理"></a>8.kubeadm加入master机器时token过期处理</h2><h3 id="问题描述：-2"><a href="#问题描述：-2" class="headerlink" title="问题描述："></a>问题描述：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">master节点机器显示：error execution phase preflight: couldn<span class="hljs-string">&#x27;t validate the identity of the API Server: Get &quot;https://apiserver.cluster.local:6443/api/v1/namespaces/kube-public/configmaps/cluster-info?timeout=10s&quot;: dial tcp 192.168.94.156:6443: connect: connection refused</span><br></code></pre></td></tr></table></figure><h3 id="解决方法：-2"><a href="#解决方法：-2" class="headerlink" title="解决方法："></a>解决方法：</h3><h4 id="8-1、查看使用的token是否过期，查看EXPIRES一栏，-重新生成token命令：kubeadm-token-create"><a href="#8-1、查看使用的token是否过期，查看EXPIRES一栏，-重新生成token命令：kubeadm-token-create" class="headerlink" title="8.1、查看使用的token是否过期，查看EXPIRES一栏，#重新生成token命令：kubeadm token create"></a>8.1、查看使用的token是否过期，查看EXPIRES一栏，#重新生成token命令：kubeadm token create</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm token list<br></code></pre></td></tr></table></figure><h4 id="8-2、生成新的–certificate-key"><a href="#8-2、生成新的–certificate-key" class="headerlink" title="8.2、生成新的–certificate-key"></a>8.2、生成新的–certificate-key</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm init phase upload-certs --upload-certs<br><span class="hljs-comment">#----------------</span><br>[upload-certs] Storing the certificates <span class="hljs-keyword">in</span> Secret <span class="hljs-string">&quot;kubeadm-certs&quot;</span> <span class="hljs-keyword">in</span> the <span class="hljs-string">&quot;kube-system&quot;</span> Namespace<br>[upload-certs] Using certificate key:<br>db5d35d1412ec0678c0b42959a16c44edb1d87d8b19452768ee9843a79414c6f<br></code></pre></td></tr></table></figure><h4 id="8-3、方法一：重新生成master节点令牌，会出现相关的加入命令"><a href="#8-3、方法一：重新生成master节点令牌，会出现相关的加入命令" class="headerlink" title="8.3、方法一：重新生成master节点令牌，会出现相关的加入命令"></a>8.3、方法一：重新生成master节点令牌，会出现相关的加入命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm token create --print-join-command --certificate-key=db5d35d1412ec0678c0b42959a16c44edb1d87d8b19452768ee9843a79414c6f<br></code></pre></td></tr></table></figure><h4 id="8-3、方法二：直接修改加入命令"><a href="#8-3、方法二：直接修改加入命令" class="headerlink" title="8.3、方法二：直接修改加入命令"></a>8.3、方法二：直接修改加入命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm <span class="hljs-built_in">join</span> apiserver.cluster.local:6443 --token 有效的token \<br>--discovery-token-ca-cert-hash sha256:获取的正确ca-cert-hash值 \<br>--control-plane --certificate-key 新生成的certificate-key<br><br>例如：<br>查看--discovery-token-ca-cert-hash sha256:的值:<br><br>openssl x509 -pubkey -<span class="hljs-keyword">in</span> /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed <span class="hljs-string">&#x27;s/^.* //&#x27;</span><br><br>kubeadm <span class="hljs-built_in">join</span> apiserver.cluster.local:6443 --token 4d0pdh.dz4nqc496ujy7omm \<br>  --discovery-token-ca-cert-hash sha256:4b79b65275442d2d42efb0b7d3b81fa42fbfdbfb21d2beab1659d9d1734a6100 \<br>  --control-plane --certificate-key 9ed38b70791479775ddaeac9bf4bdadfc54d0e9c6a8beab04002df4dacc757d5<br></code></pre></td></tr></table></figure><h3 id="新node节点令牌加入"><a href="#新node节点令牌加入" class="headerlink" title="新node节点令牌加入:"></a>新node节点令牌加入:</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm <span class="hljs-built_in">join</span> apiserver.cluster.local:6443 --token 有效的token --discovery-token-ca-cert-hash sha256:正确的ca-cert值<br><br>例如：kubeadm <span class="hljs-built_in">join</span> apiserver.cluster.local:6443 --token 385f5m.zjeniniwgbkxjzbs --discovery-token-ca-cert-hash sha256:4b79b65275442d2d42efb0b7d3b81fa42fbfdbfb21d2beab1659d9d1734a6100<br></code></pre></td></tr></table></figure><h2 id="9-网络插件-未能为范围0分配：范围集中没有可用的IP地址"><a href="#9-网络插件-未能为范围0分配：范围集中没有可用的IP地址" class="headerlink" title="9.网络插件 未能为范围0分配：范围集中没有可用的IP地址"></a>9.网络插件 未能为范围0分配：范围集中没有可用的IP地址</h2><h3 id="解决方法：-3"><a href="#解决方法：-3" class="headerlink" title="解决方法："></a>解决方法：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#先关闭docker、kubelet服务</span><br>systemctl stop kubelet.service<br>systemctl stop docker<br>systemctl stop flannel<br><br><span class="hljs-comment">#删除ip池</span><br><span class="hljs-built_in">rm</span> -rf /var/lib/cni/flannel/* &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/lib/cni/networks/cbr0/* &amp;&amp; ip <span class="hljs-built_in">link</span> delete cni0<br><span class="hljs-built_in">rm</span> -rf  /var/lib/cni/networks/cni0/*<br><span class="hljs-comment">#启动服务</span><br>systemctl start docker<br>systemctl start flannel<br>systemctl start kubelet.service<br></code></pre></td></tr></table></figure><h2 id="10-k8s删除状态为Evicted的pod"><a href="#10-k8s删除状态为Evicted的pod" class="headerlink" title="10.k8s删除状态为Evicted的pod"></a>10.k8s删除状态为Evicted的pod</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br> kubectl get pod -n party-system | grep Evicted | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs kubectl delete pod -n party-system <br></code></pre></td></tr></table></figure><p><strong>注意：pod运行分配的node服务器，&#x2F;路径下资源超过85%时会有报错</strong></p><h2 id="11-导出版本号"><a href="#11-导出版本号" class="headerlink" title="11.导出版本号"></a>11.导出版本号</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl describe pod -n party-system |grep Image: | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> &gt; desc-images.txt<br></code></pre></td></tr></table></figure><h2 id="12-delete-pod时无法删除时，需要删除deployments"><a href="#12-delete-pod时无法删除时，需要删除deployments" class="headerlink" title="12. delete pod时无法删除时，需要删除deployments"></a>12. delete pod时无法删除时，需要删除deployments</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl get deployment <br><br>kubectl delete deployment xxx<br></code></pre></td></tr></table></figure><h2 id="13-The-range-of-valid-ports-is-30000-32767-端口范围问题"><a href="#13-The-range-of-valid-ports-is-30000-32767-端口范围问题" class="headerlink" title="13. The range of valid ports is 30000-32767  端口范围问题"></a>13. The range of valid ports is 30000-32767  端口范围问题</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/kubernetes/manifests/kube-apiserver.yaml <span class="hljs-comment">#使用的是默认安装的路径，可以ps -ef| grep api查看</span><br><br>- --service-node-port-range=25000-30000 <span class="hljs-comment">#添加或者修改端口范围</span><br></code></pre></td></tr></table></figure><h2 id="14-k8s容器拷贝文件到本地"><a href="#14-k8s容器拷贝文件到本地" class="headerlink" title="14.k8s容器拷贝文件到本地"></a>14.k8s容器拷贝文件到本地</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl <span class="hljs-built_in">cp</span> qzcsbj/order-b477c8947-tr8rz:/tmp/jstack.txt /root/test/jstack.txt<br><span class="hljs-comment">#本地文件拷贝到k8s容器</span><br><br>tar cf - data.txt | kubectl <span class="hljs-built_in">exec</span> -i -n qzcsbj order-b477c8947-tr8rz -- tar xf - -C /root/<br></code></pre></td></tr></table></figure><h2 id="15-执行kubectl命令时报错-error-You-must-be-logged-in-to-the-server-Unauthorized"><a href="#15-执行kubectl命令时报错-error-You-must-be-logged-in-to-the-server-Unauthorized" class="headerlink" title="15.执行kubectl命令时报错 error: You must be logged in to the server (Unauthorized)"></a>15.执行kubectl命令时报错 error: You must be logged in to the server (Unauthorized)</h2><h3 id="问题详情："><a href="#问题详情：" class="headerlink" title="问题详情："></a>问题详情：</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">Kubernetes集群master节点上执行kubectl命令报如下错误：<br><span class="hljs-keyword">error: </span>You must be logged in to the server (Unauthorized)<br>错误：您必须登录到服务器（未经授权）<br></code></pre></td></tr></table></figure><h3 id="解决方法-·"><a href="#解决方法-·" class="headerlink" title="解决方法:·"></a>解决方法:·</h3><p>原因：这个是权限问题，配置身份认证的文件为&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf，颁发证书时&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf文件重新生成，但是$HOME&#x2F;.kube&#x2F;config并没有得到替换。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><h2 id="16-允许pod在master节点上运行"><a href="#16-允许pod在master节点上运行" class="headerlink" title="16.允许pod在master节点上运行"></a>16.允许pod在master节点上运行</h2><p>长期改变节点的属性，允许Master运行应用，执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl taint nodes --all node-role.kubernetes.io/master-<br></code></pre></td></tr></table></figure><p>临时允许Master节点执行应用，在应用的yaml文件中添加：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh">      tolerations:<br>      - key: node-role.kubernetes.io/master<br>        effect: NoSchedule<br><span class="hljs-comment">#举例：</span><br>apiVersion: apps/v1<br>kind: DaemonSet<br>metadata:<br>  name: fluentd-elasticsearch<br>  namespace: <span class="hljs-built_in">test</span><br>  labels:<br>    k8s-app: fluentd-logging<br>spec:<br>  selector:<br>    <span class="hljs-comment">#...</span><br>  template:<br>    <span class="hljs-comment">#...</span><br>    spec:<br>      tolerations:<br>      - key: node-role.kubernetes.io/master<br>        effect: NoSchedule<br>      containers:<br>      <span class="hljs-comment">#...</span><br></code></pre></td></tr></table></figure><h2 id="17-宿主机（外部）执行pod容器内操作："><a href="#17-宿主机（外部）执行pod容器内操作：" class="headerlink" title="17.宿主机（外部）执行pod容器内操作："></a>17.宿主机（外部）执行pod容器内操作：</h2><p>以外部执行容器内某个字符串的命令为例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl <span class="hljs-built_in">exec</span> -it  $(kubectl get po | grep jobmanager | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>) -- /opt/flink/bin/sql-client.sh -f /opt/flink/scripts/*.sql<br><br>注意：两个短杠 -- 表示后面可以传入linux命令，前后各有一个空格分隔开来<br><br>如果一个pod中有多个pod的实例的话，可加上 -c 参数来指定特定的容器名：<br>kubectl <span class="hljs-built_in">exec</span> -it -n default wyn-project1-7957cdf65f-ds7lh -c testshilie1 -- <span class="hljs-built_in">mkdir</span> /test<br><br>如果同时执行多个命令时：可使用 -- bash -c 指定要执行的命令:<br>kubectl <span class="hljs-built_in">exec</span> -it  $(kubectl get po | grep jobmanager | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>) -- bash -c <span class="hljs-string">&#x27;cd pb-scripts/ &amp;&amp; ls  | wc -l&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="18-安装flannel不提供podCIDR"><a href="#18-安装flannel不提供podCIDR" class="headerlink" title="18.安装flannel不提供podCIDR"></a>18.安装flannel不提供podCIDR</h2><h3 id="问题详情：-1"><a href="#问题详情：-1" class="headerlink" title="问题详情："></a>问题详情：</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">错误：The error from the pod logs:<br><span class="hljs-keyword">Error </span>registering network: failed to acquire lease: node &quot;master1&quot; pod cidr not assigned<br></code></pre></td></tr></table></figure><h3 id="解决方法：-4"><a href="#解决方法：-4" class="headerlink" title="解决方法："></a>解决方法：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl patch node master1 -p <span class="hljs-string">&#x27;&#123;&quot;spec&quot;:&#123;&quot;podCIDR&quot;:&quot;10.244.0.0/16&quot;&#125;&#125;&#x27;</span><br><br>或者：<br>vim /etc/kubernetes/manifests/kube-controller-manager.yaml<br><span class="hljs-comment">#增加参数：</span><br><br>--allocate-node-cidrs=<span class="hljs-literal">true</span><br>--cluster-cidr=10.244.0.0/16<br><br>重启服务：<br>systemctl restart kubelet<br></code></pre></td></tr></table></figure><h2 id="19-node-s-had-taints-that-the-pod-didn’t-tolerate-in-kubernetes-cluster"><a href="#19-node-s-had-taints-that-the-pod-didn’t-tolerate-in-kubernetes-cluster" class="headerlink" title="19.node(s) had taints that the pod didn’t tolerate in kubernetes cluster"></a>19.node(s) had taints that the pod didn’t tolerate in kubernetes cluster</h2><h3 id="问题详情：节点有污点，需要检查节点状态并且工作正常"><a href="#问题详情：节点有污点，需要检查节点状态并且工作正常" class="headerlink" title="问题详情：节点有污点，需要检查节点状态并且工作正常"></a>问题详情：节点有污点，需要检查节点状态并且工作正常</h3><h3 id="解决方法：-5"><a href="#解决方法：-5" class="headerlink" title="解决方法："></a>解决方法：</h3><p><code>参考文档：https://stackoverflow.com/questions/62991596/1-nodes-had-taints-that-the-pod-didnt-tolerate-in-kubernetes-cluster</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl describe node &lt;nodename&gt; | grep Taints<br><br>当某些条件为真时，节点控制器会自动污染节点。内置以下污点：<br>node.kubernetes.io/not-ready: 节点还没有准备好。这对应于 NodeCondition Ready 为“False”。<br>node.kubernetes.io/unreachable：无法从节点控制器访问节点。这对应于 NodeCondition Ready 为“Unknown”。<br>node.kubernetes.io/out-of-disk: 节点变得磁盘不足。<br>node.kubernetes.io/memory-pressure: 节点有内存压力。<br>node.kubernetes.io/disk-pressure: 节点有磁盘压力。<br>node.kubernetes.io/network-unavailable: 节点的网络不可用。<br>node.kubernetes.io/unschedulable: 节点不可调度。<br>node.cloudprovider.kubernetes.io/uninitialized：当 kubelet 以“外部”云提供商启动时，此污点会在节点上设置以将其标记为不可用。在来自 cloud-controller-manager 的控制器初始化此节点后，kubelet 会删除此污点。<br><br>除上述内容外，node-role.kubernetes.io/master:NoSchedule默认情况下还向主节点添加了一种特殊的污点。<br>taint如果在 pod 规范中没有对应的节点，通常会出现错误toleration。<br><br><br><span class="hljs-comment">#检查节点是否有污点:</span><br>kubectl describe node &lt;nodename&gt; | grep Taints<br><span class="hljs-comment">#—————</span><br>输出：Taints:   node-role.kubernetes.io/master:NoSchedule<br><br><span class="hljs-comment">#从节点中删除污点，运行：</span><br>kubectl taint node &lt;nodename&gt; node-role.kubernetes.io/master:NoSchedule-<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
      <category>问题处理和基础命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dockerfile实战-使用apline制作镜像</title>
    <link href="/2023/06/14/docker/dockerfile/dockerfile%E5%AE%9E%E6%88%98-%E4%BD%BF%E7%94%A8apline%E5%88%B6%E4%BD%9C%E9%95%9C%E5%83%8F/"/>
    <url>/2023/06/14/docker/dockerfile/dockerfile%E5%AE%9E%E6%88%98-%E4%BD%BF%E7%94%A8apline%E5%88%B6%E4%BD%9C%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用apline制作镜像"><a href="#使用apline制作镜像" class="headerlink" title="使用apline制作镜像"></a>使用apline制作镜像</h1><p>参考文档：<a href="https://blog.51cto.com/u_15273785/2917117#1alpinejdk_4">https://blog.51cto.com/u_15273785/2917117#1alpinejdk_4</a></p><h2 id="一、制作dockerfile实战和解释："><a href="#一、制作dockerfile实战和解释：" class="headerlink" title="一、制作dockerfile实战和解释："></a>一、制作dockerfile实战和解释：</h2><h3 id="1-指定基础镜像，并且必须是第一条指令"><a href="#1-指定基础镜像，并且必须是第一条指令" class="headerlink" title="1.指定基础镜像，并且必须是第一条指令"></a>1.指定基础镜像，并且必须是第一条指令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#FROM alpine:latest</span><br>FROM alpine:3.10<br></code></pre></td></tr></table></figure><h3 id="2-指明该镜像的作者和其电子邮件"><a href="#2-指明该镜像的作者和其电子邮件" class="headerlink" title="2.指明该镜像的作者和其电子邮件"></a>2.指明该镜像的作者和其电子邮件</h3><p>MAINTAINER zhangzhenzhou “<a href="mailto:&#49;&#57;&#54;&#50;&#56;&#50;&#x31;&#x34;&#x36;&#x31;&#64;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;">&#49;&#57;&#54;&#50;&#56;&#50;&#x31;&#x34;&#x36;&#x31;&#64;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;</a>“</p><h3 id="3-在构建镜像时，指定镜像的工作目录，之后的命令都是基于此工作目录，如果不存在，则会创建目录"><a href="#3-在构建镜像时，指定镜像的工作目录，之后的命令都是基于此工作目录，如果不存在，则会创建目录" class="headerlink" title="3.在构建镜像时，指定镜像的工作目录，之后的命令都是基于此工作目录，如果不存在，则会创建目录"></a>3.在构建镜像时，指定镜像的工作目录，之后的命令都是基于此工作目录，如果不存在，则会创建目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">WORKDIR /app/jdk<br></code></pre></td></tr></table></figure><h3 id="4-将一些安装包复制到镜像中，语法：ADD-x2F-COPY-…"><a href="#4-将一些安装包复制到镜像中，语法：ADD-x2F-COPY-…" class="headerlink" title="4.将一些安装包复制到镜像中，语法：ADD&#x2F;COPY … "></a>4.将一些安装包复制到镜像中，语法：ADD&#x2F;COPY <src>… <dest></dest></src></h3><h4 id="ADD与COPY的区别：ADD复制并解压，COPY仅复制"><a href="#ADD与COPY的区别：ADD复制并解压，COPY仅复制" class="headerlink" title="ADD与COPY的区别：ADD复制并解压，COPY仅复制"></a>ADD与COPY的区别：ADD复制并解压，COPY仅复制</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ADD jdk-8u221-linux-x64.tar.gz /app/jdk/<br></code></pre></td></tr></table></figure><h4 id="glibc安装包如果从网络下载速度实在是太慢了，先提前下载复制到镜像中"><a href="#glibc安装包如果从网络下载速度实在是太慢了，先提前下载复制到镜像中" class="headerlink" title="glibc安装包如果从网络下载速度实在是太慢了，先提前下载复制到镜像中"></a>glibc安装包如果从网络下载速度实在是太慢了，先提前下载复制到镜像中</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">COPY glibc-2.29-r0.apk /app/jdk/<br>COPY glibc-bin-2.29-r0.apk /app/jdk/<br>COPY glibc-i18n-2.29-r0.apk /app/jdk/<br></code></pre></td></tr></table></figure><h3 id="5-更新Alpine的软件源为阿里云，因为从默认官源拉取实在太慢了"><a href="#5-更新Alpine的软件源为阿里云，因为从默认官源拉取实在太慢了" class="headerlink" title="5.更新Alpine的软件源为阿里云，因为从默认官源拉取实在太慢了"></a>5.更新Alpine的软件源为阿里云，因为从默认官源拉取实在太慢了</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">RUN <span class="hljs-built_in">echo</span> http://mirrors.aliyun.com/alpine/v3.10/main/ &gt; /etc/apk/repositories &amp;&amp; \<br>    <span class="hljs-built_in">echo</span> http://mirrors.aliyun.com/alpine/v3.10/community/ &gt;&gt; /etc/apk/repositories<br>RUN apk update &amp;&amp; apk upgrade<br></code></pre></td></tr></table></figure><h3 id="6-运行指定的命令"><a href="#6-运行指定的命令" class="headerlink" title="6.运行指定的命令"></a>6.运行指定的命令</h3><p>Alpine linux为了精简本身并没有安装太多的常用软件,apk类似于ubuntu的apt-get，用来安装一些常用软件，其语法如下：apk add bash wget curl git make vim docker<br>wget是linux下的ftp&#x2F;http传输工具，没安装会报错“&#x2F;bin&#x2F;sh:wget: not found”，网上例子少安装wget</p><p>ca-certificates证书服务，是安装glibc前置依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">RUN apk --no-cache add ca-certificates wget \<br>    &amp;&amp; wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub \<br>    &amp;&amp; apk add glibc-2.29-r0.apk glibc-bin-2.29-r0.apk glibc-i18n-2.29-r0.apk \<br>    &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/cache/apk/* glibc-2.29-r0.apk glibc-bin-2.29-r0.apk glibc-i18n-2.29-r0.apk<br></code></pre></td></tr></table></figure><h3 id="7-配置环境变量"><a href="#7-配置环境变量" class="headerlink" title="7.配置环境变量"></a>7.配置环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">ENV JAVA_HOME=/app/jdk/jdk1.8.0_221<br>ENV CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar<br>ENV PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><h3 id="8-容器启动时需要执行的命令"><a href="#8-容器启动时需要执行的命令" class="headerlink" title="8.容器启动时需要执行的命令"></a>8.容器启动时需要执行的命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">CMD [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-version&quot;</span>]<br><br></code></pre></td></tr></table></figure><h2 id="二、使用apline镜像安装docker和mongodb-shell"><a href="#二、使用apline镜像安装docker和mongodb-shell" class="headerlink" title="二、使用apline镜像安装docker和mongodb-shell"></a>二、使用apline镜像安装docker和mongodb-shell</h2><p>参考文档：<a href="https://www.how2shout.com/linux/how-to-install-mongodb-server-on-alpine-linux/">https://www.how2shout.com/linux/how-to-install-mongodb-server-on-alpine-linux/</a><br>插件地址：<a href="http://mirrors.aliyun.com/alpine/%E7%89%88%E6%9C%AC/community/">http://mirrors.aliyun.com/alpine/版本/community/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; dockerfile &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">FROM alpine:3.16</span><br><span class="hljs-string">RUN echo https://mirrors.aliyun.com/alpine/v3.16/main/ &gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="hljs-string">    echo https://mirrors.aliyun.com/alpine/v3.16/community/ &gt;&gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="hljs-string">    echo https://mirrors.aliyun.com/alpine/v3.9/main/ &gt;&gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="hljs-string">    echo http://mirrors.aliyun.com/alpine/v3.9/community/ &gt;&gt; /etc/apk/repositories</span><br><span class="hljs-string">RUN apk update &amp;&amp; apk upgrade</span><br><span class="hljs-string">RUN apk add bash curl vim docker </span><br><span class="hljs-string">RUN apk add mongodb-tools mongodb</span><br><span class="hljs-string">RUN rm -rf /var/cache/apk/*</span><br><span class="hljs-string">EOF</span><br><br>docker build -t mongo_alpine . <br><br>docker run -itd --name=app -p 10022:22 -p 10080:3000  -v /var/run/docker.sock:/var/run/docker.sock mongo_alpine:latest<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>dockerfile</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dockerfile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dockerfile文件实例</title>
    <link href="/2023/06/14/docker/dockerfile/dockerfile%E5%AE%9E%E6%88%98/"/>
    <url>/2023/06/14/docker/dockerfile/dockerfile%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="dockerfile文件实例"><a href="#dockerfile文件实例" class="headerlink" title="dockerfile文件实例"></a>dockerfile文件实例</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#from ubuntu:操作正在运行的名叫ubuntu的镜像</span><br>FROM ubuntu<br><span class="hljs-comment">#创建工作目录</span><br>WORKDIR /work<br><span class="hljs-comment">#将当前目录下的文件拷贝到镜像内的工作目录下</span><br>COPY ./mongodb-database-tools-ubuntu2004-x86_64-100.5.1.tgz /work/<br>COPY ./mongodb-org-shell_5.0.5_amd64.deb /work/<br><span class="hljs-comment">#更新、安装依赖</span><br>RUN apt update &amp;&amp; apt-get update &amp;&amp; apt install -y libcurl4 &amp;&amp; apt install -y libssl1.1<br><span class="hljs-comment">#安装程序包</span><br>RUN dpkg -i /work/mongodb-org-shell_5.0.5_amd64.deb &amp;&amp; tar -xnf /work/mongodb-database-tools-ubuntu2004-x86_64-100.5.1.tgz <br><span class="hljs-comment">#更名</span><br>RUN <span class="hljs-built_in">mv</span> /work/mongodb-database-tools-ubuntu2004-x86_64-100.5.1 /work/mongodb-tools<br><span class="hljs-comment">#设置环境变量</span><br>ENV MONGODB_TOOLS /work/mongodb-tools<br>ENV PATH <span class="hljs-variable">$MONGODB_TOOLS</span>/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment">#删除安装包</span><br>RUN <span class="hljs-built_in">rm</span> -rf /work/mongodb-database-tools-ubuntu2004-x86_64-100.5.1.tgz &amp;&amp; <span class="hljs-built_in">rm</span> -rf /work/mongodb-org-shell_5.0.5_amd64.deb<br><br><span class="hljs-comment">#上传nodejs</span><br>COPY ./node-v14.10.1-linux-x64.tar.gz /work/<br><span class="hljs-comment">#解压、并更名</span><br>RUN tar -xnf /work/node-v14.10.1-linux-x64.tar.gz -C /usr/local &amp;&amp; <span class="hljs-built_in">mv</span> /usr/local/node-v14.10.1-linux-x64 /usr/local/node<br><span class="hljs-comment">#设置环境变量</span><br>ENV NODE_HOME=/usr/local/node<br>ENV PATH <span class="hljs-variable">$NODE_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment">#安装cwltool</span><br>RUN apt-get install python3-pip -y &amp;&amp; apt-get install cwltool -y<br></code></pre></td></tr></table></figure><h2 id="使用当前目录的-Dockerfile-创建镜像，标签为-test-x2F-ubuntu-v1"><a href="#使用当前目录的-Dockerfile-创建镜像，标签为-test-x2F-ubuntu-v1" class="headerlink" title="使用当前目录的 Dockerfile 创建镜像，标签为 test&#x2F;ubuntu:v1"></a>使用当前目录的 Dockerfile 创建镜像，标签为 test&#x2F;ubuntu:v1</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker build -t <span class="hljs-built_in">test</span>/ubuntu:v1 . <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>dockerfile</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dockerfile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迁移docker存储位置镜像</title>
    <link href="/2023/06/14/docker/docker%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E8%BF%81%E7%A7%BBdocker%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE%E9%95%9C%E5%83%8F/"/>
    <url>/2023/06/14/docker/docker%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E8%BF%81%E7%A7%BBdocker%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="迁移docker存储位置镜像"><a href="#迁移docker存储位置镜像" class="headerlink" title="迁移docker存储位置镜像"></a>迁移docker存储位置镜像</h1><p><code>参考文档：https://blog.csdn.net/weixin_42366752/article/details/112231503</code></p><h2 id="1、查看默认的容器数据保存位置"><a href="#1、查看默认的容器数据保存位置" class="headerlink" title="1、查看默认的容器数据保存位置"></a>1、查看默认的容器数据保存位置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker info | grep <span class="hljs-string">&quot;Docker Root Dir&quot;</span><br><span class="hljs-comment">#如下显示，一般默认为/var下</span><br>Docker Root Dir: /var/lib/docker<br></code></pre></td></tr></table></figure><h2 id="2、进行数据迁移，迁移到的路径为：-x2F-app-x2F-dockerimages"><a href="#2、进行数据迁移，迁移到的路径为：-x2F-app-x2F-dockerimages" class="headerlink" title="2、进行数据迁移，迁移到的路径为：&#x2F;app&#x2F;dockerimages"></a>2、进行数据迁移，迁移到的路径为：&#x2F;app&#x2F;dockerimages</h2><h3 id="2-1、首先停掉docker服务"><a href="#2-1、首先停掉docker服务" class="headerlink" title="2.1、首先停掉docker服务"></a>2.1、首先停掉docker服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl stop docker.service<br></code></pre></td></tr></table></figure><h3 id="2-2、创建迁移目录（用来放新数据的目录）"><a href="#2-2、创建迁移目录（用来放新数据的目录）" class="headerlink" title="2.2、创建迁移目录（用来放新数据的目录）"></a>2.2、创建迁移目录（用来放新数据的目录）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /app/dockerimages<br></code></pre></td></tr></table></figure><h3 id="2-3、数据迁移"><a href="#2-3、数据迁移" class="headerlink" title="2.3、数据迁移"></a>2.3、数据迁移</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rsync -avz /var/lib/docker/ /app/dockerimages/<br></code></pre></td></tr></table></figure><h3 id="2-4、修改docker下载的默认地址到-x2F-app-x2F-dockerimages下"><a href="#2-4、修改docker下载的默认地址到-x2F-app-x2F-dockerimages下" class="headerlink" title="2.4、修改docker下载的默认地址到&#x2F;app&#x2F;dockerimages下"></a>2.4、修改docker下载的默认地址到&#x2F;app&#x2F;dockerimages下</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/docker/daemon.json<br>&#123;<br>    <span class="hljs-string">&quot;data-root&quot;</span>: <span class="hljs-string">&quot;/app/dockerimages/&quot;</span>  <span class="hljs-comment">#添加一行</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5、重启服务"><a href="#2-5、重启服务" class="headerlink" title="2.5、重启服务"></a>2.5、重启服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart docker.service<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>docker问题解决</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker系统清理</title>
    <link href="/2023/06/13/docker/docker%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/Docker%E6%B8%85%E7%90%86%E6%95%B0%E6%8D%AE%E3%80%81%E9%95%9C%E5%83%8F/"/>
    <url>/2023/06/13/docker/docker%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/Docker%E6%B8%85%E7%90%86%E6%95%B0%E6%8D%AE%E3%80%81%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker系统清理"><a href="#Docker系统清理" class="headerlink" title="Docker系统清理"></a>Docker系统清理</h1><h2 id="一、查看镜像及容器磁盘占用情况：docker-system-df命令"><a href="#一、查看镜像及容器磁盘占用情况：docker-system-df命令" class="headerlink" title="一、查看镜像及容器磁盘占用情况：docker system df命令"></a>一、查看镜像及容器磁盘占用情况：docker system df命令</h2><p>提供Docker整体磁盘使用率的概况，包括镜像、容器和（本地）volume。所以我们现在随时都可以查看Docker使用了多少资源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker system <span class="hljs-built_in">df</span><br></code></pre></td></tr></table></figure><h2 id="二、清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像（即无tag的镜像）-：docker-system-prune命令"><a href="#二、清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像（即无tag的镜像）-：docker-system-prune命令" class="headerlink" title="二、清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像（即无tag的镜像） ：docker system prune命令"></a>二、清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像（即无tag的镜像） ：docker system prune命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker system prune<br><span class="hljs-comment">#注意：谨慎使用!将会删除所有关闭的容器以及dangling镜像</span><br></code></pre></td></tr></table></figure><p>命令清理得更加彻底，将没有容器使用Docker镜像都删掉：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker system prune -a <br><span class="hljs-comment">#注意：这两个命令会把你暂时关闭的容器，以及暂时没有用到的Docker镜像都删掉了。</span><br></code></pre></td></tr></table></figure><h2 id="三、手动删除"><a href="#三、手动删除" class="headerlink" title="三、手动删除"></a>三、手动删除</h2><p>删除所有关闭的容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker ps -a | grep Exit | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27; &#x27;</span> -f 1 | xargs docker <span class="hljs-built_in">rm</span><br></code></pre></td></tr></table></figure><p>删除所有dangling镜像（即无tag的镜像）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker rmi $(docker images | grep <span class="hljs-string">&quot;^&lt;none&gt;&quot;</span> | awk <span class="hljs-string">&quot;&#123;print <span class="hljs-variable">$3</span>&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p>删除所有dangling数据卷（即无用的Volume）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume <span class="hljs-built_in">rm</span> $(docker volume <span class="hljs-built_in">ls</span> -qf dangling=<span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure><h2 id="四、docker清理镜像，只保留最近三个镜像"><a href="#四、docker清理镜像，只保留最近三个镜像" class="headerlink" title="四、docker清理镜像，只保留最近三个镜像"></a>四、docker清理镜像，只保留最近三个镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker images | grep <span class="hljs-string">&quot;test-web&quot;</span>  | awk <span class="hljs-string">&#x27;(NR&gt;3)&#123;print&#125;&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs docker rmi<br></code></pre></td></tr></table></figure><h3 id="通过获取镜像名和tag组合清理镜像，只保留最近10个"><a href="#通过获取镜像名和tag组合清理镜像，只保留最近10个" class="headerlink" title="通过获取镜像名和tag组合清理镜像，只保留最近10个"></a>通过获取镜像名和tag组合清理镜像，只保留最近10个</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker images --format <span class="hljs-string">&quot;&#123;&#123;.Repository&#125;&#125;:&#123;&#123;.Tag&#125;&#125;&quot;</span> | grep <span class="hljs-string">&quot;119.8.45.188:5000/test&quot;</span> | awk <span class="hljs-string">&#x27;(NR&gt;10)&#123;print&#125;&#x27;</span> | xargs docker rmi<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>docker问题解决</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker命令自动补全</title>
    <link href="/2023/06/12/docker/docker%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/docker%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/"/>
    <url>/2023/06/12/docker/docker%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/docker%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker命令自动补全"><a href="#docker命令自动补全" class="headerlink" title="docker命令自动补全"></a>docker命令自动补全</h1><h2 id="1-安装依赖工具bash-complete"><a href="#1-安装依赖工具bash-complete" class="headerlink" title="1.安装依赖工具bash-complete"></a>1.安装依赖工具bash-complete</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install -y bash-completion<br></code></pre></td></tr></table></figure><h2 id="2-刷新让其生效"><a href="#2-刷新让其生效" class="headerlink" title="2.刷新让其生效"></a>2.刷新让其生效</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> /usr/share/bash-completion/bash_completion<br><span class="hljs-built_in">source</span> /usr/share/bash-completion/completions/docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>docker问题解决</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker overlay 占用磁盘 100% 的问题</title>
    <link href="/2023/06/11/docker/docker%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/Docker_overlay%E5%8D%A0%E7%94%A8%E7%A3%81%E7%9B%98100%25%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2023/06/11/docker/docker%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/Docker_overlay%E5%8D%A0%E7%94%A8%E7%A3%81%E7%9B%98100%25%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker-overlay-占用磁盘-100-的问题"><a href="#Docker-overlay-占用磁盘-100-的问题" class="headerlink" title="Docker overlay 占用磁盘 100% 的问题"></a>Docker overlay 占用磁盘 100% 的问题</h1><p>参考文档：<a href="https://zhuanlan.zhihu.com/p/444358715">https://zhuanlan.zhihu.com/p/444358715</a></p><h2 id="1-排查容器标准输出的日志"><a href="#1-排查容器标准输出的日志" class="headerlink" title="1.排查容器标准输出的日志"></a>1.排查容器标准输出的日志</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(docker ps -q ); <span class="hljs-keyword">do</span> <br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ContainerID: <span class="hljs-variable">$i</span>&quot;</span>; <br>  <span class="hljs-built_in">ls</span> -alh $(docker inspect <span class="hljs-variable">$i</span> | grep LogPath|awk -F <span class="hljs-string">&quot;\&quot;&quot;</span> <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span>);<br><span class="hljs-keyword">done</span>;<br></code></pre></td></tr></table></figure><p>业务中往往回因为一些环境问题导致日志占用过多的磁盘，上面的这条命令会打印出每个正在运行的容器标准输出日志占用的磁盘空间，可以选择超过一定体积（比如 1G）的日志文件情况，情况的方式可以很粗暴：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; <span class="hljs-variable">$dockerLogFile</span><br></code></pre></td></tr></table></figure><h2 id="2-排查容器的磁盘占用"><a href="#2-排查容器的磁盘占用" class="headerlink" title="2. 排查容器的磁盘占用"></a>2. 排查容器的磁盘占用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">cd</span> /var/lib/docker/containers<br>$ <span class="hljs-built_in">du</span> -a --max-depth=1 | <span class="hljs-built_in">sort</span> -nr | <span class="hljs-built_in">head</span> -5<br>726600  .<br>296768  ./027e88e285c1190465d87cbd222feb7fbc7fc32908d42d80807dd6a58de49c38<br>279104  ./0ef2b533543a65b55ea5e1ea438d17245071b0478f4692f8095945b6ad64d1c6<br>121056  ./8722eda85916edf618440ae1a01bfd03553ab7c8bd5a92164714fec32ef12f0c<br>9736    ./dcd939166e13d2db889cdaecc1af7d71f2de9c515541ca43a853dd745cf8002f<br></code></pre></td></tr></table></figure><p>排除日志文件异常占用磁盘问题外，可以通过上面的命令主要通过检查容器占用磁盘空间来找锅，定位到容器后，进入容器内，通过 df -h &#x2F; du -ah 等命令就可以找到容器内部的大文件。</p><h2 id="3-以下的这些是我在得到上述两步处理方案之前走过的路"><a href="#3-以下的这些是我在得到上述两步处理方案之前走过的路" class="headerlink" title="3. 以下的这些是我在得到上述两步处理方案之前走过的路"></a>3. 以下的这些是我在得到上述两步处理方案之前走过的路</h2><p>目前遇到的情况是 docker 的 overlay 占用磁盘空间过多，通过 df -h 命令查看时，有多个文件夹提示磁盘占用率达到 100%,但实际上不是每个文件夹都有那么大的体积，只有其中一个或某几个有很大的磁盘占用。所以我们最主要的目标是找到磁盘占用大的 docker 容器，然后查找占用磁盘高的原因。我们可以通过下面命令找到磁盘高占用的容器数据卷</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">du</span> -ah --max-depth=1 $(<span class="hljs-built_in">df</span> -h| grep <span class="hljs-string">&quot;100%&quot;</span> | grep -v <span class="hljs-string">&quot;/dev&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $6&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>现在我们知道了具体是哪个文件夹占用了大量的磁盘空间，但是不知道这个文件夹属于哪个容器，我们可以通过下面的命令获取到对应容器信息:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ docker ps -qa | \<br>    xargs docker inspect --format <span class="hljs-string">&#x27;&#123;&#123;.State.Pid&#125;&#125;, &#123;&#123;.Id&#125;&#125;, &#123;&#123;.Name&#125;&#125;, &#123;&#123;.GraphDriver.Data.WorkDir&#125;&#125;&#x27;</span> | \<br>    grep <span class="hljs-string">&quot;684f534ba9f0852967dc1e979756ecc38355ab0dcebb748d39becebe85cc2fae&quot;</span><br></code></pre></td></tr></table></figure><p>上面的命令会打印出这个挂载卷对应的容器信息，至此，我们就可以定位到时那条业务线出了问题，是异常导致大量打印日志？还是系统特性需要很大空间？再根据情况处理磁盘空间不足的问题</p><p>通过这个命令可以找到当前目录下磁盘占用前五的文件夹：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">du</span> -s * | <span class="hljs-built_in">sort</span> -nr | <span class="hljs-built_in">head</span> -5<br></code></pre></td></tr></table></figure><p>通过如下命令可以过滤出含有该磁盘高占用文件夹的容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(docker ps -q );<span class="hljs-keyword">do</span> <br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;echo <span class="hljs-variable">$i</span>&quot;</span><br>  docker inspect <span class="hljs-variable">$i</span>|grep 65f21502d1c560054539ac1d8d12b97d0951e3e4c3f068889cd8b91ef8bca444; <br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>当查了所有文件没有发现大文件，而磁盘占用又巨高，那就尝试下重启 docker 服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ service docker stop <br>$ service docker start<br></code></pre></td></tr></table></figure><p>建议不要 restart，而是 stop 之后在 start</p><p>最后发现我们测试环境磁盘占用主要是程序处理 rabbitmq 的消息失败，rabbitmq 一直会派发需要重试的事件而打印了大量的debug日志。</p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>docker问题解决</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker图形化工具Portainer</title>
    <link href="/2023/06/10/docker/docker%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/Docker%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%B7%A5%E5%85%B7Portainer/"/>
    <url>/2023/06/10/docker/docker%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/Docker%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%B7%A5%E5%85%B7Portainer/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker-图形化工具-Portainer"><a href="#Docker-图形化工具-Portainer" class="headerlink" title="Docker 图形化工具 Portainer:"></a>Docker 图形化工具 Portainer:</h1><p>参考文档：<code>https://blog.csdn.net/m0_67900727/article/details/123550536</code></p><p>Portainer 是一款轻量级的应用，它提供了图形化界面，用于方便地管理Docker环境，包括单机环境和集群环境。</p><h2 id="docker-compose-yaml文件：（只适用于单节点-多节点使用swarm）"><a href="#docker-compose-yaml文件：（只适用于单节点-多节点使用swarm）" class="headerlink" title="docker-compose.yaml文件：（只适用于单节点,多节点使用swarm）"></a>docker-compose.yaml文件：（只适用于单节点,多节点使用swarm）</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.2&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">agent:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.edoc2.com:5000/edoc2v5/portainer-agent:v2.0</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-comment"># REQUIRED: Should be equal to the service name prefixed by &quot;tasks.&quot; when</span><br>      <span class="hljs-comment"># deployed inside an overlay network</span><br>      <span class="hljs-comment">#AGENT_CLUSTER_ADDR: tasks.agent</span><br>      <span class="hljs-attr">AGENT_CLUSTER_ADDR:</span> <span class="hljs-string">agent</span><br>      <span class="hljs-attr">CAP_HOST_MANAGEMENT:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">AGENT_PORT:</span> <span class="hljs-number">9001</span><br>      <span class="hljs-attr">LOG_LEVEL:</span> <span class="hljs-string">debug</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/lib/docker/volumes:/var/lib/docker/volumes</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">agent_network</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">global</span><br>      <span class="hljs-attr">placement:</span><br>        <span class="hljs-attr">constraints:</span> [<span class="hljs-string">node.platform.os</span> <span class="hljs-string">==</span> <span class="hljs-string">linux</span>]<br><br>  <span class="hljs-attr">portainer:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.edoc2.com:5000/edoc2v5/portainer-ce:v2.0</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">-H</span> <span class="hljs-string">tcp://agent:9001</span> <span class="hljs-string">--tlsskipverify</span> <br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9000:9000&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8000:8000&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">agent_network</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">replicated</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">placement:</span><br>        <span class="hljs-attr">constraints:</span> [<span class="hljs-string">node.labels.nodeportainer</span> <span class="hljs-string">==</span> <span class="hljs-string">Portainer</span>]<br>    <br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">agent_network:</span><br><span class="hljs-comment">#    driver: overlay</span><br>    <span class="hljs-attr">attachable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>docker问题解决</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>docker-compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>制作windows镜像导入腾讯云</title>
    <link href="/2023/06/09/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/windows-server/%E5%88%B6%E4%BD%9Cwindows%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    <url>/2023/06/09/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/windows-server/%E5%88%B6%E4%BD%9Cwindows%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5%E8%85%BE%E8%AE%AF%E4%BA%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="制作windows镜像导入腾讯云"><a href="#制作windows镜像导入腾讯云" class="headerlink" title="制作windows镜像导入腾讯云"></a>制作windows镜像导入腾讯云</h1><h2 id="一、安装前：制作镜像时，建议使用原版纯净镜像"><a href="#一、安装前：制作镜像时，建议使用原版纯净镜像" class="headerlink" title="一、安装前：制作镜像时，建议使用原版纯净镜像"></a>一、安装前：制作镜像时，建议使用原版纯净镜像</h2><p>镜像下载地址（国内）：<a href="https://hellowindows.cn/">https://hellowindows.cn/</a></p><h3 id="1-镜像不能使用EFI方式启动，修改虚拟机设置："><a href="#1-镜像不能使用EFI方式启动，修改虚拟机设置：" class="headerlink" title="1.镜像不能使用EFI方式启动，修改虚拟机设置："></a>1.镜像不能使用EFI方式启动，修改虚拟机设置：</h3><p><img src="/2023/06/09/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/windows-server/%E5%88%B6%E4%BD%9Cwindows%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5%E8%85%BE%E8%AE%AF%E4%BA%91/image-20231106142349554.png" alt="image-20231106142349554"></p><h3 id="2-使用vm虚拟机新建一个虚拟机、在安装操作系统-选择“自定义安装时”提示：Windows无法安装到这个磁盘-选中的磁盘采用gpt分区形式。（GPT格式不能上云！）"><a href="#2-使用vm虚拟机新建一个虚拟机、在安装操作系统-选择“自定义安装时”提示：Windows无法安装到这个磁盘-选中的磁盘采用gpt分区形式。（GPT格式不能上云！）" class="headerlink" title="2.使用vm虚拟机新建一个虚拟机、在安装操作系统-选择“自定义安装时”提示：Windows无法安装到这个磁盘,选中的磁盘采用gpt分区形式。（GPT格式不能上云！）"></a>2.使用vm虚拟机新建一个虚拟机、在安装操作系统-选择“自定义安装时”提示：Windows无法安装到这个磁盘,选中的磁盘采用gpt分区形式。（<strong>GPT格式不能上云！</strong>）</h3><h4 id="操作方式：在键盘上按下“Shift-F10”组合键，弹出CMD命令提示符窗口："><a href="#操作方式：在键盘上按下“Shift-F10”组合键，弹出CMD命令提示符窗口：" class="headerlink" title="操作方式：在键盘上按下“Shift+F10”组合键，弹出CMD命令提示符窗口："></a>操作方式：在键盘上按下“Shift+F10”组合键，弹出CMD命令提示符窗口：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>1、输入“list disk”，回车键确定；<br><span class="hljs-comment">#会列出所有的磁盘，记住自己硬盘的磁盘号，通过容量大小就可以分辨了，如下图所示，磁盘0就是我们的硬盘，磁盘1就是U盘</span><br><br><br>2、输入“select disk 0”，回车键确定；<br><span class="hljs-comment">#选择磁盘0，也就是我们的硬盘，就是准备做系统的硬盘</span><br><br>3、输入“clean”，回车键确定；<br><span class="hljs-comment">#清空磁盘，相当于格式化全盘</span><br><br>4、输入“convert mbr”，回车键确定；<br><span class="hljs-comment">#将该硬盘转换为mbr格式，如果想要将硬盘转化为gpt，那就是输入“convert gpt”但是上云时不能用gpt格式</span><br></code></pre></td></tr></table></figure><p>虚拟机安装系统过程已略过！</p><p><img src="/2023/06/09/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/windows-server/%E5%88%B6%E4%BD%9Cwindows%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5%E8%85%BE%E8%AE%AF%E4%BA%91/image-20231103173929650.png" alt="image-20231103173929650"></p><h2 id="二、系统安装后操作："><a href="#二、系统安装后操作：" class="headerlink" title="二、系统安装后操作："></a>二、系统安装后操作：</h2><h3 id="1、开启Administrator账户登录"><a href="#1、开启Administrator账户登录" class="headerlink" title="1、开启Administrator账户登录"></a>1、开启Administrator账户登录</h3><p>参考文档：<a href="https://www.cnblogs.com/pam-sh/p/12239172.html">https://www.cnblogs.com/pam-sh/p/12239172.html</a></p><h4 id="1-1、以管理员身份打开Windows-PowerShell"><a href="#1-1、以管理员身份打开Windows-PowerShell" class="headerlink" title="1.1、以管理员身份打开Windows-PowerShell"></a>1.1、以管理员身份打开Windows-PowerShell</h4><h4 id="1-2、在命令提示符中输入命令“net-user-administrator-x2F-active-yes”后回车"><a href="#1-2、在命令提示符中输入命令“net-user-administrator-x2F-active-yes”后回车" class="headerlink" title="1.2、在命令提示符中输入命令“net user administrator &#x2F;active:yes”后回车"></a>1.2、在命令提示符中输入命令“net user administrator &#x2F;active:yes”后回车</h4><h4 id="1-3、administrator管理员账户已开启，点击任务栏即可切换"><a href="#1-3、administrator管理员账户已开启，点击任务栏即可切换" class="headerlink" title="1.3、administrator管理员账户已开启，点击任务栏即可切换"></a>1.3、administrator管理员账户已开启，点击任务栏即可切换</h4><h4 id="1-4、删除普通账户、使用administrator登录"><a href="#1-4、删除普通账户、使用administrator登录" class="headerlink" title="1.4、删除普通账户、使用administrator登录"></a>1.4、删除普通账户、使用administrator登录</h4><h3 id="2、开启连接远程"><a href="#2、开启连接远程" class="headerlink" title="2、开启连接远程"></a>2、开启连接远程</h3><p>设置&gt;-系统&gt;-远程桌面&#x3D;启用远程桌面</p><p><img src="/2023/06/09/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/windows-server/%E5%88%B6%E4%BD%9Cwindows%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5%E8%85%BE%E8%AE%AF%E4%BA%91/image-20231103174725152.png" alt="image-20231103174725152"></p><h3 id="三、安装腾讯云相关依赖插件"><a href="#三、安装腾讯云相关依赖插件" class="headerlink" title="三、安装腾讯云相关依赖插件"></a>三、安装腾讯云相关依赖插件</h3><p>腾讯云参考文档：<br>1.<a href="https://cloud.tencent.com/document/product/213/17815">https://cloud.tencent.com/document/product/213/17815</a></p><p>2.<a href="https://cloud.tencent.com/document/product/213/30000">https://cloud.tencent.com/document/product/213/30000</a></p><p>3.<a href="https://cloud.tencent.com/document/product/213/4945">https://cloud.tencent.com/document/product/213/4945</a></p><h3 id="四、安装文件助手（需要上传镜像到云上后才可）"><a href="#四、安装文件助手（需要上传镜像到云上后才可）" class="headerlink" title="四、安装文件助手（需要上传镜像到云上后才可）"></a>四、安装文件助手（需要上传镜像到云上后才可）</h3><p>腾讯云参考文档：</p><p>4.<a href="https://www.tencentcloud.com/zh/document/product/1147/46042">https://www.tencentcloud.com/zh/document/product/1147/46042</a></p><p>当出现如下报错时，请打开ie浏览器，再执行！</p><p><img src="/2023/06/09/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/windows-server/%E5%88%B6%E4%BD%9Cwindows%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5%E8%85%BE%E8%AE%AF%E4%BA%91/image-20231103181126446.png" alt="image-20231103181126446"></p><p><img src="/2023/06/09/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/windows-server/%E5%88%B6%E4%BD%9Cwindows%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5%E8%85%BE%E8%AE%AF%E4%BA%91/image-20231103181301933.png" alt="image-20231103181301933"></p>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows设置后台运行某些任务</title>
    <link href="/2023/06/08/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/windows-server/windows%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E6%9F%90%E4%BA%9B%E4%BB%BB%E5%8A%A1/"/>
    <url>/2023/06/08/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/windows-server/windows%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E6%9F%90%E4%BA%9B%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="windows设置后台运行某些任务："><a href="#windows设置后台运行某些任务：" class="headerlink" title="windows设置后台运行某些任务："></a>windows设置后台运行某些任务：</h1><h2 id="一、通过vbs、bat隐藏cmd黑窗口："><a href="#一、通过vbs、bat隐藏cmd黑窗口：" class="headerlink" title="一、通过vbs、bat隐藏cmd黑窗口："></a>一、通过vbs、bat隐藏cmd黑窗口：</h2><h3 id="1、vbs方式："><a href="#1、vbs方式：" class="headerlink" title="1、vbs方式："></a>1、vbs方式：</h3><p>新建一个txt文件，写入如下代码，保存后把后缀改为.vbs</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">Set ws = CreateObject(<span class="hljs-string">&quot;Wscript.Shell&quot;</span>) <br>ws.run <span class="hljs-string">&quot;cmd /c C:\Users\Administrator\Desktop\1.bat&quot;</span>,vbhide<br><br><span class="hljs-comment">#C:\Users\Administrator\Desktop\1.bat</span><br><span class="hljs-comment">#这个地方是要执行的操作，一般是通过cmd执行bat脚本</span><br><br></code></pre></td></tr></table></figure><h3 id="2、bat方式："><a href="#2、bat方式：" class="headerlink" title="2、bat方式："></a>2、bat方式：</h3><p>新建一个txt文件，写入如下代码，保存后把后缀改为.bat</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">@<span class="hljs-built_in">echo</span> off<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;%1&quot;</span> == <span class="hljs-string">&quot;h&quot;</span> goto begin<br>mshta vbscript:createobject(<span class="hljs-string">&quot;wscript.shell&quot;</span>).run(<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;%~nx0&quot;</span><span class="hljs-string">&quot; h&quot;</span>,0)(window.close)&amp;&amp;<span class="hljs-built_in">exit</span><br>:begin<br>REM<br><br><span class="hljs-comment">#REM后面跟着要执行的操作</span><br>例如：<br>REM<br>npc.exe -server=192.168.94.154:9004 -vkey=a414t552315hn2134w -<span class="hljs-built_in">type</span>=tcp<br></code></pre></td></tr></table></figure><h2 id="二、设置开启自启动"><a href="#二、设置开启自启动" class="headerlink" title="二、设置开启自启动"></a>二、设置开启自启动</h2><p>windows 设置bat程序开机自启动<br>第一步：在桌面情况下 按win+R 快捷键，打开运行窗口</p><p>第二步：输入 shell:startup 敲回车</p><p>第三步：将自己的bat程序的快捷方式放置在打开的窗口中即可</p><h2 id="三、通过winsw实现windows服务，实现开机自启动"><a href="#三、通过winsw实现windows服务，实现开机自启动" class="headerlink" title="三、通过winsw实现windows服务，实现开机自启动"></a>三、通过winsw实现windows服务，实现开机自启动</h2><p>#参考文档：<a href="https://blog.csdn.net/qgbihc/article/details/121805661">https://blog.csdn.net/qgbihc/article/details/121805661</a></p><h3 id="1-下载软件-exe与配置文件-xml"><a href="#1-下载软件-exe与配置文件-xml" class="headerlink" title="1.下载软件.exe与配置文件.xml"></a>1.下载软件.exe与配置文件.xml</h3><p>winsw地址：<a href="https://github.com/winsw/winsw/releases">https://github.com/winsw/winsw/releases</a><br>目前稳定版本是v2.11.0，下载链接：<a href="https://github.com/winsw/winsw/releases/tag/v2.11.0">https://github.com/winsw/winsw/releases/tag/v2.11.0</a></p><p>sample-minimal.xml 是一个最小配置的列子。<br>sample-allOptions.xml 是一个全部可配置参数的例子<br>windows10自带了.Net Framework4.0，根据.Net Framework版本下载即可，如：WinSW.NET4.exe</p><p>#以下为测试步骤：实现启动服务，在桌面生成一个txt文件</p><h3 id="2-修改exe名称与xml名称一致，并将所有的文件放在一个文件夹里"><a href="#2-修改exe名称与xml名称一致，并将所有的文件放在一个文件夹里" class="headerlink" title="2.修改exe名称与xml名称一致，并将所有的文件放在一个文件夹里"></a>2.修改exe名称与xml名称一致，并将所有的文件放在一个文件夹里</h3><p>我的这些文件存放在了：&lt;C:\Users\Administrator\Downloads&gt;目录下<br>#目录下文件为：<br>test.exe<br>test.xml<br>test.bat</p><h3 id="3-配置xml文件"><a href="#3-配置xml文件" class="headerlink" title="3.配置xml文件"></a>3.配置xml文件</h3><p>#test.xml文件内容<br><service><br>  <id>test</id><br>  <name>test</name><br>  <description>运行服务，桌面生成test文件</description><br>  <executable>%BASE%\test.bat</executable><br></service></p><p>相关参数说明如下：<br>id：安装windows服务后的服务ID，必须是唯一的。<br>name：服务名称，也必须是唯一的。一般和id一致即可。<br>description：服务说明，可以使用中文，可做备注使用。<br>executable：执行的命令，我这里是执行当前目录下的bat文件，一般建议将启动服务命令写进bat里面</p><p>补充参数：<br><executable>java</executable><br><arguments>-jar api-proj.jar</arguments><br>executable：执行的命令，也可以是启动springboot应用的命令java。<br>arguments：命令执行参数，比如包路径，类路径等。</p><p>#我这边将操作命令写到了bat文件内<br>#test.bat文件内容<br>echo “this is test txt” &gt; C:\Users\Administrator\Desktop\test.txt</p><h3 id="4-安装服务"><a href="#4-安装服务" class="headerlink" title="4.安装服务"></a>4.安装服务</h3><p>以管理员身份执行cmd，切换到exe文件所在目录，执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">test.exe install<br></code></pre></td></tr></table></figure><p>#在exe文件所在目录将会生成日志信息(.log)结尾的</p><p>除install之外，其他命令补充：</p><p>uninstall：删除服务<br>start：启动服务<br>stop：停止服务<br>restart：重启服务<br>status：查看状态</p>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows-server-安装docker、docker-compose</title>
    <link href="/2023/06/07/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/windows-server/windows-server-2022%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85docker/"/>
    <url>/2023/06/07/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/windows-server/windows-server-2022%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85docker/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="windows-server-安装docker、docker-compose"><a href="#windows-server-安装docker、docker-compose" class="headerlink" title="windows-server-安装docker、docker-compose"></a>windows-server-安装docker、docker-compose</h1><h2 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h2><p>windows-server2019参考文档：<a href="https://blog.csdn.net/djx5201314/article/details/101573920">https://blog.csdn.net/djx5201314/article/details/101573920</a><br>windows-server2016参考文档：<a href="https://www.freesion.com/article/90281060193/">https://www.freesion.com/article/90281060193/</a></p><h3 id="1-首先安装-Windows-更新（打开cmd或者powershell）"><a href="#1-首先安装-Windows-更新（打开cmd或者powershell）" class="headerlink" title="1.首先安装 Windows 更新（打开cmd或者powershell）"></a>1.首先安装 Windows 更新（打开cmd或者powershell）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sconfig<br><span class="hljs-comment">#输入6 下载并安装更新</span><br></code></pre></td></tr></table></figure><h3 id="2-进入PowerShell-执行如下命令"><a href="#2-进入PowerShell-执行如下命令" class="headerlink" title="2.进入PowerShell 执行如下命令"></a>2.进入PowerShell 执行如下命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#要运行容器，需要启用容器功能</span><br>Install-WindowsFeature -Name Containers<br><br><span class="hljs-comment">#视情况启用服务器Hyper-V,Containers特性</span><br><span class="hljs-comment">#Install-WindowsFeature -Name Hyper-V,Containers -IncludeAllSubFeature -IncludeManagementTools</span><br><br><br>Install-Module -Name DockerMsftProvider -Repository PSGallery -Force<br></code></pre></td></tr></table></figure><p><strong>执行以上命令显示无法安装时：找不到与指定的搜索条件和程序包名称“DockerProvider”匹配的项目。无法解析安装源,有人抓包后发现是客户端和服务通信用了TLS 1.0。我们可以强制powershell使用TLS1.2进行通信</strong></p><p>使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12<br></code></pre></td></tr></table></figure><p>再重新执行前面命令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">Install-Module -Name DockerMsftProvider -Repository PSGallery -Force<br>Install-Package -Name docker -ProviderName DockerMsftProvider<br></code></pre></td></tr></table></figure><p>询问是否信任包源“DockerDefault”时，键入<code>A </code>以继续进行安装</p><p>如果提示下载不成功，xxx文件不在,可以使用资源管理器导航到路径 <code>C:\Users\ADMINI~1\AppData\Local\Temp\2\DockerMsftProvider</code> 下，会发现里面有个json文件<br>打开该json文件，找到错误文件对应的节点，复制url地址到浏览器下载缺失的文件。</p><p>或者使用powershell执行如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> C:\Users\Administrator\AppData\Local\Temp\2\DockerMsftProvider\<br><br>Start-BitsTransfer -Source 查到的json的url地址<br></code></pre></td></tr></table></figure><p>下载完成后上传到该目录下：<code>C:\Users\Administrator\AppData\Local\Temp\2\DockerMsftProvider\</code><br>执行如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">Get-FileHash -Path C:\Users\Administrator\AppData\Local\Temp\2\DockerMsftProvider\Docker-19-03-1.zip -Algorithm SHA256<br><br>Install-Package -Name docker -ProviderName DockerMsftProvider -Verbose<br></code></pre></td></tr></table></figure><h3 id="3-启动docker"><a href="#3-启动docker" class="headerlink" title="3.启动docker"></a>3.启动docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Start-Service Docker<br></code></pre></td></tr></table></figure><h3 id="4-可以使用以下命令检查已安装的Docker版本："><a href="#4-可以使用以下命令检查已安装的Docker版本：" class="headerlink" title="4.可以使用以下命令检查已安装的Docker版本："></a>4.可以使用以下命令检查已安装的Docker版本：</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">Administrator&gt; Get-<span class="hljs-keyword">Package</span> <span class="hljs-title">-Name Docker -ProviderName DockerMsftProvider</span><br>#使用docker <span class="hljs-comment">--version命令也可以查询到。</span><br><br>可以通过在PowerShell上运行以下命令随时进行升级：<br>Install-<span class="hljs-keyword">Package</span> <span class="hljs-title">-Name Docker -ProviderName DockerMsftProvider -Update -Force</span><br></code></pre></td></tr></table></figure><p>docker的daemon.json配置文件在：<br><code>C:\ProgramData\Docker\config\daemon.json</code></p><h2 id="二、安装docker-compose"><a href="#二、安装docker-compose" class="headerlink" title="二、安装docker-compose"></a>二、安装docker-compose</h2><p>参考文档：<a href="https://blog.csdn.net/qq_37557801/article/details/104467943?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.pc_relevant_default&spm=1001.2101.3001.4242.2&utm_relevant_index=4">https://blog.csdn.net/qq_37557801/article/details/104467943?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.pc_relevant_default&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4</a></p><p>在PowerShell中，由于GitHub现在需要TLS1.2，请运行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12<br></code></pre></td></tr></table></figure><p>然后运行以下命令以下载当前稳定的Compose版本（v1.25.4）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">Invoke-WebRequest <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.25.4/docker-compose-Windows-x86_64.exe&quot;</span> -UseBasicParsing -OutFile <br><br><span class="hljs-variable">$Env</span>:ProgramFiles\Docker\docker-compose.exe<br><span class="hljs-comment">#如果时间较长</span><br>直接下载对应的版本后上传到C:\Program Files\Docker目录下<br></code></pre></td></tr></table></figure><p>验证是否安装成功:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose --version <br></code></pre></td></tr></table></figure><p>注意：如果输入命令显示有误，请设置环境变量</p><h2 id="以上安装以后，无法使用docker-pull镜像时，可试着根据下列的方法：切换启用LinuxKit系统以运行Linux容器"><a href="#以上安装以后，无法使用docker-pull镜像时，可试着根据下列的方法：切换启用LinuxKit系统以运行Linux容器" class="headerlink" title="以上安装以后，无法使用docker pull镜像时，可试着根据下列的方法：切换启用LinuxKit系统以运行Linux容器"></a>以上安装以后，无法使用docker pull镜像时，可试着根据下列的方法：切换启用LinuxKit系统以运行Linux容器</h2><h2 id="在Windows-Server-2019上运行Docker容器"><a href="#在Windows-Server-2019上运行Docker容器" class="headerlink" title="在Windows Server 2019上运行Docker容器"></a>在Windows Server 2019上运行Docker容器</h2><p>windows-service2019参考文档：<a href="https://ywnz.com/linuxjc/4268.html">https://ywnz.com/linuxjc/4268.html</a></p><h3 id="在使用Windows-Containers运行系统的多个独立应用程序之前，你需要启用容器功能并在Windows-Server-2019上安装Docker。"><a href="#在使用Windows-Containers运行系统的多个独立应用程序之前，你需要启用容器功能并在Windows-Server-2019上安装Docker。" class="headerlink" title="在使用Windows Containers运行系统的多个独立应用程序之前，你需要启用容器功能并在Windows Server 2019上安装Docker。"></a>在使用Windows Containers运行系统的多个独立应用程序之前，你需要启用容器功能并在Windows Server 2019上安装Docker。</h3><h3 id="开箱即用，Windows上的Docker只运行Windows容器，要在Windows-Server上使用Linux容器，需要使用Docker-Enterprise-Edition-Preview，其中包含用于运行Docker-Linux容器的完整LinuxKit系统。"><a href="#开箱即用，Windows上的Docker只运行Windows容器，要在Windows-Server上使用Linux容器，需要使用Docker-Enterprise-Edition-Preview，其中包含用于运行Docker-Linux容器的完整LinuxKit系统。" class="headerlink" title="开箱即用，Windows上的Docker只运行Windows容器，要在Windows Server上使用Linux容器，需要使用Docker Enterprise Edition Preview，其中包含用于运行Docker Linux容器的完整LinuxKit系统。"></a>开箱即用，Windows上的Docker只运行Windows容器，要在Windows Server上使用Linux容器，需要使用Docker Enterprise Edition Preview，其中包含用于运行Docker Linux容器的完整LinuxKit系统。</h3><h3 id="1、卸载当前的Docker-CE："><a href="#1、卸载当前的Docker-CE：" class="headerlink" title="1、卸载当前的Docker CE："></a>1、卸载当前的Docker CE：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">Uninstall-Package -Name docker -ProviderName DockerMSFTProvider<br><br><span class="hljs-comment">#如果你使用在Hyper-V上运行的Linux虚拟机运行Docker容器，则启用嵌套虚拟化：</span><br>Get-VM WinContainerHost | Set-VMProcessor -ExposeVirtualizationExtensions <span class="hljs-variable">$true</span><br></code></pre></td></tr></table></figure><h3 id="2、安装Docker-EE的当前预览版本："><a href="#2、安装Docker-EE的当前预览版本：" class="headerlink" title="2、安装Docker EE的当前预览版本："></a>2、安装Docker EE的当前预览版本：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">Install-Module DockerProvider<br><br>Install-Package Docker -ProviderName DockerProvider -RequiredVersion preview<br></code></pre></td></tr></table></figure><h3 id="3、启用LinuxKit系统以运行Linux容器："><a href="#3、启用LinuxKit系统以运行Linux容器：" class="headerlink" title="3、启用LinuxKit系统以运行Linux容器："></a>3、启用LinuxKit系统以运行Linux容器：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Environment]::SetEnvironmentVariable(<span class="hljs-string">&quot;LCOW_SUPPORTED&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;Machine&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="4、更改后重新启动Docker-Service："><a href="#4、更改后重新启动Docker-Service：" class="headerlink" title="4、更改后重新启动Docker Service："></a>4、更改后重新启动Docker Service：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh">Restart-Service docker<br><br>测试一下：<br><br>&gt; docker run -it --<span class="hljs-built_in">rm</span> ubuntu /bin/bash<br><br>root@1440a7fef7e0:/<span class="hljs-comment"># cat /etc/os-release </span><br>NAME=<span class="hljs-string">&quot;Ubuntu&quot;</span><br>VERSION=<span class="hljs-string">&quot;18.04.1 LTS (Bionic Beaver)&quot;</span><br>ID=ubuntu<br>ID_LIKE=debian<br>PRETTY_NAME=<span class="hljs-string">&quot;Ubuntu 18.04.1 LTS&quot;</span><br>VERSION_ID=<span class="hljs-string">&quot;18.04&quot;</span><br>HOME_URL=<span class="hljs-string">&quot;https://www.ubuntu.com/&quot;</span><br>SUPPORT_URL=<span class="hljs-string">&quot;https://help.ubuntu.com/&quot;</span><br>BUG_REPORT_URL=<span class="hljs-string">&quot;https://bugs.launchpad.net/ubuntu/&quot;</span><br>PRIVACY_POLICY_URL=<span class="hljs-string">&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</span><br>VERSION_CODENAME=bionic<br>UBUNTU_CODENAME=bionic<br>root@1440a7fef7e0:/<span class="hljs-comment"># exit</span><br><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h3 id="要切换回运行的Windows容器，请运行："><a href="#要切换回运行的Windows容器，请运行：" class="headerlink" title="要切换回运行的Windows容器，请运行："></a>要切换回运行的Windows容器，请运行：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[Environment]</span>::<span class="hljs-built_in">SetEnvironmentVariable</span>(<span class="hljs-string">&quot;LCOW_SUPPORTED&quot;</span>, <span class="hljs-string">&quot;$null&quot;</span>, <span class="hljs-string">&quot;Machine&quot;</span>)<br><br>至此，在Windows Server <span class="hljs-number">2019</span>上运行Linux容器<br></code></pre></td></tr></table></figure><h2 id="问题处理："><a href="#问题处理：" class="headerlink" title="问题处理："></a>问题处理：</h2><p>PS C:\Users\Administrator&gt; Install-Module -Name DockerMsftProvider -Repository PSGallery -Force<br>Get-PSGalleryApiAvailability : PowerShell 库当前不可用。请稍后再试。<br>所在位置 C:\Program Files\WindowsPowerShell\Modules\PowerShellGet\1.0.0.1\PSModule.psm1:1711 字符: 9</p><ul><li><pre><code class="hljs">    Get-PSGalleryApiAvailability -Repository $Repository</code></pre></li><li><pre><code class="hljs">    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</code></pre><ul><li>CategoryInfo          : InvalidOperation: (:) [Get-PSGalleryApiAvailability]，InvalidOperationException</li><li>FullyQualifiedErrorId : PowerShellGalleryUnavailable,Get-PSGalleryApiAvailability</li></ul></li></ul><p>Get-PSGalleryApiAvailability : PowerShell 库当前不可用。请稍后再试。<br>所在位置 C:\Program Files\WindowsPowerShell\Modules\PowerShellGet\1.0.0.1\PSModule.psm1:4437 字符: 9</p><ul><li><pre><code class="hljs">    Get-PSGalleryApiAvailability -Repository $Name</code></pre></li><li><pre><code class="hljs">    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</code></pre><ul><li>CategoryInfo          : InvalidOperation: (:) [Get-PSGalleryApiAvailability]，InvalidOperationException</li><li>FullyQualifiedErrorId : PowerShellGalleryUnavailable,Get-PSGalleryApiAvailability</li></ul></li></ul><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>以管理员身份打开powershell，依次输入以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12<br>Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force<br>Install-Module posh-ssh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu系统安装Docker</title>
    <link href="/2023/06/06/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Ubuntu%E7%B3%BB%E7%BB%9F/Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Docker/"/>
    <url>/2023/06/06/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Ubuntu%E7%B3%BB%E7%BB%9F/Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Docker/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu系统安装Docker"><a href="#Ubuntu系统安装Docker" class="headerlink" title="Ubuntu系统安装Docker"></a>Ubuntu系统安装Docker</h1><h2 id="1-更新系统，并安装相关依赖"><a href="#1-更新系统，并安装相关依赖" class="headerlink" title="1.更新系统，并安装相关依赖"></a>1.更新系统，并安装相关依赖</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt update  <br>sudo apt upgrade  <br>sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common<br></code></pre></td></tr></table></figure><h2 id="2-导入Docker-GPG密钥"><a href="#2-导入Docker-GPG密钥" class="headerlink" title="2.导入Docker-GPG密钥"></a>2.导入Docker-GPG密钥</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#官方源（国内推荐用阿里源和清华源）</span><br>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -  <br><span class="hljs-comment">#阿里源：</span><br>curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | apt-key add -<br><span class="hljs-comment">#清华源：</span><br>sudo add-apt-repository <span class="hljs-string">&quot;deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-添加Docker软件源"><a href="#3-添加Docker软件源" class="headerlink" title="3.添加Docker软件源"></a>3.添加Docker软件源</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#官方源（国内推荐用阿里源和清华源）</span><br>add-apt-repository <span class="hljs-string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span> <br><br><span class="hljs-comment">#阿里云docker源</span><br>add-apt-repository <span class="hljs-string">&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span><br><br><span class="hljs-comment">#清华docker源：</span><br>sudo add-apt-repository <span class="hljs-string">&quot;deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span><br></code></pre></td></tr></table></figure><p>阿里云apt源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/aliyun.list<br></code></pre></td></tr></table></figure><h2 id="4-安装并启动Docker-CE"><a href="#4-安装并启动Docker-CE" class="headerlink" title="4.安装并启动Docker-CE"></a>4.安装并启动Docker-CE</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt update <br><br>apt install -y docker-ce docker-ce-cli containerd.io  <br>systemctl start docker  <br>systemctl status docker <br>systemctl <span class="hljs-built_in">enable</span> docker<br><br>docker --version<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>liunx</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>liunx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从Centos-7迁移到RockyLinux-8.8的教程</title>
    <link href="/2023/06/05/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Rockyliunx/centos7%E8%BF%81%E7%A7%BB%E5%88%B0Rockylinux/"/>
    <url>/2023/06/05/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Rockyliunx/centos7%E8%BF%81%E7%A7%BB%E5%88%B0Rockylinux/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="从Centos-7迁移到RockyLinux-8-8的教程"><a href="#从Centos-7迁移到RockyLinux-8-8的教程" class="headerlink" title="从Centos-7迁移到RockyLinux-8.8的教程"></a>从Centos-7迁移到RockyLinux-8.8的教程</h1><p>参考文档：<a href="https://zhuanlan.zhihu.com/p/571385318">https://zhuanlan.zhihu.com/p/571385318</a></p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><ul><li>CentOS 8 已在 2021 年31日结束支持，CentOS 7 由于用户基数与用户贡献较多，因此会按照计划维护至生命周期结束即 2024 年 6 月 30 日，接下来一年会把重心放到 CentOS Stream 上。由于CentOS Stream相对不稳定，因此很多朋友会有从Centos7迁移至RockyLinux-8的需求。写此教程就是帮助有类似需求的朋友更好的迁移到RockyLinux上。</li><li>Rocky Linux是Red Hat Enterprise Linux的一个分支，它位于Red Hat Enterprise Linux或RHEL的下游。与CentOS一样，它提供了一个稳定的Linux版本，非常适合服务器。它旨在作为CentOS的兼容替代。</li><li>Rocky Linux是由CentOS创始人Gregory Kurtzer创建的，Rocky Linux 8和CentOS 8、Red Hat Enterprise Linux8是完全兼容的。</li></ul><p><strong>如果在正式环境升级，请做好数据备份以及重要配置备份！</strong></p><h2 id="1-安装epel源"><a href="#1-安装epel源" class="headerlink" title="1.安装epel源"></a>1.安装epel源</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install epel-release<br></code></pre></td></tr></table></figure><h2 id="2-更新系统至最新版本，防止升级时出现各种奇葩问题"><a href="#2-更新系统至最新版本，防止升级时出现各种奇葩问题" class="headerlink" title="2.更新系统至最新版本，防止升级时出现各种奇葩问题"></a>2.更新系统至最新版本，防止升级时出现各种奇葩问题</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y update<br></code></pre></td></tr></table></figure><h2 id="3-重启系统"><a href="#3-重启系统" class="headerlink" title="3.重启系统"></a>3.重启系统</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">reboot<br></code></pre></td></tr></table></figure><h2 id="4-安装rpmconf和yum-utils"><a href="#4-安装rpmconf和yum-utils" class="headerlink" title="4.安装rpmconf和yum-utils"></a>4.安装rpmconf和yum-utils</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install rpmconf yum-utils<br></code></pre></td></tr></table></figure><h2 id="5-执行rpmconf-，如果出现一些提示，请输入Y和回车继续，如果没提示继续第四步操作"><a href="#5-执行rpmconf-，如果出现一些提示，请输入Y和回车继续，如果没提示继续第四步操作" class="headerlink" title="5.执行rpmconf ，如果出现一些提示，请输入Y和回车继续，如果没提示继续第四步操作"></a>5.执行rpmconf ，如果出现一些提示，请输入Y和回车继续，如果没提示继续第四步操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rpmconf -a<br></code></pre></td></tr></table></figure><h2 id="6-安装dnf"><a href="#6-安装dnf" class="headerlink" title="6.安装dnf"></a>6.安装dnf</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install dnf<br></code></pre></td></tr></table></figure><h2 id="7-移除yum和yum-metadata-parser"><a href="#7-移除yum和yum-metadata-parser" class="headerlink" title="7.移除yum和yum-metadata-parser"></a>7.移除yum和yum-metadata-parser</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">dnf -y remove yum yum-metadata-parser<br></code></pre></td></tr></table></figure><h2 id="8-安装RockyLinux8的源和升级epel源"><a href="#8-安装RockyLinux8的源和升级epel源" class="headerlink" title="8.安装RockyLinux8的源和升级epel源"></a>8.安装RockyLinux8的源和升级epel源</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rpm -e --nodeps `rpm -qa|grep centos-`<br></code></pre></td></tr></table></figure><p><img src="/2023/06/05/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Rockyliunx/centos7%E8%BF%81%E7%A7%BB%E5%88%B0Rockylinux/v2-1c65b4ba4fdedf7947cf50d3e784f875_720w.webp" alt="img"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">rpm -ivh --nodeps --force https://mirrors.aliyun.com/rockylinux/8/BaseOS/x86_64/os/Packages/r/rocky-release-8.8-1.7.el8.noarch.rpm<br>rpm -ivh --nodeps  --force https://mirrors.aliyun.com/rockylinux/8/BaseOS/x86_64/os/Packages/r/rocky-repos-8.8-1.7.el8.noarch.rpm<br>rpm -ivh --nodeps --force https://mirrors.aliyun.com/rockylinux/8/BaseOS/x86_64/os/Packages/r/rocky-gpg-keys-8.8-1.7.el8.noarch.rpm<br>dnf -y upgrade https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm<br><br>dnf clean all<br></code></pre></td></tr></table></figure><h2 id="9-卸载centos7的内核及修改python编码"><a href="#9-卸载centos7的内核及修改python编码" class="headerlink" title="9.卸载centos7的内核及修改python编码"></a>9.卸载centos7的内核及修改python编码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rpm -e --nodeps `rpm -qa|grep -i kernel`<br></code></pre></td></tr></table></figure><p>修改python2编码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /usr/lib/python2.7/site-packages/sitecustomize.py<br><br><span class="hljs-comment">##添加如下代码</span><br><span class="hljs-comment"># encoding=utf8   </span><br>import sys   <br> <br>reload(sys)   <br>sys.setdefaultencoding(<span class="hljs-string">&#x27;utf8&#x27;</span>)   <br><span class="hljs-comment"># encoding=utf8  import sys    reload(sys)  sys.setdefaultencoding(&#x27;utf8&#x27;) </span><br></code></pre></td></tr></table></figure><h2 id="10-升级到RockyLinux8，这一步一般会报错，如果没有报错请进行第10步操作"><a href="#10-升级到RockyLinux8，这一步一般会报错，如果没有报错请进行第10步操作" class="headerlink" title="10.升级到RockyLinux8，这一步一般会报错，如果没有报错请进行第10步操作"></a>10.升级到RockyLinux8，这一步一般会报错，如果没有报错请进行第10步操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">dnf -y --releasever=8 --allowerasing --<span class="hljs-built_in">setopt</span>=deltarpm=<span class="hljs-literal">false</span> distro-sync<br></code></pre></td></tr></table></figure><p>执行完上面的命令之后如果报下面的错!请把红框内的包名，找到本地路径！</p><p><img src="/2023/06/05/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Rockyliunx/centos7%E8%BF%81%E7%A7%BB%E5%88%B0Rockylinux/image-20230705181255532.png" alt="image-20230705181255532"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">find /var/cache/dnf/ -name *mariadb-connector-c-3.1.11-2.el8_3.x86_64*<br></code></pre></td></tr></table></figure><p><img src="/2023/06/05/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Rockyliunx/centos7%E8%BF%81%E7%A7%BB%E5%88%B0Rockylinux/image-20230705181431869.png" alt="image-20230705181431869"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rpm -ivh --nodeps --force /var/cache/dnf/appstream-62ae9a0bbea44fbe/packages/mariadb-connector-c-3.1.11-2.el8_3.x86_64.rpm<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#多个包，重复步骤</span><br>find /var/cache/dnf/ -name *dracut-network-049-223.git20230119.el8.x86_64*<br><br>rpm -ivh --nodeps --force /var/cache/dnf/baseos-3e608afeebc9a90b/packages/dracut-network-049-223.git20230119.el8.x86_64.rpm<br><br></code></pre></td></tr></table></figure><p><img src="/2023/06/05/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Rockyliunx/centos7%E8%BF%81%E7%A7%BB%E5%88%B0Rockylinux/image-20230706100402115.png" alt="image-20230706100402115"></p><p>重新执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">dnf -y --releasever=8 --allowerasing --<span class="hljs-built_in">setopt</span>=deltarpm=<span class="hljs-literal">false</span> distro-sync<br></code></pre></td></tr></table></figure><p>重新执行后，发现有相关报错，需卸载from package 后面的包名</p><p><img src="/2023/06/05/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Rockyliunx/centos7%E8%BF%81%E7%A7%BB%E5%88%B0Rockylinux/image-20230706100503559.png" alt="image-20230706100503559"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">rpm -e --nodeps sysvinit-tools-2.88-14.dsf.el7.x86_64<br>rpm -e --nodeps python36-rpmconf-1.1.7-1.el7.1.noarch<br></code></pre></td></tr></table></figure><p>卸载完成后再次执行升级：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">dnf -y --releasever=8 --allowerasing --<span class="hljs-built_in">setopt</span>=deltarpm=<span class="hljs-literal">false</span> distro-sync<br></code></pre></td></tr></table></figure><h2 id="11-执行rpmconf，会出现如下界面，一直输入Y和回车即可"><a href="#11-执行rpmconf，会出现如下界面，一直输入Y和回车即可" class="headerlink" title="11.执行rpmconf，会出现如下界面，一直输入Y和回车即可"></a>11.执行rpmconf，会出现如下界面，一直输入Y和回车即可</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rpmconf -a<br></code></pre></td></tr></table></figure><h2 id="12-安装内核（防止有些时候没安装内核开机失败，开机失败的可以用RockyLinux-8-ISO镜像救援模式安装内核）"><a href="#12-安装内核（防止有些时候没安装内核开机失败，开机失败的可以用RockyLinux-8-ISO镜像救援模式安装内核）" class="headerlink" title="12.安装内核（防止有些时候没安装内核开机失败，开机失败的可以用RockyLinux-8 ISO镜像救援模式安装内核）"></a>12.安装内核（防止有些时候没安装内核开机失败，开机失败的可以用RockyLinux-8 ISO镜像救援模式安装内核）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">dnf -y install kernel kernel-core <br>dnf -y install shim grub2-tools-extra grubby grub2-common grub2-pc <br>dnf -y install grub2-tools-efi grub2-tools-minimal grub2-efi grub2-pc-modules grub2-tools<br></code></pre></td></tr></table></figure><h2 id="13-执行下面的命令，防止迁移完成后找不到引导，重启开不了机，根据以下命令选择分区表类型，根据分区表类型执行相关命令"><a href="#13-执行下面的命令，防止迁移完成后找不到引导，重启开不了机，根据以下命令选择分区表类型，根据分区表类型执行相关命令" class="headerlink" title="13.执行下面的命令，防止迁移完成后找不到引导，重启开不了机，根据以下命令选择分区表类型，根据分区表类型执行相关命令"></a>13.执行下面的命令，防止迁移完成后找不到引导，重启开不了机，根据以下命令选择分区表类型，根据分区表类型执行相关命令</h2><p>查看分区表类型</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">fdisk -l<br></code></pre></td></tr></table></figure><p>MBR分区表</p><p><img src="/2023/06/05/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Rockyliunx/centos7%E8%BF%81%E7%A7%BB%E5%88%B0Rockylinux/image-20230706152037755.png" alt="image-20230706152037755"></p><p>MBR分区（传统的BIOS、dos、msdos）（注意&#x2F;dev&#x2F;sda需根据实际情况自行选择磁盘路径，具体参考上图）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">grub2-mkconfig -o /boot/grub2/grub.cfg <br>grub2-install /dev/sda<br></code></pre></td></tr></table></figure><p>GPT分区表（UFFI的BIOS）</p><p><img src="/2023/06/05/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Rockyliunx/centos7%E8%BF%81%E7%A7%BB%E5%88%B0Rockylinux/image-20230706154616069.png" alt="image-20230706154616069"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> grubcfg=`find /boot/ -name rocky`<br>grub2-mkconfig -o <span class="hljs-variable">$grubcfg</span>/grub.cfg<br><span class="hljs-built_in">rm</span> -rf `find /boot/ -name centos`<br></code></pre></td></tr></table></figure><p>添加UEFI启动项（注意&#x2F;dev&#x2F;nvme0n1为efi分区所在磁盘，需根据实际情况自行选择磁盘路径，具体参考上图,-p后面是分区位置（默认为1）,efi分区为&#x2F;dev&#x2F;nvme0n1p1值就是1,efi分区为&#x2F;dev&#x2F;nvme0n1p2值就是2）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">efibootmgr -c -w -L <span class="hljs-string">&quot;RockyLinux&quot;</span> -d /dev/nvme0n1 -p 1 -l \\EFI\\Boot\\bootx64.efi<br></code></pre></td></tr></table></figure><h2 id="14-选择性执行-，解决安装yum报错。"><a href="#14-选择性执行-，解决安装yum报错。" class="headerlink" title="14.(选择性执行)，解决安装yum报错。"></a>14.(选择性执行)，解决安装yum报错。</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">rm</span>- rf /etc/yum<br></code></pre></td></tr></table></figure><h2 id="15-安装基础环境"><a href="#15-安装基础环境" class="headerlink" title="15.安装基础环境"></a>15.安装基础环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">dnf -y groupinstall <span class="hljs-string">&quot;Minimal Install&quot;</span><br></code></pre></td></tr></table></figure><h2 id="16-重启机器"><a href="#16-重启机器" class="headerlink" title="16.重启机器"></a>16.重启机器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">reboot<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>liunx</category>
      
      <category>RockyLinux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>liunx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rockyliunx安装docker</title>
    <link href="/2023/06/05/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Rockyliunx/rockyliunx%E5%AE%89%E8%A3%85docker/"/>
    <url>/2023/06/05/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Rockyliunx/rockyliunx%E5%AE%89%E8%A3%85docker/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="rockyliunx安装docker"><a href="#rockyliunx安装docker" class="headerlink" title="rockyliunx安装docker"></a>rockyliunx安装docker</h1><p><strong>与centos安装docker一致，但是一个是用yum，一个使用dnf</strong></p><h2 id="1-安装docker源"><a href="#1-安装docker源" class="headerlink" title="1.安装docker源"></a>1.安装docker源</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">dnf install -y dnf-plugins-core<br><br>sudo dnf config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br><span class="hljs-comment">##或者</span><br><span class="hljs-built_in">cat</span> &gt;/etc/yum.repos.d/docker.repo&lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[docker-ce-edge]</span><br><span class="hljs-string">name=Docker CE Edge - \$basearch</span><br><span class="hljs-string">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/\$basearch/edge</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment">##或者</span><br><br></code></pre></td></tr></table></figure><h2 id="2-安装docker"><a href="#2-安装docker" class="headerlink" title="2.安装docker"></a>2.安装docker</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">dnf install -y docker-ce \<br>docker-ce-cli \<br>containerd.io \<br>docker-compose-plugin<br></code></pre></td></tr></table></figure><h2 id="3-启动docker并设置开机自动启动"><a href="#3-启动docker并设置开机自动启动" class="headerlink" title="3.启动docker并设置开机自动启动"></a>3.启动docker并设置开机自动启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start docker<br><br>systemctl <span class="hljs-built_in">enable</span> docker.service<br></code></pre></td></tr></table></figure><h2 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">dnf remove -y docker docker-client-latestnt \<br>docker-client-latest docker-common \<br>docker-latest docker-latest-logrotate \<br>docker-logrotate docker-selinux \<br>docker-engine-selinux docker-engine<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>liunx</category>
      
      <category>RockyLinux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>liunx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql自有方式采集获取监控数据</title>
    <link href="/2023/06/04/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/Mysql%E8%87%AA%E6%9C%89%E6%96%B9%E5%BC%8F%E9%87%87%E9%9B%86%E8%8E%B7%E5%8F%96%E7%9B%91%E6%8E%A7%E6%95%B0%E6%8D%AE/"/>
    <url>/2023/06/04/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/Mysql%E8%87%AA%E6%9C%89%E6%96%B9%E5%BC%8F%E9%87%87%E9%9B%86%E8%8E%B7%E5%8F%96%E7%9B%91%E6%8E%A7%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mysql自有方式采集获取监控数据"><a href="#Mysql自有方式采集获取监控数据" class="headerlink" title="Mysql自有方式采集获取监控数据"></a>Mysql自有方式采集获取监控数据</h1><p>参考文档：<a href="https://mp.weixin.qq.com/s/XWaagdDVXhQxZtFrfiSErA">https://mp.weixin.qq.com/s/XWaagdDVXhQxZtFrfiSErA</a></p><p>对于当前数据库的监控方式有很多，分为数据库<code>自带</code>、<code>商用</code>、<code>开源</code>三大类，每一种都有各自的特色；而对于 mysql 数据库由于其有很高的社区活跃度，监控方式更是多种多样，不管哪种监控方式<strong>最核心的就是监控数据</strong>，获取得到全面的监控数据后就是灵活的展示部分。</p><p>那我们今天就介绍一下完全采用 mysql 自有方式采集获取监控数据，在单体下达到最快速、方便、损耗最小。</p><p>本次文章完全使用 mysql 自带的 show 命令实现获取，从 <code>connects</code>、<code>buffercache</code>、<code>lock</code>、<code>SQ</code>L、<code>statement</code>、<code>Database throughputs</code>、<code>serverconfig</code> 7 大方面全面获取监控数据。</p><h2 id="一、连接数（Connects）"><a href="#一、连接数（Connects）" class="headerlink" title="一、连接数（Connects）"></a>一、连接数（Connects）</h2><h3 id="最大使用连接数："><a href="#最大使用连接数：" class="headerlink" title="最大使用连接数："></a>最大使用连接数：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show status like ‘Max_used_connections’<br></code></pre></td></tr></table></figure><h3 id="当前打开的连接数："><a href="#当前打开的连接数：" class="headerlink" title="当前打开的连接数："></a>当前打开的连接数：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show status like ‘Threads_connected’<br></code></pre></td></tr></table></figure><h2 id="二、缓存（bufferCache）"><a href="#二、缓存（bufferCache）" class="headerlink" title="二、缓存（bufferCache）"></a>二、缓存（bufferCache）</h2><h3 id="未从缓冲池读取的次数："><a href="#未从缓冲池读取的次数：" class="headerlink" title="未从缓冲池读取的次数："></a>未从缓冲池读取的次数：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show status like ‘Innodb_buffer_pool_reads’<br></code></pre></td></tr></table></figure><h3 id="从缓冲池读取的次数："><a href="#从缓冲池读取的次数：" class="headerlink" title="从缓冲池读取的次数："></a>从缓冲池读取的次数：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show status like ‘Innodb_buffer_pool_read_requests’<br></code></pre></td></tr></table></figure><h3 id="缓冲池的总页数："><a href="#缓冲池的总页数：" class="headerlink" title="缓冲池的总页数："></a>缓冲池的总页数：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show status like ‘Innodb_buffer_pool_pages_total’<br></code></pre></td></tr></table></figure><h3 id="缓冲池空闲的页数："><a href="#缓冲池空闲的页数：" class="headerlink" title="缓冲池空闲的页数："></a>缓冲池空闲的页数：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show status like ‘Innodb_buffer_pool_pages_free’<br></code></pre></td></tr></table></figure><h3 id="缓存命中率计算："><a href="#缓存命中率计算：" class="headerlink" title="缓存命中率计算："></a>缓存命中率计算：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">（1-Innodb_buffer_pool_reads/Innodb_buffer_pool_read_requests）*100%<br></code></pre></td></tr></table></figure><h3 id="缓存池使用率为："><a href="#缓存池使用率为：" class="headerlink" title="缓存池使用率为："></a>缓存池使用率为：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">((Innodb_buffer_pool_pages_total-Innodb_buffer_pool_pages_free）/Innodb_buffer_pool_pages_total）*<span class="hljs-number">100</span>%<br></code></pre></td></tr></table></figure><h2 id="三、锁（lock）"><a href="#三、锁（lock）" class="headerlink" title="三、锁（lock）"></a>三、锁（lock）</h2><h3 id="锁等待个数："><a href="#锁等待个数：" class="headerlink" title="锁等待个数："></a>锁等待个数：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show status like ‘Innodb_row_lock_waits’<br></code></pre></td></tr></table></figure><h3 id="平均每次锁等待时间："><a href="#平均每次锁等待时间：" class="headerlink" title="平均每次锁等待时间："></a>平均每次锁等待时间：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show status like ‘Innodb_row_lock_time_avg’<br></code></pre></td></tr></table></figure><h3 id="查看是否存在表锁："><a href="#查看是否存在表锁：" class="headerlink" title="查看是否存在表锁："></a>查看是否存在表锁：</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">open</span> <span class="hljs-keyword">TABLES</span> <span class="hljs-keyword">where</span> in_use&gt;<span class="hljs-number">0</span>；<br></code></pre></td></tr></table></figure><h3 id="有数据代表存在锁表，空为无表锁"><a href="#有数据代表存在锁表，空为无表锁" class="headerlink" title="有数据代表存在锁表，空为无表锁"></a>有数据代表存在锁表，空为无表锁</h3><p><strong>备注</strong>：锁等待统计得数量为累加数据，每次获取得时候可以跟之前得数据进行相减，得到当前统计得数据</p><h2 id="四、SQL"><a href="#四、SQL" class="headerlink" title="四、SQL"></a>四、SQL</h2><h3 id="查看-mysql-开关是否打开："><a href="#查看-mysql-开关是否打开：" class="headerlink" title="查看 mysql 开关是否打开："></a>查看 mysql 开关是否打开：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">show variables like <span class="hljs-string">&#x27;slow_query_log&#x27;</span>；<br><span class="hljs-comment">#ON 为开启状态，如果为 OFF，`set global slow_query_log=1` 进行开启</span><br></code></pre></td></tr></table></figure><h3 id="查看-mysql-阈值："><a href="#查看-mysql-阈值：" class="headerlink" title="查看 mysql 阈值："></a>查看 mysql 阈值：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show variables like ‘long_query_time’；<br></code></pre></td></tr></table></figure><p> 根据页面传递阈值参数，修改阈值 <code>set global long_query_time=0.1</code></p><h3 id="查看-mysql-慢-sql-目录："><a href="#查看-mysql-慢-sql-目录：" class="headerlink" title="查看 mysql 慢 sql 目录："></a>查看 mysql 慢 sql 目录：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show variables like ‘slow_query_log_file’；<br></code></pre></td></tr></table></figure><h3 id="格式化慢-sql-日志："><a href="#格式化慢-sql-日志：" class="headerlink" title="格式化慢 sql 日志："></a>格式化慢 sql 日志：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysqldumpslow -s at -t 10 /export/data/mysql/log/slow.log<br></code></pre></td></tr></table></figure><p>注：此语句通过 jdbc 执行不了，属于命令行执行。</p><p>意思为：显示出耗时最长的 10 个 SQL 语句执行信息，10 可以修改为 TOP 个数。显示的信息为：执行次数、平均执行时间、SQL 语句</p><p>备注：当 mysqldumpslow 命令执行失败时，将慢日志同步到本地进行格式化处理。</p><h2 id="五、statement"><a href="#五、statement" class="headerlink" title="五、statement"></a>五、statement</h2><p>insert 数量：<code>show status like ‘Com_insert’</code></p><p>delete 数量：<code>show status like ‘Com_delete’</code></p><p>update 数量：<code>show status like ‘Com_update’</code></p><p>select 数量：<code>show status like ‘Com_select’</code></p><h2 id="六、吞吐（Database-throughputs）"><a href="#六、吞吐（Database-throughputs）" class="headerlink" title="六、吞吐（Database throughputs）"></a>六、吞吐（Database throughputs）</h2><p>发送吞吐量：<code>show status like ‘Bytes_sent’</code></p><p>接收吞吐量：<code>show status like ‘Bytes_received’</code></p><p>总吞吐量：<code>Bytes_sent+Bytes_received</code></p><h2 id="七、数据库参数（serverconfig）"><a href="#七、数据库参数（serverconfig）" class="headerlink" title="七、数据库参数（serverconfig）"></a>七、数据库参数（serverconfig）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show variables<br></code></pre></td></tr></table></figure><h2 id="八、慢-SQL"><a href="#八、慢-SQL" class="headerlink" title="八、慢 SQL"></a>八、慢 SQL</h2><p>慢 SQL 指的是 MySQL 慢查询，具体指运行时间超过 long_query_time 值的 SQL。</p><p>我们常听 MySQL 中有二进制日志 binlog、中继日志 relaylog、重做回滚日志 redolog、undolog 等。针对慢查询，还有一种慢查询日志 slowlog，用来记录在 MySQL 中响应时间超过阀值的语句。</p><p>慢 SQL 对实际生产业务影响是致命的，所以测试人员在性能测试过程中，对数据库 SQL 语句执行情况实施监控，给开发提供准确的性能优化意见显得尤为重要。那怎么使用 Mysql 数据库提供的慢查询日志来监控 SQL 语句执行情况，找到消耗较高的 SQL 语句，以下详细说明一下慢查询日志的使用步骤：</p><ul><li>确保打开慢 SQL 开关 <code>slow_query_log</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">show variables like <span class="hljs-string">&#x27;slow_query_log&#x27;</span><br><span class="hljs-comment">#查询出来结果是ON</span><br></code></pre></td></tr></table></figure><ul><li>设置慢 SQL 域值 <code>long_query_time</code></li></ul><p>这个 long_query_time 是用来定义慢于多少秒的才算 “慢查询”，注意单位是秒，通过执行 sql 指令 <code>set long_query_time=1 </code>来设置 long_query_time 的值为 1, 也就是执行时间超过 1 秒的都算慢查询</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show variables like <span class="hljs-string">&#x27;long_query_time&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>查看慢 SQL 日志路径</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show variables like <span class="hljs-string">&#x27;slow_query_log_file&#x27;</span><br></code></pre></td></tr></table></figure><p>通过慢 sql 分析工具 mysqldumpslow 格式化分析慢 SQL 日志 mysqldumpslow 慢查询分析工具，是 mysql 安装后自带的，可以通过<code>./mysqldumpslow —help</code> 查看使用参数说明</p><h3 id="常见用法："><a href="#常见用法：" class="headerlink" title="常见用法："></a>常见用法：</h3><h4 id="取出使用最多的-10-条慢查询"><a href="#取出使用最多的-10-条慢查询" class="headerlink" title="取出使用最多的 10 条慢查询"></a>取出使用最多的 10 条慢查询</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./mysqldumpslow -s c -t 10 /export/data/mysql/log/slow.log<br></code></pre></td></tr></table></figure><h4 id="取出查询时间最慢的-3-条慢查询"><a href="#取出查询时间最慢的-3-条慢查询" class="headerlink" title="取出查询时间最慢的 3 条慢查询"></a>取出查询时间最慢的 3 条慢查询</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./mysqldumpslow -s t -t 3 /export/data/mysql/log/slow.log<br></code></pre></td></tr></table></figure><p>注意：使用 mysqldumpslow 的分析结果不会显示具体完整的 sql 语句，只会显示 sql 的组成结构；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">假如: SELECT FROM sms_send WHERE service_id=10 GROUP BY content LIMIT 0, 1000;<br>mysqldumpslow 命令执行后显示：<br>Count: 2 Time=1.5s (3s) Lock=0.00s (0s) Rows=1000.0 (2000), vgos_dba[vgos_dba]@[10.130.229.196]SELECT FROM sms_send WHERE service_id=N GROUP BY content LIMIT N, N<br></code></pre></td></tr></table></figure><p>mysqldumpslow 的分析结果详解：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">Count：表示该类型的语句执行次数，上图中表示 select 语句执行了 2 次。<br>Time：表示该类型的语句执行的平均时间（总计时间）<br>Lock：锁时间 0s。<br>Rows：单次返回的结果数是 1000 条记录，2 次总共返回 2000 条记录。<br></code></pre></td></tr></table></figure><p>通过这个工具就可以查询出来哪些 sql 语句是慢 SQL，从而反馈研发进行优化，比如加索引，该应用的实现方式等。</p><h2 id="九、常见慢-SQL-排查"><a href="#九、常见慢-SQL-排查" class="headerlink" title="九、常见慢 SQL 排查"></a>九、常见慢 SQL 排查</h2><h3 id="不使用子查询"><a href="#不使用子查询" class="headerlink" title="不使用子查询"></a>不使用子查询</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">SELECT FROM t1 WHERE <span class="hljs-built_in">id</span> (SELECT <span class="hljs-built_in">id</span> FROM t2 WHERE name=’hechunyang’);<br></code></pre></td></tr></table></figure><p>子查询在 MySQL5.5 版本里，内部执行计划器是这样执行的：先查外表再匹配内表，而不是先查内表 t2，当外表的数据很大时，查询速度会非常慢。</p><p>在 MariaDB10&#x2F;MySQL5.6 版本里，采用 join 关联方式对其进行了优化，这条 SQL 会自动转换为 <code>SELECT t1. FROM t1 JOIN t2 ON t1.id = t2.id;</code></p><p>但请注意的是：优化只针对 SELECT 有效，对 UPDATE&#x2F;DELETE 子 查询无效， 生产环境尽量应避免使用子查询。</p><h3 id="避免函数索引"><a href="#避免函数索引" class="headerlink" title="避免函数索引"></a>避免函数索引</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">SELECT FROM t WHERE YEAR(d) &gt;= 2016;<br></code></pre></td></tr></table></figure><p>由于 MySQL 不像 Oracle 那样⽀持函数索引，即使 d 字段有索引，也会直接全表扫描。</p><p>应改为 &gt; <code>SELECT FROM t WHERE d &gt;= ‘2016-01-01’;</code></p><h3 id="用-IN-来替换-OR-低效查询"><a href="#用-IN-来替换-OR-低效查询" class="headerlink" title="用 IN 来替换 OR 低效查询"></a>用 IN 来替换 OR 低效查询</h3><p>慢 <code>SELECT FROM t WHERE LOC_ID = 10 OR LOC_ID = 20 OR LOC_ID = 30;</code></p><p>高效查询 &gt; <code>SELECT FROM t WHERE LOC_IN IN (10,20,30);</code></p><h3 id="LIKE-双百分号无法使用到索引"><a href="#LIKE-双百分号无法使用到索引" class="headerlink" title="LIKE 双百分号无法使用到索引"></a>LIKE 双百分号无法使用到索引</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">SELECT FROM t WHERE name LIKE ‘%de%’;<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">SELECT FROM t WHERE name LIKE ‘de%’;<br></code></pre></td></tr></table></figure><h3 id="分组统计可以禁止排序"><a href="#分组统计可以禁止排序" class="headerlink" title="分组统计可以禁止排序"></a>分组统计可以禁止排序</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">SELECT goods_id,count() FROM t GROUP BY goods_id;<br></code></pre></td></tr></table></figure><p>默认情况下，MySQL 对所有 GROUP BY col1，col2… 的字段进⾏排序。如果查询包括 GROUP BY，想要避免排序结果的消耗，则可以指定 ORDER BY NULL 禁止排序。</p><p>使用 <code>SELECT goods_id,count () FROM t GROUP BY goods_id ORDER BY NULL;</code></p><h3 id="禁止不必要的-ORDER-BY-排序"><a href="#禁止不必要的-ORDER-BY-排序" class="headerlink" title="禁止不必要的 ORDER BY 排序"></a>禁止不必要的 ORDER BY 排序</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">SELECT count(1) FROM user u LEFT JOIN user_info i ON u.id = i.user_id WHERE 1 = 1 ORDER BY u.create_time DESC;<br></code></pre></td></tr></table></figure><p>使用 <code>SELECT count (1) FROM user u LEFT JOIN user_info i ON u.id = i.user_id;</code></p><h2 id="十、总结"><a href="#十、总结" class="headerlink" title="十、总结"></a>十、总结</h2><p>mysql 数据库的监控支持通过 SQL 方式从 performance_schema 库中访问对应的表数据，前提是初始化此库并开启监控数据写入。</p><p>对于监控而言，不在于手段的多样性，而需要明白监控的本质，以及需要的监控项内容，找到符合自身项目特色的监控方式。</p><p>在选择监控工具对 mysql 监控时，需要关注监控工具本身对于数据库服务器的消耗，不要影响到其自身的使用。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pgsql命令记录</title>
    <link href="/2023/06/03/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/pgsql%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/06/03/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/pgsql%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="pgsql命令记录"><a href="#pgsql命令记录" class="headerlink" title="pgsql命令记录"></a>pgsql命令记录</h1><h2 id="1、控制台命令："><a href="#1、控制台命令：" class="headerlink" title="1、控制台命令："></a>1、控制台命令：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">\h：查看SQL命令的解释，比如\h select。<br>\?：查看psql命令列表。<br>\l：列出所有数据库。<br>\c [database_name]：连接其他数据库。<br>\d：列出当前数据库的所有表格。<br>\d [table_name]：列出某一张表格的结构。<br>\<span class="hljs-built_in">du</span>：列出所有用户。<br>\e：打开文本编辑器。<br>\conninfo：列出当前数据库和连接的信息。<br></code></pre></td></tr></table></figure><h2 id="2、常用命令："><a href="#2、常用命令：" class="headerlink" title="2、常用命令："></a>2、常用命令：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建新表 </span><br>CREATE TABLE user_tbl(name VARCHAR(20), signup_date DATE);<br><span class="hljs-comment"># 插入数据 </span><br>INSERT INTO user_tbl(name, signup_date) VALUES(<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;2013-12-22&#x27;</span>);<br><span class="hljs-comment"># 选择记录 </span><br>SELECT * FROM user_tbl;<br><span class="hljs-comment"># 更新数据 </span><br>UPDATE user_tbl <span class="hljs-built_in">set</span> name = <span class="hljs-string">&#x27;李四&#x27;</span> WHERE name = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-comment"># 删除记录 </span><br>DELETE FROM user_tbl WHERE name = <span class="hljs-string">&#x27;李四&#x27;</span> ;<br><span class="hljs-comment"># 添加栏位 </span><br>ALTER TABLE user_tbl ADD email VARCHAR(40);<br><span class="hljs-comment"># 更新结构 </span><br>ALTER TABLE user_tbl ALTER COLUMN signup_date SET NOT NULL;<br><span class="hljs-comment"># 更名栏位 </span><br>ALTER TABLE user_tbl RENAME COLUMN signup_date TO signup;<br><span class="hljs-comment"># 删除栏位 </span><br>ALTER TABLE user_tbl DROP COLUMN email;<br><span class="hljs-comment"># 表格更名 </span><br>ALTER TABLE user_tbl RENAME TO backup_tbl;<br><span class="hljs-comment"># 删除表格 </span><br>DROP TABLE IF EXISTS backup_tbl;<br></code></pre></td></tr></table></figure><h2 id="3、用户与访问授权语法示例"><a href="#3、用户与访问授权语法示例" class="headerlink" title="3、用户与访问授权语法示例"></a>3、用户与访问授权语法示例</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#新建用户</span><br>CREATE USER <span class="hljs-built_in">test</span> WITH PASSWORD <span class="hljs-string">&#x27;test&#x27;</span>;<br> <br><span class="hljs-comment">#赋予指定账户指定数据库所有权限</span><br>GRANT ALL PRIVILEGES ON DATABASE mydb TO <span class="hljs-built_in">test</span>;<br> <br><span class="hljs-comment">#移除指定账户指定数据库所有权限</span><br>REVOKE ALL PRIVILEGES ON DATABASE mydb TO <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>PostgreSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rabbitmq的安装和概念</title>
    <link href="/2023/06/02/%E4%B8%AD%E9%97%B4%E4%BB%B6/rabbitmq/rabbitmq%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E6%A6%82%E5%BF%B5/"/>
    <url>/2023/06/02/%E4%B8%AD%E9%97%B4%E4%BB%B6/rabbitmq/rabbitmq%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="rabbitmq的安装和概念"><a href="#rabbitmq的安装和概念" class="headerlink" title="rabbitmq的安装和概念"></a>rabbitmq的安装和概念</h1><h2 id="一、核心概念"><a href="#一、核心概念" class="headerlink" title="一、核心概念"></a>一、核心概念</h2><p>基础概念参考文档：<a href="https://mp.weixin.qq.com/s/nhpiIPfD6lWBEAnXuuL4lw">https://mp.weixin.qq.com/s/nhpiIPfD6lWBEAnXuuL4lw</a></p><ul><li><p>生产者：产生数据发送消息的程序是生产者</p></li><li><p>交换机：交换机是 RabbitMQ 非常重要的一个部件，一方面它接收来自生产者的消息，另一方面它将消息 推送到队列中。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推 送到多个队列，亦或者是把消息丢弃，这个得有交换机类型决定</p></li><li><p>队列：队列是 RabbitMQ 内部使用的一种数据结构，尽管消息流经 RabbitMQ 和应用程序，但它们只能存 储在队列中。队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区。许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。这就是我们使用队列的方式</p></li><li><p>消费者：消费与接收具有相似的含义。消费者大多时候是一个等待接收消息的程序。请注意生产者，消费 者和消息中间件很多时候并不在同一机器上。同一个应用程序既可以是生产者又是可以是消费者。</p></li></ul><h2 id="二、RabbitMQ工作模式"><a href="#二、RabbitMQ工作模式" class="headerlink" title="二、RabbitMQ工作模式"></a>二、RabbitMQ工作模式</h2><ul><li>1、简单模式</li><li>2、work-queue工作队列模式</li><li>3、Publish&#x2F;Subscribe发布与订阅模式</li><li>4、Routing路由模式</li><li>5、Topics主题模式</li><li>6、RPC远程调用模式（远程调用，不太算MQ，不作介绍）</li><li>7、Publisher Confirms发布确认</li></ul><h2 id="三、工作流程"><a href="#三、工作流程" class="headerlink" title="三、工作流程"></a>三、工作流程</h2><p><strong>生产者客户端：</strong></p><ul><li>客户端连接到RabbitMQ服务器上，打开一个消息通道（channel）；</li><li>客户端声明一个消息交换机（exchange），并设置相关属性。</li><li>客户端声明一个消息队列（queue），并设置相关属性。</li><li>客户端使用routing key在消息交换机（exchange）和消息队列（queue）中建立好绑定关系。</li><li>客户端投递消息都消息交换机（exchange）上</li><li>客户端关闭消息通道（channel）以及和服务器的连接。<br><strong>服务器端：</strong><br>exchange接收到消息后，根据消息的key和以及设置的binding，进行消息路由，将消息投递到一个或多个消息队列中。</li></ul><h2 id="四、安装过程（rpm包安装方式及二进制包安装方式）："><a href="#四、安装过程（rpm包安装方式及二进制包安装方式）：" class="headerlink" title="四、安装过程（rpm包安装方式及二进制包安装方式）："></a>四、安装过程（rpm包安装方式及二进制包安装方式）：</h2><p>RabbitMQ是由erlang语言开发，所以我在安装 RabbitMQ 一定要先安装Erlang环境,注意版本匹配。</p><p>查看版本选择：<a href="https://www.rabbitmq.com/which-erlang.html">https://www.rabbitmq.com/which-erlang.html</a></p><p>rabbitmq官网下载地址：</p><ul><li><a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></li><li><a href="https://github.com/rabbitmq/rabbitmq-server/tags">https://github.com/rabbitmq/rabbitmq-server/tags</a></li></ul><p>Erlang官网下载地址：</p><ul><li><a href="https://www.erlang-solutions.com/downloads/">https://www.erlang-solutions.com/downloads/</a></li><li><a href="http://erlang.org/download/">http://erlang.org/download/</a></li></ul><h3 id="4-1、rpm包安装方式安装Rabbitmq及Erlang"><a href="#4-1、rpm包安装方式安装Rabbitmq及Erlang" class="headerlink" title="4.1、rpm包安装方式安装Rabbitmq及Erlang"></a>4.1、rpm包安装方式安装Rabbitmq及Erlang</h3><h4 id="4-1-1、下载或上传相关rpm包（rpm包安装方式）"><a href="#4-1-1、下载或上传相关rpm包（rpm包安装方式）" class="headerlink" title="4.1.1、下载或上传相关rpm包（rpm包安装方式）"></a>4.1.1、下载或上传相关rpm包（rpm包安装方式）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /app<br><br><span class="hljs-comment">#下载rabbitmq的rpm包</span><br>wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.13.0-rc.1/rabbitmq-server-3.13.0.rc.1-1.el8.noarch.rpm<br><br><span class="hljs-comment">#下载erlang的rpm包</span><br>wget https://binaries2.erlang-solutions.com/centos/7/esl-erlang_25.0.3_1~centos~7_x86_64.rpm<br></code></pre></td></tr></table></figure><h4 id="4-1-2、安装"><a href="#4-1-2、安装" class="headerlink" title="4.1.2、安装"></a>4.1.2、安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">rpm -ivh  esl-erlang_25.0.3_1~centos~7_x86_64.rpm <br>yum install socat -y<br>rpm -ivh rabbitmq-server-3.13.0.rc.1-1.el8.noarch.rpm<br></code></pre></td></tr></table></figure><h4 id="4-1-3、启动服务"><a href="#4-1-3、启动服务" class="headerlink" title="4.1.3、启动服务"></a>4.1.3、启动服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动服务</span><br>systemctl start rabbitmq-server<br><span class="hljs-comment"># 查看服务状态</span><br>systemctl status rabbitmq-server<br><span class="hljs-comment"># 开机自启动</span><br>systemctl <span class="hljs-built_in">enable</span> rabbitmq-server<br></code></pre></td></tr></table></figure><h3 id="4-2、二进制安装包方式安装Rabbitmq及Erlang"><a href="#4-2、二进制安装包方式安装Rabbitmq及Erlang" class="headerlink" title="4.2、二进制安装包方式安装Rabbitmq及Erlang"></a>4.2、二进制安装包方式安装Rabbitmq及Erlang</h3><h4 id="4-2-1、安装erlang"><a href="#4-2-1、安装erlang" class="headerlink" title="4.2.1、安装erlang"></a>4.2.1、安装erlang</h4><h5 id="4-2-1-1、安装依赖包"><a href="#4-2-1-1、安装依赖包" class="headerlink" title="4.2.1.1、安装依赖包"></a>4.2.1.1、安装依赖包</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install make gcc gcc-c++ m4 ncurses-devel openssl-devel unixODBC-devel<br></code></pre></td></tr></table></figure><h5 id="4-2-1-2、下载二进制包"><a href="#4-2-1-2、下载二进制包" class="headerlink" title="4.2.1.2、下载二进制包"></a>4.2.1.2、下载二进制包</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/erlang/otp/releases/download/OTP-26.1.2/otp_src_26.1.2.tar.gz<br></code></pre></td></tr></table></figure><h5 id="4-2-1-3、创建工作目录、解压并编译安装erlang"><a href="#4-2-1-3、创建工作目录、解压并编译安装erlang" class="headerlink" title="4.2.1.3、创建工作目录、解压并编译安装erlang"></a>4.2.1.3、创建工作目录、解压并编译安装erlang</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /usr/local/erlang <br><br>tar -xnf otp_src_26.1.2.tar.gz<br><br><span class="hljs-built_in">cd</span> otp_src_26.1.2<br>./configure --prefix=/usr/local/erlang --without-javac<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h5 id="4-2-1-4、设置环境变量"><a href="#4-2-1-4、设置环境变量" class="headerlink" title="4.2.1.4、设置环境变量"></a>4.2.1.4、设置环境变量</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/profile<br><span class="hljs-comment">#在末尾添加以下内容：</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/usr/local/erlang/bin<br><br><span class="hljs-comment">#生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br><br><span class="hljs-comment">#检验安装</span><br>erl -version<br></code></pre></td></tr></table></figure><h4 id="4-2-2、安装rabbitmq"><a href="#4-2-2、安装rabbitmq" class="headerlink" title="4.2.2、安装rabbitmq"></a>4.2.2、安装rabbitmq</h4><h5 id="4-2-2-1、下载rabbitmq安装包"><a href="#4-2-2-1、下载rabbitmq安装包" class="headerlink" title="4.2.2.1、下载rabbitmq安装包"></a>4.2.2.1、下载rabbitmq安装包</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install socat -y<br><br>wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.12.7/rabbitmq-server-generic-unix-3.12.7.tar.xz<br></code></pre></td></tr></table></figure><h5 id="4-2-2-2、解压并移动到指定工作路径"><a href="#4-2-2-2、解压并移动到指定工作路径" class="headerlink" title="4.2.2.2、解压并移动到指定工作路径"></a>4.2.2.2、解压并移动到指定工作路径</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -xnf  rabbitmq-server*.tar.xz<br><br><span class="hljs-built_in">mv</span> rabbitmq_server-3.12.7/ /usr/local/rabbitmq_server<br><br></code></pre></td></tr></table></figure><h5 id="4-2-2-3、设置环境变量"><a href="#4-2-2-3、设置环境变量" class="headerlink" title="4.2.2.3、设置环境变量"></a>4.2.2.3、设置环境变量</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/profile<br><span class="hljs-comment">#在最后添加一栏</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/usr/local/rabbitmq_server/sbin<br><br><span class="hljs-comment">#使之生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h5 id="4-2-2-4、后台启动Rabbitmq"><a href="#4-2-2-4、后台启动Rabbitmq" class="headerlink" title="4.2.2.4、后台启动Rabbitmq"></a>4.2.2.4、后台启动Rabbitmq</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">rabbitmq-server -detached<br><br><span class="hljs-comment">#关闭rabbitmq</span><br>rabbitmqctl shutdown<br></code></pre></td></tr></table></figure><h2 id="五、Web管理界面及授权操作"><a href="#五、Web管理界面及授权操作" class="headerlink" title="五、Web管理界面及授权操作"></a>五、Web管理界面及授权操作</h2><p>默认情况下，是没有安装web端的客户端插件，需要安装才可以生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management<br><span class="hljs-comment">#systemctl restart rabbitmq-server</span><br></code></pre></td></tr></table></figure><p>访问 <a href="http://127.0.0.1:15672/">http://127.0.0.1:15672</a> ，用默认账号密码(guest)登录</p><p><strong>默认情况下只能在localhost本机访问</strong></p><h4 id="5-1、-添加远程登录用户"><a href="#5-1、-添加远程登录用户" class="headerlink" title="5.1、 添加远程登录用户"></a>5.1、 添加远程登录用户</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 删除默认用户</span><br>rabbitmqctl delete_user guest<br><br><span class="hljs-comment"># 创建账号和密码</span><br>rabbitmqctl add_user admin 123456<br><br><span class="hljs-comment"># 设置用户角色</span><br>rabbitmqctl set_user_tags admin administrator<br><br><span class="hljs-comment"># 为用户添加资源权限</span><br><span class="hljs-comment"># set_permissions [-p &lt;vhostpath&gt;] &lt;user&gt; &lt;conf&gt; &lt;write&gt; &lt;read&gt;</span><br>rabbitmqctl set_permissions -p <span class="hljs-string">&quot;/&quot;</span> admin <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span><br><span class="hljs-comment"># 添加配置、写、读权限</span><br></code></pre></td></tr></table></figure><p><strong>用户级别</strong></p><ul><li>administrator：可以登录控制台、查看所有信息、可以对 rabbitmq 进行管理</li><li>monitoring：监控者 登录控制台，查看所有信息</li><li>policymaker：策略制定者 登录控制台，指定策略</li><li>managment：普通管理员 登录控制台</li></ul><h4 id="5-2、重置命令"><a href="#5-2、重置命令" class="headerlink" title="5.2、重置命令"></a>5.2、重置命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#关闭应用的命令：</span><br>rabbitmqctl stop_app<br><span class="hljs-comment">#清除的命令：</span><br>rabbitmqctl reset<br><span class="hljs-comment">#重新启动命令：</span><br>rabbitmqctl start_app<br></code></pre></td></tr></table></figure><h3 id="5-3、常用命令介绍"><a href="#5-3、常用命令介绍" class="headerlink" title="5.3、常用命令介绍"></a>5.3、常用命令介绍</h3><p>常用的 RabbitMQ 控制台命令（使用 rabbitmqctl）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#列出所有队列</span><br>rabbitmqctl list_queues<br><span class="hljs-comment">#列出所有交换器</span><br>rabbitmqctl list_exchanges<br><span class="hljs-comment">#列出所有绑定</span><br>rabbitmqctl list_bindings<br><span class="hljs-comment">#列出所有连接</span><br>rabbitmqctl list_connections<br><span class="hljs-comment">#列出所有通道</span><br>rabbitmqctl list_channels<br><span class="hljs-comment">#列出所有消费者</span><br>rabbitmqctl list_consumers<br><span class="hljs-comment">#查看队列的状态信息</span><br>rabbitmqctl list_queues name messages_ready messages_unacknowledged<br><span class="hljs-comment">#查看交换器的状态信息</span><br>rabbitmqctl list_exchanges name <span class="hljs-built_in">type</span><br><span class="hljs-comment">#查看连接的状态信息</span><br>rabbitmqctl list_connections name user state<br><span class="hljs-comment">#查看通道的状态信息</span><br>rabbitmqctl list_channels connection_name user number_of_consumers<br><span class="hljs-comment">#查看 RabbitMQ 节点的状态信息</span><br>rabbitmqctl status<br><span class="hljs-comment">#查看 RabbitMQ 节点的详细状态信息</span><br>rabbitmqctl status --verbose<br><span class="hljs-comment">#查看 RabbitMQ 节点的配置信息</span><br>rabbitmqctl environment<br><span class="hljs-comment">#查看 RabbitMQ 节点的运行日志</span><br>rabbitmqctl report<br><span class="hljs-comment">#查看 RabbitMQ 节点的内存使用情况</span><br>rabbitmqctl <span class="hljs-built_in">eval</span> <span class="hljs-string">&#x27;memory&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>rabbitmq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rabbitmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prometheus采集信息agent（cadvisor、node_exporter）运行安装</title>
    <link href="/2023/06/01/%E7%9B%91%E6%8E%A7/Prometheus/Prometheus%E9%87%87%E9%9B%86%E4%BF%A1%E6%81%AFagent%EF%BC%88cadvisor%E3%80%81node_exporter%EF%BC%89%E8%BF%90%E8%A1%8C%E5%AE%89%E8%A3%85/"/>
    <url>/2023/06/01/%E7%9B%91%E6%8E%A7/Prometheus/Prometheus%E9%87%87%E9%9B%86%E4%BF%A1%E6%81%AFagent%EF%BC%88cadvisor%E3%80%81node_exporter%EF%BC%89%E8%BF%90%E8%A1%8C%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Prometheus采集信息agent（cadvisor、node-exporter）运行安装"><a href="#Prometheus采集信息agent（cadvisor、node-exporter）运行安装" class="headerlink" title="Prometheus采集信息agent（cadvisor、node_exporter）运行安装"></a>Prometheus采集信息agent（cadvisor、node_exporter）运行安装</h1><h2 id="前言：该两个agent采用docker运行！或者二进制运行"><a href="#前言：该两个agent采用docker运行！或者二进制运行" class="headerlink" title="前言：该两个agent采用docker运行！或者二进制运行"></a>前言：该两个agent采用docker运行！或者二进制运行</h2><h2 id="一、使用docker运行"><a href="#一、使用docker运行" class="headerlink" title="一、使用docker运行"></a>一、使用docker运行</h2><h3 id="1、收集容器信息：cadvisor"><a href="#1、收集容器信息：cadvisor" class="headerlink" title="1、收集容器信息：cadvisor"></a>1、收集容器信息：cadvisor</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">mkdir</span> -p /app/prometheus<br><br><span class="hljs-built_in">cat</span> &gt; /app/prometheus/cadvisor.sh &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">#!/bin/bash</span><br><span class="hljs-string">docker rm -f cadvisor</span><br><span class="hljs-string">docker run -v /:/rootfs:ro \\</span><br><span class="hljs-string">--restart=always  \\</span><br><span class="hljs-string">-v /var/run:/var/run/:rw \\</span><br><span class="hljs-string">-v /sys:/sys:ro \\</span><br><span class="hljs-string">-v /var/lib/docker:/var/lib/docker:ro \\</span><br><span class="hljs-string">-p 7000:8080 \\</span><br><span class="hljs-string">--detach=true \\</span><br><span class="hljs-string">--name=cadvisor \\</span><br><span class="hljs-string">google/cadvisor</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="2、收集服务器信息：node-exporter"><a href="#2、收集服务器信息：node-exporter" class="headerlink" title="2、收集服务器信息：node_exporter"></a>2、收集服务器信息：node_exporter</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /app/prometheus/node_exporter.sh &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">#!/bin/bash</span><br><span class="hljs-string">docker rm -f node-exporter</span><br><span class="hljs-string"></span><br><span class="hljs-string">docker run -d -p 7100:7100 \\</span><br><span class="hljs-string">--restart=always  \\</span><br><span class="hljs-string">-v /proc:/host/proc \\</span><br><span class="hljs-string">-v /sys:/host/sys \\</span><br><span class="hljs-string">-v /:/rootfs \\</span><br><span class="hljs-string">--name node-exporter \\</span><br><span class="hljs-string">--net=host prom/node-exporter \\</span><br><span class="hljs-string">--web.listen-address=&quot;:7100&quot; \\</span><br><span class="hljs-string">--path.procfs /host/proc --path.sysfs /host/sys --collector.filesystem.ignored-mount-points &quot;^/(sys|proc|dev|host|etc)($|/)&quot;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">bash /app/prometheus/cadvisor.sh<br>bash /app/prometheus/node_exporter.sh <br></code></pre></td></tr></table></figure><h2 id="二、使用二进制运行，并设置为服务自启动"><a href="#二、使用二进制运行，并设置为服务自启动" class="headerlink" title="二、使用二进制运行，并设置为服务自启动"></a>二、使用二进制运行，并设置为服务自启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#下载包</span><br>wget https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz<br><span class="hljs-comment">#解压</span><br>tar -xnf  node_exporter-1.6.1.linux-amd64.tar.gz<br><span class="hljs-built_in">cd</span> node_exporter-1.6.1.linux-amd64<br><span class="hljs-built_in">cp</span> node_exporter /usr/local/bin/<br><span class="hljs-comment">#编写服务文件</span><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt; /usr/lib/systemd/system/node_exporter.service </span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">User=root</span><br><span class="hljs-string">Group=root</span><br><span class="hljs-string">ExecStart=/usr/local/bin/node_exporter --web.listen-address=:7100</span><br><span class="hljs-string">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=node_exporter</span><br><span class="hljs-string">After=network.target </span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment">#启动</span><br>systemctl start node_exporter.service<br>systemctl status node_exporter<br>systemctl <span class="hljs-built_in">enable</span> node_exporter<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>监控</category>
      
      <category>prometheus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql故障处理，以及解决方法</title>
    <link href="/2023/05/17/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
    <url>/2023/05/17/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mysql故障处理，以及解决方法"><a href="#mysql故障处理，以及解决方法" class="headerlink" title="mysql故障处理，以及解决方法"></a>mysql故障处理，以及解决方法</h1><h2 id="一、-测试、生产环境中，有时并不需要在本地安装一个mysql-server服务，只需要安装一个登录mysql-server-的mysql的客户端client"><a href="#一、-测试、生产环境中，有时并不需要在本地安装一个mysql-server服务，只需要安装一个登录mysql-server-的mysql的客户端client" class="headerlink" title="一、 测试、生产环境中，有时并不需要在本地安装一个mysql server服务，只需要安装一个登录mysql server 的mysql的客户端client"></a>一、 测试、生产环境中，有时并不需要在本地安装一个mysql server服务，只需要安装一个登录mysql server 的mysql的客户端client</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#centos6系统上安装mysql-client的方式：</span><br>yum install mysql-clent mysql-devel -y<br><span class="hljs-comment">#centos7的系统上安装mysql client的方式：</span><br>yum install -y mariadb.x86_64 mariadb-libs.x86_64<br></code></pre></td></tr></table></figure><h2 id="二、-liunx服务器中，导出mysql查询出来的数据"><a href="#二、-liunx服务器中，导出mysql查询出来的数据" class="headerlink" title="二、 liunx服务器中，导出mysql查询出来的数据"></a>二、 liunx服务器中，导出mysql查询出来的数据</h2><p><strong>查看看数据库配置的导出路径: secure_file_priv为导出路径</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">show variables like <span class="hljs-string">&#x27;%secure%&#x27;</span><br>1、 <span class="hljs-comment">#如果secure_file_priv为null则可以使用  </span><br>mysqldump  -u用户名 -p  库名  表名 &gt; 保存的文件名称(文件保存的的路径为当前使用命令的路径)<br>2、 <span class="hljs-comment">#导出语句中的导出路径为上面查询到的secure_file_priv的路径</span><br>mysql&gt;select * from table into outfile <span class="hljs-string">&#x27;导出路径/1.xls&#x27;</span>;<br></code></pre></td></tr></table></figure><p><code>into outfile</code>为数据导出的路径，这个就是第一步查询到的路径，导出的数据必须是这个值的指定路径才可以导出，<br>默认有可能是NULL就代表禁止导出，所以需要设置一下；我们需要在&#x2F;etc&#x2F;my.cnf 文件的末尾进行设置。</p><p>在末尾添加一句secure_file_priv&#x3D;”&#x2F;“即可将数据导出到任意目录；secure_file_priv</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">1、限制mysqld 不允许导入、导出<br>　　　 secure_file_prive=null<br>2、限制mysqld 的导入、导出 只能发生在/tmp/目录下<br>　　　secure_file_priv=/tmp/<br>3、可以导出至任意目录<br>      secure_file_priv=<span class="hljs-string">&quot;/&quot;</span><br></code></pre></td></tr></table></figure><h2 id="三、-检查所以数据库中的所有表是否正常"><a href="#三、-检查所以数据库中的所有表是否正常" class="headerlink" title="三、 #检查所以数据库中的所有表是否正常"></a>三、 #检查所以数据库中的所有表是否正常</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysqlcheck -c --all-databases -uroot -p <br></code></pre></td></tr></table></figure><h2 id="四、-ERROR-2059-HY000-错误处理"><a href="#四、-ERROR-2059-HY000-错误处理" class="headerlink" title="四、 ERROR 2059 (HY000)错误处理"></a>四、 ERROR 2059 (HY000)错误处理</h2><p><strong>错误提示：</strong><br>ERROR 2059 (HY000): Authentication plugin ‘caching_sha2_password’ <br>cannot be loaded: &#x2F;usr&#x2F;lib64&#x2F;mysql&#x2F;plugin&#x2F;caching_sha2_password.so: cannot open shared object file: No such file or directory<br><strong>处理方式：</strong><br>MySQL8.0之后的加密规则为caching_sha2_password.而在此之前的加密规则为mysql_native_password。<br>可以将加密规则改成mysql_native_password来：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;root&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="五、-ERROR-1418-HY000-错误处理"><a href="#五、-ERROR-1418-HY000-错误处理" class="headerlink" title="五、 ERROR 1418 (HY000)错误处理"></a>五、 ERROR 1418 (HY000)错误处理</h2><p><strong>错误提示：</strong><br>ERROR 1418 (HY000): This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA<br><strong>解决办法：</strong><br>设置临时环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">set</span> global log_bin_trust_function_creators=1;<br></code></pre></td></tr></table></figure><h2 id="六、-错误处理ERROR-1712（往数据库里面插入数据时）"><a href="#六、-错误处理ERROR-1712（往数据库里面插入数据时）" class="headerlink" title="六、 错误处理ERROR 1712（往数据库里面插入数据时）"></a>六、 错误处理ERROR 1712（往数据库里面插入数据时）</h2><p><strong>错误提示：</strong><br>ERROR 1712 (HY000): Index PRIMARY is corrupted<br><strong>解决方法：</strong><br>使用mysql的命令 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">repair table tableName; <span class="hljs-comment">#tableName：表名 </span><br></code></pre></td></tr></table></figure><h2 id="七、当往数据库里面插入字段以及数据时报错"><a href="#七、当往数据库里面插入字段以及数据时报错" class="headerlink" title="七、当往数据库里面插入字段以及数据时报错"></a>七、当往数据库里面插入字段以及数据时报错</h2><p>一般情况下，一百多万的数据量，也可以直接进行加字段操作，但是得看服务器的运行情况，如果有大量服务占用内存，添加字段可能会出现问题。<br>为了避免出现无法插入等报错这种问题，记录一下比较妥帖的办法:</p><h3 id="1-创建一个临时的新表，复制旧表的结构"><a href="#1-创建一个临时的新表，复制旧表的结构" class="headerlink" title="1.创建一个临时的新表，复制旧表的结构"></a>1.创建一个临时的新表，复制旧表的结构</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">create table <span class="hljs-string">&#x27;tmp&#x27;</span> like <span class="hljs-string">&#x27;old_tables&#x27;</span> ;<br><span class="hljs-comment">#create table &#x27;tmp&#x27; like partybuilding.tmp; #复制其他库的表结构</span><br></code></pre></td></tr></table></figure><h3 id="2-给新表加上新增的字段"><a href="#2-给新表加上新增的字段" class="headerlink" title="2.给新表加上新增的字段"></a>2.给新表加上新增的字段</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">ALTER TABLE `tmp`<br>ADD COLUMN `sync_key` varchar(255) NULL COMMENT <span class="hljs-string">&#x27;同步键&#x27;</span> ,<br>ADD COLUMN `data_from` varchar(255) NULL  COMMENT <span class="hljs-string">&#x27;数据产生方&#x27;</span>,<br>ADD COLUMN `data_update` varchar(255) NULL COMMENT <span class="hljs-string">&#x27;数据修改方&#x27;</span> ;<br></code></pre></td></tr></table></figure><h3 id="3-把旧表的数据复制过来"><a href="#3-把旧表的数据复制过来" class="headerlink" title="3.把旧表的数据复制过来"></a>3.把旧表的数据复制过来</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">insert into tmp (<span class="hljs-built_in">id</span>,name,unit) select <span class="hljs-built_in">id</span>,name,unit from old_table;<br><span class="hljs-comment">#注意，是所有的字段</span><br></code></pre></td></tr></table></figure><h3 id="4-重命名"><a href="#4-重命名" class="headerlink" title="4.重命名"></a>4.重命名</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">rename table old_tables to old_tables_bak ;<br>rename table tmp to old_tables;<br><span class="hljs-comment">#注意：需要在mysql没有使用的时候操作，或者是不会在短时间内变更的数据</span><br></code></pre></td></tr></table></figure><h2 id="八、-MySQL错误“ERROR-2006-（HY000）：MySQL-server-has-gone-away”"><a href="#八、-MySQL错误“ERROR-2006-（HY000）：MySQL-server-has-gone-away”" class="headerlink" title="八、 MySQL错误“ERROR 2006 （HY000）：MySQL server has gone away”"></a>八、 MySQL错误“ERROR 2006 （HY000）：MySQL server has gone away”</h2><h3 id="1-MySQL-服务器真的不见了"><a href="#1-MySQL-服务器真的不见了" class="headerlink" title="1. MySQL 服务器真的不见了"></a>1. MySQL 服务器真的不见了</h3><p>我们可以通过检查服务器正常运行时间（uptime）和服务器的错误日志来检查是否服务器确实消失了。<br>查看MySQL的正常运行时间（uptime）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">show global status like <span class="hljs-string">&#x27;uptime&#x27;</span>; <br>查询错误日志的存储位置：<br>show variables like <span class="hljs-string">&#x27;%error&#x27;</span>; <br></code></pre></td></tr></table></figure><h3 id="2-连接超时"><a href="#2-连接超时" class="headerlink" title="2. 连接超时"></a>2. 连接超时</h3><p>查看各项连接时间：<code>show global variables like &#39;%timeout&#39;;</code></p><h3 id="3-你的SQL语句被杀死了"><a href="#3-你的SQL语句被杀死了" class="headerlink" title="3. 你的SQL语句被杀死了"></a>3. 你的SQL语句被杀死了</h3><p>有些系统会主动杀死运行时间过长的SQL语句，我们可以通过查看已经执行的kill语句数量来检查是否可能发生这种情况。<br>查看mysql请求连接进程被主动杀死：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show global  status like <span class="hljs-string">&#x27;com_kill&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="4-你的SQL语句太大了"><a href="#4-你的SQL语句太大了" class="headerlink" title="4. 你的SQL语句太大了"></a>4. 你的SQL语句太大了</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">show global variables like <span class="hljs-string">&#x27;max_allowed_packet&#x27;</span>;<br><br>如果值比较小，可以设置大一点：<br><span class="hljs-built_in">set</span> global max_allowed_packet=1024*1024*16<br></code></pre></td></tr></table></figure><h2 id="九、-Mysqldump导出的文件只导入一张表"><a href="#九、-Mysqldump导出的文件只导入一张表" class="headerlink" title="九、 Mysqldump导出的文件只导入一张表"></a>九、 Mysqldump导出的文件只导入一张表</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">grep -i <span class="hljs-string">&#x27;INSERT INTO `tab_pb_flow_out`&#x27;</span> partybuilding20220621.sql &gt; tab_pb_flow_out.sql &amp;<br><br>然后再导入该sql文件<br>可以使用如下命令复制数据库表结构：<br>create table <span class="hljs-string">&#x27;tmp&#x27;</span> like partybuilding.tmp;<br>再进行导入<br></code></pre></td></tr></table></figure><h2 id="十、-MySQL安装控制插件-Connection-Control-–可有效的防止客户端暴力登录的风险-攻击"><a href="#十、-MySQL安装控制插件-Connection-Control-–可有效的防止客户端暴力登录的风险-攻击" class="headerlink" title="十、 MySQL安装控制插件(Connection-Control)–可有效的防止客户端暴力登录的风险(攻击)"></a>十、 MySQL安装控制插件(Connection-Control)–可有效的防止客户端暴力登录的风险(攻击)</h2><p>实现文档：<code>https://blog.51cto.com/u_15069450/4331304</code></p><h2 id="十一、-表分区，-分区是一种表的设计模式，正确的分区可以极大地提升数据库的查询效率，完成更高质量的SQL编程。但是如果错误地使用分区，那么分区可能带来毁灭性的的结果。"><a href="#十一、-表分区，-分区是一种表的设计模式，正确的分区可以极大地提升数据库的查询效率，完成更高质量的SQL编程。但是如果错误地使用分区，那么分区可能带来毁灭性的的结果。" class="headerlink" title="十一、 表分区，  分区是一种表的设计模式，正确的分区可以极大地提升数据库的查询效率，完成更高质量的SQL编程。但是如果错误地使用分区，那么分区可能带来毁灭性的的结果。"></a>十一、 表分区，  分区是一种表的设计模式，正确的分区可以极大地提升数据库的查询效率，完成更高质量的SQL编程。但是如果错误地使用分区，那么分区可能带来毁灭性的的结果。</h2><p><strong>表分区简介参考文档：</strong><br><a href="https://developer.aliyun.com/article/944253">https://developer.aliyun.com/article/944253</a></p><p><strong>操作文档：</strong><br><a href="https://www.cnblogs.com/xibuhaohao/p/10154281.html#_label0_1">https://www.cnblogs.com/xibuhaohao/p/10154281.html#_label0_1</a><br><a href="https://www.cnblogs.com/dw3306/p/12620042.html">https://www.cnblogs.com/dw3306/p/12620042.html</a></p><p><strong>已有数据结构改分区表、第二种</strong><br>参考文档：<a href="https://blog.csdn.net/orangleliu/article/details/57088338">https://blog.csdn.net/orangleliu/article/details/57088338</a></p><p><strong>自动创建分区：</strong><br>参考文档：<a href="https://www.cnblogs.com/webenh/p/11667778.html">https://www.cnblogs.com/webenh/p/11667778.html</a></p><h2 id="十二：-mysql表优化指南"><a href="#十二：-mysql表优化指南" class="headerlink" title="十二： mysql表优化指南"></a>十二： mysql表优化指南</h2><p>参考文档：<a href="https://z.itpub.net/article/detail/7EFE8159C8E5AF3C0AB2F77685A49977">https://z.itpub.net/article/detail/7EFE8159C8E5AF3C0AB2F77685A49977</a></p><h2 id="十三：数据库导入报错-index-column-size-too-large-the-maximum-column-size-is-767-bytes"><a href="#十三：数据库导入报错-index-column-size-too-large-the-maximum-column-size-is-767-bytes" class="headerlink" title="十三：数据库导入报错:index column size too large. the maximum column size is 767 bytes"></a>十三：数据库导入报错:index column size too large. the maximum column size is 767 bytes</h2><p><strong>原因：</strong><br>INNODB 引擎，UTF-8，主键字符串 默认最大 767，需要修改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt;mysql <span class="hljs-built_in">set</span> global innodb_file_format = BARRACUDA;<br>&gt;mysql <span class="hljs-built_in">set</span> global innodb_large_prefix = ON;<br><br>然后修改导入的sql文件<br>sed -i<span class="hljs-string">&#x27;s/ENGINE=InnoDB/ROW_FORMAT=DYNAMIC &amp;/&#x27;</span> 导入的数据.sql文件<br></code></pre></td></tr></table></figure><h2 id="十四：Fatal-error-The-slave-I-x2F-O-thread-stops-because-master-and-slave-have-equal-MySQL-server-UUIDs；"><a href="#十四：Fatal-error-The-slave-I-x2F-O-thread-stops-because-master-and-slave-have-equal-MySQL-server-UUIDs；" class="headerlink" title="十四：Fatal error: The slave I&#x2F;O thread stops because master and slave have equal MySQL server UUIDs；"></a>十四：Fatal error: The slave I&#x2F;O thread stops because master and slave have equal MySQL server UUIDs；</h2><p>原因：auto.cnf文件中UUID一致导致</p><p>解决：删除数据目录中的auto.cnf，启动mysql</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">rm</span> -rf /var/lib/mysql/auto.cnf<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql基础语句</title>
    <link href="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E5%9F%BA%E7%A1%80%E8%AF%AD%E5%8F%A5/"/>
    <url>/2023/05/15/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E5%9F%BA%E7%A1%80%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mysql基础语句"><a href="#mysql基础语句" class="headerlink" title="mysql基础语句"></a>mysql基础语句</h1><h2 id="1-登录"><a href="#1-登录" class="headerlink" title="1.登录"></a>1.登录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql  -u用户名  -p用户密码 -h主机地址 -P端口<br></code></pre></td></tr></table></figure><h2 id="2-查看数据库"><a href="#2-查看数据库" class="headerlink" title="2.查看数据库"></a>2.查看数据库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show databases;<br></code></pre></td></tr></table></figure><h2 id="3-按行查看数据库"><a href="#3-按行查看数据库" class="headerlink" title="3.按行查看数据库"></a>3.按行查看数据库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">show database \G<br><br>–e  后面接SQL语句，可在外部查询<br><span class="hljs-comment">#例如:</span><br>mysql -uroot -p123456 -e <span class="hljs-string">&#x27;showdatabases&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="4-创建数据库"><a href="#4-创建数据库" class="headerlink" title="4.创建数据库"></a>4.创建数据库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">create database 数据库名称;<br><br><span class="hljs-comment">#数据库接特殊符号需要加``:</span><br>create database `HA-<span class="hljs-built_in">test</span>` <br><br><span class="hljs-comment">#创建特殊位字符:</span><br>create database <span class="hljs-keyword">if</span> not exists test03 default character <span class="hljs-built_in">set</span> = <span class="hljs-string">&#x27;utf8&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="5-数据库的存放路径"><a href="#5-数据库的存放路径" class="headerlink" title="5.数据库的存放路径"></a>5.数据库的存放路径</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ls</span> /var/lib/mysql<br></code></pre></td></tr></table></figure><h2 id="6-查询当前在操作哪个库"><a href="#6-查询当前在操作哪个库" class="headerlink" title="6.查询当前在操作哪个库"></a>6.查询当前在操作哪个库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">select database();<br></code></pre></td></tr></table></figure><h2 id="7-查看当前的数据库时间"><a href="#7-查看当前的数据库时间" class="headerlink" title="7.查看当前的数据库时间"></a>7.查看当前的数据库时间</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">select now();<br></code></pre></td></tr></table></figure><h2 id="8-查看当前的操作用户"><a href="#8-查看当前的操作用户" class="headerlink" title="8.查看当前的操作用户"></a>8.查看当前的操作用户</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">select user();<br></code></pre></td></tr></table></figure><h2 id="9-删除数据库-特殊符号需要加"><a href="#9-删除数据库-特殊符号需要加" class="headerlink" title="9.删除数据库,特殊符号需要加"></a>9.删除数据库,特殊符号需要加</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">drop database 数据库名称;<br><br><span class="hljs-comment">#判断数据库是否存在，并删除数据库if exists:如果存在</span><br>drop database <span class="hljs-keyword">if</span> exists 数据库名称;<br></code></pre></td></tr></table></figure><h2 id="10-查看是否开启binlog日志："><a href="#10-查看是否开启binlog日志：" class="headerlink" title="10.查看是否开启binlog日志："></a>10.查看是否开启binlog日志：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">show variables like <span class="hljs-string">&#x27;%log_bin%&#x27;</span><br><span class="hljs-comment">#------------------------------------------------------------------</span><br>  log_bin                         | ON                             |<br>| log_bin_basename                | /var/lib/mysql/mysql-bin       |<br>| log_bin_index                   | /var/lib/mysql/mysql-bin.index<br><span class="hljs-comment">#-------------------------------------------------------------------</span><br></code></pre></td></tr></table></figure><h2 id="11-数据库导入脚本"><a href="#11-数据库导入脚本" class="headerlink" title="11.数据库导入脚本"></a>11.数据库导入脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql -uroot -p<span class="hljs-string">&#x27;密码&#x27;</span> 数据库 &lt; a.sql<br><span class="hljs-comment">#例如：</span><br>mysql -uroot -p<span class="hljs-string">&#x27;root@2021&#x27;</span>  <span class="hljs-built_in">test</span> &lt; a.sql<br><br><span class="hljs-comment">#或者连接数据库:</span><br>mysql -uroot -p<span class="hljs-string">&#x27;root@2021&#x27;</span><br><span class="hljs-comment">#选择相应的数据库后执行</span><br>mysql&gt; <span class="hljs-built_in">source</span> 脚本所在的路径  <br><span class="hljs-comment">#例如</span><br><span class="hljs-built_in">source</span> /app/a.sql<br></code></pre></td></tr></table></figure><h2 id="12-重置bin-log"><a href="#12-重置bin-log" class="headerlink" title="12.重置bin_log"></a>12.重置bin_log</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#连接数据库后</span><br>reset master;<br></code></pre></td></tr></table></figure><h2 id="13-导出数据库"><a href="#13-导出数据库" class="headerlink" title="13.导出数据库"></a>13.导出数据库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysqldump -uroot -p<span class="hljs-string">&#x27;&#x27;</span> 数据库 &gt; a.sql<br><br><span class="hljs-comment">#当前GTID_EXECUTED参数已经有值，而从集群倒出来的dump文件中包含了SET @@GLOBAL.GTID_PURGED的操作</span><br><span class="hljs-comment">#dump导出时，添加--set-gtid-purged=off参数，避免将gtid信息导出</span><br>mysqldump -uroot -p --set-gtid-purged=off -d sso &gt; sso1.sql<br></code></pre></td></tr></table></figure><h2 id="14-导入数据库"><a href="#14-导入数据库" class="headerlink" title="14.导入数据库"></a>14.导入数据库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql -uroot -p<span class="hljs-string">&#x27;&#x27;</span> 数据库 &lt; a.sql<br></code></pre></td></tr></table></figure><h2 id="15-导出数据库表"><a href="#15-导出数据库表" class="headerlink" title="15.导出数据库表"></a>15.导出数据库表</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysqldump -uroot -p<span class="hljs-string">&#x27;&#x27;</span> 数据库 表名 &gt; a.sql<br></code></pre></td></tr></table></figure><h2 id="16-导出数据库某一张表的相关数据"><a href="#16-导出数据库某一张表的相关数据" class="headerlink" title="16.导出数据库某一张表的相关数据"></a>16.导出数据库某一张表的相关数据</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysqldump -h172.26.0.11 -uroot -p<span class="hljs-string">&#x27;##&#x27;</span> fpmparty tab_pb_flow_in &gt; tab_pb_flow_in.sql<br><span class="hljs-comment">#fpmparty 数据库名</span><br><span class="hljs-comment">#tab_pd_flow_in 表名</span><br></code></pre></td></tr></table></figure><h2 id="17-mysql导出查询的内容"><a href="#17-mysql导出查询的内容" class="headerlink" title="17.mysql导出查询的内容"></a>17.mysql导出查询的内容</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql --default-character-set=utf8 -uroot -p<span class="hljs-string">&#x27;xQ*SFR1q2w3e4r&#x27;</span>  -Dpartybuilding  -e <span class="hljs-string">&quot;SELECT * FROM sys_dept ORDER BY create_time desc limit 10;&quot;</span> &gt; ./mysql.xls<br><br><span class="hljs-comment">#参数说明</span><br>--default-character-set=utf8 字符集设为utf-8，防止输出中文乱码<br><span class="hljs-comment">#如果加上 -N 则不输出表头，只保存数据。</span><br></code></pre></td></tr></table></figure><h2 id="18-mysql赋权"><a href="#18-mysql赋权" class="headerlink" title="18.mysql赋权"></a>18.mysql赋权</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#所有的机器都可以连接所有的数据库</span><br>&gt; grant all on *.* to root@<span class="hljs-string">&quot;%&quot;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>  <span class="hljs-comment">#123456是密码</span><br><br>&gt; grant all on *.* to root@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;yizheng2017&#x27;</span> with grant option; <span class="hljs-comment">#允许级联赋权、作用是使得该用户可以拥有权限和回收权限给其他用户。</span><br></code></pre></td></tr></table></figure><h2 id="19-查看MYSQL数据库中所有用户"><a href="#19-查看MYSQL数据库中所有用户" class="headerlink" title="19.查看MYSQL数据库中所有用户"></a>19.查看MYSQL数据库中所有用户</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">SELECT DISTINCT CONCAT(<span class="hljs-string">&#x27;User: &#x27;</span><span class="hljs-string">&#x27;&#x27;</span>,user,<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;@&#x27;</span><span class="hljs-string">&#x27;&#x27;</span>,host,<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;;&#x27;</span>) AS query FROM mysql.user;<br></code></pre></td></tr></table></figure><h2 id="20-创建用户"><a href="#20-创建用户" class="headerlink" title="20.创建用户"></a>20.创建用户</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; create user <span class="hljs-string">&quot;haidon&quot;</span> identified by <span class="hljs-string">&quot;123456&quot;</span>;       -- 此时密码为123456，host值为%。<br>mysql&gt; create user <span class="hljs-string">&quot;haidon&quot;</span>@<span class="hljs-string">&quot;%&quot;</span> identified by <span class="hljs-string">&quot;123456&quot;</span>;   -- 此时密码为123456<br></code></pre></td></tr></table></figure><h2 id="21-查看某个用户的权限"><a href="#21-查看某个用户的权限" class="headerlink" title="21.查看某个用户的权限"></a>21.查看某个用户的权限</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; SHOW GRANGTS FOR userA;<br></code></pre></td></tr></table></figure><h2 id="22-赋予某个用户的权限"><a href="#22-赋予某个用户的权限" class="headerlink" title="22.赋予某个用户的权限"></a>22.赋予某个用户的权限</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#给useA赋予db1的所有权限，并允许全网段远程登录</span><br>&gt; GRANT ALL PRIVILEGES ON `db1`.* TO <span class="hljs-string">&#x27;userA&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;123456&#x27;</span> WITH GRANT OPTION;<br><br><span class="hljs-comment">#我们也可以对ip段进行授权，如 &#x27;userA&#x27;@&#x27;%&#x27;是对全网段，&#x27;userA&#x27;@&#x27;10.%.%.%&#x27;是对部分网段进行授权</span><br><br><span class="hljs-comment">#例如：对dyjysync用户授予partybuilding_sync数据库的查询权限</span><br>grant select on `partybuilding_sync`.* to <span class="hljs-string">&#x27;dyjysync&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;dyjysync_2022&#x27;</span>;<br><br><span class="hljs-comment">#允许访问所有数据库下的所有表</span><br>mysql&gt; grant all privileges on *.* to <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;指定ip&#x27;</span> identified by <span class="hljs-string">&#x27;用户密码&#x27;</span> ;<br><br><span class="hljs-comment">#允许访问指定数据库下的所有表</span><br>mysql&gt; grant all privileges on <span class="hljs-built_in">test</span>.* to <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;指定ip&#x27;</span> identified by <span class="hljs-string">&#x27;用户密码&#x27;</span> ;<br><br><span class="hljs-comment">#允许访问指定数据库下的指定表</span><br>mysql&gt; grant all privileges on test.test to <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;指定ip&#x27;</span> identified by <span class="hljs-string">&#x27;用户密码&#x27;</span> ;<br><br><br><span class="hljs-comment">#回收/删除权限 revoke</span><br>&gt; REVOKE ALL PRIVILEGES ON `db1`.* FROM <span class="hljs-string">&#x27;userA&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="23-查看线程"><a href="#23-查看线程" class="headerlink" title="23.查看线程"></a>23.查看线程</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">show processlist<br></code></pre></td></tr></table></figure><h2 id="24-根据客户ip分组，查看哪个客户端的链接数量最多"><a href="#24-根据客户ip分组，查看哪个客户端的链接数量最多" class="headerlink" title="24.根据客户ip分组，查看哪个客户端的链接数量最多"></a>24.根据客户ip分组，查看哪个客户端的链接数量最多</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">select client_ip,count(client_ip) as client_num from (select substring_index(host,<span class="hljs-string">&#x27;:&#x27;</span> ,1) as client_ip from information_schema.processlist ) as connect_info group by client_ip order by client_num desc;<br></code></pre></td></tr></table></figure><h2 id="25-查看正在执行的线程，并按-Time-倒排序，看看有没有执行时间特别长的线程"><a href="#25-查看正在执行的线程，并按-Time-倒排序，看看有没有执行时间特别长的线程" class="headerlink" title="25.查看正在执行的线程，并按 Time 倒排序，看看有没有执行时间特别长的线程"></a>25.查看正在执行的线程，并按 Time 倒排序，看看有没有执行时间特别长的线程</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">select * from information_schema.processlist <span class="hljs-built_in">where</span> Command != <span class="hljs-string">&#x27;Sleep&#x27;</span> order by Time desc;<br></code></pre></td></tr></table></figure><h2 id="26-找出所有执行时间超过-5-分钟的线程，拼凑出-kill-语句，方便后面查杀-（此处-60秒-可根据自己的需要调整SQL）可复制查询结果到控制台，直接执行，杀死堵塞进程"><a href="#26-找出所有执行时间超过-5-分钟的线程，拼凑出-kill-语句，方便后面查杀-（此处-60秒-可根据自己的需要调整SQL）可复制查询结果到控制台，直接执行，杀死堵塞进程" class="headerlink" title="26.找出所有执行时间超过 5 分钟的线程，拼凑出 kill 语句，方便后面查杀 （此处 60秒 可根据自己的需要调整SQL）可复制查询结果到控制台，直接执行，杀死堵塞进程"></a>26.找出所有执行时间超过 5 分钟的线程，拼凑出 kill 语句，方便后面查杀 （此处 60秒 可根据自己的需要调整SQL）可复制查询结果到控制台，直接执行，杀死堵塞进程</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">select concat(<span class="hljs-string">&#x27;kill &#x27;</span>, <span class="hljs-built_in">id</span>, <span class="hljs-string">&#x27;;&#x27;</span>) from information_schema.processlist <span class="hljs-built_in">where</span> Command != <span class="hljs-string">&#x27;Sleep&#x27;</span> and Time &gt; 60 order by Time desc;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8S-yaml文件编写详解</title>
    <link href="/2023/05/11/k8s/k8s%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/k8s%20yaml%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/05/11/k8s/k8s%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/k8s%20yaml%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="K8S-yaml文件编写详解"><a href="#K8S-yaml文件编写详解" class="headerlink" title="K8S-yaml文件编写详解"></a>K8S-yaml文件编写详解</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://www.cnblogs.com/lgeng/p/11053063.html<br>参考文档：https://www.kubernetes.org.cn/1414.html<br>参考文档：https://www.cnblogs.com/shunzi115/p/12392784.html<br></code></pre></td></tr></table></figure><h2 id="一、前言：K8S-创建资源的方式"><a href="#一、前言：K8S-创建资源的方式" class="headerlink" title="一、前言：K8S 创建资源的方式"></a>一、前言：K8S 创建资源的方式</h2><p>K8S有两种创建资源的方式：<code>kubectl</code>命令和<code>yaml</code>配置文件。</p><p>kubectl命令行：最为简单，一条命令就OK.<br>yaml配置文件：提供了一种让你知其然更知其所以然的方式。优势如下：</p><ul><li>完整性：配置文件描述了一个资源的完整状态，可以很清楚地知道一个资源的创建背后究竟做了哪些事；</li><li>灵活性：配置文件可以创建比命令行更复杂的结构；</li><li>可维护性：配置文件提供了创建资源对象的模板，能够重复使用；</li><li>可扩展性：适合跨环境、规模化的部署。</li></ul><h2 id="二、yaml基础"><a href="#二、yaml基础" class="headerlink" title="二、yaml基础"></a>二、yaml基础</h2><p><code>yaml</code>是一种用来写配置文件的语言，yaml 又被称为是json 的超集，使用起来比 json 更方便。<br>结构上它有两种可选的类型：Lists 和 Maps。List 用 -（破折号） 来定义每一项，Map 则是一个 key:value 的键值对来表示。</p><p>YAML语法规则：</p><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用Tal键，只允许使用空格</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li>“#”表示注释，从这个字符一直到行尾，都会被解析器忽略　</li><li>“—“” 为可选的分隔符</li></ul><p>　</p><p>在Kubernetes中，只需要知道<code>Lists</code>和<code>Maps</code>结构类型即可：</p><h2 id="三、kubernetes-yaml-文件模板："><a href="#三、kubernetes-yaml-文件模板：" class="headerlink" title="三、kubernetes yaml 文件模板："></a>三、kubernetes yaml 文件模板：</h2><p>yaml格式的pod定义文件完整内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>       <span class="hljs-comment">#必选，版本号，例如v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span>            <span class="hljs-comment">#必选，Pod</span><br><span class="hljs-attr">metadata:</span>            <span class="hljs-comment">#必选，元数据</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>       <span class="hljs-comment">#必选，Pod名称</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">string</span>  <span class="hljs-comment">#必选，Pod所属的命名空间</span><br>  <span class="hljs-attr">labels:</span>            <span class="hljs-comment">#自定义标签</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>   <span class="hljs-comment">#自定义标签名字</span><br>  <span class="hljs-attr">annotations:</span>       <span class="hljs-comment">#自定义注释列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">spec:</span>                <span class="hljs-comment">#必选，Pod中容器的详细定义</span><br>  <span class="hljs-attr">containers:</span>        <span class="hljs-comment">#必选，Pod中容器列表</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#必选，容器名称</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#必选，容器的镜像名称</span><br>    <span class="hljs-attr">imagePullPolicy:</span> [<span class="hljs-string">Always</span> <span class="hljs-string">|</span> <span class="hljs-string">Never</span> <span class="hljs-string">|</span> <span class="hljs-string">IfNotPresent</span>] <span class="hljs-comment">#获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">string</span>]    <span class="hljs-comment">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span><br>    <span class="hljs-attr">args:</span> [<span class="hljs-string">string</span>]       <span class="hljs-comment">#容器的启动命令参数列表</span><br>    <span class="hljs-attr">workingDir:</span> <span class="hljs-string">string</span>   <span class="hljs-comment">#容器的工作目录</span><br>    <span class="hljs-attr">volumeMounts:</span>        <span class="hljs-comment">#挂载到容器内部的存储卷配置</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>       <span class="hljs-comment">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#存储卷在容器内mount的绝对路径，应少于512字符</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-string">boolean</span>    <span class="hljs-comment">#是否为只读模式</span><br>    <span class="hljs-attr">ports:</span>                 <span class="hljs-comment">#需要暴露的端口库号列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>         <span class="hljs-comment">#端口号名称</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-string">int</span>   <span class="hljs-comment">#容器需要监听的端口号</span><br>      <span class="hljs-attr">hostPort:</span> <span class="hljs-string">int</span>        <span class="hljs-comment">#容器所在主机需要监听的端口号，默认与Container相同</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#端口协议，支持TCP和UDP，默认TCP</span><br>    <span class="hljs-attr">env:</span>                   <span class="hljs-comment">#容器运行前需设置的环境变量列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>         <span class="hljs-comment">#环境变量名称</span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">string</span>        <span class="hljs-comment">#环境变量的值</span><br>    <span class="hljs-attr">resources:</span>             <span class="hljs-comment">#资源限制和请求的设置</span><br>      <span class="hljs-attr">limits:</span>              <span class="hljs-comment">#资源限制的设置</span><br>        <span class="hljs-attr">cpu:</span> <span class="hljs-string">string</span>        <span class="hljs-comment">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span><br>        <span class="hljs-attr">memory:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span><br>      <span class="hljs-attr">requests:</span>            <span class="hljs-comment">#资源请求的设置</span><br>        <span class="hljs-attr">cpu:</span> <span class="hljs-string">string</span>        <span class="hljs-comment">#Cpu请求，容器启动的初始可用数量</span><br>        <span class="hljs-attr">memory:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#内存清楚，容器启动的初始可用数量</span><br>    <span class="hljs-attr">livenessProbe:</span>         <span class="hljs-comment">#对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span><br>      <span class="hljs-attr">exec:</span>                <span class="hljs-comment">#对Pod容器内检查方式设置为exec方式</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">string</span>]  <span class="hljs-comment">#exec方式需要制定的命令或脚本</span><br>      <span class="hljs-attr">httpGet:</span>             <span class="hljs-comment">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-string">number</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">scheme:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">HttpHeaders:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">tcpSocket:</span>               <span class="hljs-comment">#对Pod内个容器健康检查方式设置为tcpSocket方式</span><br>         <span class="hljs-attr">port:</span> <span class="hljs-string">number</span><br>       <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">0</span>  <span class="hljs-comment">#容器启动完成后首次探测的时间，单位为秒</span><br>       <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">0</span>       <span class="hljs-comment">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span><br>       <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">0</span>        <span class="hljs-comment">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span><br>       <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">0</span><br>       <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">0</span><br>       <span class="hljs-attr">securityContext:</span><br>         <span class="hljs-string">privileged:false</span><br>    <span class="hljs-attr">restartPolicy:</span> [<span class="hljs-string">Always</span> <span class="hljs-string">|</span> <span class="hljs-string">Never</span> <span class="hljs-string">|</span> <span class="hljs-string">OnFailure</span>]     <span class="hljs-comment">#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span><br>    <span class="hljs-attr">nodeSelector:</span> <span class="hljs-string">obeject</span>  <span class="hljs-comment">#设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定</span><br>    <span class="hljs-attr">imagePullSecrets:</span>      <span class="hljs-comment">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>    <span class="hljs-string">hostNetwork:false</span>      <span class="hljs-comment">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span><br>    <span class="hljs-attr">volumes:</span>               <span class="hljs-comment">#在该pod上定义共享存储卷列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>         <span class="hljs-comment">#共享存储卷名称 （volumes类型有很多种）</span><br>      <span class="hljs-attr">emptyDir:</span> &#123;&#125;         <span class="hljs-comment">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span><br>      <span class="hljs-attr">hostPath:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">string</span>       <span class="hljs-comment">#Pod所在宿主机的目录，将被用于同期中mount的目录</span><br>      <span class="hljs-attr">secret:</span>              <span class="hljs-comment">#类型为secret的存储卷，挂载集群与定义的secre对象到容器内部</span><br>        <span class="hljs-attr">scretname:</span> <span class="hljs-string">string</span>  <br>        <span class="hljs-attr">items:</span>     <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">string</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">configMap:</span>           <span class="hljs-comment">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">items:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">string</span><br></code></pre></td></tr></table></figure><h2 id="四、实例文件"><a href="#四、实例文件" class="headerlink" title="四、实例文件"></a>四、实例文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span>   <span class="hljs-comment">#接口版本</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span>                 <span class="hljs-comment">#接口类型</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ptengine-demo</span>               <span class="hljs-comment">#Deployment名称</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">ptengine-prd</span>           <span class="hljs-comment">#namespace 名称</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">ptengine-demo</span>              <span class="hljs-comment">#标签</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>   <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span>        <span class="hljs-comment">#由于replicas为3,则整个升级,pod个数在2-4个之间</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span>         <span class="hljs-comment">#滚动升级时会先启动1个pod</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">1</span>   <span class="hljs-comment">#滚动升级时允许的最大Unavailable的pod个数</span><br>  <span class="hljs-attr">template:</span>         <br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">ptengine-demo</span>  <span class="hljs-comment">#模板名称必填</span><br>    <span class="hljs-attr">sepc:</span>                   <span class="hljs-comment">#定义容器模板，该模板可以包含多个容器</span><br>      <span class="hljs-attr">containers:</span>                                                                   <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ptengine-demo</span>                                              <span class="hljs-comment">#镜像名称</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">reg.pt1.com/ptengine-prd/ptengine-demo:0.0.1-SNAPSHOT</span>     <span class="hljs-comment">#镜像地址</span><br>          <span class="hljs-attr">CMD:</span> [ <span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;cat /etc/config/path/to/special-key&quot;</span> ]    <span class="hljs-comment">#启动CMD</span><br>          <span class="hljs-attr">args:</span>                                                            <span class="hljs-comment">#启动参数</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;-storage.local.retention=$(STORAGE_RETENTION)&#x27;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;-web.external-url=$(EXTERNAL_URL)&#x27;</span><br><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span>  <span class="hljs-comment">#如果不存在则拉取</span><br>          <span class="hljs-attr">livenessProbe:</span>                 <span class="hljs-comment">#表示container是否处于live状态。如果LivenessProbe失败，LivenessProbe将会通知kubelet对应的container不健康了。随后kubelet将kill掉container，并根据RestarPolicy进行进一步的操作。默认情况下LivenessProbe在第一次检测之前初始化值为Success，如果container没有提供LivenessProbe，则也认为是Success；</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/health</span>           <span class="hljs-comment">#如果没有心跳检测接口就为/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>              <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">60</span>   <span class="hljs-comment">#启动后延时多久开始运行检测</span><br>            <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>            <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>            <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">5</span><br>            <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/health</span>           <span class="hljs-comment">#如果没有健康检测接口就为/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>              <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span>   <span class="hljs-comment">#启动后延时多久开始运行检测</span><br>            <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>            <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>            <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">resources:</span>                  <span class="hljs-comment">#CPU内存限制</span><br>            <span class="hljs-attr">requests:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-number">2</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">2048Mi</span><br>            <span class="hljs-attr">limits:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-number">2</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">2048Mi</span><br>          <span class="hljs-attr">env:</span>                         <span class="hljs-comment">#通过环境变量的方式，直接传递pod=自定义Linux OS环境变量</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">LOCAL_KEY</span>          <span class="hljs-comment">#本地Key</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">value</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CONFIG_MAP_KEY</span>     <span class="hljs-comment">#local策略可使用configMap的配置Key，</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span>   <span class="hljs-comment">#configmap中找到name为special-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">special.type</span>      <span class="hljs-comment">#找到name为special-config里data下的key</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span>       <span class="hljs-comment">#对service暴露端口</span><br>          <span class="hljs-attr">volumeMounts:</span>                 <span class="hljs-comment">#挂载volumes中定义的磁盘</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">log-cache</span><br>            <span class="hljs-attr">mount:</span> <span class="hljs-string">/tmp/log</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sdb</span>                    <span class="hljs-comment">#普通用法，该卷跟随容器销毁，挂载一个目录</span><br>            <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data/media</span>    <br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span>        <span class="hljs-comment">#直接挂载硬盘方法，如挂载下面的nfs目录到/mnt/nfs</span><br>            <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/mnt/nfs</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">example-volume-config</span>  <span class="hljs-comment">#高级用法第1种，将ConfigMap的log-script,backup-script分别挂载到/etc/config目录下的一个相对路径path/to/...下，如果存在同名文件，直接覆盖。</span><br>            <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/config</span>       <br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rbd-pvc</span>                <span class="hljs-comment">#高级用法第2中，挂载PVC(PresistentVolumeClaim)</span><br><br>          <span class="hljs-comment">#使用volume将ConfigMap作为文件或目录直接挂载，其中每一个key-value键值对都会生成一个文件，key为文件名，value为内容，</span><br>          <span class="hljs-attr">volumes:</span>                       <span class="hljs-comment">#定义磁盘给上面volumeMounts挂载</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">log-cache</span><br>            <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sdb</span>                    <span class="hljs-comment">#挂载宿主机上面的目录</span><br>            <span class="hljs-attr">hostPath:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/any/path/it/will/be/replaced</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">example-volume-config</span>    <span class="hljs-comment">#供ConfigMap文件内容到指定路径使用</span><br>            <span class="hljs-attr">configMap:</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">example-volume-config</span>  <span class="hljs-comment">#ConfigMap中名称</span><br>              <span class="hljs-attr">items:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">log-script</span>           <span class="hljs-comment">#ConfigMap中的Key</span><br>                <span class="hljs-attr">path:</span> <span class="hljs-string">path/to/log-script</span>  <span class="hljs-comment">#指定目录下的一个相对路径path/to/log-script</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">backup-script</span>        <span class="hljs-comment">#ConfigMap中的Key</span><br>                <span class="hljs-attr">path:</span> <span class="hljs-string">path/to/backup-script</span>  <span class="hljs-comment">#指定目录下的一个相对路径path/to/backup-script</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span>         <span class="hljs-comment">#供挂载NFS存储类型</span><br>            <span class="hljs-attr">nfs:</span><br>              <span class="hljs-attr">server:</span> <span class="hljs-number">10.42</span><span class="hljs-number">.0</span><span class="hljs-number">.55</span>          <span class="hljs-comment">#NFS服务器地址</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/public</span>           <span class="hljs-comment">#showmount -e 看一下路径</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rbd-pvc</span>                 <span class="hljs-comment">#挂载PVC磁盘</span><br>            <span class="hljs-attr">persistentVolumeClaim:</span><br>              <span class="hljs-attr">claimName:</span> <span class="hljs-string">rbd-pvc1</span>         <span class="hljs-comment">#挂载已经申请的pvc磁盘</span><br></code></pre></td></tr></table></figure><h2 id="五、yaml文件内定义的port详解"><a href="#五、yaml文件内定义的port详解" class="headerlink" title="五、yaml文件内定义的port详解"></a>五、yaml文件内定义的port详解</h2><ul><li><p>port<br>port是k8s集群内部访问service的端口，即通过clusterIP: port可以访问到某个service</p></li><li><p>nodePort<br>nodePort是外部访问k8s集群中service的端口，通过nodeIP: nodePort可以从外部访问到某个service。</p></li><li><p>targetPort<br>targetPort是pod的端口，从port和nodePort来的流量经过kube-proxy流入到后端pod的targetPort上，最后进入容器。</p></li><li><p>containerPort<br>containerPort是pod内部容器的端口，targetPort映射到containerPort</p></li></ul><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">es</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">elasticsearch.yml:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    http.cors.enabled: true</span><br><span class="hljs-string">    http.cors.allow-origin: &quot;*&quot;</span><br><span class="hljs-string">    http.cors.allow-headers: Authorization</span><br><span class="hljs-string">    cluster.name: elasticsearch</span><br><span class="hljs-string">    network.host: 0.0.0.0</span><br><span class="hljs-string">    node.name: robin-node</span><br><span class="hljs-string">    http.port: 9200</span><br><span class="hljs-string">    transport.tcp.port: 9300</span><br><span class="hljs-string">    transport.tcp.compress: true</span><br><span class="hljs-string"></span><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">elasticsearch</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">nodeName:</span> <span class="hljs-string">ct1</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">120.77</span><span class="hljs-number">.159</span><span class="hljs-number">.14</span><span class="hljs-string">:5000/yz-test/elasticsearch_ikpinyin:5.6.12</span><br>        <span class="hljs-attr">env:</span> <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">discovery.type</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;single-node&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ES_JAVA_OPTS</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;-Xms512m -Xmx512m&quot;</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9200</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9300</span><br><span class="hljs-comment">#        resources:</span><br><span class="hljs-comment">#            limits:        #定义使用的运行内存大小</span><br><span class="hljs-comment">#              cpu: &#x27;1&#x27;</span><br><span class="hljs-comment">#              memory: 2Gi</span><br><span class="hljs-comment">#            requests:</span><br><span class="hljs-comment">#              cpu: &#x27;1&#x27;</span><br><span class="hljs-comment">#              memory: 2Gi</span><br>        <span class="hljs-attr">volumeMounts:</span>   <span class="hljs-comment">#需要映射出来的数据</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">es-data</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/elasticsearch/data</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">es-config</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/elasticsearch/config/elasticsearch.yml</span>  <br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">elasticsearch.yml</span><br>      <span class="hljs-attr">volumes:</span>    <span class="hljs-comment">#挂载的本机数据卷地址</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">es-data</span><br>        <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/app/elasticsearch/data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">es-config</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">es</span><br>          <span class="hljs-attr">items:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">elasticsearch.yml</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">elasticsearch.yml</span><br>      <span class="hljs-attr">initContainers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">alpine:3.6</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/sbin/sysctl&quot;</span>, <span class="hljs-string">&quot;-w&quot;</span>, <span class="hljs-string">&quot;vm.max_map_count=262144&quot;</span>]<br>        <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch-logging-init</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">es-1</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">29200</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9200</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9200</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">es-2</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">29300</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9300</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9300</span><br></code></pre></td></tr></table></figure><p>就可以通过访问29200和29300端口去进行访问es。</p><h2 id="六、使用command在启动时执行某些脚本"><a href="#六、使用command在启动时执行某些脚本" class="headerlink" title="六、使用command在启动时执行某些脚本"></a>六、使用command在启动时执行某些脚本</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml">        <span class="hljs-attr">command:</span> [<span class="hljs-string">&#x27;/bin/sh&#x27;</span>]<br>        <span class="hljs-attr">args:</span> <br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-c&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br><span class="hljs-string">          set -ex</span><br><span class="hljs-string">          bash /home/1.sh  #路径应为映射进系统内的路径</span><br><span class="hljs-string"></span><br><span class="hljs-comment">#或者写：command: [&quot;/bin/sh&quot;,&quot;-c&quot;,&quot;bash /home/1.sh&quot;]</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
      <category>k8s基础概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes1.21.1安装kube-prometheus</title>
    <link href="/2023/05/09/k8s/k8s%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3%E6%9C%8D%E5%8A%A1/kubernetes1.21.0%E5%AE%89%E8%A3%85kube-prometheus/"/>
    <url>/2023/05/09/k8s/k8s%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3%E6%9C%8D%E5%8A%A1/kubernetes1.21.0%E5%AE%89%E8%A3%85kube-prometheus/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="kubernetes1-21-1安装kube-prometheus"><a href="#kubernetes1-21-1安装kube-prometheus" class="headerlink" title="kubernetes1.21.1安装kube-prometheus"></a>kubernetes1.21.1安装kube-prometheus</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">参考文档：https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/lfl17718347843/</span>p/<span class="hljs-number">14274728</span>.html<br>参考文档：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/weixin_50908696/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">123149821</span><br></code></pre></td></tr></table></figure><p><strong>使用kube-prometheus安装非常方便，前面的prometheus+grafana+metrics-server都不用安装，已经集成在里面。</strong></p><h2 id="1、clone-github地址"><a href="#1、clone-github地址" class="headerlink" title="1、clone github地址"></a>1、clone github地址</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/coreos/kube-prometheus.git<br><br></code></pre></td></tr></table></figure><h2 id="2、部署CRD"><a href="#2、部署CRD" class="headerlink" title="2、部署CRD"></a>2、部署CRD</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> kube-prometheus/manifests<br><br>kubectl apply -f setup/<br></code></pre></td></tr></table></figure><p><strong>如果有一个yaml在apply的时候提示too lang就换成create创建，问题如下:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f setup/0prometheusCustomResourceDefinition.yaml<br>The CustomResourceDefinition <span class="hljs-string">&quot;prometheuses.monitoring.coreos.com&quot;</span> is invalid: metadata.annotations: Too long: must have at most 262144 bytes<br><br>kubectl create -f setup/0prometheusCustomResourceDefinition.yaml<br><br></code></pre></td></tr></table></figure><h2 id="3、修改promethes，alertmanager，grafana的service类型为NodePort类型"><a href="#3、修改promethes，alertmanager，grafana的service类型为NodePort类型" class="headerlink" title="3、修改promethes，alertmanager，grafana的service类型为NodePort类型"></a>3、修改promethes，alertmanager，grafana的service类型为NodePort类型</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim  prometheus-service.yaml <br><br><span class="hljs-comment">#...省略</span><br>spec:<br>  <span class="hljs-built_in">type</span>: NodePort <span class="hljs-comment"># 新增</span><br>  ports:<br>  - name: web<br>    port: 9090<br>    targetPort: web<br>    nodePort: 30090 <span class="hljs-comment"># 新增</span><br><span class="hljs-comment">#...</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim alertmanager-service.yaml <br><br><span class="hljs-comment">#...</span><br>spec:<br>  <span class="hljs-built_in">type</span>: NodePort <span class="hljs-comment"># 新增</span><br>  ports:<br>  - name: web<br>    port: 9093<br>    targetPort: web<br>    nodePort: 30093 <span class="hljs-comment"># 新增</span><br><span class="hljs-comment">#...</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim grafana-service.yaml <br><br>spec:<br>  <span class="hljs-built_in">type</span>: NodePort <span class="hljs-comment"># 新增</span><br>  ports:<br>  - name: http<br>    port: 3000<br>    targetPort: http<br>    nodePort: 30300 <span class="hljs-comment"># 新增</span><br></code></pre></td></tr></table></figure><h2 id="4、启动prometheus"><a href="#4、启动prometheus" class="headerlink" title="4、启动prometheus"></a>4、启动prometheus</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f .<br><br>kubectl get pod -n monitoring<br></code></pre></td></tr></table></figure><p><strong>如果有几个pod创建失败，可能是因为镜像拉取不下来，可以修改成其他镜像地址</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">例：<br>vim kubeStateMetrics-deployment.yaml<br><span class="hljs-comment">#修改：</span><br>image: bitnami/kube-state-metrics:v2.8.2<br><br>vim prometheusAdapter-deployment.yaml<br><span class="hljs-comment">#修改：</span><br>image: selina5288/prometheus-adapter:v0.10.1<br></code></pre></td></tr></table></figure><h2 id="5、访问页面"><a href="#5、访问页面" class="headerlink" title="5、访问页面"></a>5、访问页面</h2><p>grafana页面：<code>30300</code> 账号同密码：<code>admin</code><br>alertmanager页面：<code>30093</code><br>prometheus页面：<code>30090</code></p><p>或者使用命令查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl get svc -n monitoring<br><br></code></pre></td></tr></table></figure><h3 id="访问grafana设置模板。比如8685、8919、10000"><a href="#访问grafana设置模板。比如8685、8919、10000" class="headerlink" title="访问grafana设置模板。比如8685、8919、10000"></a>访问grafana设置模板。比如8685、8919、10000</h3>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
      <category>k8s部署相关服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s安装metrics-server</title>
    <link href="/2023/05/07/k8s/k8s%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3%E6%9C%8D%E5%8A%A1/k8s%E5%AE%89%E8%A3%85metrics-server/"/>
    <url>/2023/05/07/k8s/k8s%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3%E6%9C%8D%E5%8A%A1/k8s%E5%AE%89%E8%A3%85metrics-server/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="k8s安装metrics-server"><a href="#k8s安装metrics-server" class="headerlink" title="k8s安装metrics-server"></a>k8s安装metrics-server</h1><p><code>参考文档：https://www.cnblogs.com/lfl17718347843/p/14283796.html</code></p><h2 id="Kubernetes-Metrics-Server详解："><a href="#Kubernetes-Metrics-Server详解：" class="headerlink" title="Kubernetes Metrics Server详解："></a>Kubernetes Metrics Server详解：</h2><ul><li>Kubernetes Metrics Server 是 Cluster 的核心监控数据的聚合器，kubeadm 默认是不部署的。</li><li>Metrics Server 供 Dashboard 等其他组件使用，是一个扩展的 APIServer，依赖于 API Aggregator。所以，在安装 Metrics Server 之前需要先在 kube-apiserver 中开启 API Aggregator。</li><li>Metrics API 只可以查询当前的度量数据，并不保存历史数据。</li><li>Metrics API URI 为 &#x2F;apis&#x2F;metrics.k8s.io&#x2F;，在 k8s.io&#x2F;metrics 下维护。</li><li>必须部署 metrics-server 才能使用该 API，metrics-server 通过调用 kubelet Summary API 获取数据。</li></ul><h2 id="一、前提条件"><a href="#一、前提条件" class="headerlink" title="一、前提条件"></a>一、前提条件</h2><p>注意：使用 Metrics Server 有必备两个条件：</p><h3 id="1、API-Server-启用-Aggregator-Routing-支持。否则-API-Server-不识别请求："><a href="#1、API-Server-启用-Aggregator-Routing-支持。否则-API-Server-不识别请求：" class="headerlink" title="1、API Server 启用 Aggregator Routing 支持。否则 API Server 不识别请求："></a>1、API Server 启用 Aggregator Routing 支持。否则 API Server 不识别请求：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Error from server (ServiceUnavailable): the server is currently unable to handle the request (get pods.metrics.k8s.io)<br></code></pre></td></tr></table></figure><h3 id="2、API-Server-能访问-Metrics-Server-Pod-IP。否则-API-Server-无法访问-Metrics-Server："><a href="#2、API-Server-能访问-Metrics-Server-Pod-IP。否则-API-Server-无法访问-Metrics-Server：" class="headerlink" title="2、API Server 能访问 Metrics Server Pod IP。否则 API Server 无法访问 Metrics Server："></a>2、API Server 能访问 Metrics Server Pod IP。否则 API Server 无法访问 Metrics Server：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">E1223 07:23:04.330206       1 available_controller.go:420] v1beta1.metrics.k8s.io failed with: failing or missing response from https://10.171.248.214:4443/apis/metrics.k8s.io/v1beta1: Get https://10.171.248.214:4443/apis/metrics.k8s.io/v1beta1: net/http: request canceled <span class="hljs-keyword">while</span> waiting <span class="hljs-keyword">for</span> connection (Client.Timeout exceeded <span class="hljs-keyword">while</span> awaiting headers)<br></code></pre></td></tr></table></figure><h3 id="3、启用API-Aggregator，API-Aggregation-允许在不修改-Kubernetes-核心代码的同时扩展-Kubernetes-API，即：将第三方服务注册到-Kubernetes-API-中，这样就可以通过-Kubernetes-API-来访问第三方服务了，例如：Metrics-Server-API。注：另外一种扩展-Kubernetes-API-的方法是使用-CRD（Custom-Resource-Definition，自定义资源定义）。"><a href="#3、启用API-Aggregator，API-Aggregation-允许在不修改-Kubernetes-核心代码的同时扩展-Kubernetes-API，即：将第三方服务注册到-Kubernetes-API-中，这样就可以通过-Kubernetes-API-来访问第三方服务了，例如：Metrics-Server-API。注：另外一种扩展-Kubernetes-API-的方法是使用-CRD（Custom-Resource-Definition，自定义资源定义）。" class="headerlink" title="3、启用API Aggregator，API Aggregation 允许在不修改 Kubernetes 核心代码的同时扩展 Kubernetes API，即：将第三方服务注册到 Kubernetes API 中，这样就可以通过 Kubernetes API 来访问第三方服务了，例如：Metrics Server API。注：另外一种扩展 Kubernetes API 的方法是使用 CRD（Custom Resource Definition，自定义资源定义）。"></a>3、启用API Aggregator，API Aggregation 允许在不修改 Kubernetes 核心代码的同时扩展 Kubernetes API，即：将第三方服务注册到 Kubernetes API 中，这样就可以通过 Kubernetes API 来访问第三方服务了，例如：Metrics Server API。注：另外一种扩展 Kubernetes API 的方法是使用 CRD（Custom Resource Definition，自定义资源定义）。</h3><h2 id="二、修改配置"><a href="#二、修改配置" class="headerlink" title="二、修改配置"></a>二、修改配置</h2><h3 id="1、检查-API-Server-是否开启了-Aggregator-Routing：查看-API-Server-是否具有-–enable-aggregator-routing-x3D-true-选项"><a href="#1、检查-API-Server-是否开启了-Aggregator-Routing：查看-API-Server-是否具有-–enable-aggregator-routing-x3D-true-选项" class="headerlink" title="1、检查 API Server 是否开启了 Aggregator Routing：查看 API Server 是否具有 –enable-aggregator-routing&#x3D;true 选项"></a>1、检查 API Server 是否开启了 Aggregator Routing：查看 API Server 是否具有 –enable-aggregator-routing&#x3D;true 选项</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ps -ef | grep apiserver | grep enable-aggregator-routing<br></code></pre></td></tr></table></figure><h3 id="2、修改每个-API-Server-的-kube-apiserver-yaml-配置开启-Aggregator-Routing：修改-manifests-配置后-API-Server-会自动重启生效"><a href="#2、修改每个-API-Server-的-kube-apiserver-yaml-配置开启-Aggregator-Routing：修改-manifests-配置后-API-Server-会自动重启生效" class="headerlink" title="2、修改每个 API Server 的 kube-apiserver.yaml 配置开启 Aggregator Routing：修改 manifests 配置后 API Server 会自动重启生效"></a>2、修改每个 API Server 的 kube-apiserver.yaml 配置开启 Aggregator Routing：修改 manifests 配置后 API Server 会自动重启生效</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/kubernetes/manifests/kube-apiserver.yaml<br><br><span class="hljs-comment">#...已省略</span><br>spec:<br>  containers:<br>  - <span class="hljs-built_in">command</span>:<br>    - kube-apiserver<br>    - --advertise-address=192.168.200.3<br>    - --allow-privileged=<span class="hljs-literal">true</span><br>    - --authorization-mode=Node,RBAC<br>    - --client-ca-file=/etc/kubernetes/pki/ca.crt<br>    - --enable-admission-plugins=NodeRestriction<br>    - --enable-bootstrap-token-auth=<span class="hljs-literal">true</span><br>    <span class="hljs-comment">#添加:enable-aggregator-routing=true</span><br>    - --enable-aggregator-routing=<span class="hljs-literal">true</span><br>    - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt<br>    - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt<br>    - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key<br>    - --etcd-servers=https://127.0.0.1:2379<br><span class="hljs-comment">#...已省略</span><br><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h2 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h2><h3 id="1、下载yaml文件"><a href="#1、下载yaml文件" class="headerlink" title="1、下载yaml文件"></a>1、下载yaml文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">github地址：https://github.com/kubernetes-sigs/metrics-server/releases<br><br>wget https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.6.2/components.yaml<br></code></pre></td></tr></table></figure><h3 id="2、修改components-yaml文件并启动"><a href="#2、修改components-yaml文件并启动" class="headerlink" title="2、修改components.yaml文件并启动"></a>2、修改components.yaml文件并启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim components.yaml<br><br><span class="hljs-comment">##省略</span><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  labels:<br>    k8s-app: metrics-server<br>  name: metrics-server<br>  namespace: kube-system<br>spec:<br>  selector:<br>    matchLabels:<br>      k8s-app: metrics-server<br>  strategy:<br>    rollingUpdate:<br>      maxUnavailable: 0<br>  template:<br>    metadata:<br>      labels:<br>        k8s-app: metrics-server<br>    spec:<br>      containers:<br>      - args:<br>        - --cert-dir=/tmp<br>        - --secure-port=4443<br>        - --kubelet-preferred-address-types=InternalIP <span class="hljs-comment">#删掉 ExternalIP,Hostname</span><br>        - --kubelet-use-node-status-port<br>        - --kubelet-insecure-tls                   <span class="hljs-comment"># 加上该启动参数</span><br>        - --metric-resolution=15s<br>        image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1  <span class="hljs-comment"># 镜像地址根据情况修改</span><br>        imagePullPolicy: IfNotPresent<br>        livenessProbe:<br>          failureThreshold: 3<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f components.yaml<br><br><br><span class="hljs-comment">#查看metrics-server服务状态</span><br>kubectl get pod -n kube-system | grep metrics-server<br><br><span class="hljs-comment">#检查 API Server 是否可以连通 Metrics Server</span><br>kubectl describe svc metrics-server -n kube-system<br>输出：<br><span class="hljs-comment">#...省略</span><br>Endpoints:         10.244.0.7:4443<br><span class="hljs-comment">#...</span><br><br><span class="hljs-comment">#在其他几个节点ping一下Endpoints的地址</span><br>ping 10.244.0.7<br></code></pre></td></tr></table></figure><h3 id="3、验证和检查"><a href="#3、验证和检查" class="headerlink" title="3、验证和检查"></a>3、验证和检查</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl top nodes<br><br><br>kubectl top pods -A<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
      <category>k8s部署相关服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubeadm部署高可用k8s集群</title>
    <link href="/2023/05/06/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/kubeadm%E9%83%A8%E7%BD%B2%E9%AB%98%E5%8F%AF%E7%94%A8k8s%E9%9B%86%E7%BE%A4/"/>
    <url>/2023/05/06/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/kubeadm%E9%83%A8%E7%BD%B2%E9%AB%98%E5%8F%AF%E7%94%A8k8s%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="kubeadm部署高可用k8s集群"><a href="#kubeadm部署高可用k8s集群" class="headerlink" title="kubeadm部署高可用k8s集群"></a>kubeadm部署高可用k8s集群</h1><p><code>参考文档：https://www.cnblogs.com/lfl17718347843/p/13417304.html</code></p><h2 id="前言：HA的两种部署模式："><a href="#前言：HA的两种部署模式：" class="headerlink" title="前言：HA的两种部署模式："></a>前言：HA的两种部署模式：</h2><h3 id="1-将ETCD与Master节点组件混合部署在一起"><a href="#1-将ETCD与Master节点组件混合部署在一起" class="headerlink" title="1.将ETCD与Master节点组件混合部署在一起"></a>1.将ETCD与Master节点组件混合部署在一起</h3><p><img src="/2023/05/06/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/kubeadm%E9%83%A8%E7%BD%B2%E9%AB%98%E5%8F%AF%E7%94%A8k8s%E9%9B%86%E7%BE%A4/1805318-20200802132335968-769331513.png" alt="img"></p><h3 id="2-使用独立的ETCD集群，不与Master节点混合部署"><a href="#2-使用独立的ETCD集群，不与Master节点混合部署" class="headerlink" title="2.使用独立的ETCD集群，不与Master节点混合部署"></a>2.使用独立的ETCD集群，不与Master节点混合部署</h3><p><img src="/2023/05/06/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/kubeadm%E9%83%A8%E7%BD%B2%E9%AB%98%E5%8F%AF%E7%94%A8k8s%E9%9B%86%E7%BE%A4/1805318-20200802132415654-1821383240.png" alt="img"></p><p><strong>以下采用（方式1.）混合部署安装！</strong></p><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><p><strong>通过kubeadm搭建一个高可用的k8s集群，kubeadm可以帮助我们快速的搭建k8s集群，高可用主要体现在对master节点组件及etcd存储的高可用</strong></p><table><thead><tr><th>IP地址</th><th>角色</th></tr></thead><tbody><tr><td>192.168.62.128</td><td>master1 + etcd</td></tr><tr><td>192.168.62.129</td><td>master2 + etcd</td></tr><tr><td>192.168.62.130</td><td>master3 + etcd</td></tr><tr><td>192.168.94.123</td><td>负载均衡VIP</td></tr><tr><td>192.168.62.131</td><td>node1</td></tr></tbody></table><h2 id="二、机器初始化"><a href="#二、机器初始化" class="headerlink" title="二、机器初始化"></a>二、机器初始化</h2><h3 id="1-修改主机名、关闭防火墙、selinux、关闭swap分区、时间同步、设置hosts文件等"><a href="#1-修改主机名、关闭防火墙、selinux、关闭swap分区、时间同步、设置hosts文件等" class="headerlink" title="1.修改主机名、关闭防火墙、selinux、关闭swap分区、时间同步、设置hosts文件等"></a>1.修改主机名、关闭防火墙、selinux、关闭swap分区、时间同步、设置hosts文件等</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#修改主机名</span><br>hostnamectl set-hostname master1<br><br><span class="hljs-comment">#关闭防火墙和selinux</span><br>systemctl stop firewalld &amp;&amp; systemctl <span class="hljs-built_in">disable</span> firewalld<br><br><span class="hljs-comment">#关闭SELiunx和swap分区</span><br>swapoff -a &amp;&amp; sed -i <span class="hljs-string">&#x27;/ swap / s/^\(.*\)$/#\1/g&#x27;</span> /etc/fstab<br>setenforce 0 &amp;&amp; sed -i <span class="hljs-string">&#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27;</span> /etc/selinux/config<br><br><span class="hljs-comment">#设置时间同步</span><br>yum install ntpd -y<br>ntpdate cn.pool.ntp.org<br><span class="hljs-comment">#设置定时任务，自动同步时间</span><br>crontab -e<br>*/15 * * * * /usr/sbin/ntpdate -u pool.ntp.org &gt;/dev/null 2&gt;&amp;1<br><br><span class="hljs-comment">#添加hosts文件</span><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">192.168.62.128  master1</span><br><span class="hljs-string">192.168.62.129  master2</span><br><span class="hljs-string">192.168.62.130  master3</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">#设置免密登录（可做可不做，我只是为了方便操作）</span><br>ssh-keygen  <span class="hljs-comment">#一路回车即可</span><br>ssh-copy-id master2<br>ssh-copy-id master3<br></code></pre></td></tr></table></figure><h3 id="2-内核优化、开启IPVS、设置k8s-conf系统参数"><a href="#2-内核优化、开启IPVS、设置k8s-conf系统参数" class="headerlink" title="2.内核优化、开启IPVS、设置k8s.conf系统参数"></a>2.内核优化、开启IPVS、设置k8s.conf系统参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#内核优化</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br><br>sysctl --system<br><br><span class="hljs-comment">#开启IPVS</span><br><span class="hljs-built_in">cat</span> &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">#!/bin/bash</span><br><span class="hljs-string">ipvs_modules=&quot;ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack&quot;</span><br><span class="hljs-string">for kernel_module in \$&#123;ipvs_modules&#125;; </span><br><span class="hljs-string">do </span><br><span class="hljs-string">/sbin/modinfo -F filename \$&#123;kernel_module&#125; &gt; /dev/null 2&gt;&amp;1 </span><br><span class="hljs-string">if [ $? -eq 0 ]; then </span><br><span class="hljs-string">/sbin/modprobe \$&#123;kernel_module&#125; </span><br><span class="hljs-string">fi </span><br><span class="hljs-string">done</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-built_in">chmod</span> 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep ip_vs <br><br><span class="hljs-comment">#所有机器需要设定/etc/sysctl.d/k8s.conf的系统参数 </span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/sysctl.d/k8s.conf </span><br><span class="hljs-string">net.ipv4.tcp_keepalive_time = 600</span><br><span class="hljs-string">net.ipv4.tcp_keepalive_intvl = 30 </span><br><span class="hljs-string">net.ipv4.tcp_keepalive_probes = 10 </span><br><span class="hljs-string">net.ipv6.conf.all.disable_ipv6 = 1 </span><br><span class="hljs-string">net.ipv6.conf.default.disable_ipv6 = 1 </span><br><span class="hljs-string">net.ipv6.conf.lo.disable_ipv6 = 1 </span><br><span class="hljs-string">net.ipv4.neigh.default.gc_stale_time = 120 </span><br><span class="hljs-string">net.ipv4.conf.all.rp_filter = 0 </span><br><span class="hljs-string">net.ipv4.conf.default.rp_filter = 0 </span><br><span class="hljs-string">net.ipv4.conf.default.arp_announce = 2 </span><br><span class="hljs-string">net.ipv4.conf.lo.arp_announce = 2 </span><br><span class="hljs-string">net.ipv4.conf.all.arp_announce = 2</span><br><span class="hljs-string">net.ipv4.ip_forward = 1 </span><br><span class="hljs-string">net.ipv4.tcp_max_tw_buckets = 5000 </span><br><span class="hljs-string">net.ipv4.tcp_syncookies = 1 </span><br><span class="hljs-string">net.ipv4.tcp_max_syn_backlog = 1024 </span><br><span class="hljs-string">net.ipv4.tcp_synack_retries = 2 </span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1 </span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1 </span><br><span class="hljs-string">net.netfilter.nf_conntrack_max = 2310720 </span><br><span class="hljs-string">fs.inotify.max_user_watches=89100 </span><br><span class="hljs-string">fs.may_detach_mounts = 1 </span><br><span class="hljs-string">fs.file-max = 52706963 </span><br><span class="hljs-string">fs.nr_open = 52706963 </span><br><span class="hljs-string">net.bridge.bridge-nf-call-arptables = 1 </span><br><span class="hljs-string">vm.swappiness = 0 </span><br><span class="hljs-string">vm.overcommit_memory=1 </span><br><span class="hljs-string">vm.panic_on_oom=0</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="三、安装过程"><a href="#三、安装过程" class="headerlink" title="三、安装过程"></a>三、安装过程</h2><h3 id="1-安装haproxy以及keepalived服务（Master节点安装）"><a href="#1-安装haproxy以及keepalived服务（Master节点安装）" class="headerlink" title="1.安装haproxy以及keepalived服务（Master节点安装）"></a>1.安装haproxy以及keepalived服务（Master节点安装）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install keepalived haproxy -y<br></code></pre></td></tr></table></figure><h3 id="2-修改Master1节点keepalived配置文件-其他两个master节点只修改权重，把master改成backup"><a href="#2-修改Master1节点keepalived配置文件-其他两个master节点只修改权重，把master改成backup" class="headerlink" title="2.修改Master1节点keepalived配置文件(其他两个master节点只修改权重，把master改成backup)"></a>2.修改Master1节点keepalived配置文件(其他两个master节点只修改权重，把master改成backup)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/keepalived/keepalived.conf<br><br>! Configuration File <span class="hljs-keyword">for</span> keepalived<br><br>global_defs &#123;<br>   router_id LVS_DEVEL<br><br>   <span class="hljs-comment">#指定运行脚本的用户名</span><br>   script_user root<br>   enable_script_security<br>&#125;<br>vrrp_script check_haproxy &#123;<br>    script <span class="hljs-string">&quot;/etc/keepalived/check_haproxy.sh&quot;</span>         <span class="hljs-comment"># 检测脚本路径</span><br>    interval 3<br>    weight -2<br>    fall 10<br>    rise 2<br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state MASTER <span class="hljs-comment">#其他两个master节点只修改权重，把master改成backup</span><br>    <span class="hljs-comment">#非抢占模式</span><br>    nopreempt<br>    interface ens33 <span class="hljs-comment">#网卡名</span><br>    virtual_router_id 51<br>    priority 100 <span class="hljs-comment">#权重，其他的要比他小</span><br>    advert_int 1 <br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass 1111<br>    &#125;<br>    virtual_ipaddress &#123;<br>        192.168.62.123 <span class="hljs-comment">#虚拟ip</span><br>    &#125;<br>    track_script &#123;<br>       chech_haproxy <span class="hljs-comment">#模块</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-三台master节点haproxy配置一样"><a href="#3-三台master节点haproxy配置一样" class="headerlink" title="3.三台master节点haproxy配置一样"></a>3.三台master节点haproxy配置一样</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /etc/haproxy/haproxy.cfg<br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># Global settings</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>global<br>    <span class="hljs-comment"># to have these messages end up in /var/log/haproxy.log you will</span><br>    <span class="hljs-comment"># need to:</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># 1) configure syslog to accept network log events.  This is done</span><br>    <span class="hljs-comment">#    by adding the &#x27;-r&#x27; option to the SYSLOGD_OPTIONS in</span><br>    <span class="hljs-comment">#    /etc/sysconfig/syslog</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># 2) configure local2 events to go to the /var/log/haproxy.log</span><br>    <span class="hljs-comment">#   file. A line like the following can be added to</span><br>    <span class="hljs-comment">#   /etc/sysconfig/syslog</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#    local2.*                       /var/log/haproxy.log</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-built_in">log</span>         127.0.0.1 local2<br><br>    <span class="hljs-built_in">chroot</span>      /var/lib/haproxy<br>    pidfile     /var/run/haproxy.pid<br>    maxconn     4000<br>    user        haproxy<br>    group       haproxy<br>    daemon<br><br>    <span class="hljs-comment"># turn on stats unix socket</span><br>    stats socket /var/lib/haproxy/stats<br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># common defaults that all the &#x27;listen&#x27; and &#x27;backend&#x27; sections will</span><br><span class="hljs-comment"># use if not designated in their block</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>defaults<br>    mode                    http<br>    <span class="hljs-built_in">log</span>                     global<br>    option                  httplog<br>    option                  dontlognull<br>    option http-server-close<br>    option forwardfor       except 127.0.0.0/8<br>    option                  redispatch<br>    retries                 3<br>    <span class="hljs-built_in">timeout</span> http-request    10s<br>    <span class="hljs-built_in">timeout</span> queue           1m<br>    <span class="hljs-built_in">timeout</span> connect         10s<br>    <span class="hljs-built_in">timeout</span> client          1m<br>    <span class="hljs-built_in">timeout</span> server          1m<br>    <span class="hljs-built_in">timeout</span> http-keep-alive 10s<br>    <span class="hljs-built_in">timeout</span> check           10s<br>    maxconn                 3000<br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># main frontend which proxys to the backends</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>frontend  kubernetes-apiserver<br>    mode tcp<br>    <span class="hljs-built_in">bind</span> *:16443<br>    optiontcplog<br>    default_backend             kubernetes-apiserver<br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># round robin balancing between the various backends</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>backend kubernetes-apiserver<br>    mode tcp<br>    balance     roundrobin<br>    server  master1 192.168.62.128:6443 check<br>    server  master2 192.168.62.129:6443 check<br>    server  master3 192.168.62.130:6443 check<br></code></pre></td></tr></table></figure><h3 id="4-编写健康检测脚本（各master机器）-添加执行权限，并启动keepalived和haproxy服务"><a href="#4-编写健康检测脚本（各master机器）-添加执行权限，并启动keepalived和haproxy服务" class="headerlink" title="4.编写健康检测脚本（各master机器）,添加执行权限，并启动keepalived和haproxy服务"></a>4.编写健康检测脚本（各master机器）,添加执行权限，并启动keepalived和haproxy服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /etc/keepalived/check_haproxy.sh<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># HAPROXY down</span><br><br>A=`ps -C haproxy --no-header | <span class="hljs-built_in">wc</span> -l`<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$A</span> -eq 0 ]<br><span class="hljs-keyword">then</span><br>   systmectl start haproxy<br><br><span class="hljs-comment">#如果还是无法启动</span><br><span class="hljs-keyword">if</span> [ ps -C haproxy --no-header | <span class="hljs-built_in">wc</span> -l -eq 0 ]<br><span class="hljs-keyword">then</span><br>   killall -9 haproxy<br>   <span class="hljs-comment">#echo &quot;HAPROXY down&quot; | mail -s &quot;haproxy&quot;</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;`date +&#x27;%Y年%m月%d日%H时%M分%S秒&#x27;: `HAPROXY down&quot;</span> &gt;&gt; ./error.log<br>   <span class="hljs-built_in">sleep</span> 3600<br><span class="hljs-keyword">fi</span> <br><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment">#添加执行权限</span><br><span class="hljs-built_in">chmod</span> +x /etc/keepalived/check_haproxy.sh<br><br><span class="hljs-comment">#启动keepalived和haproxy服务</span><br>systemctl <span class="hljs-built_in">enable</span> keepalived &amp;&amp; systemctl start keepalived &amp;&amp; systemctl status keepalived<br>systemctl <span class="hljs-built_in">enable</span> haproxy &amp;&amp; systemctl start haproxy &amp;&amp; systemctl status haproxy<br></code></pre></td></tr></table></figure><h3 id="5-下载并安装docker"><a href="#5-下载并安装docker" class="headerlink" title="5.下载并安装docker"></a>5.下载并安装docker</h3><h4 id="5-1、卸载旧版本docker"><a href="#5-1、卸载旧版本docker" class="headerlink" title="5.1、卸载旧版本docker"></a>5.1、卸载旧版本docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum remove -y docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine docker-selinux docker-ce<br></code></pre></td></tr></table></figure><h4 id="5-2、安装必要的一些系统工具"><a href="#5-2、安装必要的一些系统工具" class="headerlink" title="5.2、安装必要的一些系统工具"></a>5.2、安装必要的一些系统工具</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><h4 id="5-3、添加软件源信息-修改docker的yum源为阿里源"><a href="#5-3、添加软件源信息-修改docker的yum源为阿里源" class="headerlink" title="5.3、添加软件源信息 修改docker的yum源为阿里源"></a>5.3、添加软件源信息 修改docker的yum源为阿里源</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><span class="hljs-comment">#或者</span><br>wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo<br></code></pre></td></tr></table></figure><h4 id="5-4、更新并安装-Docker-CE"><a href="#5-4、更新并安装-Docker-CE" class="headerlink" title="5.4、更新并安装 Docker-CE"></a>5.4、更新并安装 Docker-CE</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum makecache fast<br>yum -y install docker-ce<br><span class="hljs-comment">#yum -y install docker-ce-18.09.6-3.el7</span><br><span class="hljs-built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="hljs-string">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="hljs-string">  &quot;log-opts&quot;: &#123;</span><br><span class="hljs-string">    &quot;max-size&quot;: &quot;100m&quot;,</span><br><span class="hljs-string">    &quot;max-file&quot;: &quot;5&quot; </span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="hljs-string">  &quot;storage-opts&quot;: [</span><br><span class="hljs-string">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="hljs-string">  ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure><h4 id="5-5、重启docker，使之生效"><a href="#5-5、重启docker，使之生效" class="headerlink" title="5.5、重启docker，使之生效"></a>5.5、重启docker，使之生效</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart docker<br><br>docker info | grep Cgroup<br><span class="hljs-comment"># Cgroup Driver: systemd k8s需要使用systemd驱动</span><br></code></pre></td></tr></table></figure><h3 id="6-配置各节点k8s-yum源"><a href="#6-配置各节点k8s-yum源" class="headerlink" title="6.配置各节点k8s yum源"></a>6.配置各节点k8s yum源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="hljs-string">[kubernetes] </span><br><span class="hljs-string">name=Kubernetes</span><br><span class="hljs-string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">repo_gpgcheck=1</span><br><span class="hljs-string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="7-每个节点安装kubeadm、kubelet、和kubectl"><a href="#7-每个节点安装kubeadm、kubelet、和kubectl" class="headerlink" title="7.每个节点安装kubeadm、kubelet、和kubectl"></a>7.每个节点安装kubeadm、kubelet、和kubectl</h3><p><strong>安装的服务版本需要一致</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install kubeadm-1.21.1 kubectl-1.21.1 kubelet-1.21.1 -y<br><br>systemctl <span class="hljs-built_in">enable</span> kubelet &amp;&amp; systemctl daemon-reload <br></code></pre></td></tr></table></figure><h3 id="8-获取默认配置文件"><a href="#8-获取默认配置文件" class="headerlink" title="8.获取默认配置文件"></a>8.获取默认配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm config <span class="hljs-built_in">print</span> init-defaults &gt; kubeadm-config.yaml<br></code></pre></td></tr></table></figure><h3 id="9-修改初始化配置文件"><a href="#9-修改初始化配置文件" class="headerlink" title="9.修改初始化配置文件"></a>9.修改初始化配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> kubeadm-config.yaml<br><br>apiServer:<br>  certSANs:<br>    - master1<br>    - master2<br>    - master3<br>    - master.k8s.io <span class="hljs-comment">#设置的相关调用域名，与hosts文件内定义一致</span><br>    - 192.168.62.123<br>    - 192.168.62.128<br>    - 192.168.62.129<br>    - 192.168.62.130<br>    - 127.0.0.1<br>  extraArgs:<br>    authorization-mode: Node,RBAC<br>  timeoutForControlPlane: 4m0s<br>apiVersion: kubeadm.k8s.io/v1beta2<br>certificatesDir: /etc/kubernetes/pki<br>clusterName: kubernetes<br>controlPlaneEndpoint: <span class="hljs-string">&quot;master.k8s.io:16443&quot;</span><br>controllerManager: &#123;&#125;<br>dns:<br>  <span class="hljs-built_in">type</span>: CoreDNS<br>etcd:<br>  <span class="hljs-built_in">local</span>:<br>    dataDir: /var/lib/etcd<br>imageRepository: k8s.gcr.io<br>kind: ClusterConfiguration<br>kubernetesVersion: v1.21.0<br>networking:<br>  dnsDomain: cluster.local<br>  podSubnet: 10.244.0.0/16<br>  serviceSubnet: 10.1.0.0/16<br>scheduler: &#123;&#125;<br><br><br><span class="hljs-comment">#---</span><br><span class="hljs-comment">#apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="hljs-comment">#kind: KubeProxyConfiguration</span><br><span class="hljs-comment">#featureGates:</span><br><span class="hljs-comment">#  SupportIPVSProxyMode: true</span><br><span class="hljs-comment">#mode: ipvs</span><br></code></pre></td></tr></table></figure><p><strong>注意：yaml文件内注释的内容需要删除</strong></p><h3 id="10-下载相关镜像"><a href="#10-下载相关镜像" class="headerlink" title="10.下载相关镜像"></a>10.下载相关镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm config images pull --config kubeadm-config.yaml<br><br>国内下载时如果提示：Error response from daemon: manifest <span class="hljs-keyword">for</span> registry.aliyuncs.com/google_containers/coredns:v1.8.4 not found: manifest unknown: manifest unknown, error: <span class="hljs-built_in">exit</span> status 1 To see the stack trace of this error execute with --v=5 or higher<br><br><span class="hljs-comment">#需下载coredns：1.8.4 并修改tag包：</span><br>docker pull coredns/coredns:1.8.4<br>docker tag coredns/coredns:1.8.4 registry.aliyuncs.com/google_containers/coredns:v1.8.4<br></code></pre></td></tr></table></figure><h3 id="11-初始化集群，并生成kubeadm-init。log文件、文件内保存相关的"><a href="#11-初始化集群，并生成kubeadm-init。log文件、文件内保存相关的" class="headerlink" title="11.初始化集群，并生成kubeadm-init。log文件、文件内保存相关的"></a>11.初始化集群，并生成kubeadm-init。log文件、文件内保存相关的</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm init --config=kubeadm-config.yaml | <span class="hljs-built_in">tee</span> kubeadm-init.log<br><br><span class="hljs-comment">#如果初始化失败，重置后再次初始化，命令如下：</span><br>kubeadm reset -f  ; <span class="hljs-built_in">rm</span> -rf ~/.kube<br></code></pre></td></tr></table></figure><h3 id="12-在其他的master节点上新建目录。并分发证书到其他的master节点上"><a href="#12-在其他的master节点上新建目录。并分发证书到其他的master节点上" class="headerlink" title="12.在其他的master节点上新建目录。并分发证书到其他的master节点上"></a>12.在其他的master节点上新建目录。并分发证书到其他的master节点上</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建目录</span><br><span class="hljs-built_in">mkdir</span> -p /etc/kubernetes/pki/etcd<br><br><span class="hljs-comment">#分发证书</span><br>scp /etc/kubernetes/pki/ca.* master2:/etc/kubernetes/pki/<br>scp /etc/kubernetes/pki/sa.* master2:/etc/kubernetes/pki/<br>scp /etc/kubernetes/pki/front-proxy-ca.* master2:/etc/kubernetes/pki/<br>scp /etc/kubernetes/pki/etcd/ca.* master2:/etc/kubernetes/pki/etcd/<br>scp /etc/kubernetes/admin.conf master2:/etc/kubernetes/<br><br>scp /etc/kubernetes/pki/ca.* master3:/etc/kubernetes/pki/<br>scp /etc/kubernetes/pki/sa.* master3:/etc/kubernetes/pki/<br>scp /etc/kubernetes/pki/front-proxy-ca.* master3:/etc/kubernetes/pki/<br>scp /etc/kubernetes/pki/etcd/ca.* master3:/etc/kubernetes/pki/etcd/<br>scp /etc/kubernetes/admin.conf master3:/etc/kubernetes/<br></code></pre></td></tr></table></figure><h3 id="13-master节点加入集群"><a href="#13-master节点加入集群" class="headerlink" title="13.master节点加入集群"></a>13.master节点加入集群</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm <span class="hljs-built_in">join</span> 192.168.62.123:16443 --token abcdef.0123456789abcdef \<br>    --discovery-token-ca-cert-hash sha256:311c421308389152175e7a230253109fc2e6603156a26904771267e0be1c8177 \<br>    --control-plane<br></code></pre></td></tr></table></figure><h3 id="14-将master主节点的admin-conf文件复制到node节点"><a href="#14-将master主节点的admin-conf文件复制到node节点" class="headerlink" title="14.将master主节点的admin.conf文件复制到node节点"></a>14.将master主节点的admin.conf文件复制到node节点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">scp /etc/kubernetes/admin.conf node1:/etc/kubernetes/<br></code></pre></td></tr></table></figure><h3 id="15-node节点加入集群"><a href="#15-node节点加入集群" class="headerlink" title="15.node节点加入集群"></a>15.node节点加入集群</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm <span class="hljs-built_in">join</span> 192.168.62.123:16443 --token abcdef.0123456789abcdef \<br>    --discovery-token-ca-cert-hash sha256:311c421308389152175e7a230253109fc2e6603156a26904771267e0be1c8177<br></code></pre></td></tr></table></figure><h3 id="16-master节点执行以下命令，node节点随意"><a href="#16-master节点执行以下命令，node节点随意" class="headerlink" title="16.master节点执行以下命令，node节点随意"></a>16.master节点执行以下命令，node节点随意</h3><p>root 用户执行以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot;</span> &gt;&gt; ~/.bash_profile<br><span class="hljs-built_in">source</span> .bash_profile<br></code></pre></td></tr></table></figure><p>非 root 用户执行以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><h3 id="17-安装网络插件flannel"><a href="#17-安装网络插件flannel" class="headerlink" title="17.安装网络插件flannel"></a>17.安装网络插件flannel</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<br></code></pre></td></tr></table></figure><h3 id="18-查看集群状态"><a href="#18-查看集群状态" class="headerlink" title="18.查看集群状态"></a>18.查看集群状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl get nodes<br>kubectl get pod -A<br></code></pre></td></tr></table></figure><h3 id="19-kubectl补齐命令"><a href="#19-kubectl补齐命令" class="headerlink" title="19.kubectl补齐命令"></a>19.kubectl补齐命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure><h2 id="四、ETCD验证"><a href="#四、ETCD验证" class="headerlink" title="四、ETCD验证"></a>四、ETCD验证</h2><p><strong>该步骤主要为验证<code>etcdctl</code>是否能正常使用，不需要安装的可以跳过</strong></p><h3 id="1-下载-etcdctl-客户端命令行工具"><a href="#1-下载-etcdctl-客户端命令行工具" class="headerlink" title="1.下载 etcdctl 客户端命令行工具"></a>1.下载 etcdctl 客户端命令行工具</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/etcd-io/etcd/releases/download/v3.4.14/etcd-v3.4.14-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="2-解压并加入环境变量"><a href="#2-解压并加入环境变量" class="headerlink" title="2.解压并加入环境变量"></a>2.解压并加入环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -zxf etcd-v3.4.14-linux-amd64.tar.gz<br><span class="hljs-built_in">mv</span> etcd-v3.4.14-linux-amd64/etcdctl /usr/local/bin<br><span class="hljs-built_in">chmod</span> +x /usr/local/bin/<br></code></pre></td></tr></table></figure><h3 id="3-验证etcdctl是否能用"><a href="#3-验证etcdctl是否能用" class="headerlink" title="3.验证etcdctl是否能用"></a>3.验证<code>etcdctl</code>是否能用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">etcdctl version<br></code></pre></td></tr></table></figure><h3 id="4-查看etcd高可用集群健康状态"><a href="#4-查看etcd高可用集群健康状态" class="headerlink" title="4.查看etcd高可用集群健康状态"></a>4.查看<code>etcd</code>高可用集群健康状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ETCDCTL_API=3 etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/peer.crt --key=/etc/kubernetes/pki/etcd/peer.key --write-out=table --endpoints=192.168.62.128:2379,192.168.62.129:2379,192.168.62.130:2379 endpoint health<br></code></pre></td></tr></table></figure><h3 id="5-查看etcd高可用集群leader"><a href="#5-查看etcd高可用集群leader" class="headerlink" title="5.查看etcd高可用集群leader"></a>5.查看<code>etcd</code>高可用集群leader</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ETCDCTL_API=3 etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/peer.crt --key=/etc/kubernetes/pki/etcd/peer.key --write-out=table --endpoints=192.168.62.128:2379,192.168.62.129:2379,192.168.62.130:2379 endpoint status<br></code></pre></td></tr></table></figure><h2 id="五、部署dashboard"><a href="#五、部署dashboard" class="headerlink" title="五、部署dashboard"></a>五、部署<code>dashboard</code></h2><h3 id="1-部署Kuboard"><a href="#1-部署Kuboard" class="headerlink" title="1.部署Kuboard"></a>1.部署Kuboard</h3><p><img src="/2023/05/06/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/kubeadm%E9%83%A8%E7%BD%B2%E9%AB%98%E5%8F%AF%E7%94%A8k8s%E9%9B%86%E7%BE%A4/image-20230526104752545.png" alt="image-20230526104752545"></p><h4 id="执行如下命令："><a href="#执行如下命令：" class="headerlink" title="执行如下命令："></a>执行如下命令：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f https://addons.kuboard.cn/kuboard/kuboard-v3.yaml<br><br><br><span class="hljs-comment">#等待k8s就绪</span><br><span class="hljs-comment">#在浏览器中打卡链接 http://192.168.62.123:30080</span><br><span class="hljs-comment">#初始化用户名：admin和密码：Kuboard123</span><br></code></pre></td></tr></table></figure><h3 id="2-部署kubernetes-dashboard"><a href="#2-部署kubernetes-dashboard" class="headerlink" title="2.部署kubernetes-dashboard"></a>2.部署kubernetes-dashboard</h3><p><img src="/2023/05/06/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/kubeadm%E9%83%A8%E7%BD%B2%E9%AB%98%E5%8F%AF%E7%94%A8k8s%E9%9B%86%E7%BE%A4/image-20230526112652590.png" alt="image-20230526112652590"></p><h4 id="2-1、下载-recommended-yaml-文件"><a href="#2-1、下载-recommended-yaml-文件" class="headerlink" title="2.1、下载 recommended.yaml 文件"></a>2.1、下载 recommended.yaml 文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml<br></code></pre></td></tr></table></figure><h4 id="2-2、修改recommended-yaml文件"><a href="#2-2、修改recommended-yaml文件" class="headerlink" title="2.2、修改recommended.yaml文件"></a>2.2、修改recommended.yaml文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">---<br>kind: Service<br>apiVersion: v1<br>metadata:<br>  labels:<br>    k8s-app: kubernetes-dashboard<br>  name: kubernetes-dashboard<br>  namespace: kubernetes-dashboard<br>spec:<br>  <span class="hljs-built_in">type</span>: NodePort <span class="hljs-comment">#增加</span><br>  ports:<br>    - port: 443<br>      targetPort: 8443<br>      nodePort: 30000 <span class="hljs-comment">#增加</span><br>  selector:<br>    k8s-app: kubernetes-dashboard<br></code></pre></td></tr></table></figure><h4 id="2-3、创建证书"><a href="#2-3、创建证书" class="headerlink" title="2.3、创建证书"></a>2.3、创建证书</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建工作目录</span><br><span class="hljs-built_in">mkdir</span> /app/dashboard-certs &amp;&amp; <span class="hljs-built_in">cd</span> /app/dashboard-certs/<br><br><span class="hljs-comment"># 创建命名空间</span><br>kubectl create namespace kubernetes-dashboard<br><br><span class="hljs-comment"># 创建key文件</span><br>openssl genrsa -out dashboard.key 2048<br><br><span class="hljs-comment"># 证书请求</span><br>openssl req -days 36000 -new -out dashboard.csr -key dashboard.key -subj <span class="hljs-string">&#x27;/CN=dashboard-cert&#x27;</span><br><br><span class="hljs-comment"># 自签证书</span><br>openssl x509 -req -<span class="hljs-keyword">in</span> dashboard.csr -signkey dashboard.key -out dashboard.crt<br><br><span class="hljs-comment"># 创建 kubernetes-dashboard-certs 对象</span><br>kubectl create secret generic kubernetes-dashboard-certs --from-file=dashboard.key --from-file=dashboard.crt -n kubernetes-dashboard<br><br></code></pre></td></tr></table></figure><h4 id="2-4、启动-dashboard"><a href="#2-4、启动-dashboard" class="headerlink" title="2.4、启动 dashboard"></a>2.4、启动 dashboard</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f recommended.yaml<br><br><span class="hljs-comment">#（如果报错：Error from server (AlreadyExists): error when creating &quot;./recommended.yaml&quot;: namespaces &quot;kubernetes-dashboard&quot; already exists这个忽略不计，不影响。）</span><br></code></pre></td></tr></table></figure><h4 id="2-5、查看运行状态"><a href="#2-5、查看运行状态" class="headerlink" title="2.5、查看运行状态"></a>2.5、查看运行状态</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl get pod -n kubernetes-dashboard -owide<br><br>kubectl get svc -n kubernetes-dashboard<br></code></pre></td></tr></table></figure><h4 id="2-6、创建-dashboard-管理员并为用户分配权限"><a href="#2-6、创建-dashboard-管理员并为用户分配权限" class="headerlink" title="2.6、创建 dashboard 管理员并为用户分配权限"></a>2.6、创建 dashboard 管理员并为用户分配权限</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> admin_dashboard-bind-cluster-role.yaml<br><br><span class="hljs-comment">##创建 dashboard 管理员</span><br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  labels:<br>    k8s-app: kubernetes-dashboard<br>  name: dashboard-admin<br>  namespace: kubernetes-dashboard<br>---<br><span class="hljs-comment">##为用户分配权限</span><br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRoleBinding<br>metadata:<br>  name: dashboard-admin-bind-cluster-role<br>  labels:<br>    k8s-app: kubernetes-dashboard<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: cluster-admin<br>subjects:<br>- kind: ServiceAccount<br>  name: dashboard-admin<br>  namespace: kubernetes-dashboard<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f admin_dashboard-bind-cluster-role.yaml<br></code></pre></td></tr></table></figure><h4 id="2-7、查看并复制用户-Token"><a href="#2-7、查看并复制用户-Token" class="headerlink" title="2.7、查看并复制用户 Token"></a>2.7、查看并复制用户 Token</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep dashboard-admin | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">Name:         dashboard-admin-token-dfq42<br>Namespace:    kubernetes-dashboard<br>Labels:       &lt;none&gt;<br>Annotations:  kubernetes.io/service-account.name: dashboard-admin<br><span class="hljs-code">              kubernetes.io/service-account.uid: e0d31f53-14b7-4342-b502-6e1635078814</span><br><br>Type:  kubernetes.io/service-account-token<br><br><span class="hljs-section">Data</span><br><span class="hljs-section">====</span><br>namespace:  20 bytes<br>token:      eyJhbGciOiJSUzI1NiIsImtpZCI6ImttWWwtREctYnZEV2RuYUlJRTBYaExOUmdZWFllcWtfVDNRTlB1UVNYNEkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tZGZxNDIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiZTBkMzFmNTMtMTRiNy00MzQyLWI1MDItNmUxNjM1MDc4ODE0Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.bokZaMGtvHltpg1JN3GIrtTEsOlMha-GeDSOOdKrh-wvNrHeHsj9FSTa1l5gPDSJfzuo2UlItuYQMTm7-A3h33TlW3CeVfAmf0-Vx1irlHT3awnpC0qG2Ci5_WbJai2QKlNqnYNakG-0mw9bEXfZ-LP-wq7d8Xy-tcTp5xd8i3K1h1L-Mh2JRAW2vPpJMOPDegCy9UY2NK9h37eesczIHWfzKNBQYJM3rEuhLgWyxjPsF3A0j3vMbVORvpryj9ushOvMYTDr1KHULmvWKKgo0ZCbAzWXRJKU1e24I48pRkBc9zm29wxBr7aV7TJRFChHNtKnvNphWloVLMNFUVssQg<br>ca.crt:     1066 bytes<br><br></code></pre></td></tr></table></figure><h4 id="2-8、复制-token-并访问-dashboard"><a href="#2-8、复制-token-并访问-dashboard" class="headerlink" title="2.8、复制 token 并访问 dashboard"></a>2.8、复制 token 并访问 dashboard</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">https://192.168.62.123:30000<br><br>输入复制的token即可访问![image-20230526114241393](kubeadm部署高可用k8s集群/image-20230526114241393.png)<br></code></pre></td></tr></table></figure><p><img src="/2023/05/06/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/kubeadm%E9%83%A8%E7%BD%B2%E9%AB%98%E5%8F%AF%E7%94%A8k8s%E9%9B%86%E7%BE%A4/image-20230526114249795.png" alt="image-20230526114249795"></p><p><strong>cpu和内存使用情况需要部署<code>Metrics-Server</code>才会显示！《可参考k8s安装metrics-server.md》文档</strong></p>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
      <category>k8s环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用LVS实现k8s高可用-安装手册</title>
    <link href="/2023/05/05/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E4%BD%BF%E7%94%A8LVS%E5%AE%9E%E7%8E%B0k8s%E9%AB%98%E5%8F%AF%E7%94%A8%E5%AE%89%E8%A3%85/"/>
    <url>/2023/05/05/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E4%BD%BF%E7%94%A8LVS%E5%AE%9E%E7%8E%B0k8s%E9%AB%98%E5%8F%AF%E7%94%A8%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用LVS实现k8s高可用-安装手册"><a href="#使用LVS实现k8s高可用-安装手册" class="headerlink" title="使用LVS实现k8s高可用-安装手册"></a>使用LVS实现k8s高可用-安装手册</h1><h2 id="一、机器规划"><a href="#一、机器规划" class="headerlink" title="一、机器规划"></a>一、机器规划</h2><table><thead><tr><th>机器IP</th><th>备注</th></tr></thead><tbody><tr><td>192.168.94.131</td><td>k8s-master-1</td></tr><tr><td>192.168.94.132</td><td>k8s-master-2</td></tr><tr><td>192.168.94.133</td><td>k8s-master-3</td></tr><tr><td>192.168.94.134</td><td>k8s-node-1</td></tr><tr><td>10.92.96.1</td><td>LVS</td></tr></tbody></table><h2 id="二、安装过程"><a href="#二、安装过程" class="headerlink" title="二、安装过程"></a>二、安装过程</h2><p><strong>先关闭防火墙，以及seliunx、同步时间（过程已跳过）</strong></p><h3 id="1、各节点下载docker源"><a href="#1、各节点下载docker源" class="headerlink" title="1、各节点下载docker源"></a>1、各节点下载docker源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h3 id="2、各节点安装docker服务并加入开机启动"><a href="#2、各节点安装docker服务并加入开机启动" class="headerlink" title="2、各节点安装docker服务并加入开机启动"></a>2、各节点安装docker服务并加入开机启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install docker-ce<br>systemctl start docker &amp;&amp; systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><h3 id="3、各节点配置docker加速器并修改成k8s驱动、daemon-json文件如果没有自己创建"><a href="#3、各节点配置docker加速器并修改成k8s驱动、daemon-json文件如果没有自己创建" class="headerlink" title="3、各节点配置docker加速器并修改成k8s驱动、daemon.json文件如果没有自己创建"></a>3、各节点配置docker加速器并修改成k8s驱动、daemon.json文件如果没有自己创建</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;&gt;  /etc/docker/daemon.json &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="hljs-string">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="hljs-string">  &quot;log-opts&quot;: &#123;</span><br><span class="hljs-string">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="hljs-string">  &quot;storage-opts&quot;: [</span><br><span class="hljs-string">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="hljs-string">  ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="4、重启docker服务"><a href="#4、重启docker服务" class="headerlink" title="4、重启docker服务"></a>4、重启docker服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="5、更改各节点主机名"><a href="#5、更改各节点主机名" class="headerlink" title="5、更改各节点主机名"></a>5、更改各节点主机名</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">homenamectl set-hostname k8s-master-1<br></code></pre></td></tr></table></figure><h3 id="6、配置各节点hosts文件"><a href="#6、配置各节点hosts文件" class="headerlink" title="6、配置各节点hosts文件"></a>6、配置各节点hosts文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim  /etc/hosts<br><br>192.168.94.131 k8s-master-1<br>192.168.94.132 k8s-master-2<br>192.168.94.133 k8s-master-3<br>192.168.94.131 apiserver.cluster.local <span class="hljs-comment">#定义一个api的域名，并指向各台master机器，机器上ip改为当前master机器</span><br></code></pre></td></tr></table></figure><h3 id="7、各节点内核调整-将桥接的IPv4流量传递到iptables的链"><a href="#7、各节点内核调整-将桥接的IPv4流量传递到iptables的链" class="headerlink" title="7、各节点内核调整,将桥接的IPv4流量传递到iptables的链"></a>7、各节点内核调整,将桥接的IPv4流量传递到iptables的链</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">net.ipv4.ip_nonlocal_bind = 1</span><br><span class="hljs-string">net.ipv4.ip_forward = 1</span><br><span class="hljs-string">EOF</span><br><br>sysctl -p /etc/sysctl.d/k8s.conf<br></code></pre></td></tr></table></figure><h3 id="8、各节点配置k8s的yum源"><a href="#8、各节点配置k8s的yum源" class="headerlink" title="8、各节点配置k8s的yum源"></a>8、各节点配置k8s的yum源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[kubernetes]</span><br><span class="hljs-string">name=Kubernetes</span><br><span class="hljs-string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">repo_gpgcheck=1</span><br><span class="hljs-string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg \</span><br><span class="hljs-string">https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="9、各节点安装ipset服务"><a href="#9、各节点安装ipset服务" class="headerlink" title="9、各节点安装ipset服务"></a>9、各节点安装ipset服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install ipvsadm ipset sysstat conntrack libseccomp<br></code></pre></td></tr></table></figure><h3 id="10、各节点开启ipvs模块"><a href="#10、各节点开启ipvs模块" class="headerlink" title="10、各节点开启ipvs模块"></a>10、各节点开启ipvs模块</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">     #!/bin/sh</span><br><span class="hljs-string">     modprobe -- ip_vs</span><br><span class="hljs-string">     modprobe -- ip_vs_rr</span><br><span class="hljs-string">     modprobe -- ip_vs_wrr</span><br><span class="hljs-string">     modprobe -- ip_vs_sh</span><br><span class="hljs-string">     modprobe -- nf_conntrack</span><br><span class="hljs-string">EOF</span><br><span class="hljs-built_in">chmod</span> 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash <br><br>/etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4<br></code></pre></td></tr></table></figure><h3 id="11、每个节点安装kubeadm-kubelet和kubectl"><a href="#11、每个节点安装kubeadm-kubelet和kubectl" class="headerlink" title="11、每个节点安装kubeadm,kubelet和kubectl"></a>11、每个节点安装kubeadm,kubelet和kubectl</h3><p>安装的kubeadm、kubectl和kubelet要和kubernetes版本一致，kubelet加入开机启动之后不手动启动，要不然会报错，初始化集群之后集群会自动启动kubelet服务！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install kubeadm kubelet kubectl<br><span class="hljs-comment">#指定版本：yum install kubeadm-1.21.1 kubectl-1.21.1 kubelet-1.21.1 -y</span><br><br>systemctl <span class="hljs-built_in">enable</span> kubelet &amp;&amp; systemctl daemon-reload<br></code></pre></td></tr></table></figure><h3 id="12、获取默认配置文件"><a href="#12、获取默认配置文件" class="headerlink" title="12、获取默认配置文件"></a>12、获取默认配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm config <span class="hljs-built_in">print</span> init-defaults &gt; kubeadm-config.yaml<br></code></pre></td></tr></table></figure><h3 id="13、修改master节点初始化配置文件"><a href="#13、修改master节点初始化配置文件" class="headerlink" title="13、修改master节点初始化配置文件"></a>13、修改master节点初始化配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> kubeadm-config.yaml<br><span class="hljs-comment">#</span><br>apiVersion: kubeadm.k8s.io/v1beta3<br>bootstrapTokens:<br>- <span class="hljs-built_in">groups</span>:<br>  - system:bootstrappers:kubeadm:default-node-token<br>  token: abcdef.0123456789abcdef<br>  ttl: 24h0m0s<br>  usages:<br>  - signing<br>  - authentication<br>kind: InitConfiguration<br>localAPIEndpoint:<br>  advertiseAddress: 192.168.94.131  <span class="hljs-comment">#本机地址</span><br>  bindPort: 6443<br>nodeRegistration:<br>  criSocket: /var/run/dockershim.sock<br>  imagePullPolicy: IfNotPresent<br>  name: k8s-master-1    <span class="hljs-comment">#设置的name名</span><br>  taints: null<br>---<br>apiServer:<br>  timeoutForControlPlane: 4m0s<br>  certSANs:<br>    - 127.0.0.1<br>    - apiserver.cluster.local  <span class="hljs-comment">#设置的相关调用域名，与hosts文件内定义一致</span><br>    - 192.168.94.131<br>    - 192.168.94.132<br>    - 192.168.94.133<br>    - 10.96.96.1   <span class="hljs-comment">#定义的虚拟ip</span><br>apiVersion: kubeadm.k8s.io/v1beta3<br>certificatesDir: /etc/kubernetes/pki<br>clusterName: kubernetes<br>controllerManager: &#123;&#125;<br>controlPlaneEndpoint: apiserver.cluster.local:6443<br>dns: &#123;&#125;<br>etcd:<br>  <span class="hljs-built_in">local</span>:<br>    dataDir: /var/lib/etcd<br>imageRepository: registry.aliyuncs.com/google_containers<br>kind: ClusterConfiguration<br>kubernetesVersion: 1.22.1<br>networking:<br>  dnsDomain: cluster.local<br>  serviceSubnet: 10.20.0.0/16<br>  podSubnet: 10.30.0.0/16<br>scheduler: &#123;&#125;<br><br>---<br>apiVersion: kubeproxy.config.k8s.io/v1alpha1<br>kind: KubeProxyConfiguration<br>featureGates:<br>  SupportIPVSProxyMode: <span class="hljs-literal">true</span><br>mode: ipvs<br>ipvs:<br>  excludeCIDRs: <br>    - 10.96.96.1/32<br></code></pre></td></tr></table></figure><h3 id="14、下载相关镜像"><a href="#14、下载相关镜像" class="headerlink" title="14、下载相关镜像"></a>14、下载相关镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm config images pull --config kubeadm-config.yaml<br><span class="hljs-comment">#-------------------------------------------------------------------------------</span><br>[config/images] Pulled registry.aliyuncs.com/google_containers/kube-apiserver:v1.22.1<br>[config/images] Pulled registry.aliyuncs.com/google_containers/kube-controller-manager:v1.22.1<br>[config/images] Pulled registry.aliyuncs.com/google_containers/kube-scheduler:v1.22.1<br>[config/images] Pulled registry.aliyuncs.com/google_containers/kube-proxy:v1.22.1<br>[config/images] Pulled registry.aliyuncs.com/google_containers/pause:3.5<br>[config/images] Pulled registry.aliyuncs.com/google_containers/etcd:3.5.0-0<br>failed to pull image <span class="hljs-string">&quot;registry.aliyuncs.com/google_containers/coredns:v1.8.4&quot;</span>: output: Error response from daemon: manifest <span class="hljs-keyword">for</span> registry.aliyuncs.com/google_containers/coredns:v1.8.4 not found: manifest unknown: manifest unknown<br>, error: <span class="hljs-built_in">exit</span> status 1<br>To see the stack trace of this error execute with --v=5 or higher<br><span class="hljs-comment">#-------------------------------------------------------------------------------</span><br><br><span class="hljs-comment">#仓库需下载coredns：1.8.4 并修改tag包</span><br>docker pull coredns/coredns:1.8.4<br>docker tag coredns/coredns:1.8.4 registry.aliyuncs.com/google_containers/coredns:v1.8.4<br></code></pre></td></tr></table></figure><h3 id="15、初始化集群，并生成kubeadm-init。log文件、文件内保存相关的"><a href="#15、初始化集群，并生成kubeadm-init。log文件、文件内保存相关的" class="headerlink" title="15、初始化集群，并生成kubeadm-init。log文件、文件内保存相关的"></a>15、初始化集群，并生成kubeadm-init。log文件、文件内保存相关的</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm init --config=kubeadm-config.yaml  --upload-certs | <span class="hljs-built_in">tee</span> kubeadm-init.log<br><br><span class="hljs-comment">#如果初始化失败，重置后再次初始化，命令如下：</span><br>kubeadm reset -f ; ipvsadm --clear  ; <span class="hljs-built_in">rm</span> -rf ~/.kube<br></code></pre></td></tr></table></figure><h3 id="16、master节点安装calio网络组件"><a href="#16、master节点安装calio网络组件" class="headerlink" title="16、master节点安装calio网络组件"></a>16、master节点安装calio网络组件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://docs.projectcalico.org/v3.19/manifests/calico.yaml<br><br>kubectl apply -f calio.yaml<br></code></pre></td></tr></table></figure><h3 id="17、master节点加入集群执行以下命令"><a href="#17、master节点加入集群执行以下命令" class="headerlink" title="17、master节点加入集群执行以下命令"></a>17、master节点加入集群执行以下命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm <span class="hljs-built_in">join</span> apiserver.cluster.local:6443 --token abcdef.0123456789abcdef \<br>  --discovery-token-ca-cert-hash sha256:ec8b3f1b1b32b2fa55f69de41d22eb097e6c04805483dc3957155d2125670fc7 \<br>  --control-plane --certificate-key dffb9dbdbe5b60b775d390460147646a962a5a5d8b2965fa42cc581e533a4fe4<br></code></pre></td></tr></table></figure><h3 id="18、各master机器执行"><a href="#18、各master机器执行" class="headerlink" title="18、各master机器执行"></a>18、各master机器执行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><h3 id="19、各master节点加入以后修改-x2F-etc-x2F-hosts文件"><a href="#19、各master节点加入以后修改-x2F-etc-x2F-hosts文件" class="headerlink" title="19、各master节点加入以后修改&#x2F;etc&#x2F;hosts文件"></a>19、各master节点加入以后修改&#x2F;etc&#x2F;hosts文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/hosts<br>192.168.94.13X apiserver.cluster.local <span class="hljs-comment">#改成本机地址</span><br></code></pre></td></tr></table></figure><h3 id="可能遇到的问题："><a href="#可能遇到的问题：" class="headerlink" title="可能遇到的问题："></a>可能遇到的问题：</h3><h4 id="1、master节点错误处理："><a href="#1、master节点错误处理：" class="headerlink" title="1、master节点错误处理："></a>1、master节点错误处理：</h4><p>在1.20.2版本中,使用kubeadm进行集群初始化时,虽然可以正常部署,但是查看pod情况的时候可以看到kube-proxy无法运行成功 一直状态为：CrashLoopBackOff</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl edit cm kube-proxy -n kube-system<br><span class="hljs-comment">#在编辑模式中找到以下字段，删除后保存</span><br>featureGates: <br>  SupportIPVSProxyMode: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="2、kubectl检查组件健康状态异常处理"><a href="#2、kubectl检查组件健康状态异常处理" class="headerlink" title="2、kubectl检查组件健康状态异常处理"></a>2、kubectl检查组件健康状态异常处理</h4><p>问题描述：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#kubectl get cs</span><br><span class="hljs-comment">#------------------------------------------------</span><br>Warning: v1 ComponentStatus is deprecated <span class="hljs-keyword">in</span> v1.19+<br>NAME                 STATUS      MESSAGE                                                                                       ERROR<br>controller-manager   Unhealthy   Get <span class="hljs-string">&quot;http://127.0.0.1:10252/healthz&quot;</span>: dial tcp 127.0.0.1:10252: connect: connection refused   <br>scheduler            Unhealthy   Get <span class="hljs-string">&quot;http://127.0.0.1:10251/healthz&quot;</span>: dial tcp 127.0.0.1:10251: connect: connection refused   <br>etcd-0               Healthy     &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125; <br><span class="hljs-comment">#----------------------------------------------------</span><br></code></pre></td></tr></table></figure><p>问题解决:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /etc/kubernetes/manifests<br><br>vim kube-controller-manager.yaml   //注释 --port=0<br>vim kube-scheduler.yaml   //注释 --port=0<br><span class="hljs-comment">#重启kubelet服务，如果集群运行很久不建议重启kubelet服务，可以对kube-controller-manager、kube-scheduler的deployment重启</span><br>systemctl restart kubelet.service<br></code></pre></td></tr></table></figure><h3 id="20、node节点加入集群执行以下命令"><a href="#20、node节点加入集群执行以下命令" class="headerlink" title="20、node节点加入集群执行以下命令"></a>20、node节点加入集群执行以下命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm <span class="hljs-built_in">join</span> apiserver.cluster.local:6443 --token abcdef.0123456789abcdef \<br>  --discovery-token-ca-cert-hash sha256:4b79b65275442d2d42efb0b7d3b81fa42fbfdbfb21d2beab1659d9d1734a6100<br></code></pre></td></tr></table></figure><h3 id="21、创建LVS服务、master机器创建并执行-因为需要执行“步骤22”所以以下内容可以不执行"><a href="#21、创建LVS服务、master机器创建并执行-因为需要执行“步骤22”所以以下内容可以不执行" class="headerlink" title="21、创建LVS服务、master机器创建并执行(因为需要执行“步骤22”所以以下内容可以不执行)"></a>21、创建LVS服务、master机器创建并执行(因为需要执行“步骤22”所以以下内容可以不执行)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> kube-lvscare.yaml<br><span class="hljs-comment">#</span><br>apiVersion: apps/v1<br>kind: DaemonSet<br>metadata:<br>  name: kube-lvscare<br>  namespace: kube-system<br>spec:<br>  selector:<br>    matchLabels:<br>      component: kube-lvscare<br>  template:<br>    metadata:<br>      labels:<br>        component: kube-lvscare<br>        tier: control-plane<br>    spec:<br>      affinity:<br>        nodeAffinity:<br>          requiredDuringSchedulingIgnoredDuringExecution:<br>            nodeSelectorTerms:<br>            - matchExpressions:<br>              - key: node-role.kubernetes.io/master<br>                operator: DoesNotExist<br>      hostNetwork: <span class="hljs-literal">true</span><br>      priorityClassName: system-cluster-critical<br>      containers:<br>      - image: fanux/lvscare:v1.1.1<br>        imagePullPolicy: IfNotPresent<br>        name: kube-lvscare<br>        args:<br>        - care<br>        - --vs<br>        - 10.96.96.1:6443 <span class="hljs-comment">#定义的LVS虚拟ip</span><br>        - --rs<br>        - 192.168.94.131:6443  <span class="hljs-comment">#master节点IP地址+6443端口</span><br>        - --rs<br>        - 192.168.94.132:6443  <span class="hljs-comment">#master节点IP地址+6443端口</span><br>        - --rs<br>        - 192.168.94.133:6443  <span class="hljs-comment">#master节点IP地址+6443端口</span><br>        - --health-path<br>        - /healthz<br>        - --health-schem<br>        - https<br>        <span class="hljs-built_in">command</span>:<br>        - /usr/bin/lvscare<br>        resources: &#123;&#125;<br>        securityContext:<br>          privileged: <span class="hljs-literal">true</span><br>        volumeMounts:<br>        - mountPath: /lib/modules<br>          name: lib-modules<br>          readOnly: <span class="hljs-literal">true</span><br>      volumes:<br>      - hostPath:<br>          path: /lib/modules<br>          <span class="hljs-built_in">type</span>: <span class="hljs-string">&quot;&quot;</span><br>        name: lib-modules<br><br><span class="hljs-comment">#创建相关LVS服务</span><br>kubectl apply -f kube-lvscare.yaml<br></code></pre></td></tr></table></figure><h3 id="22、node节点配置添加yaml文件设置，不加的话服务器重启以后无法自动启动相关镜像"><a href="#22、node节点配置添加yaml文件设置，不加的话服务器重启以后无法自动启动相关镜像" class="headerlink" title="22、node节点配置添加yaml文件设置，不加的话服务器重启以后无法自动启动相关镜像"></a>22、node节点配置添加yaml文件设置，不加的话服务器重启以后无法自动启动相关镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /etc/kubernetes/manifests/kube-lvscare.yaml<br><br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  creationTimestamp: null<br>  labels:<br>    component: kube-lvscare<br>    tier: control-plane<br>  name: kube-sealyun-lvscare<br>  namespace: kube-system<br>spec:<br>  containers:<br>  - <span class="hljs-built_in">command</span>:<br>    - /usr/bin/lvscare<br>    - care<br>    - --vs<br>    - 10.96.96.1:6443<br>    - --health-path<br>    - /healthz<br>    - --health-schem<br>    - https<br>    - --rs<br>    - 192.168.94.131:6443<br>    - --rs<br>    - 192.168.94.132:6443<br>    - --rs<br>    - 192.168.94.133:6443<br>    image: fanux/lvscare:latest<br>    imagePullPolicy: IfNotPresent<br>    name: kube-lvscaree<br>    resources: &#123;&#125;<br>    securityContext:<br>      privileged: <span class="hljs-literal">true</span><br>  hostNetwork: <span class="hljs-literal">true</span><br>  priorityClassName: system-cluster-critical<br>status: &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="23、启动后修改node节点hosts文件"><a href="#23、启动后修改node节点hosts文件" class="headerlink" title="23、启动后修改node节点hosts文件"></a>23、启动后修改node节点hosts文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/hosts<br>192.168.94.131 k8s-master-1<br>192.168.94.132 k8s-master-2<br>192.168.94.133 k8s-master-3<br>10.96.96.1 apiserver.cluster.local<br></code></pre></td></tr></table></figure><h3 id="24、kubectl补齐命令"><a href="#24、kubectl补齐命令" class="headerlink" title="24、kubectl补齐命令"></a>24、kubectl补齐命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc<br><br><span class="hljs-comment">#kubeadm补齐命令</span><br><span class="hljs-built_in">source</span> &lt;(kubeadm completion bash)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source &lt;(kubeadm completion bash)&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
      <category>k8s环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用kubeadm安装Kubernetes 1.21.1</title>
    <link href="/2023/04/27/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E4%BD%BF%E7%94%A8kubeadm%E5%AE%89%E8%A3%85Kubernetes1.21.1/"/>
    <url>/2023/04/27/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E4%BD%BF%E7%94%A8kubeadm%E5%AE%89%E8%A3%85Kubernetes1.21.1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用kubeadm安装Kubernetes-1-21-1"><a href="#使用kubeadm安装Kubernetes-1-21-1" class="headerlink" title="使用kubeadm安装Kubernetes 1.21.1"></a>使用kubeadm安装Kubernetes 1.21.1</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">参考文献：https://blog.51cto.com/u_13053917/2523020</span><br></code></pre></td></tr></table></figure><h2 id="一、机器规划："><a href="#一、机器规划：" class="headerlink" title="一、机器规划："></a>一、机器规划：</h2><table><thead><tr><th>IP地址</th><th>备注</th></tr></thead><tbody><tr><td>192.168.94.121</td><td>k8s-master1</td></tr><tr><td>192.168.94.122</td><td>k8s-node1</td></tr><tr><td>192.168.94.123</td><td>k8s-node2</td></tr></tbody></table><p>注：CentOS 7.9 内核版本 5.4.101  如果没有的话，请升级内核</p><h2 id="二、机器初始化，各节点均需要执行的准备操作"><a href="#二、机器初始化，各节点均需要执行的准备操作" class="headerlink" title="二、机器初始化，各节点均需要执行的准备操作"></a>二、机器初始化，各节点均需要执行的准备操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#关闭防火墙和selinux</span><br>systemctl stop firewalld &amp;&amp; systemctl <span class="hljs-built_in">disable</span> firewalld<br><br><span class="hljs-comment">#关闭SELiunx和swap分区</span><br>swapoff -a &amp;&amp; sed -i <span class="hljs-string">&#x27;/ swap / s/^\(.*\)$/#\1/g&#x27;</span> /etc/fstab<br>setenforce 0 &amp;&amp; sed -i <span class="hljs-string">&#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27;</span> /etc/selinux/config<br><br><span class="hljs-comment">#设置时间同步</span><br><span class="hljs-comment">#调整系统时区为中国/上海</span><br><span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br><span class="hljs-comment"># 将当前的 UTC 时间写入硬件时钟</span><br>timedatectl set-local-rtc 0<br><span class="hljs-comment">#重启依赖于系统时间的服务</span><br>systemctl restart rsyslog<br>systemctl restart crond<br><span class="hljs-comment">#date 查看系统时间 hwclock --show 查看硬件时间</span><br><br><span class="hljs-comment">#所有节点配置IPVS模块</span><br><span class="hljs-comment">#开启IPVS  </span><br><span class="hljs-comment">#注意：在内核4.19+版本nf_conntrack_ipv4已经改为nf_conntrack，4.18以下使用nf_conntrack_ipv4即可</span><br><span class="hljs-built_in">cat</span> &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">#!/bin/bash</span><br><span class="hljs-string">ipvs_modules=&quot;ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack&quot;</span><br><span class="hljs-string">for kernel_module in \$&#123;ipvs_modules&#125;; </span><br><span class="hljs-string">do </span><br><span class="hljs-string">/sbin/modinfo -F filename \$&#123;kernel_module&#125; &gt; /dev/null 2&gt;&amp;1 </span><br><span class="hljs-string">if [ $? -eq 0 ]; then </span><br><span class="hljs-string">/sbin/modprobe \$&#123;kernel_module&#125; </span><br><span class="hljs-string">fi </span><br><span class="hljs-string">done</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-built_in">chmod</span> 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep ip_vs<br><br><span class="hljs-comment">#修改主机名</span><br>hostnamectl set-hostname k8s-master-1<br><br><span class="hljs-comment">#配置hosts文件</span><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">192.168.94.121  k8s-master1</span><br><span class="hljs-string">192.168.94.122  k8s-node1</span><br><span class="hljs-string">192.168.94.123  k8s-node2</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">#设置免密登录</span><br>ssh-keygen  <span class="hljs-comment">#一路回车即可</span><br>ssh-copy-id k8s-node1<br>ssh-copy-id k8s-node2<br><br><span class="hljs-comment">#所有节点配置k8s内核</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/sysctl.d/k8s.conf</span><br><span class="hljs-string">net.ipv4.ip_forward = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">fs.may_detach_mounts = 1</span><br><span class="hljs-string">vm.overcommit_memory=1</span><br><span class="hljs-string">vm.panic_on_oom=0</span><br><span class="hljs-string">fs.inotify.max_user_watches=89100</span><br><span class="hljs-string">fs.file-max=52706963</span><br><span class="hljs-string">fs.nr_open=52706963</span><br><span class="hljs-string">net.netfilter.nf_conntrack_max=2310720</span><br><span class="hljs-string">net.ipv4.tcp_keepalive_time = 600</span><br><span class="hljs-string">net.ipv4.tcp_keepalive_probes = 3</span><br><span class="hljs-string">net.ipv4.tcp_keepalive_intvl =15</span><br><span class="hljs-string">net.ipv4.tcp_max_tw_buckets = 36000</span><br><span class="hljs-string">net.ipv4.tcp_tw_reuse = 1</span><br><span class="hljs-string">net.ipv4.tcp_max_orphans = 327680</span><br><span class="hljs-string">net.ipv4.tcp_orphan_retries = 3</span><br><span class="hljs-string">net.ipv4.tcp_syncookies = 1</span><br><span class="hljs-string">net.ipv4.tcp_max_syn_backlog = 16384</span><br><span class="hljs-string">net.ipv4.ip_conntrack_max = 65536</span><br><span class="hljs-string">net.ipv4.tcp_max_syn_backlog = 16384</span><br><span class="hljs-string">net.ipv4.tcp_timestamps = 0</span><br><span class="hljs-string">net.core.somaxconn = 16384</span><br><span class="hljs-string">EOF</span><br><br>sysctl --system<br><br><span class="hljs-comment">#所有节点配置完内核后，重启服务器，保证重启后内核依旧加载</span><br>lsmod | grep --color=auto -e ip_vs -e nf_conntrack<br></code></pre></td></tr></table></figure><h2 id="三、所有节点安装Docker"><a href="#三、所有节点安装Docker" class="headerlink" title="三、所有节点安装Docker"></a>三、所有节点安装Docker</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install docker-ce -y<br><span class="hljs-comment">#修改 docker 的 cgroup 驱动为 systemd</span><br><span class="hljs-built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;registry-mirrors&quot;: [&quot;http://f1361db2.m.daocloud.io&quot;],</span><br><span class="hljs-string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="hljs-string">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="hljs-string">  &quot;log-opts&quot;: &#123;</span><br><span class="hljs-string">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="hljs-string">  &quot;storage-opts&quot;: [</span><br><span class="hljs-string">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="hljs-string">  ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br>systemctl daemon-reload &amp;&amp; systemctl <span class="hljs-built_in">enable</span> --now docker &amp;&amp; systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="四、添加yum仓库"><a href="#四、添加yum仓库" class="headerlink" title="四、添加yum仓库"></a>四、添加yum仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[kubernetes]</span><br><span class="hljs-string">name=Kubernetes Repo</span><br><span class="hljs-string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="五、安装kubernetes-相关组件"><a href="#五、安装kubernetes-相关组件" class="headerlink" title="五、安装kubernetes 相关组件"></a>五、安装kubernetes 相关组件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install kubeadm-1.21.1 kubectl-1.21.1 kubelet-1.21.1 -y<br><br>systemctl <span class="hljs-built_in">enable</span> kubelet  <span class="hljs-comment">#每个节点都需要执行</span><br><br></code></pre></td></tr></table></figure><h2 id="六、kubernetes-初始化集群"><a href="#六、kubernetes-初始化集群" class="headerlink" title="六、kubernetes 初始化集群"></a>六、kubernetes 初始化集群</h2><p><strong>master节点执行</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm config images list<br><span class="hljs-comment">#输出：</span><br>I0518 16:00:21.706704   18647 version.go:254] remote version is much newer: v1.21.1; falling back to: stable-1.20<br>k8s.gcr.io/kube-apiserver:v1.20.7<br>k8s.gcr.io/kube-controller-manager:v1.20.7<br>k8s.gcr.io/kube-scheduler:v1.20.7<br>k8s.gcr.io/kube-proxy:v1.20.7<br>k8s.gcr.io/pause:3.2<br>k8s.gcr.io/etcd:3.4.13-0<br>k8s.gcr.io/coredns:1.7.0<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm init --apiserver-advertise-address 192.168.94.121 \<br>--apiserver-bind-port 6443 \<br>--image-repository <span class="hljs-string">&quot;registry.aliyuncs.com/google_containers&quot;</span> \<br>--kubernetes-version <span class="hljs-string">&quot;v1.21.1&quot;</span> \<br>--pod-network-cidr <span class="hljs-string">&quot;10.244.0.0/16&quot;</span><br><br><span class="hljs-comment">#详细解释：</span><br>--kubernetes-version=v1.20.1：指定要安装的版本号。这个版本号可以通过kubelet --version查看<br>--apiserver-advertise-address：指定用 Master 的哪个IP地址与 Cluster的其他节点通信。<br>--service-cidr：指定Service网络的范围，即负载均衡VIP使用的IP地址段。<br>--pod-network-cidr：指定Pod网络的范围，即Pod的IP地址段。<br>--ignore-preflight-errors=：忽略运行时的错误，例如执行时存在[ERROR NumCPU]和[ERROR Swap]，忽略这两个报错就是增加--ignore-preflight-errors=NumCPU 和--ignore-preflight-errors=Swap的配置即可。<br>--image-repository：Kubenetes默认Registries地址是 k8s.gcr.io，一般在国内并不能访问 gcr.io，可以将其指定为阿里云镜像地址：registry.aliyuncs.com/google_containers。<br></code></pre></td></tr></table></figure><p><strong>保存输出的该加入内容</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm <span class="hljs-built_in">join</span> 192.168.94.198:6443 --token xdtfmh.4vk8hiw8lyviu76w \<br>    --discovery-token-ca-cert-hash sha256:3c6e9295f148dff2fd80ca75f4278afa8656bcba08b1770b46712c618a40e4dd<br></code></pre></td></tr></table></figure><p>注意：如果安装失败，可以执行 kubeadm reset 命令将主机恢复原状，重新执行 kubeadm init 命令再次进行安装</p><p><strong>kubectl默认会在执行的用户家目录下面的.kube目录下寻找config文件。这里是将在初始化时[kubeconfig]步骤生成的admin.conf拷贝到.kube&#x2F;config。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><h2 id="五、安装网络插件flannel"><a href="#五、安装网络插件flannel" class="headerlink" title="五、安装网络插件flannel"></a>五、安装网络插件flannel</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<br><span class="hljs-comment">#以下为输出:</span><br>podsecuritypolicy.policy/psp.flannel.unprivileged created<br>clusterrole.rbac.authorization.k8s.io/flannel created<br>clusterrolebinding.rbac.authorization.k8s.io/flannel created<br>serviceaccount/flannel created<br>configmap/kube-flannel-cfg created<br>daemonset.apps/kube-flannel-ds-amd64 created<br>daemonset.apps/kube-flannel-ds-arm64 created<br>daemonset.apps/kube-flannel-ds-arm created<br>daemonset.apps/kube-flannel-ds-ppc64le created<br>daemonset.apps/kube-flannel-ds-s390x created<br></code></pre></td></tr></table></figure><h2 id="六、node节点加入master"><a href="#六、node节点加入master" class="headerlink" title="六、node节点加入master"></a>六、node节点加入master</h2><p><strong>node节点执行</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm <span class="hljs-built_in">join</span> 192.168.94.198:6443 --token xdtfmh.4vk8hiw8lyviu76w \<br>    --discovery-token-ca-cert-hash sha256:3c6e9295f148dff2fd80ca75f4278afa8656bcba08b1770b46712c618a40e4dd<br></code></pre></td></tr></table></figure><p>错误提示：ERROR FileContent–proc-sys-net-bridge-bridge-nf-call-iptables<br>设置错误导致K8s安装失败处理方法<code>echo &quot;1&quot; &gt;/proc/sys/net/bridge/bridge-nf-call-iptables</code></p><h2 id="七、验证"><a href="#七、验证" class="headerlink" title="七、验证"></a>七、验证</h2><p><strong>在master机器上执行</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl get nodes                                <span class="hljs-comment">#所有机器均为ready即可</span><br>kubectl get pod -owide --all-namespaces          <span class="hljs-comment">#所有pod均为running即可</span><br></code></pre></td></tr></table></figure><h2 id="八、配置kubectl子命令补全"><a href="#八、配置kubectl子命令补全" class="headerlink" title="八、配置kubectl子命令补全"></a>八、配置kubectl子命令补全</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#补齐命令一</span><br><span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc<br><br><span class="hljs-comment">#补齐命令二</span><br>yum install -y bash-completion<br><span class="hljs-built_in">source</span> /usr/share/bash-completion/bash_completion<br><span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br>kubectl completion bash &gt; ~/.kube/completion.bash.inc<br><span class="hljs-built_in">source</span> <span class="hljs-string">&#x27;/root/.kube/completion.bash.inc&#x27;</span>  <br><span class="hljs-built_in">source</span> <span class="hljs-variable">$HOME</span>/.bash_profile<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
      <category>k8s环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker容器的实时日志查看器Dozzle</title>
    <link href="/2023/04/25/docker/docker%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/(Dozzle)%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E6%97%B6%E6%97%A5%E5%BF%97%E6%9F%A5%E7%9C%8B%E5%99%A8/"/>
    <url>/2023/04/25/docker/docker%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/(Dozzle)%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E6%97%B6%E6%97%A5%E5%BF%97%E6%9F%A5%E7%9C%8B%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker容器的实时日志查看器Dozzle"><a href="#docker容器的实时日志查看器Dozzle" class="headerlink" title="docker容器的实时日志查看器Dozzle"></a>docker容器的实时日志查看器<code>Dozzle</code></h1><p>备注：Dozzle是一个简单、轻量级的应用程序，它为您提供了一个基于web的界面来实时监视Docker容器日志。它不存储日志信息，只用于实时监视容器日志。<br>对于企业应用程序，Loggly、Papertrail或Kibana等产品更适合。</p><h2 id="一、使用docker运行日志查看器Dozzle"><a href="#一、使用docker运行日志查看器Dozzle" class="headerlink" title="一、使用docker运行日志查看器Dozzle"></a>一、使用docker运行日志查看器<code>Dozzle</code></h2><h3 id="1、拉取镜像"><a href="#1、拉取镜像" class="headerlink" title="1、拉取镜像"></a>1、拉取镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull amir20/dozzle:latest<br></code></pre></td></tr></table></figure><h3 id="2、运行镜像"><a href="#2、运行镜像" class="headerlink" title="2、运行镜像"></a>2、运行镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d  --name dozzle \<br>--volume=/var/run/docker.sock:/var/run/docker.sock:ro \<br>-p 8888:8080 \<br>-e DOZZLE_KEY=<span class="hljs-string">&quot;TOKEN_KEY&quot;</span> \<br>-e DOZZLE_USERNAME=<span class="hljs-string">&quot;admin&quot;</span> \<br>-e DOZZLE_PASSWORD=<span class="hljs-string">&quot;123456&quot;</span> \<br>amir20/dozzle:latest<br><br><span class="hljs-comment">#:ro 建议加上 ro 只读的限制，避免出现一些我们不希望出现的意外情况</span><br><span class="hljs-comment">#可访问http://localhost:8888/您可以将-p 8888更改为任何端口，使用账号密码登录</span><br></code></pre></td></tr></table></figure><h2 id="二、使用docker-compose运行"><a href="#二、使用docker-compose运行" class="headerlink" title="二、使用docker-compose运行"></a>二、使用docker-compose运行</h2><p><code>参考文档：https://zhuanlan.zhihu.com/p/295007308</code></p><h3 id="1、编写yaml文件"><a href="#1、编写yaml文件" class="headerlink" title="1、编写yaml文件"></a>1、编写yaml文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>version: <span class="hljs-string">&quot;3&quot;</span><br><br>services:<br>  dozzle:<br>    image: amir20/dozzle:latest<br>    container_name: dozzle<br>    environment:<br>      DOZZLE_FILTER: <span class="hljs-string">&quot;name=redis|etcd&quot;</span>  <span class="hljs-comment">#容器过滤条件</span><br>      DOZZLE_KEY: <span class="hljs-string">&quot;TOKEN_KEY&quot;</span>           <span class="hljs-comment">#TOKEN</span><br>      DOZZLE_USERNAME: <span class="hljs-string">&quot;admin&quot;</span>          <span class="hljs-comment">#登录用户名</span><br>      DOZZLE_PASSWORD: <span class="hljs-string">&quot;123456&quot;</span>         <span class="hljs-comment">#登录密码</span><br>    volumes:<br>      - /var/run/docker.sock:/var/run/docker.sock:ro<br>    ports:<br>      - 8080:8080<br>    restart: always<br></code></pre></td></tr></table></figure><h3 id="2、启动容器"><a href="#2、启动容器" class="headerlink" title="2、启动容器"></a>2、启动容器</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><h2 id="三、其他参数的解释"><a href="#三、其他参数的解释" class="headerlink" title="三、其他参数的解释"></a>三、其他参数的解释</h2><h3 id="1、限制显示的容器-filter参数"><a href="#1、限制显示的容器-filter参数" class="headerlink" title="1、限制显示的容器:--filter参数"></a>1、限制显示的容器:<code>--filter</code>参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --volume=/var/run/docker.sock:/var/run/docker.sock -p 8888:8080 amir20/dozzle:latest --filter name=fpm*<br><span class="hljs-comment">#可以使用其他过滤器-status</span><br></code></pre></td></tr></table></figure><h3 id="2、Dozzle-默认到“-x2F-”如果要控制访问基本路径，可以使用该-base选项"><a href="#2、Dozzle-默认到“-x2F-”如果要控制访问基本路径，可以使用该-base选项" class="headerlink" title="2、Dozzle 默认到“&#x2F;”如果要控制访问基本路径，可以使用该--base选项"></a>2、Dozzle 默认到“&#x2F;”如果要控制访问基本路径，可以使用该<code>--base</code>选项</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --volume=/var/run/docker.sock:/var/run/docker.sock -p 8080:8080 amir20/dozzle:latest --base /foobar<br><span class="hljs-comment">#将需要访问http://localhost:8080/foobar/才可以使用Dozzle</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>docker问题解决</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>docker-compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu系统安装和使用</title>
    <link href="/2023/04/24/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Ubuntu%E7%B3%BB%E7%BB%9F/Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/04/24/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Ubuntu%E7%B3%BB%E7%BB%9F/Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu系统安装和使用"><a href="#Ubuntu系统安装和使用" class="headerlink" title="Ubuntu系统安装和使用"></a>Ubuntu系统安装和使用</h1><h2 id="一、server版本安装参考文档即可"><a href="#一、server版本安装参考文档即可" class="headerlink" title="一、server版本安装参考文档即可"></a>一、server版本安装参考文档即可</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">server版安装：https:<span class="hljs-regexp">//</span>www.jianshu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">4</span>fcf185bcb29<br>server版安装：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_42289214/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">106585790</span><br></code></pre></td></tr></table></figure><h2 id="二、修改Ubuntu系统ip"><a href="#二、修改Ubuntu系统ip" class="headerlink" title="二、修改Ubuntu系统ip"></a>二、修改Ubuntu系统ip</h2><p><code>参考文档：https://www.jb51.net/article/187746.htm</code></p><p>12.X版本、14.X版本、16.X版本:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/network/interfaces<br>auto lo<br>iface lo inet loopback<br> <br>auto ens33<br>iface ens33 inet static<br>address 192.168.94.179<br>netmask 255.255.255.0<br>gateway 192.168.94.2<br></code></pre></td></tr></table></figure><p>18.X版本及以上:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/netplan/00-installer-config.yaml<br><span class="hljs-comment"># Let NetworkManager manage all devices on this system</span><br>network:<br> version: 2<br> renderer: NetworkManager<br> ethernets:<br>   ens33:<br>    dhcp4: <span class="hljs-literal">false</span><br>    addresses: [192.168.94.179/24]<br>    gateway4: 192.168.94.2<br>    nameservers:<br>        addresses: [8.8.8.8,114.114.114.114]<br></code></pre></td></tr></table></figure><p>启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo netplan apply<br></code></pre></td></tr></table></figure><h2 id="三、ubuntu系统更换镜像源"><a href="#三、ubuntu系统更换镜像源" class="headerlink" title="三、ubuntu系统更换镜像源"></a>三、ubuntu系统更换镜像源</h2><p><code>lsb_release -a</code>查看系统版本号，我的为：V20.04</p><p>备份原来镜像源:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/apt/sources.list </span><br><span class="hljs-string">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>更新和升级</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get update<br>sudo apt-get upgrade<br></code></pre></td></tr></table></figure><h2 id="四、Ubuntu使用定时任务cron"><a href="#四、Ubuntu使用定时任务cron" class="headerlink" title="四、Ubuntu使用定时任务cron"></a>四、Ubuntu使用定时任务cron</h2><p>启动cron</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">service cron start<br></code></pre></td></tr></table></figure><p>如果忘记选择编辑器，然后选择对应的vim序号保存</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo select-edito<br><br>默认的编辑器模式是nano。操作为：<br>保存：Ctrl+o<br>确认保存： Y<br>然后回车：enter<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>liunx</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>liunx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>debian系统的问题处理</title>
    <link href="/2023/04/24/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Debian%E7%B3%BB%E7%BB%9F/debian%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
    <url>/2023/04/24/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Debian%E7%B3%BB%E7%BB%9F/debian%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="debian系统的问题处理"><a href="#debian系统的问题处理" class="headerlink" title="debian系统的问题处理"></a>debian系统的问题处理</h1><h2 id="一、系统配置IP地址"><a href="#一、系统配置IP地址" class="headerlink" title="一、系统配置IP地址"></a>一、系统配置IP地址</h2><h3 id="1-网卡通过DHCP自动获取IP地址配置："><a href="#1-网卡通过DHCP自动获取IP地址配置：" class="headerlink" title="1.网卡通过DHCP自动获取IP地址配置："></a>1.网卡通过DHCP自动获取IP地址配置：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/network/interfaces<br><span class="hljs-comment"># This file describes the network interfaces available on your system  </span><br><span class="hljs-comment"># and how to activate them. For more information, see interfaces(5).  </span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># The loopback network interface（配置环回口）  </span><br><span class="hljs-comment"># 开机自动激lo接口  </span><br>auto lo  <br><span class="hljs-comment"># 配置lo接口为环回口  </span><br>iface lo inet loopback  <br><span class="hljs-comment">#  </span><br><span class="hljs-comment"># The primary network interface （配置主网络接口）  </span><br><span class="hljs-comment">#开机自动激活eth0接口  </span><br>auto enss  <br><span class="hljs-comment">#配置eth0接口为DHCP自动获取  </span><br>iface enss inet dhcp       <br></code></pre></td></tr></table></figure><h3 id="2-网卡静态分配IP地址"><a href="#2-网卡静态分配IP地址" class="headerlink" title="2.网卡静态分配IP地址"></a>2.网卡静态分配IP地址</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/network/interfaces<br><span class="hljs-comment"># This file describes the network interfaces available on your system </span><br><span class="hljs-comment"># and how to activate them. For more information, see interfaces(5). </span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># The loopback network interface（配置环回口） </span><br><span class="hljs-comment"># 开机自动激lo接口 </span><br>auto lo <br><span class="hljs-comment"># 配置lo接口为环回口 </span><br>iface lo inet loopback <br><span class="hljs-comment"># </span><br><span class="hljs-comment"># The primary network interface （配置主网络接口） </span><br><span class="hljs-comment">#开机自动激活eth0接口 </span><br>auto enss <br><span class="hljs-comment">#配置eth0接口为静态设置IP地址 </span><br>iface enss inet static <br>address 192.168.94.111<br>netmask 255.255.255.0 <br>gateway 192.168.94.2<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">service networking restart  重启服务<br></code></pre></td></tr></table></figure><h2 id="二、debian系统默认不允许root登录，设置默认用root用户登录"><a href="#二、debian系统默认不允许root登录，设置默认用root用户登录" class="headerlink" title="二、debian系统默认不允许root登录，设置默认用root用户登录"></a>二、debian系统默认不允许root登录，设置默认用root用户登录</h2><h3 id="1、先使用普通账号登录以后"><a href="#1、先使用普通账号登录以后" class="headerlink" title="1、先使用普通账号登录以后"></a>1、先使用普通账号登录以后</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - root <br></code></pre></td></tr></table></figure><h3 id="2、使用vi命令修改gdm3的设定文件"><a href="#2、使用vi命令修改gdm3的设定文件" class="headerlink" title="2、使用vi命令修改gdm3的设定文件"></a>2、使用vi命令修改gdm3的设定文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/gdm3/daemon.conf<br><span class="hljs-comment">#找到[security],并在下面追加一行：</span><br>AllowRoot = ture<br></code></pre></td></tr></table></figure><h3 id="3、使用vi命令修改gdm3的登录pam文件"><a href="#3、使用vi命令修改gdm3的登录pam文件" class="headerlink" title="3、使用vi命令修改gdm3的登录pam文件"></a>3、使用vi命令修改gdm3的登录pam文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/pam.d/gdm-password<br><span class="hljs-comment">#找到如下行数据进行注释：</span><br>authrequiredpam_succeed_if.so user != root quiet_success  <br></code></pre></td></tr></table></figure><h3 id="4、重启机器"><a href="#4、重启机器" class="headerlink" title="4、重启机器"></a>4、重启机器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">reboot <br></code></pre></td></tr></table></figure><p><strong>注：如果要实现root用户远程ssh登录，还需要修改<code>/etc/ssh/sshd_config</code>文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/ssh/sshd_config<br><span class="hljs-comment">#找到如下行信息：</span><br>PermitRootLogin prohibit-password<br><span class="hljs-comment">#将配置改为：PermitRootLogin yes</span><br><br><span class="hljs-comment">#再重启：</span><br>service sshd restart<br></code></pre></td></tr></table></figure><h2 id="三、官方源换为国内的源的操作方法"><a href="#三、官方源换为国内的源的操作方法" class="headerlink" title="三、官方源换为国内的源的操作方法"></a>三、官方源换为国内的源的操作方法</h2><h3 id="1、将原来的镜像源进行备份"><a href="#1、将原来的镜像源进行备份" class="headerlink" title="1、将原来的镜像源进行备份"></a>1、将原来的镜像源进行备份</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br></code></pre></td></tr></table></figure><h3 id="2、写入国内的镜像源"><a href="#2、写入国内的镜像源" class="headerlink" title="2、写入国内的镜像源"></a>2、写入国内的镜像源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/apt/sources.list </span><br><span class="hljs-string">deb http://mirrors.ustc.edu.cn/debian/ buster main</span><br><span class="hljs-string">deb-src http://mirrors.ustc.edu.cn/debian/ buster main</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb http://security.debian.org/debian-security buster/updates main</span><br><span class="hljs-string">deb-src http://security.debian.org/debian-security buster/updates main</span><br><span class="hljs-string">deb http://mirrors.ustc.edu.cn/debian/ buster-updates main</span><br><span class="hljs-string">deb-src http://mirrors.ustc.edu.cn/debian/ buster-updates main</span><br><span class="hljs-string">deb http://mirrors.ustc.edu.cn/debian/ buster-backports main non-free contrib</span><br><span class="hljs-string">deb-src http://mirrors.ustc.edu.cn/debian/ buster-backports main non-free contrib</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">#网易163镜像源：</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/apt/sources.list </span><br><span class="hljs-string">deb http://mirrors.163.com/debian/ buster main non-free contrib</span><br><span class="hljs-string">deb http://mirrors.163.com/debian/ buster-updates main non-free contrib</span><br><span class="hljs-string">deb http://mirrors.163.com/debian/ buster-backports main non-free contrib</span><br><span class="hljs-string">deb http://mirrors.163.com/debian-security/ buster/updates main non-free contrib</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb-src http://mirrors.163.com/debian/ buster main non-free contrib</span><br><span class="hljs-string">deb-src http://mirrors.163.com/debian/ buster-updates main non-free contrib</span><br><span class="hljs-string">deb-src http://mirrors.163.com/debian/ buster-backports main non-free contrib</span><br><span class="hljs-string">deb-src http://mirrors.163.com/debian-security/ buster/updates main non-free contrib</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment">#华为云镜像源：</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/apt/sources.list </span><br><span class="hljs-string">deb https://mirrors.huaweicloud.com/debian/ buster main contrib non-free</span><br><span class="hljs-string">deb https://mirrors.huaweicloud.com/debian/ buster-updates main contrib non-free</span><br><span class="hljs-string">deb https://mirrors.huaweicloud.com/debian/ buster-backports main contrib non-free</span><br><span class="hljs-string">deb https://mirrors.huaweicloud.com/debian-security/ buster/updates main contrib non-free</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb-src https://mirrors.huaweicloud.com/debian/ buster main contrib non-free</span><br><span class="hljs-string">deb-src https://mirrors.huaweicloud.com/debian/ buster-updates main contrib non-free</span><br><span class="hljs-string">deb-src https://mirrors.huaweicloud.com/debian/ buster-backports main contrib non-free </span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment">#腾讯云镜像源：</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/apt/sources.list </span><br><span class="hljs-string">deb http://mirrors.cloud.tencent.com/debian/ buster main non-free contrib</span><br><span class="hljs-string">deb http://mirrors.cloud.tencent.com/debian-security buster/updates main</span><br><span class="hljs-string">deb http://mirrors.cloud.tencent.com/debian/ buster-updates main non-free contrib</span><br><span class="hljs-string">deb http://mirrors.cloud.tencent.com/debian/ buster-backports main non-free contrib</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb-src http://mirrors.cloud.tencent.com/debian-security buster/updates main</span><br><span class="hljs-string">deb-src http://mirrors.cloud.tencent.com/debian/ buster main non-free contrib</span><br><span class="hljs-string">deb-src http://mirrors.cloud.tencent.com/debian/ buster-updates main non-free contrib</span><br><span class="hljs-string">deb-src http://mirrors.cloud.tencent.com/debian/ buster-backports main non-free contrib</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment">#阿里云镜像源</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/apt/sources.list </span><br><span class="hljs-string">deb http://mirrors.aliyun.com/debian/ buster main non-free contrib</span><br><span class="hljs-string">deb http://mirrors.aliyun.com/debian-security buster/updates main</span><br><span class="hljs-string">deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib</span><br><span class="hljs-string">deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/debian-security buster/updates main</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment">#清华大学镜像源</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/apt/sources.list </span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security/ buster/updates main contrib non-free</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br><span class="hljs-string">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="hljs-string">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="hljs-string">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security/ buster/updates main contrib non-free</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="3、进行更新"><a href="#3、进行更新" class="headerlink" title="3、进行更新"></a>3、进行更新</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt-get update<br></code></pre></td></tr></table></figure><p>如果遇到无法拉取 https 源的情况，请先使用 http 源并安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common<br></code></pre></td></tr></table></figure><p>注：<br>一个系统可以同时使用多个源，但是不建议那么做，如果想同时使用多个源只需要在已有源的基础上追加即可，另外还可以在<code>/etc/apt/sources.list.d/</code>这个目录新建独立源配置文件<br>全球镜像网站：<code>https://www.debian.org/mirror/list</code><br>本文参考文献：<code>https://blog.csdn.net/qq_36154886/article/details/107878853</code></p><h2 id="四、debians系统使用的是：apt-get命令拉取、他的使用跟Centos系统一样"><a href="#四、debians系统使用的是：apt-get命令拉取、他的使用跟Centos系统一样" class="headerlink" title="四、debians系统使用的是：apt-get命令拉取、他的使用跟Centos系统一样"></a>四、debians系统使用的是：apt-get命令拉取、他的使用跟Centos系统一样</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt-get install openssh-client <br></code></pre></td></tr></table></figure><p>如果中途出现下载不到文件，则更新下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt-get update<br></code></pre></td></tr></table></figure><h2 id="五、apt-install-nginx-时出现：-dpkg-处理软件包-nginx-full-–configure-时出错："><a href="#五、apt-install-nginx-时出现：-dpkg-处理软件包-nginx-full-–configure-时出错：" class="headerlink" title="五、apt install nginx 时出现： #dpkg: 处理软件包 nginx-full (–configure)时出错："></a>五、apt install nginx 时出现： #dpkg: 处理软件包 nginx-full (–configure)时出错：</h2><p>执行以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> /var/lib/dpkg/info  /var/lib/dpkg/info_bak<br><span class="hljs-built_in">mkdir</span> /var/lib/dpkg/info<br>apt-get update &amp;&amp; apt-get -f install <br>apt install nginx<br></code></pre></td></tr></table></figure><p>如果安装nginx后访问80端口有问题，查看<code>/etc/nginx/nginx.conf</code>内同级的<code>sites-available sites-enabled</code>里面有2个default配置，直接删除掉</p><h2 id="六、安装nginx以后，启动时发现80端口被占用，需要卸载apache2的话"><a href="#六、安装nginx以后，启动时发现80端口被占用，需要卸载apache2的话" class="headerlink" title="六、安装nginx以后，启动时发现80端口被占用，需要卸载apache2的话"></a>六、安装nginx以后，启动时发现80端口被占用，需要卸载apache2的话</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">lsof -i:80  <span class="hljs-comment">#发现是apache2占用</span><br>systemctl stop apache2.service  <span class="hljs-comment">#关闭服务</span><br><span class="hljs-comment"># 卸载命令</span><br>apt-get --purge remove apache2<br>apt-get --purge remove apache2-doc<br>apt-get --purge remove apache2-utils<br><span class="hljs-comment">#检测是否卸载干净</span><br><br>dpkg -l | grep apache2<br><span class="hljs-comment">#删除多余的文件</span><br>find /etc -name <span class="hljs-string">&quot;*apache*&quot;</span> |xargs  <span class="hljs-built_in">rm</span> -rf <br><span class="hljs-built_in">rm</span> -rf /var/www<br><span class="hljs-built_in">rm</span> -rf /etc/libapache2-mod-j<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>liunx</category>
      
      <category>debian</category>
      
    </categories>
    
    
    <tags>
      
      <tag>liunx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AlmaLinux 9.0安装与配置</title>
    <link href="/2023/04/24/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Almaliunx/AlmaLinux%209.0%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/04/24/A-%E5%90%84liunx%E7%B3%BB%E7%BB%9F/Almaliunx/AlmaLinux%209.0%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="AlmaLinux-9-0安装与配置"><a href="#AlmaLinux-9-0安装与配置" class="headerlink" title="AlmaLinux 9.0安装与配置"></a>AlmaLinux 9.0安装与配置</h1><h2 id="一-安装"><a href="#一-安装" class="headerlink" title="一 安装"></a>一 安装</h2><h3 id="1-1-镜像源"><a href="#1-1-镜像源" class="headerlink" title="1.1 镜像源"></a>1.1 镜像源</h3><p>官网下载镜像 <code>https://mirrors.almalinux.org/isos/x86_64/9.0.html</code></p><h3 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h3><p><strong>参考centos安装方式</strong>*</p><h2 id="二-配置"><a href="#二-配置" class="headerlink" title="二 配置"></a>二 配置</h2><h3 id="2-1-修改源"><a href="#2-1-修改源" class="headerlink" title="2.1 修改源"></a>2.1 修改源</h3><p>查找合适的镜像源，如:mirrors.aliyun.com</p><p>执行一下命令，备份并替换默认源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">sed -e <span class="hljs-string">&#x27;s|^mirrorlist=|#mirrorlist=|g&#x27;</span> \<br>  -e <span class="hljs-string">&#x27;s|^# baseurl=https://repo.almalinux.org|baseurl=https://mirrors.aliyun.com|g&#x27;</span> \<br>  -i.bak \<br>  /etc/yum.repos.d/almalinux*.repo<br></code></pre></td></tr></table></figure><p>执行一下命令生成缓存</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">dnf makecache<br></code></pre></td></tr></table></figure><h3 id="2-2-修改语言环境"><a href="#2-2-修改语言环境" class="headerlink" title="2.2 修改语言环境"></a>2.2 修改语言环境</h3><p>修改&#x2F;etc目录下locale.conf文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/locale.conf<br><br>LANG=<span class="hljs-string">&quot;en_US.UTF-8&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-修改主机名"><a href="#2-3-修改主机名" class="headerlink" title="2.3  修改主机名"></a>2.3  修改主机名</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hostnamectl set-hostname 主机名<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>liunx</category>
      
      <category>AlmaLinux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>liunx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes里的三种port与三种ip区分</title>
    <link href="/2023/04/21/k8s/k8s%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/Kubernetes%E9%87%8C%E7%9A%84%E4%B8%89%E7%A7%8Dport%E4%B8%8E%E4%B8%89%E7%A7%8Dip%E5%8C%BA%E5%88%86/"/>
    <url>/2023/04/21/k8s/k8s%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/Kubernetes%E9%87%8C%E7%9A%84%E4%B8%89%E7%A7%8Dport%E4%B8%8E%E4%B8%89%E7%A7%8Dip%E5%8C%BA%E5%88%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Kubernetes里的三种port与三种ip区分"><a href="#Kubernetes里的三种port与三种ip区分" class="headerlink" title="Kubernetes里的三种port与三种ip区分"></a>Kubernetes里的三种port与三种ip区分</h1><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">k8s</span>中的service提供了一层对外的服务抽象。Kubernetes的Service定义了一种抽象：逻辑上的一组Pod，一种可以访问它们的方式。这一组Pod能通过Service被访问到，通过是通过Selector来实现的。<br><br>简单来说Service就是一个把所有Pod统一成一个组，然后对外提供固定一个<span class="hljs-built_in">IP</span>，具体是哪些Pod，可以通过之前介绍到的Label标签来进行设置，假设一个pod死掉，副本控制器在生成一个pod,这是pod <span class="hljs-built_in">ip</span>肯定会变，但是我们不去关心你pod <span class="hljs-built_in">ip</span>是多少，我们只知道service <span class="hljs-built_in">ip</span> 没变就好了，因为新的pod 早就加入到我的service中了，各个服务之间通信是通过service 唯一<span class="hljs-built_in">ip</span>来通信的。<br></code></pre></td></tr></table></figure><h2 id="Kubernetes里的三种port分别如下"><a href="#Kubernetes里的三种port分别如下" class="headerlink" title="Kubernetes里的三种port分别如下:"></a>Kubernetes里的三种port分别如下:</h2><h3 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">nodeport</span>是外部流量访问<span class="hljs-type">K8s</span>的一种方式，即nodeIP:nodePort，是提供给外部流量访问<span class="hljs-type">K8s</span>集群资源的一种方式。总的来说，我们可以通过在service中配置node<span class="hljs-keyword">port</span>，从而使得我们可以通过集群外的机器进行访问我们的服务。<br></code></pre></td></tr></table></figure><h3 id="Port"><a href="#Port" class="headerlink" title="Port"></a>Port</h3><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vhdl"><span class="hljs-keyword">port</span>是K8s集群内部服务访问service的入口。是service暴露在Cluster上的端口，ClusterIP:<span class="hljs-keyword">Port</span>。如下面的yaml配置文件所示，K8s集群内部节点可以通过<span class="hljs-number">30080</span>端口访问Nginx服务，然而外部网络还是不能够访问到服务，因为nodePort参数没有配置。<br></code></pre></td></tr></table></figure><h3 id="targetPort"><a href="#targetPort" class="headerlink" title="targetPort"></a>targetPort</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">targetPort</span>是容器的端口，也是最终底层的服务所提供的端口，所以说targetPod也就是<span class="hljs-type">Pod</span>的端口。从<span class="hljs-keyword">port</span>或者是nodePort进入的流量，经过路由转发之后，最终都会都通过targetPort进入到Pod中。<br><br>targetPort要与Dockerfile中暴露的端口一致。<br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Service<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol"> name:</span> nginx-service<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol"> type:</span> NodePort         <span class="hljs-comment">// 配置为NodePort，外部可以访问</span><br><span class="hljs-symbol"> ports:</span><br> - port: <span class="hljs-number">30080</span>          <span class="hljs-comment">// 容器间，服务调用的端口</span><br><span class="hljs-symbol">   targetPort:</span> <span class="hljs-number">80</span>       <span class="hljs-comment">// 容器暴露的端口，与Dockerfile暴露端口保持一致</span><br><span class="hljs-symbol">   nodePort:</span> <span class="hljs-number">30001</span>      <span class="hljs-comment">// NodePort，外部访问的端口,如果不显示指定，k8s会随机分配一个端口</span><br><span class="hljs-symbol"> selector:</span><br><span class="hljs-symbol">  name:</span> nginx-pod<br></code></pre></td></tr></table></figure><h2 id="Kubernetes集群里有三种IP地址，分别如下："><a href="#Kubernetes集群里有三种IP地址，分别如下：" class="headerlink" title="Kubernetes集群里有三种IP地址，分别如下："></a>Kubernetes集群里有三种IP地址，分别如下：</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">Node</span> <span class="hljs-built_in">IP</span>：Node节点的<span class="hljs-built_in">IP</span>地址，即物理网卡的<span class="hljs-built_in">IP</span>地址。<br><span class="hljs-symbol">Pod</span> <span class="hljs-built_in">IP</span>：Pod的<span class="hljs-built_in">IP</span>地址，即docker容器的<span class="hljs-built_in">IP</span>地址，此为虚拟<span class="hljs-built_in">IP</span>地址。<br><span class="hljs-symbol">Cluster</span> <span class="hljs-built_in">IP</span>：Service的<span class="hljs-built_in">IP</span>地址，此为虚拟<span class="hljs-built_in">IP</span>地址。<br></code></pre></td></tr></table></figure><h3 id="Node-IP"><a href="#Node-IP" class="headerlink" title="Node IP"></a>Node IP</h3><p>可以是物理机的IP（也可能是虚拟机IP）。每个Service都会在Node节点上开通一个端口，外部可以通过NodeIP:NodePort即可访问Service里的Pod,和我们访问服务器部署的项目一样，IP:端口&#x2F;项目名。</p><p>在kubernetes查询Node IP：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>.kubectl get nodes<br><span class="hljs-number">2</span>.kubectl describe <span class="hljs-keyword">node</span> <span class="hljs-title">nodeName</span><br><span class="hljs-number">3</span>.显示出来的InternalIP就是NodeIP<br></code></pre></td></tr></table></figure><h3 id="Pod-IP"><a href="#Pod-IP" class="headerlink" title="Pod IP"></a>Pod IP</h3><p>Pod IP是每个Pod的IP地址，他是Docker Engine根据docker网桥的IP地址段进行分配的，通常是一个虚拟的二层网络。</p><p>同Service下的pod可以直接根据PodIP相互通信。<br>不同Service下的pod在集群间pod通信要借助于 cluster ip。<br>pod和集群外通信，要借助于node ip。</p><p>在kubernetes查询Pod IP：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-number">1.</span>kubectl <span class="hljs-built_in">get</span> pods<br><span class="hljs-number">2.</span>kubectl <span class="hljs-built_in">describe</span> pod podName<br></code></pre></td></tr></table></figure><h3 id="Cluster-IP"><a href="#Cluster-IP" class="headerlink" title="Cluster IP"></a>Cluster IP</h3><p>Service的IP地址，此为虚拟IP地址。外部网络无法ping通，只有kubernetes集群内部访问使用。<br>在kubernetes查询Cluster IP: </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl -n 命名空间 <span class="hljs-built_in">get</span> Service<br></code></pre></td></tr></table></figure><p>Cluster IP是一个虚拟的IP，但更像是一个伪造的IP网络，原因有以下几点:</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-number">1</span>.Cluster <span class="hljs-built_in">IP</span>仅仅作用于Kubernetes Service这个对象，并由Kubernetes管理和分配P地址<br><br><span class="hljs-number">2</span>.Cluster <span class="hljs-built_in">IP</span>无法被ping，他没有一个“实体网络对象”来响应<br><br><span class="hljs-number">3</span>.Cluster <span class="hljs-built_in">IP</span>只能结合Service Port组成一个具体的通信端口，单独的Cluster <span class="hljs-built_in">IP</span>不具备通信的基础，并且他们属于Kubernetes集群这样一个封闭的空间。<br><br><span class="hljs-number">4</span>.在不同Service下的pod节点在集群间相互访问可以通过Cluster <span class="hljs-built_in">IP</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
      <category>k8s基础概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制安装k8s</title>
    <link href="/2023/04/20/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/k8s_V1.20%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/"/>
    <url>/2023/04/20/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/k8s_V1.20%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二进制安装k8s"><a href="#二进制安装k8s" class="headerlink" title="二进制安装k8s"></a>二进制安装k8s</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">参考文献:https:<span class="hljs-regexp">//</span>blog.<span class="hljs-number">51</span>cto.com<span class="hljs-regexp">/13053917/</span><span class="hljs-number">2596613</span><span class="hljs-comment">#h22</span><br></code></pre></td></tr></table></figure><h2 id="一、前言："><a href="#一、前言：" class="headerlink" title="一、前言："></a>一、前言：</h2><h3 id="kubernetes的五个组件："><a href="#kubernetes的五个组件：" class="headerlink" title="kubernetes的五个组件："></a>kubernetes的五个组件：</h3><h4 id="master节点的三个组件："><a href="#master节点的三个组件：" class="headerlink" title="master节点的三个组件："></a>master节点的三个组件：</h4><ul><li>kube-apiserver:整个集群的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制。</li><li>kube-controller-manager:控制器管理器,负责维护集群的状态，比如故障检测、自动扩展、滚动更新等。保证资源到达期望值。</li><li>kube-scheduler：调度器,经过策略调度POD到合适的节点上面运行。分别有预选策略和优选策略。</li></ul><h4 id="node节点的两个组件："><a href="#node节点的两个组件：" class="headerlink" title="node节点的两个组件："></a>node节点的两个组件：</h4><ul><li>kubelet :在集群节点上运行的代理，kubelet会通过各种机制来确保容器处于运行状态且健康。kubelet不会管理不是由kubernetes创建的容器。kubelet接收POD的期望状态（副本数、镜像、网络等），并调用容器运行环境来实现预期状态。kubelet会定时汇报节点的状态给apiserver，作为scheduler调度的基础。kubelet会对镜像和容器进行清理，避免不必要的文件资源占用。</li><li>kube-proxy是集群中节点上运行的网络代理，是实现service资源功能组件之一。kube-proxy建立了POD网络和集群网络之间的关系。不同node上的service流量转发规则会通过kube-proxy来调用apiserver访问etcd进行规则更新。service流量调度方式有三种方式：userspace（废弃，性能很差）、iptables（性能差，复杂，即将废弃）、ipvs（性能好，转发方式清晰）。</li></ul><h2 id="二、机器规划："><a href="#二、机器规划：" class="headerlink" title="二、机器规划："></a>二、机器规划：</h2><table><thead><tr><th>IP地址</th><th>机器名称</th><th>安装组件</th></tr></thead><tbody><tr><td>192.168.94.247</td><td>k8s-master-1</td><td>kube-apiserver、kube-controller-manager、kube-scheduler、etcd 、(kube-proxy)</td></tr><tr><td>192.168.94.248</td><td>k8s-node-1</td><td>kubelet、kube-proxy、etcd</td></tr><tr><td>192.168.94.249</td><td>k8s-node-2</td><td>kubelet、kube-proxy、etcd</td></tr></tbody></table><h2 id="三、搭建k8s"><a href="#三、搭建k8s" class="headerlink" title="三、搭建k8s"></a>三、搭建k8s</h2><h3 id="1、机器基础配置"><a href="#1、机器基础配置" class="headerlink" title="1、机器基础配置"></a>1、机器基础配置</h3><h4 id="1-1、关闭防火墙和selinux"><a href="#1-1、关闭防火墙和selinux" class="headerlink" title="1.1、关闭防火墙和selinux:"></a>1.1、关闭防火墙和selinux:</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl stop firewalld &amp;&amp; systemctl <span class="hljs-built_in">disable</span> firewalld<br>setenforce 0<br>sed -i <span class="hljs-string">&#x27;s/^SELINUX=.\*/SELINUX=disabled/&#x27;</span> /etc/selinux/config<br></code></pre></td></tr></table></figure><h4 id="1-2、调整系统时区为中国-x2F-上海，同步时间"><a href="#1-2、调整系统时区为中国-x2F-上海，同步时间" class="headerlink" title="1.2、调整系统时区为中国&#x2F;上海，同步时间"></a>1.2、调整系统时区为中国&#x2F;上海，同步时间</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">timedatectl set-timezone Asia/Shanghai<br><span class="hljs-comment">#将当前的 UTC 时间写入硬件时钟</span><br>timedatectl set-local-rtc 0<br><br><span class="hljs-comment"># 重启依赖于系统时间的服务</span><br>systemctl restart rsyslog<br>systemctl restart crond<br><span class="hljs-comment">#//date 查看系统时间  hwclock --show 查看硬件时间</span><br><br><span class="hljs-comment">#同步时间</span><br>yum install ntpd -y<br>ntpdate cn.pool.ntp.org<br><br><span class="hljs-comment">#设置定时查询是否同步的脚本</span><br>crontab -e<br>*/15 * * * * /usr/sbin/ntpdate -u pool.ntp.org &gt;/dev/null 2&gt;&amp;1<br></code></pre></td></tr></table></figure><h4 id="1-3、修改各机器主机名"><a href="#1-3、修改各机器主机名" class="headerlink" title="1.3、修改各机器主机名"></a>1.3、修改各机器主机名</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">hostnamectl set-hostname k8s-master-1<br>hostnamectl set-hostname k8s-node-1<br>hostnamectl set-hostname k8s-node-2<br></code></pre></td></tr></table></figure><h4 id="1-4、修改内核参数"><a href="#1-4、修改内核参数" class="headerlink" title="1.4、修改内核参数"></a>1.4、修改内核参数</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">net.ipv4.ip_forward = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br>sysctl --system<br><br><span class="hljs-comment">#加载ipvs模块</span><br>modprobe -- ip_vs<br>modprobe -- ip_vs_rr<br>modprobe -- ip_vs_wrr<br>modprobe -- ip_vs_sh<br>modprobe -- nf_conntrack_ipv4<br>lsmod | grep ip_vs<br>lsmod | grep nf_conntrack_ipv4<br>yum install -y ipvsadm<br></code></pre></td></tr></table></figure><h4 id="1-5、配置hosts文件"><a href="#1-5、配置hosts文件" class="headerlink" title="1.5、配置hosts文件"></a>1.5、配置hosts文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/hosts<br><br>192.168.94.247  k8s-master-1<br>192.168.94.248  k8s-node-1<br>192.168.94.249  k8s-node-2<br></code></pre></td></tr></table></figure><h4 id="1-6、免密认证"><a href="#1-6、免密认证" class="headerlink" title="1.6、免密认证"></a>1.6、免密认证</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#设置免密登录</span><br>ssh-keygen  <span class="hljs-comment">#一路回车即可</span><br>ssh-copy-id k8s-node-2<br>ssh-copy-id k8s-node-1<br><br><span class="hljs-comment">##免密认证方式二：</span><br>ssh-keygen -t rsa -P <span class="hljs-string">&quot;&quot;</span> -f ~/.ssh/id_rsa<br><span class="hljs-built_in">cat</span> /root/.ssh/id_rsa.pub &gt; /root/.ssh/authorized_keys<br>scp -rp /root/.ssh k8s-node-1:/root<br>scp -rp /root/.ssh k8s-node-2:/root<br><br>备注：为了方便后面操作，不做免密需要输入密码<br><br></code></pre></td></tr></table></figure><h4 id="1-7、新建工作目录-该目录为：配置文件和证书文件生成目录，后面的所有文件生成相关操作均在此目录下进行"><a href="#1-7、新建工作目录-该目录为：配置文件和证书文件生成目录，后面的所有文件生成相关操作均在此目录下进行" class="headerlink" title="1.7、新建工作目录 该目录为：配置文件和证书文件生成目录，后面的所有文件生成相关操作均在此目录下进行"></a>1.7、新建工作目录 该目录为：配置文件和证书文件生成目录，后面的所有文件生成相关操作均在此目录下进行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /data/work<br><span class="hljs-built_in">cd</span> /data/work/<br></code></pre></td></tr></table></figure><h3 id="2、搭建etcd集群"><a href="#2、搭建etcd集群" class="headerlink" title="2、搭建etcd集群"></a>2、搭建etcd集群</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#配置文件存放目录</span><br><span class="hljs-built_in">mkdir</span> -p /app/etcd<br><span class="hljs-comment">#证书文件存放目录</span><br><span class="hljs-built_in">mkdir</span> -p /app/etcd/ssl<br></code></pre></td></tr></table></figure><h4 id="2-1、创建etcd证书"><a href="#2-1、创建etcd证书" class="headerlink" title="2.1、创建etcd证书"></a>2.1、创建etcd证书</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64<br>wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64<br>wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64<br><span class="hljs-built_in">chmod</span> +x cfssl*<br><span class="hljs-built_in">mv</span> cfssl_linux-amd64 /usr/local/bin/cfssl<br><span class="hljs-built_in">mv</span> cfssljson_linux-amd64 /usr/local/bin/cfssljson<br><span class="hljs-built_in">mv</span> cfssl-certinfo_linux-amd64 /usr/local/bin/cfssl-certinfo<br></code></pre></td></tr></table></figure><h4 id="2-2、配置ca请求文件"><a href="#2-2、配置ca请求文件" class="headerlink" title="2.2、配置ca请求文件"></a>2.2、配置ca请求文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim ca-csr.json<br><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>      <span class="hljs-string">&quot;size&quot;</span>: 2048<br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Hubei&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Wuhan&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;system&quot;</span><br>    &#125;<br>  ],<br>  <span class="hljs-string">&quot;ca&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">#8760h：10年有效</span><br></code></pre></td></tr></table></figure><h4 id="2-3、创建ca证书"><a href="#2-3、创建ca证书" class="headerlink" title="2.3、创建ca证书"></a>2.3、创建ca证书</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">cfssl gencert -initca ca-csr.json  | cfssljson -bare ca<br><span class="hljs-comment">#生成了ca-key.pem ca.pem ca.csr</span><br></code></pre></td></tr></table></figure><h4 id="2-4、配置ca证书策略"><a href="#2-4、配置ca证书策略" class="headerlink" title="2.4、配置ca证书策略"></a>2.4、配置ca证书策略</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim ca-config.json<br><br>&#123;<br>  <span class="hljs-string">&quot;signing&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span><br>        &#125;,<br>      <span class="hljs-string">&quot;profiles&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;kubernetes&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;usages&quot;</span>: [<br>                  <span class="hljs-string">&quot;signing&quot;</span>,<br>                  <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>                  <span class="hljs-string">&quot;server auth&quot;</span>,<br>                  <span class="hljs-string">&quot;client auth&quot;</span><br>              ],<br>              <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span><br>          &#125;<br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-5、配置etcd请求csr文件"><a href="#2-5、配置etcd请求csr文件" class="headerlink" title="2.5、配置etcd请求csr文件"></a>2.5、配置etcd请求csr文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim etcd-csr.json<br><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;etcd&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [<br>    <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.94.247&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.94.248&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.94.249&quot;</span><br><br>  ],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: 2048<br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [&#123;<br>    <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>    <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Hubei&quot;</span>,<br>    <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Wuhan&quot;</span>,<br>    <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>    <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;system&quot;</span><br>  &#125;]<br>&#125;<br><br><br><span class="hljs-comment">#生成证书:</span><br>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes etcd-csr.json | cfssljson  -bare etcd<br><br><span class="hljs-comment">#生成:</span><br><span class="hljs-built_in">ls</span> etcd*.pem<br><span class="hljs-comment">#----------------</span><br>etcd-key.pem  etcd.pem<br><span class="hljs-comment">#-----------------</span><br></code></pre></td></tr></table></figure><h4 id="2-6、部署etcd集群"><a href="#2-6、部署etcd集群" class="headerlink" title="2.6、部署etcd集群"></a>2.6、部署etcd集群</h4><h5 id="2-6-1、下载或上传etcd包-解压并分发相关包"><a href="#2-6-1、下载或上传etcd包-解压并分发相关包" class="headerlink" title="2.6.1、下载或上传etcd包,解压并分发相关包:"></a>2.6.1、下载或上传etcd包,解压并分发相关包:</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/etcd-io/etcd/releases/download/v3.4.14/etcd-v3.4.14-linux-amd64.tar.gz<br><br>tar -xnf etcd-v3.4.14-linux-amd64.tar.gz <br><br><span class="hljs-built_in">cp</span> etcd-v3.4.14-linux-amd64/etcd* /usr/local/bin/<br><br><span class="hljs-comment">#将文件分发到其他节点</span><br>scp etcd-v3.4.14-linux-amd64/etcd* k8s-node-1:/usr/local/bin/<br>scp etcd-v3.4.14-linux-amd64/etcd* k8s-node-2:/usr/local/bin/<br></code></pre></td></tr></table></figure><h5 id="2-6-2、创建配置文件"><a href="#2-6-2、创建配置文件" class="headerlink" title="2.6.2、创建配置文件:"></a>2.6.2、创建配置文件:</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim etcd.conf<br><br><span class="hljs-comment">#[Member]</span><br>ETCD_NAME=<span class="hljs-string">&quot;etcd1&quot;</span><br>ETCD_DATA_DIR=<span class="hljs-string">&quot;/var/lib/etcd/default.etcd&quot;</span><br>ETCD_LISTEN_PEER_URLS=<span class="hljs-string">&quot;https://192.168.94.247:2380&quot;</span><br>ETCD_LISTEN_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.94.247:2379,http://127.0.0.1:2379&quot;</span><br><br><span class="hljs-comment">#[Clustering]</span><br>ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="hljs-string">&quot;https://192.168.94.247:2380&quot;</span><br>ETCD_ADVERTISE_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.94.247:2379&quot;</span><br>ETCD_INITIAL_CLUSTER=<span class="hljs-string">&quot;etcd1=https://192.168.94.247:2380,etcd2=https://192.168.94.248:2380,etcd3=https://192.168.94.249:2380&quot;</span><br>ETCD_INITIAL_CLUSTER_TOKEN=<span class="hljs-string">&quot;etcd-cluster&quot;</span><br>ETCD_INITIAL_CLUSTER_STATE=<span class="hljs-string">&quot;new&quot;</span><br></code></pre></td></tr></table></figure><p>注：<br>ETCD_NAME：节点名称，集群中唯一<br>ETCD_DATA_DIR：数据目录<br>ETCD_LISTEN_PEER_URLS：集群通信监听地址<br>ETCD_LISTEN_CLIENT_URLS：客户端访问监听地址<br>ETCD_INITIAL_ADVERTISE_PEER_URLS：集群通告地址<br>ETCD_ADVERTISE_CLIENT_URLS：客户端通告地址<br>ETCD_INITIAL_CLUSTER：集群节点地址<br>ETCD_INITIAL_CLUSTER_TOKEN：集群Token<br>ETCD_INITIAL_CLUSTER_STATE：加入集群的当前状态，new是新集群，existing表示加入已有集群</p><h5 id="2-6-3、创建启动服务文件："><a href="#2-6-3、创建启动服务文件：" class="headerlink" title="2.6.3、创建启动服务文件："></a>2.6.3、创建启动服务文件：</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim etcd.service<br><span class="hljs-comment">#-----------------------------------------------</span><br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br><br>[Service]<br>Type=notify<br>EnvironmentFile=-/app/etcd/etcd.conf<br>WorkingDirectory=/var/lib/etcd/<br>ExecStart=/usr/local/bin/etcd \<br>  --cert-file=/app/etcd/ssl/etcd.pem \<br>  --key-file=/app/etcd/ssl/etcd-key.pem \<br>  --trusted-ca-file=/app/etcd/ssl/ca.pem \<br>  --peer-cert-file=/app/etcd/ssl/etcd.pem \<br>  --peer-key-file=/app/etcd/ssl/etcd-key.pem \<br>  --peer-trusted-ca-file=/app/etcd/ssl/ca.pem \<br>  --peer-client-cert-auth \<br>  --client-cert-auth<br>Restart=on-failure<br>RestartSec=5<br>LimitNOFILE=65536<br><br></code></pre></td></tr></table></figure><h5 id="2-6-4、同步文件到本机和其他机器节点的对应路径下"><a href="#2-6-4、同步文件到本机和其他机器节点的对应路径下" class="headerlink" title="2.6.4、同步文件到本机和其他机器节点的对应路径下:"></a>2.6.4、同步文件到本机和其他机器节点的对应路径下:</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> ca*.pem /app/etcd/ssl/<br><span class="hljs-built_in">cp</span> etcd*.pem /app/etcd/ssl/<br><span class="hljs-built_in">cp</span> etcd.conf /app/etcd/<br><br>scp -r /app/ k8s-node-1:/<br>scp -r /app/ k8s-node-2:/<br><br><span class="hljs-built_in">cp</span> etcd.service /usr/lib/systemd/system/<br>scp etcd.service k8s-node-1:/usr/lib/systemd/system/<br>scp etcd.service k8s-node-2:/usr/lib/systemd/system/<br></code></pre></td></tr></table></figure><h5 id="2-6-5、修改同步的节点信息"><a href="#2-6-5、修改同步的节点信息" class="headerlink" title="2.6.5、修改同步的节点信息"></a>2.6.5、修改同步的节点信息</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /app/etcd/etcd.conf<br>注:分别在其他机器(k8s-node-1、k8s-node-2）上修改配置文件中etcd名字(ETCD_NAME)和ip(除了ETCD_INITIAL_CLUSTER其他的都需要修改成自己的ip）<br><br><span class="hljs-comment">#创建目录</span><br><span class="hljs-built_in">mkdir</span> -p /var/lib/etcd/default.etcd<br></code></pre></td></tr></table></figure><h5 id="2-6-6、启动etcd集群-所有节点机器同时启动"><a href="#2-6-6、启动etcd集群-所有节点机器同时启动" class="headerlink" title="2.6.6、启动etcd集群,所有节点机器同时启动"></a>2.6.6、启动etcd集群,所有节点机器同时启动</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload &amp;&amp; systemctl <span class="hljs-built_in">enable</span> etcd.service &amp;&amp; systemctl start etcd<br>systemctl status etcd<br></code></pre></td></tr></table></figure><h5 id="2-6-7、查看集群状态"><a href="#2-6-7、查看集群状态" class="headerlink" title="2.6.7、查看集群状态"></a>2.6.7、查看集群状态</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">ETCDCTL_API=3 /usr/local/bin/etcdctl --write-out=table --cacert=/app/etcd/ssl/ca.pem --cert=/app/etcd/ssl/etcd.pem \<br>--key=/app/etcd/ssl/etcd-key.pem --endpoints=<span class="hljs-string">&quot;https://192.168.94.247:2379,https://192.168.94.248:2379,https://192.168.94.249:2379&quot;</span> endpoint health<br><span class="hljs-comment">#或者</span><br>etcdctl --cacert=/app/etcd/ssl/ca.pem --cert=/app/etcd/ssl/etcd.pem --key=/app/etcd/ssl/etcd-key.pem \<br> --endpoints=<span class="hljs-string">&quot;https://192.168.94.247:2379,https://192.168.94.248:2379,https://192.168.94.249:2379&quot;</span> endpoint health<br></code></pre></td></tr></table></figure><h3 id="3、kubernetes组件部署"><a href="#3、kubernetes组件部署" class="headerlink" title="3、kubernetes组件部署"></a>3、kubernetes组件部署</h3><h4 id="部署前准备"><a href="#部署前准备" class="headerlink" title="部署前准备"></a>部署前准备</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#下载或者上传安装包:</span><br>wget https://dl.k8s.io/v1.20.1/kubernetes-server-linux-amd64.tar.gz<br>tar -xnf kubernetes-server-linux-amd64.tar.gz<br><br><span class="hljs-comment">#进入解压后的k8s包内</span><br><span class="hljs-built_in">cd</span> kubernetes/server/bin/<br><br><span class="hljs-comment">#将相关的文件复制并分发到其他机器相关路径上</span><br><span class="hljs-built_in">cp</span> kube-apiserver kube-controller-manager kube-scheduler /usr/local/bin/  <br>scp kubelet kube-proxy k8s-node-1:/usr/local/bin/<br>scp kubelet kube-proxy k8s-node-2:/usr/local/bin/<br><br><span class="hljs-built_in">cd</span> /data/work/<br><br><span class="hljs-comment">#创建工作目录,所有机器均要创建。</span><br><span class="hljs-built_in">mkdir</span> -p /app/kubernetes/     <span class="hljs-comment"># kubernetes组件配置文件存放目录</span><br><span class="hljs-built_in">mkdir</span> -p /app/kubernetes/ssl  <span class="hljs-comment"># kubernetes组件证书文件存放目录</span><br><span class="hljs-built_in">mkdir</span> /var/log/kubernetes     <span class="hljs-comment"># kubernetes组件日志文件存放目录</span><br></code></pre></td></tr></table></figure><h4 id="3-1、部署api-server"><a href="#3-1、部署api-server" class="headerlink" title="3.1、部署api-server"></a>3.1、部署api-server</h4><h5 id="3-1-1、创建kube-apiserver-csr请求文件"><a href="#3-1-1、创建kube-apiserver-csr请求文件" class="headerlink" title="3.1.1、创建kube-apiserver-csr请求文件"></a>3.1.1、创建kube-apiserver-csr请求文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim kube-apiserver-csr.json<br><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [<br>    <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.94.247&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.94.248&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.94.249&quot;</span>,<br>    <span class="hljs-string">&quot;10.255.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc.cluster&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc.cluster.local&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: 2048<br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;system&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-1-2、生成证书和token-csv文件"><a href="#3-1-2、生成证书和token-csv文件" class="headerlink" title="3.1.2、生成证书和token.csv文件"></a>3.1.2、生成证书和token.csv文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-apiserver-csr.json | cfssljson -bare kube-apiserver<br><br><span class="hljs-built_in">cat</span> &gt; token.csv &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">$(head -c 16 /dev/urandom | od -An -t x | tr -d &#x27; &#x27;),kubelet-bootstrap,10001,&quot;system:kubelet-bootstrap&quot;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h5 id="3-1-3、创建配置文件，修改ip地址"><a href="#3-1-3、创建配置文件，修改ip地址" class="headerlink" title="3.1.3、创建配置文件，修改ip地址"></a>3.1.3、创建配置文件，修改ip地址</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim kube-apiserver.conf<br><br>KUBE_APISERVER_OPTS=<span class="hljs-string">&quot;--enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \</span><br><span class="hljs-string">  --anonymous-auth=false \</span><br><span class="hljs-string">  --bind-address=192.168.94.247 \</span><br><span class="hljs-string">  --secure-port=6443 \</span><br><span class="hljs-string">  --advertise-address=192.168.94.247 \</span><br><span class="hljs-string">  --insecure-port=0 \</span><br><span class="hljs-string">  --authorization-mode=Node,RBAC \</span><br><span class="hljs-string">  --runtime-config=api/all=true \</span><br><span class="hljs-string">  --enable-bootstrap-token-auth \</span><br><span class="hljs-string">  --service-cluster-ip-range=10.255.0.0/16 \</span><br><span class="hljs-string">  --token-auth-file=/app/kubernetes/token.csv \</span><br><span class="hljs-string">  --service-node-port-range=9000-9500 \</span><br><span class="hljs-string">  --tls-cert-file=/app/kubernetes/ssl/kube-apiserver.pem  \</span><br><span class="hljs-string">  --tls-private-key-file=/app/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="hljs-string">  --client-ca-file=/app/kubernetes/ssl/ca.pem \</span><br><span class="hljs-string">  --kubelet-client-certificate=/app/kubernetes/ssl/kube-apiserver.pem \</span><br><span class="hljs-string">  --kubelet-client-key=/app/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="hljs-string">  --service-account-key-file=/app/kubernetes/ssl/ca-key.pem \</span><br><span class="hljs-string">  --service-account-signing-key-file=/app/kubernetes/ssl/ca-key.pem  \      # 1.20以上版本必须有此参数 &lt;复制过去请删除注释&gt;</span><br><span class="hljs-string">  --service-account-issuer=https://kubernetes.default.svc.cluster.local \   # 1.20以上版本必须有此参数 &lt;复制过去请删除注释&gt;</span><br><span class="hljs-string">  --etcd-cafile=/app/etcd/ssl/ca.pem \</span><br><span class="hljs-string">  --etcd-certfile=/app/etcd/ssl/etcd.pem \</span><br><span class="hljs-string">  --etcd-keyfile=/app/etcd/ssl/etcd-key.pem \</span><br><span class="hljs-string">  --etcd-servers=https://192.168.94.247:2379,https://192.168.94.248:2379,https://192.168.94.249:2379 \</span><br><span class="hljs-string">  --enable-swagger-ui=true \</span><br><span class="hljs-string">  --allow-privileged=true \</span><br><span class="hljs-string">  --apiserver-count=3 \</span><br><span class="hljs-string">  --audit-log-maxage=30 \</span><br><span class="hljs-string">  --audit-log-maxbackup=3 \</span><br><span class="hljs-string">  --audit-log-maxsize=100 \</span><br><span class="hljs-string">  --audit-log-path=/var/log/kube-apiserver-audit.log \</span><br><span class="hljs-string">  --event-ttl=1h \</span><br><span class="hljs-string">  --alsologtostderr=true \</span><br><span class="hljs-string">  --logtostderr=false \</span><br><span class="hljs-string">  --log-dir=/var/log/kubernetes \</span><br><span class="hljs-string">  --v=4&quot;</span><br><span class="hljs-comment">#注：</span><br><span class="hljs-comment">##--logtostderr：启用日志</span><br><span class="hljs-comment">##--v：日志等级</span><br><span class="hljs-comment">##--log-dir：日志目录</span><br><span class="hljs-comment">##--etcd-servers：etcd集群地址</span><br><span class="hljs-comment">##--bind-address：监听地址</span><br><span class="hljs-comment">##--secure-port：https安全端口</span><br><span class="hljs-comment">##--advertise-address：集群通告地址</span><br><span class="hljs-comment">##--allow-privileged：启用授权</span><br><span class="hljs-comment">##--service-cluster-ip-range：Service虚拟IP地址段</span><br><span class="hljs-comment">##--enable-admission-plugins：准入控制模块</span><br><span class="hljs-comment">##--authorization-mode：认证授权，启用RBAC授权和节点自管理</span><br><span class="hljs-comment">##--enable-bootstrap-token-auth：启用TLS bootstrap机制</span><br><span class="hljs-comment">##--token-auth-file：bootstrap token文件</span><br><span class="hljs-comment">##--service-node-port-range：Service nodeport类型默认分配端口范围</span><br><span class="hljs-comment">##--kubelet-client-xxx：apiserver访问kubelet客户端证书</span><br><span class="hljs-comment">##--tls-xxx-file：apiserver https证书</span><br><span class="hljs-comment">##--etcd-xxxfile：连接Etcd集群证书</span><br><span class="hljs-comment">##--audit-log-xxx：审计日志</span><br></code></pre></td></tr></table></figure><h5 id="3-1-4、创建服务启动文件"><a href="#3-1-4、创建服务启动文件" class="headerlink" title="3.1.4、创建服务启动文件"></a>3.1.4、创建服务启动文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim kube-apiserver.service<br><br>[Unit]<br>Description=Kubernetes API Server<br>Documentation=https://github.com/kubernetes/kubernetes<br>After=etcd.service<br>Wants=etcd.service<br><br>[Service]<br>EnvironmentFile=-/app/kubernetes/kube-apiserver.conf<br>ExecStart=/usr/local/bin/kube-apiserver <span class="hljs-variable">$KUBE_APISERVER_OPTS</span><br>Restart=on-failure<br>RestartSec=5<br>Type=notify<br>LimitNOFILE=65536<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h5 id="3-1-5、同步相关的文件到对应路径"><a href="#3-1-5、同步相关的文件到对应路径" class="headerlink" title="3.1.5、同步相关的文件到对应路径"></a>3.1.5、同步相关的文件到对应路径</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> ca*.pem /app/kubernetes/ssl/<br><span class="hljs-built_in">cp</span> kube-apiserver*.pem /app/kubernetes/ssl/<br><span class="hljs-built_in">cp</span> token.csv /app/kubernetes/<br><span class="hljs-built_in">cp</span> kube-apiserver.conf /app/kubernetes/ <br><span class="hljs-built_in">cp</span> kube-apiserver.service /usr/lib/systemd/system/<br></code></pre></td></tr></table></figure><h5 id="3-1-6、启动服务"><a href="#3-1-6、启动服务" class="headerlink" title="3.1.6、启动服务"></a>3.1.6、启动服务</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> kube-apiserver<br>systemctl start kube-apiserver<br>systemctl status kube-apiserver<br></code></pre></td></tr></table></figure><h4 id="3-2、部署kubectl"><a href="#3-2、部署kubectl" class="headerlink" title="3.2、部署kubectl"></a>3.2、部署kubectl</h4><h5 id="3-2-1、创建csr请求文件"><a href="#3-2-1、创建csr请求文件" class="headerlink" title="3.2.1、创建csr请求文件"></a>3.2.1、创建csr请求文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim admin-csr.json<br><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: 2048<br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:masters&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;system&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-2、生成证书"><a href="#3-2-2、生成证书" class="headerlink" title="3.2.2、生成证书"></a>3.2.2、生成证书</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin<br><br><span class="hljs-built_in">cp</span> admin*.pem /app/kubernetes/ssl/<br></code></pre></td></tr></table></figure><h5 id="3-2-3、创建kubeconfig配置文件"><a href="#3-2-3、创建kubeconfig配置文件" class="headerlink" title="3.2.3、创建kubeconfig配置文件"></a>3.2.3、创建kubeconfig配置文件</h5><p>kubeconfig 为 kubectl 的配置文件，包含访问 apiserver 的所有信息，如 apiserver 地址、CA 证书和自身使用的证书</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#设置集群参数  --server如果有负载均衡VIP 可以改成负载均衡VIP的地址</span><br>kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=<span class="hljs-literal">true</span> --server=https://192.168.94.247:6443 --kubeconfig=kube.config<br><span class="hljs-comment">#设置客户端认证参数</span><br>kubectl config set-credentials admin --client-certificate=admin.pem --client-key=admin-key.pem --embed-certs=<span class="hljs-literal">true</span> --kubeconfig=kube.config<br><span class="hljs-comment">#设置上下文参数</span><br>kubectl config set-context kubernetes --cluster=kubernetes --user=admin --kubeconfig=kube.config<br><span class="hljs-comment">#设置默认上下文</span><br>kubectl config use-context kubernetes --kubeconfig=kube.config<br><br><span class="hljs-comment">#创建相关目录文件</span><br><span class="hljs-built_in">mkdir</span> ~/.kube<br><span class="hljs-built_in">cp</span> kube.config ~/.kube/config<br></code></pre></td></tr></table></figure><h5 id="3-2-4、授权kubernetes证书访问kubelet-api权限"><a href="#3-2-4、授权kubernetes证书访问kubelet-api权限" class="headerlink" title="3.2.4、授权kubernetes证书访问kubelet api权限"></a>3.2.4、授权kubernetes证书访问kubelet api权限</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create clusterrolebinding kube-apiserver:kubelet-apis --clusterrole=system:kubelet-api-admin --user kubernetes<br></code></pre></td></tr></table></figure><h5 id="3-2-5、查看集群组件状态"><a href="#3-2-5、查看集群组件状态" class="headerlink" title="3.2.5、查看集群组件状态"></a>3.2.5、查看集群组件状态</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl cluster-info<br><span class="hljs-comment">#---</span><br><span class="hljs-comment">#Kubernetes control plane is running at https://192.168.94.247:6443</span><br><br><br>kubectl get componentstatuses<br>kubectl get all --all-namespaces<br></code></pre></td></tr></table></figure><h5 id="3-2-6、配置kubectl子命令补全"><a href="#3-2-6、配置kubectl子命令补全" class="headerlink" title="3.2.6、配置kubectl子命令补全"></a>3.2.6、配置kubectl子命令补全</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#补齐命令一</span><br>yum install -y bash-completion<br><span class="hljs-built_in">source</span> /usr/share/bash-completion/bash_completion<br><span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br>kubectl completion bash &gt; ~/.kube/completion.bash.inc<br><span class="hljs-built_in">source</span> <span class="hljs-string">&#x27;/root/.kube/completion.bash.inc&#x27;</span>  <br><span class="hljs-built_in">source</span> <span class="hljs-variable">$HOME</span>/.bash_profile<br><br><span class="hljs-comment">#补齐命令二</span><br><span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc<br><br></code></pre></td></tr></table></figure><h4 id="3-3、部署kube-controller-manager"><a href="#3-3、部署kube-controller-manager" class="headerlink" title="3.3、部署kube-controller-manager"></a>3.3、部署kube-controller-manager</h4><h5 id="3-3-1、创建csr请求文件"><a href="#3-3-1、创建csr请求文件" class="headerlink" title="3.3.1、创建csr请求文件"></a>3.3.1、创建csr请求文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim kube-controller-manager-csr.json<br><br>&#123;<br>    <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-controller-manager&quot;</span>,<br>    <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>: 2048<br>    &#125;,<br>    <span class="hljs-string">&quot;hosts&quot;</span>: [<br>      <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>      <span class="hljs-string">&quot;192.168.94.247&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>        <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>        <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>        <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:kube-controller-manager&quot;</span>,<br>        <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;system&quot;</span><br>      &#125;<br>    ]<br>&#125;<br><span class="hljs-comment">#注意：hosts 列表包含所有 kube-controller-manager 节点 IP；</span><br></code></pre></td></tr></table></figure><h5 id="3-3-2、生成证书"><a href="#3-3-2、生成证书" class="headerlink" title="3.3.2、生成证书"></a>3.3.2、生成证书</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager<br><br><span class="hljs-built_in">ls</span> kube-controller-manager*.pem<br></code></pre></td></tr></table></figure><h5 id="3-3-3、设置集群参数"><a href="#3-3-3、设置集群参数" class="headerlink" title="3.3.3、设置集群参数"></a>3.3.3、设置集群参数</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=<span class="hljs-literal">true</span> --server=https://192.168.94.247:6443 --kubeconfig=kube-controller-manager.kubeconfig<br><span class="hljs-comment">#设置客户端认证参数</span><br>kubectl config set-credentials system:kube-controller-manager --client-certificate=kube-controller-manager.pem --client-key=kube-controller-manager-key.pem --embed-certs=<span class="hljs-literal">true</span> --kubeconfig=kube-controller-manager.kubeconfig<br><span class="hljs-comment">#设置上下文参数</span><br>kubectl config set-context system:kube-controller-manager --cluster=kubernetes --user=system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig<br><span class="hljs-comment">#设置默认上下文</span><br>kubectl config use-context system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig<br></code></pre></td></tr></table></figure><h5 id="3-3-4、创建配置文件"><a href="#3-3-4、创建配置文件" class="headerlink" title="3.3.4、创建配置文件"></a>3.3.4、创建配置文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim kube-controller-manager.conf<br><br>KUBE_CONTROLLER_MANAGER_OPTS=<span class="hljs-string">&quot;--bind-address=127.0.0.1\</span><br><span class="hljs-string">  --secure-port=10257 \</span><br><span class="hljs-string">  --port=0 \</span><br><span class="hljs-string">  --kubeconfig=/app/kubernetes/kube-controller-manager.kubeconfig \</span><br><span class="hljs-string">  --service-cluster-ip-range=10.255.0.0/16 \</span><br><span class="hljs-string">  --cluster-name=kubernetes \</span><br><span class="hljs-string">  --cluster-signing-cert-file=/app/kubernetes/ssl/ca.pem \</span><br><span class="hljs-string">  --cluster-signing-key-file=/app/kubernetes/ssl/ca-key.pem \</span><br><span class="hljs-string">  --allocate-node-cidrs=true \</span><br><span class="hljs-string">  --cluster-cidr=10.0.0.0/16 \</span><br><span class="hljs-string">  --experimental-cluster-signing-duration=87600h \</span><br><span class="hljs-string">  --root-ca-file=/app/kubernetes/ssl/ca.pem \</span><br><span class="hljs-string">  --service-account-private-key-file=/app/kubernetes/ssl/ca-key.pem \</span><br><span class="hljs-string">  --leader-elect=true \</span><br><span class="hljs-string">  --feature-gates=RotateKubeletServerCertificate=true \</span><br><span class="hljs-string">  --controllers=*,bootstrapsigner,tokencleaner \</span><br><span class="hljs-string">  --horizontal-pod-autoscaler-use-rest-clients=true \</span><br><span class="hljs-string">  --horizontal-pod-autoscaler-sync-period=10s \</span><br><span class="hljs-string">  --tls-cert-file=/app/kubernetes/ssl/kube-controller-manager.pem \</span><br><span class="hljs-string">  --tls-private-key-file=/app/kubernetes/ssl/kube-controller-manager-key.pem \</span><br><span class="hljs-string">  --use-service-account-credentials=true \</span><br><span class="hljs-string">  --alsologtostderr=true \</span><br><span class="hljs-string">  --logtostderr=false \</span><br><span class="hljs-string">  --log-dir=/var/log/kubernetes \</span><br><span class="hljs-string">  --v=2&quot;</span><br><br></code></pre></td></tr></table></figure><p>注：HTTP探测失败，状态码：400，从1.13开始，kube-controller-manager和kube-scheduler将 10259，10257 作为安全端口公开<br>不安全的端口 10251，10252 已被弃用。<br>应该使用安全端口作为默认的livenessProbes。<code>--secure-port=10257</code></p><h6 id="3-3-5、创建启动文件"><a href="#3-3-5、创建启动文件" class="headerlink" title="3.3.5、创建启动文件"></a>3.3.5、创建启动文件</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim kube-controller-manager.service<br><br>[Unit]<br>Description=Kubernetes Controller Manager<br>Documentation=https://github.com/kubernetes/kubernetes<br><br>[Service]<br>EnvironmentFile=-/app/kubernetes/kube-controller-manager.conf<br>ExecStart=/usr/local/bin/kube-controller-manager <span class="hljs-variable">$KUBE_CONTROLLER_MANAGER_OPTS</span><br>Restart=on-failure<br>RestartSec=5<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h5 id="3-3-6、同步相关的文件到对应路径"><a href="#3-3-6、同步相关的文件到对应路径" class="headerlink" title="3.3.6、同步相关的文件到对应路径"></a>3.3.6、同步相关的文件到对应路径</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> kube-controller-manager*.pem /app/kubernetes/ssl/<br><span class="hljs-built_in">cp</span> kube-controller-manager.kubeconfig /app/kubernetes/<br><span class="hljs-built_in">cp</span> kube-controller-manager.conf /app/kubernetes/<br><span class="hljs-built_in">cp</span> kube-controller-manager.service /usr/lib/systemd/system/<br></code></pre></td></tr></table></figure><h5 id="3-3-7、启动服务"><a href="#3-3-7、启动服务" class="headerlink" title="3.3.7、启动服务"></a>3.3.7、启动服务</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload <br>systemctl <span class="hljs-built_in">enable</span> kube-controller-manager<br>systemctl start kube-controller-manager<br>systemctl status kube-controller-manager<br></code></pre></td></tr></table></figure><h4 id="3-4、部署kube-scheduler"><a href="#3-4、部署kube-scheduler" class="headerlink" title="3.4、部署kube-scheduler"></a>3.4、部署kube-scheduler</h4><h5 id="3-4-1、创建csr请求文件"><a href="#3-4-1、创建csr请求文件" class="headerlink" title="3.4.1、创建csr请求文件"></a>3.4.1、创建csr请求文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim kube-scheduler-csr.json<br>&#123;<br>    <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-scheduler&quot;</span>,<br>    <span class="hljs-string">&quot;hosts&quot;</span>: [<br>      <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>      <span class="hljs-string">&quot;192.168.94.247&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>: 2048<br>    &#125;,<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>        <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>        <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>        <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:kube-scheduler&quot;</span>,<br>        <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;system&quot;</span><br>      &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-4-2、生成证书"><a href="#3-4-2、生成证书" class="headerlink" title="3.4.2、生成证书"></a>3.4.2、生成证书</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler<br></code></pre></td></tr></table></figure><h5 id="3-4-3、设置集群参数"><a href="#3-4-3、设置集群参数" class="headerlink" title="3.4.3、设置集群参数"></a>3.4.3、设置集群参数</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=<span class="hljs-literal">true</span> --server=https://192.168.94.247:6443 --kubeconfig=kube-scheduler.kubeconfig<br><span class="hljs-comment">#设置客户端认证参数</span><br>kubectl config set-credentials system:kube-scheduler --client-certificate=kube-scheduler.pem --client-key=kube-scheduler-key.pem --embed-certs=<span class="hljs-literal">true</span> --kubeconfig=kube-scheduler.kubeconfig<br><span class="hljs-comment">#设置上下文参数</span><br>kubectl config set-context system:kube-scheduler --cluster=kubernetes --user=system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig<br><span class="hljs-comment">#设置默认上下文</span><br>kubectl config use-context system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig<br></code></pre></td></tr></table></figure><h5 id="3-4-4、创建配置文件"><a href="#3-4-4、创建配置文件" class="headerlink" title="3.4.4、创建配置文件"></a>3.4.4、创建配置文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim kube-scheduler.conf<br><br>KUBE_SCHEDULER_OPTS=<span class="hljs-string">&quot;--address=127.0.0.1 \</span><br><span class="hljs-string">--kubeconfig=/app/kubernetes/kube-scheduler.kubeconfig \</span><br><span class="hljs-string">--leader-elect=true \</span><br><span class="hljs-string">--alsologtostderr=true \</span><br><span class="hljs-string">--logtostderr=false \</span><br><span class="hljs-string">--log-dir=/var/log/kubernetes \</span><br><span class="hljs-string">--v=2&quot;</span><br></code></pre></td></tr></table></figure><h5 id="3-4-5、创建服务启动文件"><a href="#3-4-5、创建服务启动文件" class="headerlink" title="3.4.5、创建服务启动文件"></a>3.4.5、创建服务启动文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim kube-scheduler.service<br><br>[Unit]<br>Description=Kubernetes Scheduler<br>Documentation=https://github.com/kubernetes/kubernetes<br><br>[Service]<br>EnvironmentFile=-/app/kubernetes/kube-scheduler.conf<br>ExecStart=/usr/local/bin/kube-scheduler <span class="hljs-variable">$KUBE_SCHEDULER_OPTS</span><br>Restart=on-failure<br>RestartSec=5<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h5 id="3-4-6、同步相关的文件到对应路径"><a href="#3-4-6、同步相关的文件到对应路径" class="headerlink" title="3.4.6、同步相关的文件到对应路径"></a>3.4.6、同步相关的文件到对应路径</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> kube-scheduler*.pem /app/kubernetes/ssl/<br><span class="hljs-built_in">cp</span> kube-scheduler.kubeconfig /app/kubernetes/<br><span class="hljs-built_in">cp</span> kube-scheduler.conf /app/kubernetes/<br><span class="hljs-built_in">cp</span> kube-scheduler.service /usr/lib/systemd/system/<br></code></pre></td></tr></table></figure><h5 id="3-4-7、启动服务"><a href="#3-4-7、启动服务" class="headerlink" title="3.4.7、启动服务"></a>3.4.7、启动服务</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> kube-scheduler<br>systemctl start kube-scheduler<br></code></pre></td></tr></table></figure><h4 id="3-5、安装docker-《各机器上都需要安装》"><a href="#3-5、安装docker-《各机器上都需要安装》" class="headerlink" title="3.5、安装docker 《各机器上都需要安装》"></a>3.5、安装docker 《各机器上都需要安装》</h4><h5 id="3-5-1、下载关于docker的依赖环境"><a href="#3-5-1、下载关于docker的依赖环境" class="headerlink" title="3.5.1、下载关于docker的依赖环境"></a>3.5.1、下载关于docker的依赖环境</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><h5 id="3-5-2、设置一下下载Docker的镜像源"><a href="#3-5-2、设置一下下载Docker的镜像源" class="headerlink" title="3.5.2、设置一下下载Docker的镜像源"></a>3.5.2、设置一下下载Docker的镜像源</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h5 id="3-5-3、安装docker"><a href="#3-5-3、安装docker" class="headerlink" title="3.5.3、安装docker"></a>3.5.3、安装docker</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum makecache fast<br>yum -y install docker-ce<br></code></pre></td></tr></table></figure><h5 id="3-5-4、启动docker服务并设置开机启动"><a href="#3-5-4、启动docker服务并设置开机启动" class="headerlink" title="3.5.4、启动docker服务并设置开机启动"></a>3.5.4、启动docker服务并设置开机启动</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start docker<br>systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><h5 id="3-5-5、修改docker源和驱动-自己本地有仓库的可以加自己本地的"><a href="#3-5-5、修改docker源和驱动-自己本地有仓库的可以加自己本地的" class="headerlink" title="3.5.5、修改docker源和驱动  自己本地有仓库的可以加自己本地的"></a>3.5.5、修改docker源和驱动  自己本地有仓库的可以加自己本地的</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="hljs-string">    &quot;registry-mirrors&quot;: [</span><br><span class="hljs-string">        &quot;https://1nj0zren.mirror.aliyuncs.com&quot;,</span><br><span class="hljs-string">        &quot;https://kfwkfulq.mirror.aliyuncs.com&quot;,</span><br><span class="hljs-string">        &quot;https://2lqq34jg.mirror.aliyuncs.com&quot;,</span><br><span class="hljs-string">        &quot;https://pee6w651.mirror.aliyuncs.com&quot;,</span><br><span class="hljs-string">        &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="hljs-string">        &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="hljs-string">        &quot;http://f1361db2.m.daocloud.io&quot;,</span><br><span class="hljs-string">        &quot;https://registry.docker-cn.com&quot;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment">#备注：exec-opts：文件驱动(k8s默认是systemd,而docker默认是cgroupfs)</span><br></code></pre></td></tr></table></figure><h5 id="3-5-6、重启docker"><a href="#3-5-6、重启docker" class="headerlink" title="3.5.6、重启docker"></a>3.5.6、重启docker</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart docker<br></code></pre></td></tr></table></figure><h5 id="3-5-7、下载依赖镜像"><a href="#3-5-7、下载依赖镜像" class="headerlink" title="3.5.7、下载依赖镜像"></a>3.5.7、下载依赖镜像</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2<br>docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2 k8s.gcr.io/pause:3.2<br>docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2<br><br>docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.7.0<br>docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.7.0 k8s.gcr.io/coredns:1.7.0<br>docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.7.0<br></code></pre></td></tr></table></figure><h4 id="3-6、部署kubelet"><a href="#3-6、部署kubelet" class="headerlink" title="3.6、部署kubelet"></a>3.6、部署kubelet</h4><h5 id="3-6-1、创建kubelet-bootstrap-kubeconfig"><a href="#3-6-1、创建kubelet-bootstrap-kubeconfig" class="headerlink" title="3.6.1、创建kubelet-bootstrap.kubeconfig"></a>3.6.1、创建kubelet-bootstrap.kubeconfig</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#设置变量，获取token.csv中的字符串‘c7dee7fb28103826abeaf98c212d314a’</span><br>BOOTSTRAP_TOKEN=$(awk -F <span class="hljs-string">&quot;,&quot;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> /app/kubernetes/token.csv)<br><br><span class="hljs-comment">#设置集群参数</span><br>kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=<span class="hljs-literal">true</span> --server=https://192.168.94.247:6443 --kubeconfig=kubelet-bootstrap.kubeconfig<br><span class="hljs-comment">#设置客户端认证参数</span><br>kubectl config set-credentials kubelet-bootstrap --token=<span class="hljs-variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> --kubeconfig=kubelet-bootstrap.kubeconfig  <br><span class="hljs-comment">#设置上下文参数</span><br>kubectl config set-context default --cluster=kubernetes --user=kubelet-bootstrap --kubeconfig=kubelet-bootstrap.kubeconfig<br><span class="hljs-comment">#设置默认上下文</span><br>kubectl config use-context default --kubeconfig=kubelet-bootstrap.kubeconfig<br><span class="hljs-comment">#创建角色绑定</span><br>kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap<br></code></pre></td></tr></table></figure><h5 id="3-6-2、创建配置文件"><a href="#3-6-2、创建配置文件" class="headerlink" title="3.6.2、创建配置文件"></a>3.6.2、创建配置文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim kubelet.json<br><br>&#123;<br>  <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;KubeletConfiguration&quot;</span>,<br>  <span class="hljs-string">&quot;apiVersion&quot;</span>: <span class="hljs-string">&quot;kubelet.config.k8s.io/v1beta1&quot;</span>,<br>  <span class="hljs-string">&quot;authentication&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;x509&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;clientCAFile&quot;</span>: <span class="hljs-string">&quot;/app/kubernetes/ssl/ca.pem&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;webhook&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;enabled&quot;</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-string">&quot;cacheTTL&quot;</span>: <span class="hljs-string">&quot;2m0s&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;anonymous&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;enabled&quot;</span>: <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;authorization&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;mode&quot;</span>: <span class="hljs-string">&quot;Webhook&quot;</span>,<br>    <span class="hljs-string">&quot;webhook&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;cacheAuthorizedTTL&quot;</span>: <span class="hljs-string">&quot;5m0s&quot;</span>,<br>      <span class="hljs-string">&quot;cacheUnauthorizedTTL&quot;</span>: <span class="hljs-string">&quot;30s&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;192.168.94.248&quot;</span>,<br>  <span class="hljs-string">&quot;port&quot;</span>: 10250,<br>  <span class="hljs-string">&quot;readOnlyPort&quot;</span>: 10255,<br>  <span class="hljs-string">&quot;cgroupDriver&quot;</span>: <span class="hljs-string">&quot;cgroupfs&quot;</span>,     <span class="hljs-comment">#如果docker的驱动为systemd，处修改为systemd。此处设置很重要，否则后面node节点无法加入到集群。</span><br>  <span class="hljs-string">&quot;hairpinMode&quot;</span>: <span class="hljs-string">&quot;promiscuous-bridge&quot;</span>,<br>  <span class="hljs-string">&quot;serializeImagePulls&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;featureGates&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;RotateKubeletClientCertificate&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;RotateKubeletServerCertificate&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-string">&quot;clusterDomain&quot;</span>: <span class="hljs-string">&quot;cluster.local.&quot;</span>,<br>  <span class="hljs-string">&quot;clusterDNS&quot;</span>: [<span class="hljs-string">&quot;10.255.0.2&quot;</span>]<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>注：Docker 在默认情况下使用的 <code>CgroupDriver</code> 为 <code>cgroupfs</code>， 而 Kubernetes 推荐使用<code>systemd</code> 来代替 <code>cgroupfs</code>，可通过修改 Docker 的<code> Cgroup Driver</code>为<code>systemd</code><br>操作：编辑&#x2F;app&#x2F;docker&#x2F;daemon.json  添加：”exec-opts”: [“native.cgroupdriver&#x3D;systemd”] </p><p><strong>以上步骤3.5.5已经修改docker的daemon.json，直接修改以上配置文件的<code>CgroupDriver</code>为<code>systemd</code>即可</strong></p><h5 id="3-6-3、创建启动文件"><a href="#3-6-3、创建启动文件" class="headerlink" title="3.6.3、创建启动文件"></a>3.6.3、创建启动文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim kubelet.service<br><br>[Unit]<br>Description=Kubernetes Kubelet<br>Documentation=https://github.com/kubernetes/kubernetes<br>After=docker.service<br>Requires=docker.service<br><br>[Service]<br>WorkingDirectory=/var/lib/kubelet<br>ExecStart=/usr/local/bin/kubelet \<br>  --bootstrap-kubeconfig=/app/kubernetes/kubelet-bootstrap.kubeconfig \<br>  --cert-dir=/app/kubernetes/ssl \<br>  --kubeconfig=/app/kubernetes/kubelet.kubeconfig \<br>  --config=/app/kubernetes/kubelet.json \<br>  --network-plugin=cni \<br>  --pod-infra-container-image=k8s.gcr.io/pause:3.2 \<br>  --alsologtostderr=<span class="hljs-literal">true</span> \<br>  --logtostderr=<span class="hljs-literal">false</span> \<br>  --log-dir=/var/log/kubernetes \<br>  --v=2<br>Restart=on-failure<br>RestartSec=5<br><br>[Install]<br>WantedBy=multi-user.target<br><br><br></code></pre></td></tr></table></figure><p>注：<br>– hostname-override：显示名称，集群中唯一<br>– network-plugin：启用CNI<br>– kubeconfig：空路径，会自动生成，后面用于连接apiserver<br>– bootstrap-kubeconfig：首次启动向apiserver申请证书<br>– config：配置参数文件<br>– cert-dir：kubelet证书生成目录<br>– pod-infra-container-image：管理Pod网络容器的镜像</p><h5 id="3-6-4、同步文件到各个node节点相关路径下，并修改各个node节点的kubelet-json文件"><a href="#3-6-4、同步文件到各个node节点相关路径下，并修改各个node节点的kubelet-json文件" class="headerlink" title="3.6.4、同步文件到各个node节点相关路径下，并修改各个node节点的kubelet.json文件"></a>3.6.4、同步文件到各个node节点相关路径下，并修改各个node节点的kubelet.json文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#master节点不安装kubelet，则不用在本机执行</span><br><span class="hljs-comment">#cp kubelet-bootstrap.kubeconfig kubelet.json /app/kubernetes/</span><br><span class="hljs-comment">#cp kubelet.service /usr/lib/systemd/system/</span><br><span class="hljs-comment">#-----------------------------------------------------</span><br><br>scp  kubelet-bootstrap.kubeconfig kubelet.json k8s-node-1:/app/kubernetes<br>scp  kubelet-bootstrap.kubeconfig kubelet.json k8s-node-2:/app/kubernetes<br>scp ca.pem k8s-node-1:/app/kubernetes/ssl/<br>scp ca.pem k8s-node-2:/app/kubernetes/ssl/<br>scp kubelet.service k8s-node-1:/usr/lib/systemd/system/<br>scp kubelet.service k8s-node-2:/usr/lib/systemd/system/<br><br><span class="hljs-comment">#修改各个节点的kubelet.json</span><br>vim /app/kubernetes/kubelet.json<br>注：kubelete.json配置文件address改为各个节点的ip地址<br></code></pre></td></tr></table></figure><h5 id="3-6-5、启动服务-各个node节点上操作"><a href="#3-6-5、启动服务-各个node节点上操作" class="headerlink" title="3.6.5、启动服务(各个node节点上操作)"></a>3.6.5、启动服务(各个node节点上操作)</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /var/lib/kubelet  <span class="hljs-comment">#添加工作目录</span><br><span class="hljs-built_in">mkdir</span> /var/log/kubernetes<br><br>systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> kubelet<br>systemctl start kubelet<br>systemctl status kubelet<br></code></pre></td></tr></table></figure><h5 id="3-6-6、批准证书签名请求"><a href="#3-6-6、批准证书签名请求" class="headerlink" title="3.6.6、批准证书签名请求"></a>3.6.6、批准证书签名请求</h5><p><strong>确认kubelet服务启动成功后，接着到master上Approve一下bootstrap请求。执行如下命令可以看到两个node节点发送了两个CSR请求</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl get csr<br><br>kubectl certificate approve node-csr-G9iphq731LaemWmaJdmwPHpndwY3BjdF4SiZcRGpcMs<br><span class="hljs-comment">#node-csr-G9iphq731LaemWmaJdmwPHpndwY3BjdF4SiZcRGpcMs 是kubectl get csr 出来的name</span><br><br>kubectl certificate approve node-csr-TgFVoLnpuH_voga9jWlme8EJt98b5cPLLAxCrJr1urs<br><span class="hljs-comment">#node-csr-TgFVoLnpuH_voga9jWlme8EJt98b5cPLLAxCrJr1urs 是kubectl get csr 出来的name</span><br><br><span class="hljs-comment">#执行kubectl certificate approve 后</span><br>kubectl get csr  <br><span class="hljs-comment">#CONDITION一栏 由原来的Pending 变成了 Approved,Issued</span><br><br><br><span class="hljs-comment">#查看node节点状态</span><br>kubectl get nodes<br></code></pre></td></tr></table></figure><h4 id="3-7、部署kube-proxy"><a href="#3-7、部署kube-proxy" class="headerlink" title="3.7、部署kube-proxy"></a>3.7、部署kube-proxy</h4><h5 id="3-7-1、创建csr请求文件"><a href="#3-7-1、创建csr请求文件" class="headerlink" title="3.7.1、创建csr请求文件"></a>3.7.1、创建csr请求文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim kube-proxy-csr.json<br><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-proxy&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: 2048<br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;system&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-7-2、生成证书"><a href="#3-7-2、生成证书" class="headerlink" title="3.7.2、生成证书"></a>3.7.2、生成证书</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy<br><br><span class="hljs-built_in">ls</span> kube-proxy*.pem<br></code></pre></td></tr></table></figure><h5 id="3-7-3、创建kubeconfig文件"><a href="#3-7-3、创建kubeconfig文件" class="headerlink" title="3.7.3、创建kubeconfig文件"></a>3.7.3、创建kubeconfig文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=<span class="hljs-literal">true</span> --server=https://192.168.94.247:6443 --kubeconfig=kube-proxy.kubeconfig<br>kubectl config set-credentials kube-proxy --client-certificate=kube-proxy.pem --client-key=kube-proxy-key.pem --embed-certs=<span class="hljs-literal">true</span> --kubeconfig=kube-proxy.kubeconfig<br>kubectl config set-context default --cluster=kubernetes --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig<br>kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig<br></code></pre></td></tr></table></figure><h5 id="3-7-4、创建kube-proxy配置文件"><a href="#3-7-4、创建kube-proxy配置文件" class="headerlink" title="3.7.4、创建kube-proxy配置文件"></a>3.7.4、创建kube-proxy配置文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim kube-proxy.yaml<br><br><span class="hljs-comment">#-----------------------</span><br>apiVersion: kubeproxy.config.k8s.io/v1alpha1<br>bindAddress: 192.168.94.248<br>clientConnection:<br>  kubeconfig: /app/kubernetes/kube-proxy.kubeconfig<br><span class="hljs-comment">#clusterCIDR: 192.168.0.0/16            #此处网段必须与网络组件网段保持一致，否则部署网络组件时会报错</span><br>clusterCIDR: 10.0.0.0/16           <span class="hljs-comment">#此处网段必须与网络组件网段保持一致，否则部署网络组件时会报错</span><br>healthzBindAddress: 192.168.94.248:10256<br>kind: KubeProxyConfiguration<br>metricsBindAddress: 192.168.94.248:10249<br>mode: <span class="hljs-string">&quot;ipvs&quot;</span><br><span class="hljs-comment">#-----------------------------------</span><br></code></pre></td></tr></table></figure><h5 id="3-7-5、创建服务启动文件"><a href="#3-7-5、创建服务启动文件" class="headerlink" title="3.7.5、创建服务启动文件"></a>3.7.5、创建服务启动文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim kube-proxy.service<br><br>[Unit]<br>Description=Kubernetes Kube-Proxy Server<br>Documentation=https://github.com/kubernetes/kubernetes<br>After=network.target<br><br>[Service]<br>WorkingDirectory=/var/lib/kube-proxy<br>ExecStart=/usr/local/bin/kube-proxy \<br>  --config=/app/kubernetes/kube-proxy.yaml \<br>  --alsologtostderr=<span class="hljs-literal">true</span> \<br>  --logtostderr=<span class="hljs-literal">false</span> \<br>  --log-dir=/var/log/kubernetes \<br>  --v=2<br>Restart=on-failure<br>RestartSec=5<br>LimitNOFILE=65536<br><br>[Install]<br>WantedBy=multi-user.target<br><br></code></pre></td></tr></table></figure><h5 id="3-7-6、同步文件到各个节点"><a href="#3-7-6、同步文件到各个节点" class="headerlink" title="3.7.6、同步文件到各个节点"></a>3.7.6、同步文件到各个节点</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#master节点不安装kube-proxy，则以下cp步骤不用执行</span><br><span class="hljs-comment">#---------------------------------------------------</span><br><span class="hljs-comment">#cp kube-proxy*.pem /app/kubernetes/ssl/</span><br><span class="hljs-comment">#cp kube-proxy.kubeconfig kube-proxy.yaml /app/kubernetes/</span><br><span class="hljs-comment">#cp kube-proxy.service /usr/lib/systemd/system/</span><br><span class="hljs-comment">#--------------------------------------------------------</span><br><br>scp kube-proxy.kubeconfig kube-proxy.yaml k8s-node-1:/app/kubernetes/<br>scp kube-proxy.kubeconfig kube-proxy.yaml k8s-node-2:/app/kubernetes/<br>scp kube-proxy.service k8s-node-1:/usr/lib/systemd/system/<br>scp kube-proxy.service k8s-node-2:/usr/lib/systemd/system/<br><br><br><span class="hljs-comment">#注：需要去各安装机器上，配置文件kube-proxy.yaml中address修改为各节点的实际IP</span><br>vim /app/kubernetes/kube-proxy.yaml<br></code></pre></td></tr></table></figure><h5 id="3-7-7、启动kube-proxy服务"><a href="#3-7-7、启动kube-proxy服务" class="headerlink" title="3.7.7、启动kube-proxy服务"></a>3.7.7、启动kube-proxy服务</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /var/lib/kube-proxy   <br>systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> kube-proxy<br>systemctl restart kube-proxy<br>systemctl status kube-proxy<br></code></pre></td></tr></table></figure><h5 id="3-7-8、配置网络组件"><a href="#3-7-8、配置网络组件" class="headerlink" title="3.7.8、配置网络组件"></a>3.7.8、配置网络组件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://docs.projectcalico.org/v3.14/manifests/calico.yaml<br><br>kubectl apply -f calico.yaml<br><br><span class="hljs-comment">#查看各个节点，均为Ready状态</span><br>kubectl get pods -A<br>kubectl get nodes<br></code></pre></td></tr></table></figure><h5 id="3-7-9、部署coredns"><a href="#3-7-9、部署coredns" class="headerlink" title="3.7.9、部署coredns"></a>3.7.9、部署coredns</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#coredns.yaml文件地址： https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/coredns.yaml.sed</span><br><br>下载后需修改yaml文件:<br><span class="hljs-comment">#kubernetes cluster.local in-addr.arpa ip6.arpa</span><br><span class="hljs-comment">#forward . /etc/resolv.conf</span><br><span class="hljs-comment">#clusterIP为：10.255.0.2(kubelet配置文件中的clusterDNS)</span><br><span class="hljs-comment">#</span><br>vim coredns.yaml<br><span class="hljs-comment">##----</span><br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: coredns<br>  namespace: kube-system<br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRole<br>metadata:<br>  labels:<br>    kubernetes.io/bootstrapping: rbac-defaults<br>  name: system:coredns<br>rules:<br>- apiGroups:<br>  - <span class="hljs-string">&quot;&quot;</span><br>  resources:<br>  - endpoints<br>  - services<br>  - pods<br>  - namespaces<br>  verbs:<br>  - list<br>  - watch<br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRoleBinding<br>metadata:<br>  annotations:<br>    rbac.authorization.kubernetes.io/autoupdate: <span class="hljs-string">&quot;true&quot;</span><br>  labels:<br>    kubernetes.io/bootstrapping: rbac-defaults<br>  name: system:coredns<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: system:coredns<br>subjects:<br>- kind: ServiceAccount<br>  name: coredns<br>  namespace: kube-system<br>---<br>apiVersion: v1<br>kind: ConfigMap<br>metadata:<br>  name: coredns<br>  namespace: kube-system<br>data:<br>  Corefile: |<br>    .:53 &#123;<br>        errors<br>        health &#123;<br>          lameduck 5s<br>        &#125;<br>        ready<br>        kubernetes cluster.local  in-addr.arpa ip6.arpa &#123;<br>          fallthrough in-addr.arpa ip6.arpa<br>        &#125;<br>        prometheus :9153<br>        forward . /etc/resolv.conf &#123;<br>          max_concurrent 1000<br>        &#125;<br>        cache 30<br>        loop<br>        reload<br>        loadbalance<br>    &#125;<br>---<br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: coredns<br>  namespace: kube-system<br>  labels:<br>    k8s-app: kube-dns<br>    kubernetes.io/name: <span class="hljs-string">&quot;CoreDNS&quot;</span><br>spec:<br>  <span class="hljs-comment"># replicas: not specified here:</span><br>  <span class="hljs-comment"># 1. Default is 1.</span><br>  <span class="hljs-comment"># 2. Will be tuned in real time if DNS horizontal auto-scaling is turned on.</span><br>  strategy:<br>    <span class="hljs-built_in">type</span>: RollingUpdate<br>    rollingUpdate:<br>      maxUnavailable: 1<br>  selector:<br>    matchLabels:<br>      k8s-app: kube-dns<br>  template:<br>    metadata:<br>      labels:<br>        k8s-app: kube-dns<br>    spec:<br>      priorityClassName: system-cluster-critical<br>      serviceAccountName: coredns<br>      tolerations:<br>        - key: <span class="hljs-string">&quot;CriticalAddonsOnly&quot;</span><br>          operator: <span class="hljs-string">&quot;Exists&quot;</span><br>      nodeSelector:<br>        kubernetes.io/os: linux<br>      affinity:<br>         podAntiAffinity:<br>           preferredDuringSchedulingIgnoredDuringExecution:<br>           - weight: 100<br>             podAffinityTerm:<br>               labelSelector:<br>                 matchExpressions:<br>                   - key: k8s-app<br>                     operator: In<br>                     values: [<span class="hljs-string">&quot;kube-dns&quot;</span>]<br>               topologyKey: kubernetes.io/hostname<br>      containers:<br>      - name: coredns<br>        image: coredns/coredns:1.8.0<br>        imagePullPolicy: IfNotPresent<br>        resources:<br>          limits:<br>            memory: 170Mi<br>          requests:<br>            cpu: 100m<br>            memory: 70Mi<br>        args: [ <span class="hljs-string">&quot;-conf&quot;</span>, <span class="hljs-string">&quot;/etc/coredns/Corefile&quot;</span> ]<br>        volumeMounts:<br>        - name: config-volume<br>          mountPath: /etc/coredns<br>          readOnly: <span class="hljs-literal">true</span><br>        ports:<br>        - containerPort: 53<br>          name: dns<br>          protocol: UDP<br>        - containerPort: 53<br>          name: dns-tcp<br>          protocol: TCP<br>        - containerPort: 9153<br>          name: metrics<br>          protocol: TCP<br>        securityContext:<br>          allowPrivilegeEscalation: <span class="hljs-literal">false</span><br>          capabilities:<br>            add:<br>            - NET_BIND_SERVICE<br>            drop:<br>            - all<br>          readOnlyRootFilesystem: <span class="hljs-literal">true</span><br>        livenessProbe:<br>          httpGet:<br>            path: /health<br>            port: 8080<br>            scheme: HTTP<br>          initialDelaySeconds: 60<br>          timeoutSeconds: 5<br>          successThreshold: 1<br>          failureThreshold: 5<br>        readinessProbe:<br>          httpGet:<br>            path: /ready<br>            port: 8181<br>            scheme: HTTP<br>      dnsPolicy: Default<br>      volumes:<br>        - name: config-volume<br>          configMap:<br>            name: coredns<br>            items:<br>            - key: Corefile<br>              path: Corefile<br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: kube-dns<br>  namespace: kube-system<br>  annotations:<br>    prometheus.io/port: <span class="hljs-string">&quot;9153&quot;</span><br>    prometheus.io/scrape: <span class="hljs-string">&quot;true&quot;</span><br>  labels:<br>    k8s-app: kube-dns<br>    kubernetes.io/cluster-service: <span class="hljs-string">&quot;true&quot;</span><br>    kubernetes.io/name: <span class="hljs-string">&quot;CoreDNS&quot;</span><br>spec:<br>  selector:<br>    k8s-app: kube-dns<br>  clusterIP: 10.255.0.2<br>  ports:<br>  - name: dns<br>    port: 53<br>    protocol: UDP<br>  - name: dns-tcp<br>    port: 53<br>    protocol: TCP<br>  - name: metrics<br>    port: 9153<br>    protocol: TCP<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#启动coredns.yaml</span><br>kubectl apply -f coredns.yaml<br></code></pre></td></tr></table></figure><h3 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim nginx.yaml<br><br>---<br>apiVersion: v1<br>kind: ReplicationController<br>metadata:<br>  name: nginx-controller<br>spec:<br>  replicas: 2<br>  selector:<br>    name: nginx<br>  template:<br>    metadata:<br>      labels:<br>        name: nginx<br>    spec:<br>      containers:<br>        - name: nginx<br>          image: nginx:1.19.6<br>          ports:<br>            - containerPort: 80<br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nginx-service-nodeport<br>spec:<br>  ports:<br>    - port: 80<br>      targetPort: 80<br>      nodePort: 9001<br>      protocol: TCP<br>  <span class="hljs-built_in">type</span>: NodePort<br>  selector:<br>    name: nginx<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply nginx.yaml<br>kubectl get svc<br>kubectl get pods<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
      <category>k8s环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zabbix服务安装部署及监控配置</title>
    <link href="/2023/04/18/%E7%9B%91%E6%8E%A7/Zabbix/Zabbix%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/04/18/%E7%9B%91%E6%8E%A7/Zabbix/Zabbix%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Zabbix服务安装部署及监控配置"><a href="#Zabbix服务安装部署及监控配置" class="headerlink" title="Zabbix服务安装部署及监控配置"></a>Zabbix服务安装部署及监控配置</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">#参考文档：https://www.cnblogs.com/alexlv/p/14927373.html<br>#参考文档：https://mp.weixin.qq.com/s/zqU8wvEgsNRaolN71L0rXg<br></code></pre></td></tr></table></figure><p>简介：zabbix是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级开源解决方案。能够监视各种网络参数，保证服务器系统的安全运营<br>提供灵活的通知机制让系统管理员快速定位解决存在的各种问题</p><p>主要功能：<br>监控CPU负载、内存的使用、磁盘的使用、网络状态、端口监视、日志监视、插件开发自定义</p><p>Zabbix的主要特点有<br>1.指标收集:从任何设备、系统、应用程序上进行指标采集；<br>2.问题监测:定位智能阀值；<br>3.可视化:单一界面管理平台；<br>4.告警和修复:确保及时，有效的告警<br>5.安全和认证：保护您所有层级的数据<br>6.轻松搭建部署：大批模板、开箱即用、节省您宝贵的时间<br>7.自动发现：自动监控大型动态环境<br>8.分布式监控：无限制扩展</p><p>运行机制：</p><ul><li>Zabbix Server可以通过 SNMP，Zabbix agent，Ping，端口监视等你方法提供对远程服务器&#x2F;网络状态的 监视，数据收集功能，可以在运行 Linux，Solaris，HP-UX，AIX，FreeBSD，OpenBSD，OX X，Windows 多 平台。</li><li>Zabbix Agent 安装在需要被监控的目标服务器上，主要完成对硬件信息与操作系统有关的内存，CPU 等你 信息收集。</li><li>Zabbix Server 可以单独监视远程服务器的服务状态，同时也可以与 Zabbix Agent 结合。可以轮询 Zabbix Agent 主动接收监视数据（trapping 传递 方式），同时还可以被动接收 Zabbix Agent 发送的数据。</li><li>Zabbix proxy 为service收集数据，分担负载的程序。</li></ul><h2 id="一、Zabbix监控部署："><a href="#一、Zabbix监控部署：" class="headerlink" title="一、Zabbix监控部署："></a>一、Zabbix监控部署：</h2><p><strong>部署准备：</strong><br>centos7 系统服务器3台，一台作为监控服务器（192.168.94.154），两台作为被监控节点（192.168.94.155&#x2F;192.168.94.156）。</p><h3 id="1、服务器配置："><a href="#1、服务器配置：" class="headerlink" title="1、服务器配置："></a>1、服务器配置：</h3><p>| 主机名 | IP地址 | 安装 |  备注 |<br>| —– |<br>| mt-1  | 192.168.94.154 | Zabbix-service | 开启监控功能 |<br>| mt-2  | 192.168.94.155 | Zabbix-agent   | 开启        |<br>| mt-3  | 192.168.94.155 | Zabbix-agent   | 开启        |</p><h3 id="2、设置免密登录（在192-168-94-154上执行）"><a href="#2、设置免密登录（在192-168-94-154上执行）" class="headerlink" title="2、设置免密登录（在192.168.94.154上执行）"></a>2、设置免密登录（在192.168.94.154上执行）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen  <span class="hljs-comment">#一路回车即可</span><br>ssh-copy-id mt-2<br>ssh-copy-id mt-3<br></code></pre></td></tr></table></figure><h3 id="3、所有机器设置hosts"><a href="#3、所有机器设置hosts" class="headerlink" title="3、所有机器设置hosts"></a>3、所有机器设置hosts</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">192.168.94.154 mt-1</span><br><span class="hljs-string">192.168.94.155 ct-1</span><br><span class="hljs-string">192.168.94.156 ct-2</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="4、所有机器做好同步时间"><a href="#4、所有机器做好同步时间" class="headerlink" title="4、所有机器做好同步时间"></a>4、所有机器做好同步时间</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install ntpd -y<br>ntpdate -u ntp.api.bz<br><span class="hljs-comment">#设置定时查询是否同步的脚本</span><br>crontab -e<br><span class="hljs-comment">#添加如下内容</span><br>*/15 * * * * /usr/sbin/ntpdate -u pool.ntp.org &gt;/dev/null 2&gt;&amp;1<br></code></pre></td></tr></table></figure><h3 id="5、所有机器关闭防火墙和seliunx"><a href="#5、所有机器关闭防火墙和seliunx" class="headerlink" title="5、所有机器关闭防火墙和seliunx"></a>5、所有机器关闭防火墙和seliunx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl stop firewalld &amp;&amp; systemctl <span class="hljs-built_in">disable</span> firewalld<br>swapoff -a &amp;&amp; sed -i <span class="hljs-string">&#x27;/ swap / s/^\(.*\)$/#\1/g&#x27;</span> /etc/fstab<br>setenforce 0 &amp;&amp; sed -i <span class="hljs-string">&#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27;</span> /etc/selinux/config<br></code></pre></td></tr></table></figure><h3 id="6、下载并安装rpm包（所有机器均下载安装）"><a href="#6、下载并安装rpm包（所有机器均下载安装）" class="headerlink" title="6、下载并安装rpm包（所有机器均下载安装）"></a>6、下载并安装rpm包（所有机器均下载安装）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">##运行以下命令安装rpm源</span><br>rpm -Uvh https://mirrors.aliyun.com/zabbix/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm<br>sed -i <span class="hljs-string">&#x27;s#http://repo.zabbix.com#https://mirrors.aliyun.com/zabbix#&#x27;</span> /etc/yum.repos.d/zabbix.repo<br>yum clean all<br></code></pre></td></tr></table></figure><h3 id="7、安装zabbix-server和agent"><a href="#7、安装zabbix-server和agent" class="headerlink" title="7、安装zabbix server和agent"></a>7、安装zabbix server和agent</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install zabbix-server-mysql zabbix-agent -y<br></code></pre></td></tr></table></figure><h3 id="8、安装zabbix前端"><a href="#8、安装zabbix前端" class="headerlink" title="8、安装zabbix前端"></a>8、安装zabbix前端</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">##安装Software Collections</span><br>yum install centos-release-scl -y<br><br><span class="hljs-comment">##将[zabbix-frontend]下的 enabled 改为 1</span><br>vim /etc/yum.repos.d/zabbix.repo <br><span class="hljs-comment">#--</span><br>enabled=1<br></code></pre></td></tr></table></figure><h3 id="9、安装zabbix-前端和相关环境"><a href="#9、安装zabbix-前端和相关环境" class="headerlink" title="9、安装zabbix 前端和相关环境"></a>9、安装zabbix 前端和相关环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install zabbix-web-mysql-scl zabbix-apache-conf-scl -y<br></code></pre></td></tr></table></figure><h3 id="10、配置数据库"><a href="#10、配置数据库" class="headerlink" title="10、配置数据库"></a>10、配置数据库</h3><h4 id="方法一：使用的docker运行的mysql"><a href="#方法一：使用的docker运行的mysql" class="headerlink" title="方法一：使用的docker运行的mysql"></a>方法一：使用的docker运行的mysql</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull mysql:5.7<br><span class="hljs-comment">##运行mysql容器</span><br>docker run -p 3306:3306 \<br>--name mysql -e TZ=Asia/Shanghai \<br>--restart=always \<br>-v /app/mysql/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-d mysql:5.7<br><span class="hljs-comment">##创建数据库，并授权</span><br>mysql -uroot -p123456 --host 192.168.94.156 --port 3306 -e <span class="hljs-string">&quot;create database zabbix character set utf8 collate utf8_bin; grant all on zabbix.* to zabbix@&#x27;%&#x27;  identified by &#x27;zabbix&#x27; &quot;</span><br><span class="hljs-comment">###数据库名zabbix 。允许zabbix用户通过所有网段访问数据库（可以将%设置为localhost，代表本机网段），密码zabbix</span><br></code></pre></td></tr></table></figure><h4 id="方法二：安装mariadb数据库"><a href="#方法二：安装mariadb数据库" class="headerlink" title="方法二：安装mariadb数据库"></a>方法二：安装mariadb数据库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install mariadb-server -y<br><span class="hljs-comment">##启动数据库并配置开机启动</span><br>systemctl <span class="hljs-built_in">enable</span> --now mariadb<br><span class="hljs-comment">##初始化数据</span><br>mysql_secure_installation<br><span class="hljs-comment">##创建zabbix数据库及数据库用户</span><br>mysql -u root -p <span class="hljs-string">&#x27;123456&#x27;</span><br><span class="hljs-comment">##创建zabbix数据库</span><br>create database zabbix default character <span class="hljs-built_in">set</span> utf8 COLLATE utf8_bin;<br><span class="hljs-comment">##创建zabbix数据库用户</span><br>grant all privileges on zabbix.* to zabbix@localhost identified by <span class="hljs-string">&quot;zabbix&quot;</span> ; <span class="hljs-comment">###数据库名zabbix 。允许zabbix用户通过本机网段访问数据库（可以将localhost设置为%代表所有网段），密码zabbix</span><br>quit <span class="hljs-comment">#退出</span><br></code></pre></td></tr></table></figure><h3 id="11、导入zabbix数据库"><a href="#11、导入zabbix数据库" class="headerlink" title="11、导入zabbix数据库"></a>11、导入zabbix数据库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#ls /usr/share/doc/zabbix-server-mysql*/create.sql.gz 查看是否</span><br>zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz |mysql -uzabbix -pzabbix --host 192.168.94.156 --port 3306 zabbix<br></code></pre></td></tr></table></figure><h3 id="12、zabbix配置及前端页面安装"><a href="#12、zabbix配置及前端页面安装" class="headerlink" title="12、zabbix配置及前端页面安装"></a>12、zabbix配置及前端页面安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#修改zabbix server配置文件里的数据库信息</span><br>vim /etc/zabbix/zabbix_server.conf<br><br>DBPassword=zabbix <span class="hljs-comment">#数据库密码改为zabbix数据库的密码</span><br><span class="hljs-comment"># DBHost=192.168.94.156 #默认是连接本机，如果不是本机启动的数据库需要设置host地址</span><br><br><span class="hljs-comment">#修改zabbix php配置文件里的时区</span><br>vim /etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf<br><span class="hljs-comment">##找到php_value[date.timezone]，去掉注释及前面的标点符号，改成Asia/Shanghai</span><br>php_value[date.timezone] = Asia/Shanghai <br><br><span class="hljs-comment">#启动相关服务并配置开机自动启动</span><br>systemctl restart zabbix-server zabbix-agent httpd rh-php72-php-fpm<br>systemctl <span class="hljs-built_in">enable</span> zabbix-server zabbix-agent httpd rh-php72-php-fpm<br></code></pre></td></tr></table></figure><h3 id="13、访问：http-192-168-94-154-zabbix-setup-php-继续安装"><a href="#13、访问：http-192-168-94-154-zabbix-setup-php-继续安装" class="headerlink" title="13、访问：http://192.168.94.154/zabbix/setup.php 继续安装"></a>13、访问：<a href="http://192.168.94.154/zabbix/setup.php">http://192.168.94.154/zabbix/setup.php</a> 继续安装</h3><p>1、点击Next step开始安装<br>2、自动检查环境，所有选项都为OK则点击Next step进行下一步<br>3、配置数据库连接，port填写0为默认3306端口，配置正确的host、name、password后点击Next step进行下一步<br>4、Zabbix serber配置默认无需修改，直接点击Next step进行下一步<br>5、检查所有参数，然后点击Next step进行下一步<br>6、显示successfully后代表安装完成，点击Finish完成安装</p><p>登录zabbix，默认用户名为Admin，密码为zabbix</p><p>配置中文语言：<br>点击左下角User settings，选择Language为Chinese（zh_CN）</p><h3 id="14、配置监控主机（mt-2-、mt-3）"><a href="#14、配置监控主机（mt-2-、mt-3）" class="headerlink" title="14、配置监控主机（mt-2 、mt-3）"></a>14、配置监控主机（mt-2 、mt-3）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#安装zabbix-agent</span><br>rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm<br>yum -y install zabbix-agent<br><br><span class="hljs-comment">#配置zabbix-agent</span><br>编辑配置文件，修改以下内容<br>vim /etc/zabbix/zabbix_agentd.conf<br><br>Server=192.168.94.154    <span class="hljs-comment"># zabbixz服务端IP（被动模式）</span><br>ServerActive=192.168.94.154  <span class="hljs-comment"># zabbixz服务端IP，Active表示agent主动推送</span><br>Hostname=mt2     <span class="hljs-comment"># zabbix客户端主机名称</span><br><br><span class="hljs-comment">#启用zabbix-agent</span><br>systemctl <span class="hljs-built_in">enable</span> zabbix-agent<br>systemctl restart zabbix-agent<br></code></pre></td></tr></table></figure><h3 id="15、测试"><a href="#15、测试" class="headerlink" title="15、测试"></a>15、测试</h3><p>在主监控机子（zabbix-service）上，测试是否连通被监控机子：</p><h4 id="1-在监控主机上"><a href="#1-在监控主机上" class="headerlink" title="1.在监控主机上"></a>1.在监控主机上</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install zabbix-get -y<br></code></pre></td></tr></table></figure><h4 id="2-测试与被控服务器的连通性，下面ip地址，是被监控服务器的ip地址"><a href="#2-测试与被控服务器的连通性，下面ip地址，是被监控服务器的ip地址" class="headerlink" title="2.测试与被控服务器的连通性，下面ip地址，是被监控服务器的ip地址"></a>2.测试与被控服务器的连通性，下面ip地址，是被监控服务器的ip地址</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">zabbix_get -s <span class="hljs-string">&#x27;192.168.5.111&#x27;</span> -p 10050 -k <span class="hljs-string">&quot;agent.ping&quot;</span>    1代表成功<br>zabbix_get -s <span class="hljs-string">&#x27;192.168.5.111&#x27;</span> -p 10050 -k <span class="hljs-string">&quot;system.hostname&quot;</span>    看看返回的主机名 <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>监控</category>
      
      <category>Zabbix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker安装Zabbix</title>
    <link href="/2023/04/17/%E7%9B%91%E6%8E%A7/Zabbix/docker%E5%AE%89%E8%A3%85zabbix/"/>
    <url>/2023/04/17/%E7%9B%91%E6%8E%A7/Zabbix/docker%E5%AE%89%E8%A3%85zabbix/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker安装Zabbix："><a href="#使用docker安装Zabbix：" class="headerlink" title="使用docker安装Zabbix："></a>使用docker安装Zabbix：</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">#参考文档：docker安装zabbix：https://www.cnblogs.com/xdzy/p/13805762.html<br>#参考文档：https://hlynford.com/616.html<br>#参考文档：https://www.csdn.net/tags/MtjaMgysMjY5MTQtYmxvZwO0O0OO0O0O.html<br></code></pre></td></tr></table></figure><h2 id="1-准备机器"><a href="#1-准备机器" class="headerlink" title="1.准备机器"></a>1.准备机器</h2><table><thead><tr><th>IP地址</th><th>备注</th></tr></thead><tbody><tr><td>192.168.5.112</td><td>使用docker安装：zabbix-server、mysql</td></tr><tr><td>192.168.5.111</td><td>zabbix-agent</td></tr></tbody></table><p>关闭防火墙</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl stop firewalld<br></code></pre></td></tr></table></figure><h2 id="2-安装mysql"><a href="#2-安装mysql" class="headerlink" title="2.安装mysql"></a>2.安装mysql</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull mysql:5.7<br></code></pre></td></tr></table></figure><p>创建容器:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name mysql-server -t \<br>      -p 3307:3306 \<br>      -e MYSQL_DATABASE=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -e MYSQL_USER=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -e MYSQL_PASSWORD=<span class="hljs-string">&quot;zabbix_pwd&quot;</span> \<br>      -e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&quot;admins&quot;</span> \<br>      -d mysql:5.7 \<br>      --character-set-server=utf8 --collation-server=utf8_bin<br></code></pre></td></tr></table></figure><p>&lt;方法二：不开放端口，直接用link方式&gt;进行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name mysql-server -t \<br>      -e MYSQL_DATABASE=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -e MYSQL_USER=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -e MYSQL_PASSWORD=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -d mysql:5.7 \<br>      --character-set-server=utf8 --collation-server=utf8_bin<br></code></pre></td></tr></table></figure><h2 id="3-安装zabbix-java-gateway"><a href="#3-安装zabbix-java-gateway" class="headerlink" title="3.安装zabbix-java-gateway"></a>3.安装zabbix-java-gateway</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull zabbix/zabbix-java-gateway<br></code></pre></td></tr></table></figure><p>创建容器:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name zabbix-java-gateway -t \<br>  -d zabbix/zabbix-java-gateway:latest<br></code></pre></td></tr></table></figure><h2 id="4-安装zabbix-server-mysql"><a href="#4-安装zabbix-server-mysql" class="headerlink" title="4.安装zabbix-server-mysql"></a>4.安装zabbix-server-mysql</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull zabbix/zabbix-server-mysql<br></code></pre></td></tr></table></figure><p>创建容器:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name zabbix-server-mysql -t \<br>  -e DB_SERVER_HOST=<span class="hljs-string">&quot;192.168.5.112&quot;</span> \<br>  -e DB_SERVER_PORT=3307 \<br>  -e MYSQL_DATABASE=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>  -e MYSQL_USER=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>  -e MYSQL_PASSWORD=<span class="hljs-string">&quot;zabbix_pwd&quot;</span> \<br>  -e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&quot;admins&quot;</span> \<br>  -e ZBX_JAVAGATEWAY=<span class="hljs-string">&quot;zabbix-java-gateway&quot;</span> \<br>  --<span class="hljs-built_in">link</span> mysql-server:mysql \<br>  --<span class="hljs-built_in">link</span> zabbix-java-gateway:zabbix-java-gateway \<br>  -p 10051:10051 \<br>  -d zabbix/zabbix-server-mysql:latest<br><br><span class="hljs-comment">#备注：DB_SERVER_HOST地址为mysql部署机器ip</span><br></code></pre></td></tr></table></figure><p>当前面使用使用&lt;方法二：不开放端口运行mysql时&gt;运行如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name zabbix-server-mysql -t \<br>      -e DB_SERVER_HOST=<span class="hljs-string">&quot;mysql-server&quot;</span> \<br>      -e MYSQL_DATABASE=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -e MYSQL_USER=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -e MYSQL_PASSWORD=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -e ZBX_JAVAGATEWAY=<span class="hljs-string">&quot;zabbix-java-gateway&quot;</span> \<br>      --<span class="hljs-built_in">link</span> mysql-server:mysql \<br>      --<span class="hljs-built_in">link</span> zabbix-java-gateway:zabbix-java-gateway \<br>      -p 10051:10051 \<br>      -d zabbix/zabbix-server-mysql:latest<br></code></pre></td></tr></table></figure><h2 id="5-安装zabbix-web-nginx-mysql"><a href="#5-安装zabbix-web-nginx-mysql" class="headerlink" title="5.安装zabbix-web-nginx-mysql"></a>5.安装zabbix-web-nginx-mysql</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull zabbix/zabbix-web-nginx-mysql<br></code></pre></td></tr></table></figure><p>创建容器:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name zabbix-web-nginx-mysql -t \<br>    -e PHP_TZ=<span class="hljs-string">&quot;Asia/Shanghai&quot;</span> \<br>    -e DB_SERVER_HOST=<span class="hljs-string">&quot;192.168.5.112&quot;</span> \<br>    -e DB_SERVER_PORT=3307 \<br>    -e MYSQL_DATABASE=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>    -e MYSQL_USER=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>    -e MYSQL_PASSWORD=<span class="hljs-string">&quot;zabbix_pwd&quot;</span> \<br>    -e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&quot;admins&quot;</span> \<br>    --<span class="hljs-built_in">link</span> mysql-server:mysql \<br>    --<span class="hljs-built_in">link</span> zabbix-server-mysql:zabbix-server \<br>    -p 80:8080 \<br>    -d zabbix/zabbix-web-nginx-mysql:latest<br></code></pre></td></tr></table></figure><p>备注：DB_SERVER_HOST地址为mysql部署机器ip</p><p>当前面使用使用&lt;方法二：不开放端口运行mysql时&gt;运行如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name zabbix-web-nginx-mysql -t \<br>      -e DB_SERVER_HOST=<span class="hljs-string">&quot;mysql-server&quot;</span> \<br>      -e MYSQL_DATABASE=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -e MYSQL_USER=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -e MYSQL_PASSWORD=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      --<span class="hljs-built_in">link</span> mysql-server:mysql \<br>      --<span class="hljs-built_in">link</span> zabbix-server-mysql:zabbix-server \<br>      -p 80:8080 \<br>      -d zabbix/zabbix-web-nginx-mysql:latest<br></code></pre></td></tr></table></figure><h2 id="6-登录"><a href="#6-登录" class="headerlink" title="6.登录"></a>6.登录</h2><p>访问：192.168.5.112:80</p><p>登录账号：Admin<br>登录密码：zabbix</p><h2 id="7-设置为中文字体"><a href="#7-设置为中文字体" class="headerlink" title="7.设置为中文字体"></a>7.设置为中文字体</h2><p>User settings &gt;&gt; Profile &gt;&gt; language</p><p><strong>解决中文乱码问题：</strong><br>在自己window电脑上进入到 C:\Windows\Fonts\ 搜索楷体能找到该字体，将该字体上传到服务器<br>拷贝到容器内：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">cp</span> simkai.ttf zabbix-web-nginx-mysql:/usr/share/zabbix/assets/fonts/<br></code></pre></td></tr></table></figure><p>进入容器修改配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it zabbix-web-nginx-mysql /bin/bash<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /usr/share/zabbix/include/defines.inc.php<br><span class="hljs-comment">#.....</span><br><span class="hljs-comment">#更改前</span><br>// define(<span class="hljs-string">&#x27;ZBX_GRAPH_FONT_NAME&#x27;</span>,                <span class="hljs-string">&#x27;DejaVuSans&#x27;</span>); // font file name<br><span class="hljs-comment">#更改后</span><br>define(<span class="hljs-string">&#x27;ZBX_GRAPH_FONT_NAME&#x27;</span>,           <span class="hljs-string">&#x27;simkai&#x27;</span>); // font file name<br></code></pre></td></tr></table></figure><h2 id="8-liunx安装zabbix-agent"><a href="#8-liunx安装zabbix-agent" class="headerlink" title="8.liunx安装zabbix-agent:"></a>8.liunx安装zabbix-agent:</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#安装Zabbix Yum源仓库</span><br>rpm -Uvh https://repo.zabbix.com/zabbix/5.4/rhel/7/x86_64/zabbix-release-5.4-1.el7.noarch.rpm<br>yum clean all<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#修改Zabbix 5.0 Yum源配置文件：</span><br>sed -i <span class="hljs-string">&quot;s/gpgcheck=1/gpgcheck=0/g&quot;</span> /etc/yum.repos.d/zabbix.repo<br><br><span class="hljs-comment">#安装zabbix-agent 5.0软件</span><br>yum -y install zabbix-agent<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#修改zabbix-agent配置文件：</span><br>vim /etc/zabbix/zabbix_agentd.conf<br><br>119 Server=192.168.5.112   //Zabbix-server地址，多个用<span class="hljs-string">&quot;,&quot;</span>隔开<br>125 ListenPort=10050       //自己监听的端口<br>133 ListenIP=0.0.0.0       //自己监听的地址，0.0.0.0代表本机所有的地址<br>160 ServerActive=192.168.5.112     //主动检查本主机数据发送给Zabbix-server<br>171 <span class="hljs-comment">#Hostname=Zabbix server</span><br>172 Hostname=192.168.5.111     //Zabbix-agent地址<br></code></pre></td></tr></table></figure><p>启动zabbix-agent</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start zabbix-agent<br>systemctl <span class="hljs-built_in">enable</span> zabbix-agent<br></code></pre></td></tr></table></figure><p>查看端口是否正常</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ss -antulp | grep :10050<br></code></pre></td></tr></table></figure><h2 id="9-配置监控的agent机器"><a href="#9-配置监控的agent机器" class="headerlink" title="9. 配置监控的agent机器"></a>9. 配置监控的agent机器</h2><p>#点击配置 &gt;&gt; 主机  &gt;&gt; 设置主机名称，群组以及Interfaces  &gt;&gt; 然后选择模板</p><p><img src="/2023/04/17/%E7%9B%91%E6%8E%A7/Zabbix/docker%E5%AE%89%E8%A3%85zabbix/image-20220715172504701.png" alt="image-20220715172504701"></p><p>关联模板(如果不关联监控模板，zbx 可用性图标会一直不亮)</p><p><img src="/2023/04/17/%E7%9B%91%E6%8E%A7/Zabbix/docker%E5%AE%89%E8%A3%85zabbix/image-20220715172925565.png" alt="image-20220715172925565"></p><p><img src="/2023/04/17/%E7%9B%91%E6%8E%A7/Zabbix/docker%E5%AE%89%E8%A3%85zabbix/image-20220715172943385.png" alt="image-20220715172943385"></p>]]></content>
    
    
    <categories>
      
      <category>监控</category>
      
      <category>Zabbix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自动安装docker及docker-compose</title>
    <link href="/2023/04/16/%E8%84%9A%E6%9C%AC/%E5%AE%89%E8%A3%85docker%EF%BC%8Cdocker-compose%E8%84%9A%E6%9C%AC/"/>
    <url>/2023/04/16/%E8%84%9A%E6%9C%AC/%E5%AE%89%E8%A3%85docker%EF%BC%8Cdocker-compose%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="自动安装docker、docker-compose，需要在有网环境下"><a href="#自动安装docker、docker-compose，需要在有网环境下" class="headerlink" title="自动安装docker、docker-compose，需要在有网环境下"></a>自动安装docker、docker-compose，需要在有网环境下</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-comment">#备注：自动安装docker及docker-compose</span><br><span class="hljs-comment">#Author：zhangzhenzhou</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;【开始安装】&quot;</span><br><span class="hljs-built_in">sleep</span> 1<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;【判断是否安装了docker】&quot;</span><br><span class="hljs-keyword">if</span> ! <span class="hljs-built_in">type</span> docker &gt;/dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span><br><span class="hljs-comment">#使用yum下载Docker的镜像源，下面为cat直接写入</span><br><span class="hljs-comment">#yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><br><span class="hljs-built_in">cat</span> &gt;/etc/yum.repos.d/docker.repo&lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[docker-ce-edge]</span><br><span class="hljs-string">name=Docker CE Edge - \$basearch</span><br><span class="hljs-string">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/\$basearch/edge</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;【docker 未安装！】&#x27;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;【开始安装Docker....】&#x27;</span>;<br>yum -y install yum-utils device-mapper-persistent-data lvm2<br>yum -y install bash-completion.noarch net-tools vim lrzsz wget tree screen lsof tcpdump nc telnet unzip <br><br>yum -y install docker-ce<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;【配置Docker开机启动！】&#x27;</span>;<br>systemctl <span class="hljs-built_in">enable</span> docker<br>systemctl start docker<br><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/docker/daemon.json &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;registry-mirrors&quot;:[&quot;https://vt62jyiw.mirror.aliyuncs.com&quot;]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br>    systemctl restart docker<br><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;【docker 已安装！】&#x27;</span>;<br>    docker -v<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;【是否需要安装docker-compose？】[y/n]：    &quot;</span> need_anzhuang<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$need_anzhuang</span> == <span class="hljs-string">&#x27;y&#x27;</span> ]; <span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;【判断是否安装了docker-compose】&quot;</span><br><span class="hljs-keyword">if</span> ! <span class="hljs-built_in">type</span> docker-compose &gt;/dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;【docker-compose 未安装！】&#x27;</span>;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;【开始安装docker-compose....】&#x27;</span>;<br>    wget http://oss.moguit.cn/script//docker-compose-Linux-x86_64<br>    <span class="hljs-built_in">mv</span> docker-compose-Linux-x86_64  docker-compose<br>    <span class="hljs-built_in">chmod</span> +x docker-compose<br>    <span class="hljs-built_in">mv</span> docker-compose /usr/local/bin/<br>    docker-compose -v<br><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;【docker-compose 已安装！】&#x27;</span>;<br>    docker-compose -v<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;【用户取消安装！】&#x27;</span><br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>脚本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>docker-compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>squid升级-安装</title>
    <link href="/2023/04/15/%E4%B8%AD%E9%97%B4%E4%BB%B6/squid/squid%E5%8D%87%E7%BA%A7-%E5%AE%89%E8%A3%85/"/>
    <url>/2023/04/15/%E4%B8%AD%E9%97%B4%E4%BB%B6/squid/squid%E5%8D%87%E7%BA%A7-%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="squid升级-安装"><a href="#squid升级-安装" class="headerlink" title="squid升级-安装"></a>squid升级-安装</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">安装参考文档：https://blog.csdn.net/weixin_47151643/article/details/109103742<br></code></pre></td></tr></table></figure><p>squid概述<br>Squid（Squid cache，简称Squid）是Linux系统中最常用的一款开源代理服务软件，可以很好地实现HTTP和FTP，<br>以及DNS查询、SSL等应用的缓存代理，功能十分强大，本篇博客详细介绍了传统代理、透明代理，squid日志分析的配置。squid的官方网站为<a href="http://www.squid-cache.org/">http://www.squid-cache.org</a></p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#下载squid5.2版本</span><br>wget http://www.squid-cache.org/Versions/v5/squid-5.2.tar.gz<br><br><span class="hljs-comment">#卸载原有版本</span><br>yum -y remove squid<br></code></pre></td></tr></table></figure><h2 id="2-安装squid服务"><a href="#2-安装squid服务" class="headerlink" title="2.安装squid服务"></a>2.安装squid服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#解压下载文件</span><br>tar -xnf squid-5.2.tar.gz<br><br><span class="hljs-comment">#安装编译工具</span><br>yum -y install gcc gcc-c++<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#configure配置</span><br><span class="hljs-built_in">cd</span> squid-5.2/<br><br>./configure --prefix=/usr/local/squid \<br>--sysconfdir=/etc/squid \<br>--enable-arp-acl \<br>--enable-linux-netfilter \<br>--enable-linux-tproxy \<br>--enable-async-io=100 \<br>--enable-err-language=<span class="hljs-string">&quot;Simplify_Chinses&quot;</span> \<br>--enable-poll \<br>--enable-gnuregex \<br>--enable-underscore<br><br><span class="hljs-comment">#解释：</span><br><span class="hljs-comment">#--enable-linux-netfilter \ //内核过滤</span><br><span class="hljs-comment">#--enable-linux-tproxy \ //透明代理功能模块</span><br><span class="hljs-comment">#--enable-async-io=100 \ //io对于io的优化 异步I/O 提升存储性能</span><br><span class="hljs-comment">#--enable-err-language=&quot;Simplify_Chinses&quot; \ //err-language 报错信息设置为中文</span><br><span class="hljs-comment">#--enable-poll \ //提升功能 使用poll（）模式</span><br><span class="hljs-comment">#--enable-gnuregex \ //支持正则表达式</span><br><span class="hljs-comment">#--enable-underscore //允许URL支持下划线</span><br><br><span class="hljs-comment">#编译及安装</span><br>make &amp;&amp; make install<br><br><span class="hljs-comment">#路径优化，便于系统管理</span><br><span class="hljs-built_in">ln</span> -s /usr/local/squid/sbin/* /usr/sbin<br>或者:<span class="hljs-built_in">cp</span> /usr/local/squid/sbin/squid /usr/sbin<br><br><span class="hljs-comment">#创建squid程序性用户</span><br>useradd -M -s /sbin/nologin squid<br><span class="hljs-comment">#赋予目录权限</span><br><span class="hljs-built_in">chown</span> -R squid.squid /usr/local/squid/var/<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#修改主配置文件</span><br>vim /etc/squid.conf<br><span class="hljs-comment">#56行</span><br>http_access allow all <span class="hljs-comment">#开启允许所有访问</span><br><span class="hljs-comment">#http_access deny all  注释拒绝访问</span><br>http_port 3128<br><span class="hljs-comment">#下面添加</span><br>cache_effective_user squid <span class="hljs-comment">#缓存相对的用户</span><br>cache_effective_group squid <span class="hljs-comment">#缓存相对的组</span><br><br><br><span class="hljs-comment">#验证语法配置文件语法</span><br>squid -k parse<br><span class="hljs-comment">#初始化缓存目录</span><br>squid -z<br></code></pre></td></tr></table></figure><h2 id="3-启动squid服务"><a href="#3-启动squid服务" class="headerlink" title="3.启动squid服务"></a>3.启动squid服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">squid<br><br><span class="hljs-comment">#查看版本</span><br>squid -v<br><br><span class="hljs-comment">#查看端口</span><br>netstat -lntup | grep 3128<br></code></pre></td></tr></table></figure><h2 id="4-创建systemctl启动脚本"><a href="#4-创建systemctl启动脚本" class="headerlink" title="4. #创建systemctl启动脚本"></a>4. #创建systemctl启动脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/init.d/squid<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment">#chkconfig: 2345 90 25</span><br>PID=<span class="hljs-string">&quot;/usr/local/squid/var/run/squid.pid&quot;</span><br>CONF=<span class="hljs-string">&quot;/etc/squid/squid.conf&quot;</span><br>CMD=<span class="hljs-string">&quot;/usr/local/squid/sbin/squid&quot;</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span><br>  start)<br>    netstat -natp | grep squid &amp;&gt; /dev/null<br>    <span class="hljs-keyword">if</span> [ $? -eq 0 ]<br>    <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;squid is running&quot;</span><br>      <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在启动 squid...&quot;</span><br>      <span class="hljs-variable">$CMD</span><br>    <span class="hljs-keyword">fi</span><br>  ;;<br>  stop)<br>    <span class="hljs-variable">$CMD</span> -k <span class="hljs-built_in">kill</span> &amp;&gt; /dev/null<br>    <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$PID</span> &amp;&gt; /dev/null<br>  ;;<br>  status)<br>    [ -f <span class="hljs-variable">$PID</span> ] &amp;&gt; /dev/null<br>      <span class="hljs-keyword">if</span> [ $? -eq 0 ]<br>      <span class="hljs-keyword">then</span><br>        netstat -natp | grep squid<br>      <span class="hljs-keyword">else</span><br>```  <br>```sh     <br><span class="hljs-comment">#增加执行权限</span><br><span class="hljs-built_in">chmod</span> +x squid <br><br><span class="hljs-comment">#添加到squid服务</span><br>chkconfig --add squid <br><br><span class="hljs-comment">#设置开机启动</span><br>chkconfig --level 35 squid on<br><br><span class="hljs-comment">#查看端口</span><br>netstat -ntap | grep 3128<br>tcp6       0      0 :::3128                 :::*                    LISTEN      118846/(squid-1)    <br><br><span class="hljs-comment">#重启squid服务</span><br>service squid stop <br>setenforce 0<br>service squid start <br></code></pre></td></tr></table></figure><h2 id="5-设置缓存参数"><a href="#5-设置缓存参数" class="headerlink" title="5. 设置缓存参数"></a>5. 设置缓存参数</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/squid.conf<br><br>http_port 3128<br><span class="hljs-comment">#下面添加      </span><br>cache_mem 64 MB                      <span class="hljs-comment">#缓存64M的内容</span><br>reply_body_max_size 10 MB            <span class="hljs-comment">#禁止下载的超过10MB的文件</span><br>maximum_object_size 4096 KB          <span class="hljs-comment">#超过4MB:的文件不进行缓存</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>squid</category>
      
    </categories>
    
    
    <tags>
      
      <tag>squid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jdk一键安装脚本（有网与无网均可）</title>
    <link href="/2023/04/13/%E8%84%9A%E6%9C%AC/jdk%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/"/>
    <url>/2023/04/13/%E8%84%9A%E6%9C%AC/jdk%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="jdk一键安装脚本"><a href="#jdk一键安装脚本" class="headerlink" title="jdk一键安装脚本"></a>jdk一键安装脚本</h1><p><strong>开箱即用</strong><br>前言：使用<code>bash/sh</code>执行该脚本后需要执行<code>source /etc/profile</code>，因为脚本内执行后无法改变系统环境变量，可使用 <code>source</code> 该脚本！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#author:zhangzhenzhou</span><br><span class="hljs-comment">#email:1962821461@qq.com</span><br><span class="hljs-comment">#实现：</span><br><span class="hljs-comment">#1、在有网络情况下，只需要根据实际情况修改下载地址（$jdkdizhi)</span><br><span class="hljs-comment">#2、在没网情况下，注释虚线内内容，将java包上传服务器，并修改压缩包文件路径($jdkTargz) </span><br><br><br><span class="hljs-comment">#--------------无网情况请注释该内容------------------------</span><br><span class="hljs-comment">#下载地址：</span><br>jdkdizhi=<span class="hljs-string">&quot;http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz&quot;</span><br>wget --no-check-certificate --no-cookies --header <span class="hljs-string">&quot;Cookie: oraclelicense=accept-securebackup-cookie&quot;</span> <span class="hljs-variable">$jdkdizhi</span> -O /opt/jdk.tar.gz<br><span class="hljs-comment">#--------------------------------------------------------</span><br><br>jdkTargz=<span class="hljs-string">&quot;/opt/jdk.tar.gz&quot;</span><br><span class="hljs-comment">#举例：jdkTargz=&quot;/opt/jdk-8u131-linux-x64.tar.gz&quot;</span><br><br><span class="hljs-comment"># 检查原先是否已配置java环境变量</span><br><span class="hljs-function"><span class="hljs-title">checkExist</span></span>()&#123;<br>jdk1=$(grep -n <span class="hljs-string">&quot;JAVA_HOME=.*&quot;</span> /etc/profile | <span class="hljs-built_in">cut</span> -f1 -d<span class="hljs-string">&#x27;:&#x27;</span>)<br>  <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$jdk1</span>&quot;</span> ];<span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;JAVA_HOME已配置，删除内容&quot;</span><br>      sed -i <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;jdk1&#125;</span>d&quot;</span> /etc/profile<br>  <span class="hljs-keyword">fi</span><br>jdk2=$(grep -n <span class="hljs-string">&quot;CLASSPATH=.*\$JAVA_HOME.*&quot;</span> /etc/profile | <span class="hljs-built_in">cut</span> -f1 -d<span class="hljs-string">&#x27;:&#x27;</span>)<br>  <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$jdk2</span>&quot;</span> ];<span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;CLASSPATH路径已配置，删除内容&quot;</span><br>      sed -i <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;jdk2&#125;</span>d&quot;</span> /etc/profile<br>  <span class="hljs-keyword">fi</span><br>jdk3=$(grep -n <span class="hljs-string">&quot;PATH=.*\$JAVA_HOME.*&quot;</span> /etc/profile | <span class="hljs-built_in">cut</span> -f1 -d<span class="hljs-string">&#x27;:&#x27;</span>)<br>  <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$jdk3</span>&quot;</span> ];<span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;PATH-JAVA路径已配置，删除内容&quot;</span><br>      sed -i <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;jdk3&#125;</span>d&quot;</span> /etc/profile<br>  <span class="hljs-keyword">fi</span><br>jdk4=$(grep -n <span class="hljs-string">&quot;export JAVA_HOME PATH CLASSPATH&quot;</span> /etc/profile | <span class="hljs-built_in">cut</span> -f1 -d<span class="hljs-string">&#x27;:&#x27;</span>)<br>  <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$jdk3</span>&quot;</span> ];<span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;PATH-JAVA路径已配置，删除内容&quot;</span><br>      sed -i <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;jdk3&#125;</span>d&quot;</span> /etc/profile<br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-built_in">mv</span> <span class="hljs-variable">$jdkTargz</span> /opt/jdk.tar.gz<br><span class="hljs-comment"># 查询是否有jdk.tar.gz</span><br><span class="hljs-keyword">if</span> [ -e /opt/jdk.tar.gz ];<span class="hljs-keyword">then</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;― ― 存在jdk压缩包 ― ―&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在解压jdk压缩包...&quot;</span><br><span class="hljs-built_in">mkdir</span> -p /opt/jdk<br><br><span class="hljs-comment">#tar -zxvf $jdkTargz -C /opt/jdk --strip-components 1</span><br>tar -xnf /opt/jdk.tar.gz -C /opt/jdk --strip-components 1<br><br><span class="hljs-comment">#解压后删除压缩包</span><br><span class="hljs-built_in">rm</span> -rf /opt/jdk.tar.gz<br><br><span class="hljs-comment"># 检查配置信息</span><br>checkExist <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;---------------------------------&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在配置jdk环境...&quot;</span><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/profile &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">JAVA_HOME=/opt/jdk</span><br><span class="hljs-string">PATH=\$PATH:\$JAVA_HOME/bin</span><br><span class="hljs-string">CLASSPATH=.:\$JAVA_HOME/lib/dt.jar:\$JAVA_HOME/lib/tools.jar</span><br><span class="hljs-string">export JAVA_HOME PATH CLASSPATH</span><br><span class="hljs-string">EOF</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;---------------------------------&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;JAVA环境配置已完成...&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;---------------------------------&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在重新加载配置文件...&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;---------------------------------&quot;</span><br><span class="hljs-built_in">source</span> /etc/profile<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;配置版本信息如下：&quot;</span><br>java -version<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;脚本安装完成后请执行source /etc/profile，使之生效！（如果使用&#x27;source+脚本&#x27;命令可不执行）&quot;</span><br><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;未检测到安装包，请将安装包放到/opt目录下&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>脚本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装Python3.X版本</title>
    <link href="/2023/04/13/%E7%8E%AF%E5%A2%83/Python/%E5%AE%89%E8%A3%85Python3.X%E7%89%88%E6%9C%AC/"/>
    <url>/2023/04/13/%E7%8E%AF%E5%A2%83/Python/%E5%AE%89%E8%A3%85Python3.X%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装Python3-X版本"><a href="#安装Python3-X版本" class="headerlink" title="安装Python3.X版本"></a>安装Python3.X版本</h1><p><code>windows安装参考链接：https://edu.csdn.net/skill/python/python-3-2?category=1&amp;typeId=17337</code><br><code>文档杜撰参考文档：https://zhuanlan.zhihu.com/p/590965831</code></p><p><strong>前言：Centos7默认安装了python2.7.5版本，因此想安装python 3.X版本就需要特殊处理<br>Centos7默认安装了python2.7.5 因为一些命令要用它比如yum 它使用的是python2.7.5。</strong></p><h2 id="一、准备阶段"><a href="#一、准备阶段" class="headerlink" title="一、准备阶段"></a>一、准备阶段</h2><h3 id="下载新版本的Python"><a href="#下载新版本的Python" class="headerlink" title="下载新版本的Python"></a>下载新版本的Python</h3><p><strong>下载Python新版本<a href="https://www.python.org/downloads/source/">https://www.python.org/downloads/source/</a></strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">下载.tar.xz包就可以了。其实下面的2个包其一都可以使用<br>Python-3.11.1.tgz （这个不是编译过的东西，不能解压之后直接使用）<br>Python-3.11.1.tar.xz (这个是pthon的源码)<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app/python &amp;&amp; <span class="hljs-built_in">cd</span> /app/python<br><span class="hljs-comment">#下载Python包</span><br>wget https://www.python.org/ftp/python/3.11.1/Python-3.11.1.tgz<br><br><span class="hljs-comment">#解压Python包</span><br>tar -xnf Python-3.11.1.tgz<br></code></pre></td></tr></table></figure><h2 id="二、安装阶段"><a href="#二、安装阶段" class="headerlink" title="二、安装阶段"></a>二、安装阶段</h2><h3 id="1-安装编译相关工具"><a href="#1-安装编译相关工具" class="headerlink" title="1.安装编译相关工具"></a>1.安装编译相关工具</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</span><br><span class="hljs-comment">#yum install -y zlib zlib-dev openssl-devel sqlite-devel bzip2-devel libffi libffi-devel gcc gcc-c++</span><br><span class="hljs-comment">#yum -y install libffi-devel </span><br><br><span class="hljs-comment">#安装源码编译需要的编译环境</span><br>yum -y install gcc zlib zlib-devel libffi libffi-devel<br><span class="hljs-comment">##可以解决后期出现的方向键、删除键乱码问题，这里提前避免。</span><br>yum -y install readline-devel<br><span class="hljs-comment">#安装openssl11，后期的pip3安装网络相关模块需要用到ssl模块。</span><br>yum -y install openssl-devel openssl11 openssl11-devel<br><span class="hljs-comment">#设置编译FLAG，以便使用最新的openssl库</span><br><span class="hljs-built_in">export</span> CFLAGS=$(pkg-config --cflags openssl11)<br><span class="hljs-built_in">export</span> LDFLAGS=$(pkg-config --libs openssl11)<br></code></pre></td></tr></table></figure><h3 id="2-编译安装"><a href="#2-编译安装" class="headerlink" title="2.编译安装"></a>2.编译安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建编译安装目录</span><br><span class="hljs-built_in">mkdir</span> -p /usr/local/python3 <br><br><span class="hljs-comment">#进入解压后Python目录，编译</span><br><span class="hljs-built_in">cd</span> /app/python/Python-3.11.1<br><span class="hljs-comment">#指定安装目录，并使用ssl模块，指定目录好处是后期删除此文件夹就可以完全删除软件了。</span><br>./configure --prefix=/usr/local/python3 --with-ssl<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h3 id="3-创建软连接"><a href="#3-创建软连接" class="headerlink" title="3.创建软连接"></a>3.创建软连接</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ln</span> -s /usr/local/python3/bin/python3 /usr/local/bin/python3<br><span class="hljs-built_in">ln</span> -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3<br></code></pre></td></tr></table></figure><h3 id="4-验证是否成功"><a href="#4-验证是否成功" class="headerlink" title="4.验证是否成功"></a>4.验证是否成功</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">python3 -V<br>pip3 -V<br></code></pre></td></tr></table></figure><h3 id="5-安装常用到的网工配置模块paramiko、netmiko"><a href="#5-安装常用到的网工配置模块paramiko、netmiko" class="headerlink" title="5.安装常用到的网工配置模块paramiko、netmiko"></a>5.安装常用到的网工配置模块paramiko、netmiko</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip3 install netmiko -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn<br>pip3 install paramiko -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn<br><span class="hljs-comment">#使用的清华大学的安装源，个别其他的安装源会没有相应的安装包</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置Java环境</title>
    <link href="/2023/04/13/%E7%8E%AF%E5%A2%83/jdk/%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/04/13/%E7%8E%AF%E5%A2%83/jdk/%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="配置Java环境"><a href="#配置Java环境" class="headerlink" title="配置Java环境"></a>配置Java环境</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">官网下载地址1:https://www.oracle.com/java/technologies/javase-downloads.html；<br>官网下载地址2:https://www.oracle.com/java/technologies/downloads/#java8<br></code></pre></td></tr></table></figure><p>当要在官网下载非最新版本的jdk时，会提示要你登录，可以实现如下方式直接下载：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">在相应的下载链接进入下载界面，点击下载，会弹出需要登录的弹窗，在弹出的框内,同意审查，然后将鼠标放到下载jdk-8u333-linux-x64.tar.gz，然后点右键复制链接地址，得到以下连接<br>https://www.oracle.com/webapps/redirect/signon?nexturl=https://download.oracle.com/otn/java/jdk/8u333-b02/2dee051a5d0647d5be72a7c0abff270e/jdk-8u333-linux-x64.tar.gz<br><br>去掉前面的跳转url,同时修改otn为otn-pub<br>https://download.oracle.com/otn-pub/java/jdk/8u333-b02/2dee051a5d0647d5be72a7c0abff270e/jdk-8u333-linux-x64.tar.gz<br>就可以使用该地址直接浏览器访问下载了<br></code></pre></td></tr></table></figure><h2 id="1-下载jdk文件"><a href="#1-下载jdk文件" class="headerlink" title="1.下载jdk文件"></a>1.下载jdk文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget --no-check-certificate --no-cookies --header <span class="hljs-string">&quot;Cookie: oraclelicense=accept-securebackup-cookie&quot;</span> http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><h2 id="2-解压到-x2F-usr-x2F-local目录下"><a href="#2-解压到-x2F-usr-x2F-local目录下" class="headerlink" title="2.解压到&#x2F;usr&#x2F;local目录下"></a>2.解压到&#x2F;usr&#x2F;local目录下</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar zxvf jdk-7u51-linux-x64.tar.gz -C /usr/local/<br></code></pre></td></tr></table></figure><h2 id="3-查看解压后的文件名"><a href="#3-查看解压后的文件名" class="headerlink" title="3.查看解压后的文件名"></a>3.查看解压后的文件名</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ls</span> /usr/local/<br></code></pre></td></tr></table></figure><h2 id="4-配置环境变量的配置文件"><a href="#4-配置环境变量的配置文件" class="headerlink" title="4.配置环境变量的配置文件"></a>4.配置环境变量的配置文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/profile &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">JAVA_HOME=/usr/local/jdk1.8.0 #获取到的文件名路径</span><br><span class="hljs-string">PATH=\$PATH:\$JAVA_HOME/bin</span><br><span class="hljs-string">CLASSPATH=.:\$JAVA_HOME/lib/dt.jar:\$JAVA_HOME/lib/tools.jar</span><br><span class="hljs-string">export JAVA_HOME PATH CLASSPATH</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="5-使设置生效"><a href="#5-使设置生效" class="headerlink" title="5.使设置生效"></a>5.使设置生效</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h2 id="6-验证"><a href="#6-验证" class="headerlink" title="6.验证"></a>6.验证</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">java  -version<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建NFS文件共享存储服务安装go环境</title>
    <link href="/2023/04/13/%E7%8E%AF%E5%A2%83/golang/%E5%AE%89%E8%A3%85go%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/04/13/%E7%8E%AF%E5%A2%83/golang/%E5%AE%89%E8%A3%85go%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装go环境"><a href="#安装go环境" class="headerlink" title="安装go环境"></a>安装go环境</h1><p>** go官方下载地址：<a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a> **</p><h2 id="1、下载golang包"><a href="#1、下载golang包" class="headerlink" title="1、下载golang包:"></a>1、下载golang包:</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://golang.google.cn/dl/go1.19.1.linux-amd64.tar.gz --no-check-certificate<br><br></code></pre></td></tr></table></figure><h2 id="2、解压到制定路径："><a href="#2、解压到制定路径：" class="headerlink" title="2、解压到制定路径："></a>2、解压到制定路径：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -C /usr/local -xzf go1.19.1.linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h2 id="3、设置环境变量"><a href="#3、设置环境变量" class="headerlink" title="3、设置环境变量"></a>3、设置环境变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#将 /usr/local/go/bin 目录添加至 PATH 环境变量：</span><br><br>vim ~/.bash_profile <br><span class="hljs-comment">#将以下命令添加该文件的末尾</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/usr/local/go/bin<br><br><span class="hljs-comment">#执行生效</span><br><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境</category>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设置Hadoop单节点集群（Hadoop单节点环境搭建）</title>
    <link href="/2023/04/13/%E4%B8%AD%E9%97%B4%E4%BB%B6/spark+hadoop/%E6%90%AD%E5%BB%BAHadoop%20%E5%8D%95%E8%8A%82%E7%82%B9/"/>
    <url>/2023/04/13/%E4%B8%AD%E9%97%B4%E4%BB%B6/spark+hadoop/%E6%90%AD%E5%BB%BAHadoop%20%E5%8D%95%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CentOS设置Hadoop单节点集群（Hadoop单节点环境搭建）"><a href="#CentOS设置Hadoop单节点集群（Hadoop单节点环境搭建）" class="headerlink" title="CentOS设置Hadoop单节点集群（Hadoop单节点环境搭建）"></a>CentOS设置Hadoop单节点集群（Hadoop单节点环境搭建）</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">官方参考文档：https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html<br>参考博主文档：https://blog.csdn.net/lt5227/article/details/119417295<br></code></pre></td></tr></table></figure><p><strong>注意：首先要确定自己的机器上已安装 Java 运行环境!!</strong></p><h2 id="准备工作：新建一个hadoop的账号-不推荐使用root账号进行配置"><a href="#准备工作：新建一个hadoop的账号-不推荐使用root账号进行配置" class="headerlink" title="准备工作：新建一个hadoop的账号!(不推荐使用root账号进行配置)"></a>准备工作：新建一个hadoop的账号!(不推荐使用root账号进行配置)</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#服务器创建 hadoop 账号</span><br>useradd hadoop<br><br><span class="hljs-comment">#给 hadoop 用户赋予sudo 权限：</span><br>vim /etc/sudoers<br><br><span class="hljs-comment">#在一下行下添加hadoop ALL=(ALL) ALL</span><br><br>root    ALL=(ALL)       ALL<br>hadoop ALL=(ALL) ALL<br><br><span class="hljs-comment">#设置 hadoop 账号密码</span><br>passwd hadoop<br><br><span class="hljs-comment">#切换账号</span><br>su - hadoop<br></code></pre></td></tr></table></figure><h2 id="1、下载hadoop"><a href="#1、下载hadoop" class="headerlink" title="1、下载hadoop"></a>1、下载hadoop</h2><p>下载地址：<a href="https://mirror-hk.koddos.net/apache/hadoop/common/stable/">https://mirror-hk.koddos.net/apache/hadoop/common/stable/</a></p><p>选择 3.3.4 稳定版</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app/hadoop &amp;&amp; <span class="hljs-built_in">cd</span> /app/hadoop<br><br>wget https://mirror-hk.koddos.net/apache/hadoop/common/stable/hadoop-3.3.4.tar.gz<br></code></pre></td></tr></table></figure><h2 id="2、解压hadopp"><a href="#2、解压hadopp" class="headerlink" title="2、解压hadopp"></a>2、解压hadopp</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -zxvf hadoop-3.3.4.tar.gz<br><br><span class="hljs-built_in">cd</span> hadoop-3.3.4<br></code></pre></td></tr></table></figure><h2 id="3、编辑hadoop目录下的etc-x2F-hadoop-x2F-hadoop-env-sh文件，定义如下参数"><a href="#3、编辑hadoop目录下的etc-x2F-hadoop-x2F-hadoop-env-sh文件，定义如下参数" class="headerlink" title="3、编辑hadoop目录下的etc&#x2F;hadoop&#x2F;hadoop-env.sh文件，定义如下参数:"></a>3、编辑hadoop目录下的etc&#x2F;hadoop&#x2F;hadoop-env.sh文件，定义如下参数:</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim etc/hadoop/hadoop-env.sh<br><br><span class="hljs-comment"># 找到JAVA_HOME，设置为Java安装的根目录</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/local/jdk1.8.0<br><br><span class="hljs-comment">#不知道安装路径的使用whereis java命令查看</span><br></code></pre></td></tr></table></figure><h2 id="4、配置-HADOOP-HOME-环境变量"><a href="#4、配置-HADOOP-HOME-环境变量" class="headerlink" title="4、配置 HADOOP_HOME 环境变量"></a>4、配置 HADOOP_HOME 环境变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo vim /etc/profile<br><br>HADOOP_HOME=/app/hadoop/hadoop-3.3.4<br>PATH=<span class="hljs-variable">$HADOOP_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> PATH<br><br><br><span class="hljs-comment">#更新环境变量</span><br><span class="hljs-built_in">source</span> /etc/profile<br><br><span class="hljs-comment">#进行验证</span><br>hadoop version<br></code></pre></td></tr></table></figure><h2 id="5、Hadoop-伪分布式模式配置"><a href="#5、Hadoop-伪分布式模式配置" class="headerlink" title="5、Hadoop 伪分布式模式配置"></a>5、Hadoop 伪分布式模式配置</h2><p>Hadoop 可以以伪分布式模式运行在单个节点上，其中每个Hadoop守护进程运行在单独的 Java 进程中。</p><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置:"></a>1.配置:</h3><p>在 Hadoop 目录下的 etc&#x2F;hadoop&#x2F;core-site.xml 中增加下面的配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim etc/hadoop/core-site.xml<br><br>&lt;configuration&gt;<br>    &lt;property&gt;<br>        &lt;name&gt;fs.defaultFS&lt;/name&gt;<br>        &lt;value&gt;hdfs://127.0.0.1:9000&lt;/value&gt;<br>    &lt;/property&gt;<br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure><p>关于 core-site.xml 相关配置的属性的说明可以参考官方文档：<a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/core-default.xml">https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/core-default.xml</a></p><h3 id="2-建议配置一下-hadoop-的文件目录，该目录默认指向-x2F-tmp-x2F-hadoop-user-name"><a href="#2-建议配置一下-hadoop-的文件目录，该目录默认指向-x2F-tmp-x2F-hadoop-user-name" class="headerlink" title="2.建议配置一下 hadoop 的文件目录，该目录默认指向 &#x2F;tmp&#x2F;hadoop-${user.name}"></a>2.建议配置一下 hadoop 的文件目录，该目录默认指向 &#x2F;tmp&#x2F;hadoop-${user.name}</h3><p>由于在 &#x2F;tmp 目录下，所以一旦机器重启，数据会丢失。在服务器中创建数据目录存放地址，这里我创建了 &#x2F;opt&#x2F;hadoop_tmp_dir 目录，在 etc&#x2F;hadoop&#x2F;core-site.xml 中继续增加下面的配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /opt/hadoop_tmp_dir<br><span class="hljs-comment">#如果是使用hadoop用户启动时，需要修改该文件的权限以及所属</span><br><span class="hljs-comment">#执行以下命令:</span><br><span class="hljs-comment">#chown hadoop /opt/hadoop_tmp_dir</span><br><span class="hljs-comment">#chmod -R 777 /opt/hadoop_tmp_dir/</span><br><br>vim etc/hadoop/core-site.xml<br><span class="hljs-comment">#...</span><br><span class="hljs-comment">#在&lt;/property&gt;后添加</span><br>    &lt;property&gt;<br>        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;<br>        &lt;value&gt;/opt/hadoop_tmp_dir&lt;/value&gt;<br>    &lt;/property&gt;<br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure><h3 id="3-之后在-Hadoop-目录下的-etc-x2F-hadoop-x2F-hdfs-site-xml-中增加下面的配置："><a href="#3-之后在-Hadoop-目录下的-etc-x2F-hadoop-x2F-hdfs-site-xml-中增加下面的配置：" class="headerlink" title="3.之后在 Hadoop 目录下的 etc&#x2F;hadoop&#x2F;hdfs-site.xml 中增加下面的配置："></a>3.之后在 Hadoop 目录下的 etc&#x2F;hadoop&#x2F;hdfs-site.xml 中增加下面的配置：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim etc/hadoop/hdfs-site.xml<br><br>&lt;configuration&gt;<br>    &lt;property&gt;<br>        &lt;name&gt;dfs.replication&lt;/name&gt;<br>        &lt;value&gt;1&lt;/value&gt;<br>    &lt;/property&gt;<br>&lt;/configuration&gt;<br><br><span class="hljs-comment">#这里指的是文件系统的副本系数。有关 hdfs-site.xml 相关配置属性的说明可以参考官方文档：https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml</span><br></code></pre></td></tr></table></figure><h3 id="4-设置SSH免密登陆"><a href="#4-设置SSH免密登陆" class="headerlink" title="4.设置SSH免密登陆"></a>4.设置SSH免密登陆</h3><p>现在检查是否可以在不使用密码的情况下 ssh 到本地主机:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh localhost<br></code></pre></td></tr></table></figure><p>运行上面的命令，如果需要输入密码才能登陆到 localhost 的话，请执行以下命令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen -t rsa -P <span class="hljs-string">&#x27;&#x27;</span> -f ~/.ssh/id_rsa<br><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys<br><span class="hljs-built_in">chmod</span> 0600 ~/.ssh/authorized_keys<br><br><span class="hljs-comment">#上面的命令依次执行就可以了， 执行完后输入ssh localhost就可以不用输入密码而直接登陆了。</span><br></code></pre></td></tr></table></figure><h3 id="5-格式化文件系统"><a href="#5-格式化文件系统" class="headerlink" title="5.格式化文件系统"></a>5.格式化文件系统</h3><p>启动 HDFS，在第一次执行的时候一定要格式化文件系统， 后面启动就不需要了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">hdfs namenode -format<br><br><span class="hljs-comment">#这个时候就会在之前我们配置的 /opt/hadoop_tmp_dir 目录下生成 dfs 目录文件信息。</span><br></code></pre></td></tr></table></figure><h3 id="6-启动-NameNode-守护进程和-DataNode-守护进程"><a href="#6-启动-NameNode-守护进程和-DataNode-守护进程" class="headerlink" title="6.启动 NameNode 守护进程和 DataNode 守护进程"></a>6.启动 NameNode 守护进程和 DataNode 守护进程</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sbin/start-dfs.sh<br></code></pre></td></tr></table></figure><p>注意：在 sbin 目录下运行上面的脚本，启动 HDFS 。如果出现下面的错误：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@stackstone-001 sbin]<span class="hljs-comment"># ./start-dfs.sh </span><br>Starting namenodes on [localhost]<br>ERROR: Attempting to operate on hdfs namenode as root<br>ERROR: but there is no HDFS_NAMENODE_USER defined. Aborting operation.<br>Starting datanodes<br>ERROR: Attempting to operate on hdfs datanode as root<br>ERROR: but there is no HDFS_DATANODE_USER defined. Aborting operation.<br>Starting secondary namenodes [stackstone-001]<br>ERROR: Attempting to operate on hdfs secondarynamenode as root<br>ERROR: but there is no HDFS_SECONDARYNAMENODE_USER defined. Aborting operation.<br><br>则需要设置脚本  ，增加3个变量设置：<br><br>vim sbin/start-dfs.sh<br><span class="hljs-comment">#找到HDFS_DATANODE_USER，添加如下</span><br><br>HDFS_NAMENODE_USER=root<br>HDFS_DATANODE_USER=root<br>HDFS_SECONDARYNAMENODE_USER=root<br><br><span class="hljs-comment">#注：最好不要用root账号来启动我们的Hadoop服务，建议改成hadoop</span><br><br></code></pre></td></tr></table></figure><h3 id="7-启动成功后验证"><a href="#7-启动成功后验证" class="headerlink" title="7.启动成功后验证"></a>7.启动成功后验证</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@stackstone-001 sbin]<span class="hljs-comment"># jps</span><br>6017 DataNode<br>6262 SecondaryNameNode<br>9639 Jps<br>5869 NameNode<br><br>[root@stackstone-001 sbin]<span class="hljs-comment"># hadoop dfs -mkdir /test</span><br>WARNING: Use of this script to execute dfs is deprecated.<br>WARNING: Attempting to execute replacement <span class="hljs-string">&quot;hdfs dfs&quot;</span> instead.<br><br>[root@stackstone-001 sbin]<span class="hljs-comment"># hdfs dfs -ls /</span><br>Found 1 items<br>drwxr-xr-x   - root supergroup          0 2021-08-05 18:16 /test<br><br></code></pre></td></tr></table></figure><p>在hdfs下创建&#x2F;test目录并查看，从上面的命令行可以看出，新版的命令改为：hdfs dfs 进行操作。<br>备注：如果需要停止服务，则运行 stop-dfs.sh 脚本，如果出现和启动脚本一样的错误，同样在该脚本中加入 HDFS_NAMENODE_USER、HDFS_DATANODE_USER、HDFS_SECONDARYNAMENODE_USER 的设置。</p><h3 id="8-访问web页面"><a href="#8-访问web页面" class="headerlink" title="8.访问web页面**"></a>8.访问web页面**</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">http://localhost:9868<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spark搭建单节点</title>
    <link href="/2023/04/13/%E4%B8%AD%E9%97%B4%E4%BB%B6/spark+hadoop/spark%E6%90%AD%E5%BB%BA%E5%8D%95%E8%8A%82%E7%82%B9/"/>
    <url>/2023/04/13/%E4%B8%AD%E9%97%B4%E4%BB%B6/spark+hadoop/spark%E6%90%AD%E5%BB%BA%E5%8D%95%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="spark搭建单节点"><a href="#spark搭建单节点" class="headerlink" title="spark搭建单节点"></a>spark搭建单节点</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://www.jianshu.com/p/8c0b1b39d0e5<br>集群参考文档：https://www.cnblogs.com/zhangyongli2011/p/10572152.html<br></code></pre></td></tr></table></figure><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">1.安装jdk环境     <br>2.安装并启动hadoop<br>我的hadoop的路径在/home/hadoop/hadoop-3.3.4<br></code></pre></td></tr></table></figure><h2 id="二、安装spark"><a href="#二、安装spark" class="headerlink" title="二、安装spark"></a>二、安装spark</h2><p>各版本下载地址：<a href="https://archive.apache.org/dist/spark/">https://archive.apache.org/dist/spark/</a></p><h3 id="1-下载spark安装包"><a href="#1-下载spark安装包" class="headerlink" title="1.下载spark安装包"></a>1.下载spark安装包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://dlcdn.apache.org/spark/spark-3.3.0/spark-3.3.0-bin-hadoop3.tgz --no-check-certificate<br></code></pre></td></tr></table></figure><h3 id="2-解压文件到指定位置"><a href="#2-解压文件到指定位置" class="headerlink" title="2.解压文件到指定位置:"></a>2.解压文件到指定位置:</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo tar -C /usr/local -xzf spark-3.3.0-bin-hadoop3.tgz<br></code></pre></td></tr></table></figure><h3 id="3-设置环境变量"><a href="#3-设置环境变量" class="headerlink" title="3.设置环境变量:"></a>3.设置环境变量:</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo vim /etc/profile<br><span class="hljs-comment">#写入以下内容：</span><br>SPARK_HOME=/usr/local/spark-3.3.0-bin-hadoop3<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$SPARK_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment">#执行，让配置生效</span><br><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="4-运行spark-shell"><a href="#4-运行spark-shell" class="headerlink" title="4.运行spark-shell:"></a>4.运行spark-shell:</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">spark-shell<br></code></pre></td></tr></table></figure><p><strong>spark管理页面:<a href="http://localhost:4040/">http://localhost:4040</a></strong></p><h2 id="三、配置spark"><a href="#三、配置spark" class="headerlink" title="三、配置spark"></a>三、配置spark</h2><h3 id="1-修改host-user："><a href="#1-修改host-user：" class="headerlink" title="1.修改host-user："></a>1.修改host-user：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim ~/.ssh/config<br><br>Host minio-1<br>  user hadoop<br><br><span class="hljs-comment">#host 以你自身主机名为准，user以你的用户名为主</span><br></code></pre></td></tr></table></figure><h3 id="2-配置权限："><a href="#2-配置权限：" class="headerlink" title="2.配置权限："></a>2.配置权限：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">chown</span> -R hadoop /usr/local/spark-3.3.0-bin-hadoop3/<br></code></pre></td></tr></table></figure><h3 id="3-编辑spark-env-sh"><a href="#3-编辑spark-env-sh" class="headerlink" title="3.编辑spark-env.sh"></a>3.编辑spark-env.sh</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$SPARK_HOME</span>/conf<br><span class="hljs-built_in">cp</span> spark-env.sh.template spark-env.sh<br><br>vim spark-env.sh<br><span class="hljs-comment">#添加如下内容：</span><br><span class="hljs-comment">#!/usr/bin/env bash</span><br><span class="hljs-comment">#java的路径</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/local/jdk1.8.0<br><span class="hljs-comment">#hadoop路径</span><br><span class="hljs-built_in">export</span> SPARK_DIST_CLASSPATH=$(/home/hadoop/hadoop-3.3.4/bin/hadoop classpath)<br><span class="hljs-built_in">export</span> HADOOP_CONF_DIR=/home/hadoop/hadoop-3.3.4/etc/hadoop<br><span class="hljs-comment">#服务器ip</span><br><span class="hljs-built_in">export</span> SPARK_MASTER_IP=192.168.62.129<br><span class="hljs-comment">#服务器host</span><br><span class="hljs-built_in">export</span> SPARK_MASTER_HOST=192.168.62.129<br><br></code></pre></td></tr></table></figure><h3 id="4-spark启动："><a href="#4-spark启动：" class="headerlink" title="4.spark启动："></a>4.spark启动：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$SPARK_HOME</span>/sbin<br><br>./start-all.sh<br></code></pre></td></tr></table></figure><h2 id="验证spark"><a href="#验证spark" class="headerlink" title="验证spark"></a>验证spark</h2><p>访问 <a href="http://localhost:8080/">http://localhost:8080</a>  即可查看网页端，Worker Id能看到本机节点</p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>spark</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jaeger安装</title>
    <link href="/2023/04/12/%E4%B8%AD%E9%97%B4%E4%BB%B6/jaeger/jaeger%E5%AE%89%E8%A3%85/"/>
    <url>/2023/04/12/%E4%B8%AD%E9%97%B4%E4%BB%B6/jaeger/jaeger%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装和部署"><a href="#安装和部署" class="headerlink" title="安装和部署"></a>安装和部署</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://juejin.cn/post/6844903833143869453<br>jaeger的官网是:www.jaegertracing.io/<br></code></pre></td></tr></table></figure><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍:"></a>基本介绍:</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">支持OpenTracing的<span class="hljs-keyword">server</span>端有很多，我们总要选一个。在这里，选用jaeger。<br>jaeger的开发较为活跃，支持的客户端实现也较多。由于采用了golang开发，发行包也比较简洁。<br></code></pre></td></tr></table></figure><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">jaeger的开发语言是`golang`<br>jaeger支持OpenTracing协议，同属于CNCF基金会 <br>jaeger支持各种各样的客户端，包括Go、Java、<span class="hljs-keyword">Node</span><span class="hljs-title">、Python</span>、C++等<br>jaeger支持udp协议传输，当然也支持http<br></code></pre></td></tr></table></figure><h2 id="jaeger能够解决以下问题"><a href="#jaeger能够解决以下问题" class="headerlink" title="jaeger能够解决以下问题"></a>jaeger能够解决以下问题</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">分布式事务监控<br>性能分析与性能优化<br>调用链，找到根源问题<br>服务依赖分析（需大数据分析)<br></code></pre></td></tr></table></figure><h2 id="复制代码安装需了解的技术栈："><a href="#复制代码安装需了解的技术栈：" class="headerlink" title="复制代码安装需了解的技术栈："></a>复制代码安装需了解的技术栈：</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">OpenTracing</span><br>Golang<br>ElasticSearch<br>Kafka （可选)<br></code></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">环境准备：<br>主机<span class="hljs-built_in">ip</span>地址：<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">62</span>.<span class="hljs-number">129</span><br>主机系统：centos7<br></code></pre></td></tr></table></figure><h3 id="1-下载并解压"><a href="#1-下载并解压" class="headerlink" title="1.下载并解压"></a>1.下载并解压</h3><p>jaeger是二进制发行包，使用wget下载即可，这里以linux版本为例。<br>下载地址:<code>https://github.com/jaegertracing/jaeger/tags</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/jaegertracing/jaeger/releases/download/v1.39.0/jaeger-1.39.0-linux-amd64.tar.gz<br><br>tar -xnf jaeger-1.39.0-linux-amd64.tar.gz<br><br><span class="hljs-comment">#解压后jaeger的二进制发行包包含六个二进制文件：</span><br>example-hotrod<br>jaeger-agent<br>jaeger-collector<br>jaeger-query<br>jaeger-all-in-one<br>jaeger-ingester<br><br></code></pre></td></tr></table></figure><h3 id="2-选择存储"><a href="#2-选择存储" class="headerlink" title="2.选择存储"></a>2.选择存储</h3><p>trace数据总要存在一个地方。jaeger支持ES和Canssandra两种后端DB。国内用ES的多一点，我们就以ES为例（ES安装过程已略过）：</p><p><code>es连接地址：192.168.62.128:9200</code></p><p>由于上面四个命令都有很多参数，所以我们可以创建文件来存放这几个脚本，来支持jaeger的启动。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> jaeger-sh &amp;&amp; <span class="hljs-built_in">cd</span> jaeger-sh<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim start-collector.sh<br><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">export</span> SPAN_STORAGE_TYPE=elasticsearch<br><span class="hljs-built_in">nohup</span> ../jaeger-collector  --es.server-urls http://192.168.62.128:9200/  --log-level=debug &gt; collector.log  2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim start-agent.sh<br><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">export</span> SPAN_STORAGE_TYPE=elasticsearch<br><span class="hljs-built_in">nohup</span>  ../jaeger-agent  --admin.http.host-port=192.168.62.129:14267 --reporter.grpc.discovery.min-peers=1 --log-level=debug &gt; agent.log 2&gt;&amp;1 &amp;<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim start-query.sh<br><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">export</span> SPAN_STORAGE_TYPE=elasticsearch<br><span class="hljs-built_in">nohup</span> ../jaeger-query --span-storage.type=elasticsearch --es.server-urls=http://192.168.62.128:9200/  &gt; query.log 2&gt;&amp;1 &amp;<br><br></code></pre></td></tr></table></figure><h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><p>jaeger有两种部署方式。下面一一介绍。如果你的数据量特别多，使用kafka缓冲一下也是可以的(所以就引入了另外一个组件jaeger-ingester），不多做介绍。</p><p>测试环境：</p><p><img src="/2023/04/12/%E4%B8%AD%E9%97%B4%E4%BB%B6/jaeger/jaeger%E5%AE%89%E8%A3%85/image-20221110161255214.png" alt="image-20221110161255214"></p><p>备注：这种方式一般用在dev环境或者其他测试环境。只需要部署一个单一节点即可。我们的app，需要手动填写agent的地址，这个地址一般都是固定的。这些环境的流量很小，一个agent是足够的。更加简洁的部署方式，连agent都不需要，直接向collector发送数据即可。为了方便测试，我们使用此方式。</p><p>正式环境：</p><p><img src="/2023/04/12/%E4%B8%AD%E9%97%B4%E4%BB%B6/jaeger/jaeger%E5%AE%89%E8%A3%85/image-20221110161404044.png" alt="image-20221110161404044"></p><p>备注：上面这种部署方式，适合生产环境。agent安装在每一台业务机器上。Client端的目标agent只需要填写localhost即可。这种方式的好处是生产环境的配置非常的简单。即使你的机器是混合部署的，也能正常收集trace信息</p><p>​</p><h2 id="调用关系图"><a href="#调用关系图" class="headerlink" title="调用关系图"></a>调用关系图</h2><p>jaeger的调用关系图是使用spark任务进行计算的。项目地址为：<a href="https://github.com/jaegertracing/spark-dependencies">https://github.com/jaegertracing/spark-dependencies</a></p><p>作为一个可选部分，只有在计算完毕后，才能在jaeger的后台中进行展现。</p><h2 id="端口整理"><a href="#端口整理" class="headerlink" title="端口整理"></a>端口整理</h2><p><strong>Agent</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">5775 UDP协议，接收兼容zipkin的协议数据<br>6831 UDP协议，接收兼容jaeger的兼容协议<br>6832 UDP协议，接收jaeger的二进制协议<br>5778 HTTP协议，数据量大不建议使用<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">备注：它们之间的传输协议都是基于thrift封装的。我们默认使用5775作为传输端口。</span><br></code></pre></td></tr></table></figure><p><strong>Collector</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">14267 </span>tcp agent发送jaeger.thrift格式数据<br><span class="hljs-symbol">14250 </span>tcp agent发送proto格式数据（背后gRPC)<br><span class="hljs-symbol">14268 </span>http 直接接受客户端数据<br><span class="hljs-symbol">14269 </span>http 健康检查<br></code></pre></td></tr></table></figure><p><strong>Query</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">16686 </span>http jaeger的前端，放给用户的接口<br><span class="hljs-symbol">16687 </span>http 健康检查<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>jaeger</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jaeger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux之Zookeeper集群搭建</title>
    <link href="/2023/04/11/%E4%B8%AD%E9%97%B4%E4%BB%B6/Zookeeper/Liunx%E4%B9%8BZookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/04/11/%E4%B8%AD%E9%97%B4%E4%BB%B6/Zookeeper/Liunx%E4%B9%8BZookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux之Zookeeper集群搭建："><a href="#Linux之Zookeeper集群搭建：" class="headerlink" title="Linux之Zookeeper集群搭建："></a>Linux之Zookeeper集群搭建：</h1><p><code>参考文档：https://blog.csdn.net/carefree2005/article/details/118027821</code></p><h2 id="一、Zookeeper集群简介："><a href="#一、Zookeeper集群简介：" class="headerlink" title="一、Zookeeper集群简介："></a>一、Zookeeper集群简介：</h2><p>  Zookeeper是一个高效的分布式协调服务，可以提供配置信息管理、命名、分布式同步、集群管理、数据库切换等服务。它不适用与存储大量信息，可以用来存储一些配置、发布与订阅等少量信息。Hadoop、Storm、消息中间件、<br>RPC服务框架、分布式数据库同步系统，这些都是Zookeeper的应用场景。对Zookeeper集群进行了这三种角色的划分：leader、follower、observer；</p><ul><li>领导者(leader)：负责记性投票的发起和决议、更新系统状态</li><li>跟随者(follower):用于接受客户端请求并向客户端返回结果以及选举过程中参与投票</li><li>观察者(observer):可以接收客户端连接，将写请求转发给leader节点，但是不参与投票过程，只同步leader的状态。通常对查询操作做负载</li></ul><p>Zookeeper的三个端口作用</p><ul><li>2181：对client端提供服务</li><li>2888：集群内机器通信使用</li><li>3888：选举leader使用</li></ul><h2 id="二、搭建步骤"><a href="#二、搭建步骤" class="headerlink" title="二、搭建步骤"></a>二、搭建步骤</h2><h3 id="1、规划集群节点"><a href="#1、规划集群节点" class="headerlink" title="1、规划集群节点"></a>1、规划集群节点</h3><table><thead><tr><th>主机</th><th>ip地址</th><th>监听端口</th><th>备注</th></tr></thead><tbody><tr><td>mt-1</td><td>192.168.94.154</td><td>2181  3888</td><td>leader监听2888</td></tr><tr><td>mt-2</td><td>192.168.94.155</td><td>2181  3888</td><td></td></tr><tr><td>mt-3</td><td>192.168.94.188</td><td>2181  3888</td><td></td></tr></tbody></table><h3 id="2、安装JDK-集群各节点参照执行"><a href="#2、安装JDK-集群各节点参照执行" class="headerlink" title="2、安装JDK (集群各节点参照执行)"></a>2、安装JDK (集群各节点参照执行)</h3><h3 id="3、创建zookeeper用户-集群各节点参照执行"><a href="#3、创建zookeeper用户-集群各节点参照执行" class="headerlink" title="3、创建zookeeper用户 (集群各节点参照执行)"></a>3、创建zookeeper用户 (集群各节点参照执行)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">useradd zk<br>passwd zk<br>&gt;输入密码<br><br>su - zk<br></code></pre></td></tr></table></figure><h3 id="4、下载Zookeeper最新稳定版-集群各节点参照执行"><a href="#4、下载Zookeeper最新稳定版-集群各节点参照执行" class="headerlink" title="4、下载Zookeeper最新稳定版 (集群各节点参照执行)"></a>4、下载Zookeeper最新稳定版 (集群各节点参照执行)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://mirrors.bfsu.edu.cn/apache/zookeeper/zookeeper-3.5.10/apache-zookeeper-3.5.10-bin.tar.gz --no-check-certificate<br></code></pre></td></tr></table></figure><p>其他版本：<a href="https://mirrors.bfsu.edu.cn/apache/zookeeper">https://mirrors.bfsu.edu.cn/apache/zookeeper</a></p><h3 id="5、解压Zookeeper压缩包-集群各节点参照执行"><a href="#5、解压Zookeeper压缩包-集群各节点参照执行" class="headerlink" title="5、解压Zookeeper压缩包 (集群各节点参照执行)"></a>5、解压Zookeeper压缩包 (集群各节点参照执行)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -xnf apache-zookeeper-3.5.10-bin.tar.gz<br><br>设置软链接：<br><span class="hljs-built_in">ln</span> -s apache-zookeeper-3.5.10-bin zookeeper<br></code></pre></td></tr></table></figure><h3 id="6、修改配置文件zoo-cfg-集群各节点参照执行"><a href="#6、修改配置文件zoo-cfg-集群各节点参照执行" class="headerlink" title="6、修改配置文件zoo.cfg (集群各节点参照执行)"></a>6、修改配置文件zoo.cfg (集群各节点参照执行)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> data<br><span class="hljs-built_in">cd</span> zookeeper/conf<br><br>编辑cfg文件，配置如下：<br><span class="hljs-built_in">cp</span> zoo_sample.cfg zoo.cfg<br><br><span class="hljs-built_in">cat</span> zoo.cfg<br><br>tickTime=2000<br>initLimit=10<br>syncLimit=5<br>dataDir=/home/zk/data<br>clientPort=2181<br>server.1=192.168.94.154:2888:3888<br>server.2=192.168.94.155:2888:3888<br>server.3=192.168.94.188:2888:3888<br></code></pre></td></tr></table></figure><p><strong>zoo.cfg配置文件参数说明：</strong><br>tickTime：基本事件单元，这个时间是作为Zookeeper服务器之间或客户端与服务器之间维持心跳的时间间隔，每隔tickTime时间就会发送一个心跳；最小 的session过期时间为2倍tickTime<br>dataDir：存储内存中数据库快照的位置，除非另有说明，否则指向数据库更新的事务日志。注意：应该谨慎的选择日志存放的位置，使用专用的日志存储设备能够大大提高系统的性能，如果将日志存储在比较繁忙的存储设备上，那么将会很大程度上影像系统性能。<br>client：监听客户端连接的端口。<br>initLimit：允许follower连接并同步到Leader的初始化连接时间，以tickTime为单位。当初始化连接时间超过该值，则表示连接失败。<br>syncLimit：表示Leader与Follower之间发送消息时，请求和应答时间长度。如果follower在设置时间内不能与leader通信，那么此follower将会被丢弃。<br>server.A&#x3D;B:C:D<br>A：其中 A 是一个数字，表示这个是服务器的编号；<br>B：是这个服务器的 ip 地址；<br>C：Zookeeper服务器之间的通信端口；<br>D：Leader选举的端口。</p><h3 id="7、创建myid文件"><a href="#7、创建myid文件" class="headerlink" title="7、创建myid文件"></a>7、创建myid文件</h3><p>在192.168.94.154（server.1)上创建：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#cd /home/zk/data</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;1&quot;</span> &gt; /home/zk/data/myid<br><br>在192.168.94.155（server.2)上创建：<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;2&quot;</span> &gt; /home/zk/data/myid<br><br>在192.168.94.188（server.3)上创建：<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;3&quot;</span> &gt; /home/zk/data/myid<br></code></pre></td></tr></table></figure><h3 id="8、启动Zookeeper服务-集群各节点参照执行"><a href="#8、启动Zookeeper服务-集群各节点参照执行" class="headerlink" title="8、启动Zookeeper服务 (集群各节点参照执行)"></a>8、启动Zookeeper服务 (集群各节点参照执行)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~/zookeeper/bin/<br>./zkServer.sh start<br><br><span class="hljs-comment">#-----------输出：--------------------</span><br>/usr/bin/java<br>ZooKeeper JMX enabled by default<br>Using config: /home/zk/zookeeper/bin/../conf/zoo.cfg<br>Starting zookeeper ... STARTED<br><span class="hljs-comment">#--------------------------------</span><br></code></pre></td></tr></table></figure><h3 id="9、检查zookeeper状态"><a href="#9、检查zookeeper状态" class="headerlink" title="9、检查zookeeper状态"></a>9、检查zookeeper状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">./zkServer.sh status  <span class="hljs-comment">#Mode状态为: leader、follower、observer</span><br><span class="hljs-comment">#------------------------输出-------------------------------</span><br>ZooKeeper JMX enabled by default<br>Using config: /home/zk/zookeeper/bin/../conf/zoo.cfg<br>Client port found: 2181. Client address: localhost. Client SSL: <span class="hljs-literal">false</span>.<br>Mode: follower <span class="hljs-comment">#可以看到有leader、follower状态</span><br><span class="hljs-comment">#-----------------------------------</span><br><br>netstat -lntup <span class="hljs-comment">#检查端口，可以发现领导者多了一个端口2888</span><br></code></pre></td></tr></table></figure><h3 id="10、设置环境变量"><a href="#10、设置环境变量" class="headerlink" title="10、设置环境变量"></a>10、设置环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#需切换为root用户</span><br>vim /etc/profile<br><br><span class="hljs-built_in">export</span> ZOOKEEPER_HOME=/home/zk/zookeeper<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$ZOOKEEPER_HOME</span>/bin<br><br><span class="hljs-comment">#使之生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Zookeeper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建NFS文件共享存储服务</title>
    <link href="/2023/04/11/%E6%93%8D%E4%BD%9C%E5%92%8C%E6%9C%8D%E5%8A%A1/%E6%90%AD%E5%BB%BANFS%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/CentOS%207%E4%B8%AD%E6%90%AD%E5%BB%BANFS%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%AE%8C%E6%95%B4%E6%AD%A5%E9%AA%A4/"/>
    <url>/2023/04/11/%E6%93%8D%E4%BD%9C%E5%92%8C%E6%9C%8D%E5%8A%A1/%E6%90%AD%E5%BB%BANFS%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/CentOS%207%E4%B8%AD%E6%90%AD%E5%BB%BANFS%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%AE%8C%E6%95%B4%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CentOS-7中搭建NFS文件共享存储服务的完整步骤"><a href="#CentOS-7中搭建NFS文件共享存储服务的完整步骤" class="headerlink" title="CentOS 7中搭建NFS文件共享存储服务的完整步骤"></a>CentOS 7中搭建NFS文件共享存储服务的完整步骤</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">#参考文档：https://cloud.tencent.com/developer/article/1721166<br>#参考文档：https://blog.csdn.net/remzhang/article/details/101101126<br></code></pre></td></tr></table></figure><h2 id="一、准备环境"><a href="#一、准备环境" class="headerlink" title="一、准备环境"></a>一、准备环境</h2><p>我们需要两台CentOS7机器，我们用虚拟机做测试，分别做NFS服务器和客户端，配置如下：</p><table><thead><tr><th>IP地址</th><th>备注</th></tr></thead><tbody><tr><td>192.168.183.88</td><td>NFS服务器ip</td></tr><tr><td>192.168.11.89</td><td>客户端ip</td></tr></tbody></table><h2 id="二、搭建过程"><a href="#二、搭建过程" class="headerlink" title="二、搭建过程"></a>二、搭建过程</h2><h3 id="1-NFS服务器配置-客户端跟服务端都需要执行"><a href="#1-NFS服务器配置-客户端跟服务端都需要执行" class="headerlink" title="1.NFS服务器配置 (客户端跟服务端都需要执行)"></a>1.NFS服务器配置 (客户端跟服务端都需要执行)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install rpcbind nfs-utils<br></code></pre></td></tr></table></figure><h3 id="2-创建共享目录"><a href="#2-创建共享目录" class="headerlink" title="2.创建共享目录"></a>2.创建共享目录</h3><p>在服务器上创建共享目录，并设置权限。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /data/share/<br><span class="hljs-built_in">chmod</span> 755 -R /data/share/<br></code></pre></td></tr></table></figure><h3 id="3-配置NFS"><a href="#3-配置NFS" class="headerlink" title="3.配置NFS"></a>3.配置NFS</h3><p>nfs的配置文件是 &#x2F;etc&#x2F;exports ，在配置文件中加入一行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/exports<br><br><span class="hljs-comment">#/data/share *(rw,sync,no_root_squash,no_subtree_check) （允许所有的客户端访问）</span><br>/data/share/ 192.168.183.89(rw,no_root_squash,no_all_squash,<span class="hljs-built_in">sync</span>)<br><br><span class="hljs-comment">#这行代码的意思是把共享目录/data/share/共享给192.168.11.34这个客户端ip，后面括号里的内容是权限参数，其中：</span><br>rw:表示设置目录可读写。<br><span class="hljs-built_in">sync</span>:表示数据会同步写入到内存和硬盘中，相反 rsync 表示数据会先暂存于内存中，而非直接写入到硬盘中。<br>no_root_squash:NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，也拥有root权限。<br>no_all_squash:不论NFS客户端连接服务端时使用什么用户，对服务端分享的目录来说都不会拥有匿名用户权限。<br><br><span class="hljs-comment">#如果有多个共享目录配置，则使用多行，一行一个配置。保存好配置文件后，需要执行以下命令使配置立即生效：</span><br>exportfs -r<br></code></pre></td></tr></table></figure><h3 id="4-设置防火墙-如果你的系统没有开启防火墙，那么该步骤可以省略。"><a href="#4-设置防火墙-如果你的系统没有开启防火墙，那么该步骤可以省略。" class="headerlink" title="4.设置防火墙(如果你的系统没有开启防火墙，那么该步骤可以省略。)"></a>4.设置防火墙(如果你的系统没有开启防火墙，那么该步骤可以省略。)</h3><p>NFS的防火墙特别难搞，因为除了固定的port111、2049外，还有其他服务如rpc.mounted等开启的不固定的端口，这样对防火墙来说就比较麻烦了。为了解决这个问题，我们可以设置NFS服务的端口配置文件。</p><h4 id="4-1、修改-x2F-etc-x2F-sysconfig-x2F-nfs文件，将下列内容的注释去掉，如果没有则添加："><a href="#4-1、修改-x2F-etc-x2F-sysconfig-x2F-nfs文件，将下列内容的注释去掉，如果没有则添加：" class="headerlink" title="4.1、修改&#x2F;etc&#x2F;sysconfig&#x2F;nfs文件，将下列内容的注释去掉，如果没有则添加："></a>4.1、修改&#x2F;etc&#x2F;sysconfig&#x2F;nfs文件，将下列内容的注释去掉，如果没有则添加：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/sysconfig/nfs<br><br>RQUOTAD_PORT=1001<br>LOCKD_TCPPORT=30001<br>LOCKD_UDPPORT=30002<br>MOUNTD_PORT=1002<br></code></pre></td></tr></table></figure><h4 id="4-2、保存好后，将端口加入到防火墙允许策略中。执行："><a href="#4-2、保存好后，将端口加入到防火墙允许策略中。执行：" class="headerlink" title="4.2、保存好后，将端口加入到防火墙允许策略中。执行："></a>4.2、保存好后，将端口加入到防火墙允许策略中。执行：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">firewall-cmd --zone=public --add-port=111/tcp --add-port=111/udp --add-port=2049/tcp --add-port=2049/udp --add-port=1001/tcp --add-port=1001/udp --add-port=1002/tcp --add-port=1002/udp --add-port=30001/tcp --add-port=30002/udp --permanent<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><h3 id="5-启动服务"><a href="#5-启动服务" class="headerlink" title="5.启动服务"></a>5.启动服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start rpcbind<br>systemctl start nfs<br>加入开机启动：<br>systemctl <span class="hljs-built_in">enable</span> rpcbind <br>systemctl <span class="hljs-built_in">enable</span> nfs<br></code></pre></td></tr></table></figure><p><strong>nfs服务启动后，可以使用命令 <code>rpcinfo -p</code> 查看端口是否生效。</strong></p><p>服务启动后，我们可以使用 showmount 命令来查看是否可连接：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@localhost ~]<span class="hljs-comment"># showmount -e localhost</span><br>Export list <span class="hljs-keyword">for</span> localhost:<br>/data/share 192.168.183.89<br></code></pre></td></tr></table></figure><h2 id="三、客户端挂载配置"><a href="#三、客户端挂载配置" class="headerlink" title="三、客户端挂载配置"></a>三、客户端挂载配置</h2><h3 id="1-挂载远程nfs文件系统-查看服务端已共享的目录"><a href="#1-挂载远程nfs文件系统-查看服务端已共享的目录" class="headerlink" title="1.挂载远程nfs文件系统,查看服务端已共享的目录:"></a>1.挂载远程nfs文件系统,查看服务端已共享的目录:</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@master ~]<span class="hljs-comment"># showmount -e 192.168.183.88</span><br>Export list <span class="hljs-keyword">for</span> 192.168.183.88:<br>/data/share 192.168.183.89<br></code></pre></td></tr></table></figure><h3 id="2-建立挂载目录，执行挂载命令："><a href="#2-建立挂载目录，执行挂载命令：" class="headerlink" title="2.建立挂载目录，执行挂载命令："></a>2.建立挂载目录，执行挂载命令：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /mnt/share<br>mount -t nfs 192.168.183.89:/data/share /mnt/share/ -o nolock,nfsvers=3,vers=3<br><br>如果要解除挂载，可执行命令：<br>umount /mnt/share<br><br><span class="hljs-comment">#开机自动挂载 :</span><br>[root@localhost ~]<span class="hljs-comment"># vim /etc/rc.d/rc.local</span><br><span class="hljs-comment">#在文件最后添加一行：</span><br>mount -t nfs 192.168.183.89:/data/share /mnt/share/ -o nolock,nfsvers=3,vers=3<br></code></pre></td></tr></table></figure><h3 id="3-查看挂载结果，在客户端输入-df-h"><a href="#3-查看挂载结果，在客户端输入-df-h" class="headerlink" title="3.查看挂载结果，在客户端输入 df -h"></a>3.查看挂载结果，在客户端输入 <code>df -h</code></h3><p>输出如下内容即代表成功：<br><code>192.168.183.88:/data/share   46G  5.0G   41G   11% /mnt/share</code></p>]]></content>
    
    
    <categories>
      
      <category>服务</category>
      
      <category>NFS文件共享存储服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NFS文件共享存储服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux之Zookeeper集群搭建</title>
    <link href="/2023/04/11/%E4%B8%AD%E9%97%B4%E4%BB%B6/xxl-job/docker%E9%83%A8%E7%BD%B2xxl-job%E8%B0%83%E5%BA%A6%E4%B8%AD%E5%BF%83/"/>
    <url>/2023/04/11/%E4%B8%AD%E9%97%B4%E4%BB%B6/xxl-job/docker%E9%83%A8%E7%BD%B2xxl-job%E8%B0%83%E5%BA%A6%E4%B8%AD%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker部署xxl-job调度中心"><a href="#docker部署xxl-job调度中心" class="headerlink" title="docker部署xxl-job调度中心"></a>docker部署xxl-job调度中心</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://www.cnblogs.com/yipianchuyun/p/16113813.html<br>官方文档：https://www.xuxueli.com/xxl-job/<br></code></pre></td></tr></table></figure><h2 id="1-安装mysql"><a href="#1-安装mysql" class="headerlink" title="1.安装mysql"></a>1.安装mysql</h2><p><strong>安装过程已略过</strong><br>注意：密码不要包含感叹号，否则会导致xxl-job启动失败！</p><h2 id="2-在mysql中创建对应的数据库"><a href="#2-在mysql中创建对应的数据库" class="headerlink" title="2.在mysql中创建对应的数据库"></a>2.在mysql中创建对应的数据库</h2><p>对应的数据库文件在：<code>https://github.com/xuxueli/xxl-job/blob/master/doc/db/tables_xxl_job.sql</code></p><p>连接数据库执行该文件内容！</p><h2 id="3-创建工作目录并运行xxljob"><a href="#3-创建工作目录并运行xxljob" class="headerlink" title="3.创建工作目录并运行xxljob"></a>3.创建工作目录并运行xxljob</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /app/applogs<br><br>docker run -p 8080:8080 -d --restart=always \<br>--name xxl-job-admin \<br>-v /app/applogs:/data/applogs \<br>-e PARAMS=<span class="hljs-string">&quot;--spring.datasource.url=jdbc:mysql://192.168.94.128:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai \</span><br><span class="hljs-string">--spring.datasource.username=root \</span><br><span class="hljs-string">--spring.datasource.password=test@123 \</span><br><span class="hljs-string">--xxl.job.accessToken=可设置token（也可去掉）&quot;</span> \<br>xuxueli/xxl-job-admin:2.3.1<br></code></pre></td></tr></table></figure><h2 id="4-访问xxl-job"><a href="#4-访问xxl-job" class="headerlink" title="4.访问xxl-job"></a>4.访问xxl-job</h2><p>页面：<a href="http://localhost:8080/xxl-job-admin">http://localhost:8080/xxl-job-admin</a></p><p>默认密码(admin&#x2F;123456)<br>修改密码：右上角点击修改密码（采用MD5加密），或者直接数据库中修改密码（采用MD5算法32位小写加密），这样才有用</p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Zookeeper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat的安装和配置</title>
    <link href="/2023/04/11/%E4%B8%AD%E9%97%B4%E4%BB%B6/Tomcat/%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/04/11/%E4%B8%AD%E9%97%B4%E4%BB%B6/Tomcat/%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Tomcat的安装和配置"><a href="#Tomcat的安装和配置" class="headerlink" title="Tomcat的安装和配置"></a>Tomcat的安装和配置</h1><h2 id="一、tomcat的安装"><a href="#一、tomcat的安装" class="headerlink" title="一、tomcat的安装"></a>一、tomcat的安装</h2><h3 id="1、配置Java环境"><a href="#1、配置Java环境" class="headerlink" title="1、配置Java环境"></a>1、配置Java环境</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">官网下载地址：<br>https://www.oracle.com/java/technologies/javase-downloads.html；<br>https://www.oracle.com/java/technologies/downloads/#java8<br></code></pre></td></tr></table></figure><p>备注：java版本不低于6</p><h3 id="2、下载jdk文件"><a href="#2、下载jdk文件" class="headerlink" title="2、下载jdk文件"></a>2、下载jdk文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget --no-check-certificate --no-cookies --header <span class="hljs-string">&quot;Cookie: oraclelicense=accept-securebackup-cookie&quot;</span> http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="3、解压到-x2F-usr-x2F-local目录下"><a href="#3、解压到-x2F-usr-x2F-local目录下" class="headerlink" title="3、解压到&#x2F;usr&#x2F;local目录下"></a>3、解压到&#x2F;usr&#x2F;local目录下</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar zxvf jdk-7u51-linux-x64.tar.gz -C /usr/local/<br></code></pre></td></tr></table></figure><h3 id="4、配置环境变量的配置文件"><a href="#4、配置环境变量的配置文件" class="headerlink" title="4、配置环境变量的配置文件"></a>4、配置环境变量的配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/profile &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">JAVA_HOME=/usr/local/jdk1.7.0_51  #文件名</span><br><span class="hljs-string">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="hljs-string">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="hljs-string">export JAVA_HOME PATH CLASSPATH</span><br><span class="hljs-string">EOF</span><br><br><br><span class="hljs-comment">#使设置生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br><br><span class="hljs-comment">#验证</span><br>java  -version<br></code></pre></td></tr></table></figure><h2 id="5、tomcat安装"><a href="#5、tomcat安装" class="headerlink" title="5、tomcat安装"></a>5、tomcat安装</h2><p>下载地址：<a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.83/bin/apache-tomcat-8.5.83.tar.gz --no-check-certificate<br><br>tar -xnf apache-tomcat-8.5.83.tar.gz<br><br><span class="hljs-built_in">mv</span> apache-tomcat-8.5.83 /usr/local/tomcat<br><br></code></pre></td></tr></table></figure><p><strong>设置自定义JDK路径(在某些调用或者远程服务器时，提示没有java_home时需要设置，安装时可跳过此步骤)</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /usr/local/tomcat/bin/setclasspath.sh<br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-comment">#  Set JAVA_HOME or JRE_HOME if not already set, ensure any provided settings</span><br><span class="hljs-comment">#  are valid and consistent with the selected start-up options and set up the</span><br><span class="hljs-comment">#  endorsed directory.</span><br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-comment"># 添加JAVA_HOME和JRE_HOME两个环境变量</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/local/jdk1.7.0_51<br><span class="hljs-built_in">export</span> JRE_HOME=/usr/local/jdk1.7.0_51<br><span class="hljs-comment"># Make sure prerequisite environment variables are set</span><br><span class="hljs-comment"># ......省略......</span><br><br><span class="hljs-comment">#startup.sh启动</span><br>/usr/local/tomcat/bin/startup.sh<br><br><span class="hljs-comment">#shutdown.sh关闭</span><br>/usr/local/tomcat/bin/shutdown.sh <br></code></pre></td></tr></table></figure><h2 id="二、tomcat的使用："><a href="#二、tomcat的使用：" class="headerlink" title="二、tomcat的使用："></a>二、tomcat的使用：</h2><h3 id="1、修改端口"><a href="#1、修改端口" class="headerlink" title="1、修改端口"></a>1、修改端口</h3><p>默认是启用的8080端口，如果需要修改，找到tomcat目录&#x2F;conf&#x2F;server.xml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /usr/local/tomcat/conf/server.xml<br><br>修改port=<span class="hljs-string">&quot;8080&quot;</span>，将port端口的值修改为80或者其他定义的端口<br></code></pre></td></tr></table></figure><h3 id="2、部署html"><a href="#2、部署html" class="headerlink" title="2、部署html"></a>2、部署html</h3><p>把我们自己书写的html，servlet这些信息，部署到tomcat的方式</p><p>自定义项目存放路径:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /usr/local/tomcat/conf/server.xml<br><br>&lt;Host name=<span class="hljs-string">&quot;localhost&quot;</span>  appBase=<span class="hljs-string">&quot;webapps&quot;</span> unpackWARs=<span class="hljs-string">&quot;true&quot;</span> autoDeploy=<span class="hljs-string">&quot;true&quot;</span>&gt;<br><span class="hljs-comment">#在该句后面添加，docBase后面为自定义的路径</span><br>&lt;Context path=<span class="hljs-string">&quot;&quot;</span> docBase=<span class="hljs-string">&quot;/app/html/www&quot;</span> debug=<span class="hljs-string">&quot;0&quot;</span> reloadable=<span class="hljs-string">&quot;true&quot;</span> crossContext=<span class="hljs-string">&quot;true&quot;</span> /&gt; <br><br><span class="hljs-comment">#然后重启Tomcat</span><br>/usr/local/tomcat/bin/shutdown.sh <br>/usr/local/tomcat/bin/startup.sh<br><br><span class="hljs-comment">#使用自带的存放路径:</span><br><span class="hljs-built_in">cd</span> /usr/local/tomcat/webapps/ROOT<br><span class="hljs-comment">#将项目文件放到该目录下即可，注意Tomcat路径！</span><br></code></pre></td></tr></table></figure><h3 id="3、tomcat设置成服务，并设置开启自启动"><a href="#3、tomcat设置成服务，并设置开启自启动" class="headerlink" title="3、tomcat设置成服务，并设置开启自启动"></a>3、tomcat设置成服务，并设置开启自启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#Tomcat配置服务、新建服务脚本：</span><br>vim /etc/init.d/tomcat<br><span class="hljs-comment">#!/bin/bash</span><br>CATALINA_HOME=/usr/local/tomcat/<br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br>        start)<br>                sh <span class="hljs-variable">$CATALINA_HOME</span>/bin/startup.sh<br>                ;;<br>        stop)<br>                sh <span class="hljs-variable">$CATALINA_HOME</span>/bin/shutdown.sh<br>                ;;<br>        restart)<br>                sh <span class="hljs-variable">$CATALINA_HOME</span>/bin/shutdown.sh<br>                sh <span class="hljs-variable">$CATALINA_HOME</span>/bin/startup.sh<br>                ;;<br>        *)<br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;please use : tomcat &#123;start | stop | restart&#125;&#x27;</span><br>        ;;<br><span class="hljs-keyword">esac</span><br><span class="hljs-built_in">exit</span> 0<br><br><span class="hljs-comment">#保存后，可直接使用以下命令启动，暂停、重启tomcat</span><br>启动：service tomcat start<br>停止：service tomcat stop<br>重启：service tomcat restart<br><br><span class="hljs-comment">#Tomcat配置开机自启动：</span><br>chkconfig --add tomcat <span class="hljs-comment">#向chkconfig添加 tomcat 服务的管理</span><br>chkconfig tomcat on <span class="hljs-comment">#设置tomcat服务自启动</span><br><br><span class="hljs-comment">#其他配置</span><br>chkconfig --list | grep tomcat <span class="hljs-comment">#查看tomcat的启动状态</span><br>chkconfig tomcat off <span class="hljs-comment">#关闭tomcat服务自启动</span><br>chkconfig --del tomcat <span class="hljs-comment">#删除tomcat服务在chkconfig上的管理</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Tomcat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker运行nps、实现内网穿透</title>
    <link href="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <url>/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker运行nps、实现内网穿透"><a href="#使用docker运行nps、实现内网穿透" class="headerlink" title="使用docker运行nps、实现内网穿透"></a>使用docker运行nps、实现内网穿透</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">nps官方文档地址：https://ehang-io.github.io/nps/#/use<br>参考文档：https://langeheris.top/2020/03/28/Intranet-penetration/#%E4%BB%80%E4%B9%88%E6%98%AF%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%9F<br></code></pre></td></tr></table></figure><p>用Centos7环境进行的相关搭建：</p><table><thead><tr><th>机器名称</th><th>机器ip</th><th>安装服务</th></tr></thead><tbody><tr><td>公网机器</td><td>192.168.94.156</td><td>安装服务端（nps.server）</td></tr><tr><td>内网机器</td><td>192.168.94.154</td><td>安装客户端（npc.client）</td></tr></tbody></table><h2 id="一、在公网机器上操作-gt-gt-安装nps服务端："><a href="#一、在公网机器上操作-gt-gt-安装nps服务端：" class="headerlink" title="一、在公网机器上操作 &gt;&gt; 安装nps服务端："></a>一、在公网机器上操作 &gt;&gt; 安装nps服务端：</h2><h3 id="1、拉取nps镜像"><a href="#1、拉取nps镜像" class="headerlink" title="1、拉取nps镜像"></a>1、拉取nps镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull ffdfgdfg/nps<br></code></pre></td></tr></table></figure><h3 id="2、创建挂载目录、并进入到挂载目录"><a href="#2、创建挂载目录、并进入到挂载目录" class="headerlink" title="2、创建挂载目录、并进入到挂载目录"></a>2、创建挂载目录、并进入到挂载目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app  &amp;&amp;  <span class="hljs-built_in">cd</span> /app<br></code></pre></td></tr></table></figure><h3 id="3、从github上拉取conf文件信息"><a href="#3、从github上拉取conf文件信息" class="headerlink" title="3、从github上拉取conf文件信息"></a>3、从github上拉取conf文件信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install -y git  <span class="hljs-comment">#安装git</span><br>git <span class="hljs-built_in">clone</span> https://gitee.com/mirrors/nps.git<br></code></pre></td></tr></table></figure><p>注：clone成功后会clone一个nps目录到当前目录下</p><h3 id="4、进入clone下来的nps的conf目录，可根据自己的需求修改nps-conf文件："><a href="#4、进入clone下来的nps的conf目录，可根据自己的需求修改nps-conf文件：" class="headerlink" title="4、进入clone下来的nps的conf目录，可根据自己的需求修改nps.conf文件："></a>4、进入clone下来的nps的conf目录，可根据自己的需求修改nps.conf文件：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /app/nps/conf/nps.conf | grep web_port<br><span class="hljs-comment">#web_port = 3000      #nps的web页面端口</span><br><br><span class="hljs-built_in">cat</span> /app/nps/conf/nps.conf | grep username<br><span class="hljs-comment">#web_username=admin   #登录nps的账号</span><br><br><span class="hljs-built_in">cat</span> /app/nps/conf/nps.conf | grep password<br><span class="hljs-comment">#web_password=123456  #登录nps的密码</span><br><br><span class="hljs-built_in">cat</span> /app/nps/conf/nps.conf |grep bridge_port<br><span class="hljs-comment">#bridge_port=3002     #客户端连接服务端的端口</span><br></code></pre></td></tr></table></figure><p>注：以上的port需要在docker运行时设定的端口范围内！</p><h3 id="5、运行nps服务，设置端口"><a href="#5、运行nps服务，设置端口" class="headerlink" title="5、运行nps服务，设置端口"></a>5、运行nps服务，设置端口</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d -p 3000-3010:3000-3010 -v /app/nps/conf:/conf --name=nps ffdfgdfg/nps<br></code></pre></td></tr></table></figure><p>注：可-p:设定的端口，需确保范围内的端口没有被占用！</p><h3 id="6、运行后可以通过本机ip-端口访问，并输入账号和密码登录"><a href="#6、运行后可以通过本机ip-端口访问，并输入账号和密码登录" class="headerlink" title="6、运行后可以通过本机ip+端口访问，并输入账号和密码登录"></a>6、运行后可以通过本机ip+端口访问，并输入账号和密码登录</h3><p><strong>我这边访问web页面地址：192.168.94.156:3000  登录账号：admin 密码：123456</strong></p><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127103435729.png" alt="image-20220127103435729"></p><h2 id="二、在内网机器上操作-gt-gt-安装npc客户端："><a href="#二、在内网机器上操作-gt-gt-安装npc客户端：" class="headerlink" title="二、在内网机器上操作  &gt;&gt;  安装npc客户端："></a>二、在内网机器上操作  &gt;&gt;  安装npc客户端：</h2><h3 id="1、下载源码包："><a href="#1、下载源码包：" class="headerlink" title="1、下载源码包："></a>1、下载源码包：</h3><p>源码包地址：<a href="https://github.com/ehang-io/nps/releases/tags%EF%BC%8C%E7%82%B9%E5%87%BB%E7%9B%B8%E5%BA%94%E7%9A%84%E7%89%88%E6%9C%AC%E5%90%8E%E8%BF%9B%E5%85%A5%E8%AF%A6%E6%83%85%EF%BC%8C%E5%9C%A8Assets%E4%B8%AD%E6%89%BE%E5%88%B0client.tar.gz">https://github.com/ehang-io/nps/releases/tags，点击相应的版本后进入详情，在Assets中找到client.tar.gz</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/ehang-io/nps/releases/download/v0.26.9/linux_amd64_client.tar.gz<br></code></pre></td></tr></table></figure><h3 id="2、新建工作目录并解压源码包到工作目录下："><a href="#2、新建工作目录并解压源码包到工作目录下：" class="headerlink" title="2、新建工作目录并解压源码包到工作目录下："></a>2、新建工作目录并解压源码包到工作目录下：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app/docker-npc &amp;&amp; tar -xnf linux_amd64_client.tar.gz -C /app/docker-npc<br></code></pre></td></tr></table></figure><p>注：解压后在&#x2F;app&#x2F;docker-npc目录下找到可执行的npc文件！</p><p>##需要使用docker镜像的方式运行npc客户端时请执行步骤 “3”，如果不需要用dokcer运行，请跳过步骤“3”！</p><hr><h2 id="3、使用docker编译npc镜像："><a href="#3、使用docker编译npc镜像：" class="headerlink" title="3、使用docker编译npc镜像："></a>3、使用docker编译npc镜像：</h2><h3 id="3-1、编写dockerfile文件"><a href="#3-1、编写dockerfile文件" class="headerlink" title="3.1、编写dockerfile文件"></a>3.1、编写dockerfile文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /app/docker-npc/Dockerfile &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">FROM alpine:latest</span><br><span class="hljs-string">ENV LANG en_US.UTF-8</span><br><span class="hljs-string">ENV npserver=nps.thingsroot.com:7088 npckey=accesskey</span><br><span class="hljs-string">COPY ./npc /usr/bin/npc</span><br><span class="hljs-string">CMD /usr/bin/npc -server=\$npserver -vkey=\$npckey</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="3-2、构建镜像"><a href="#3-2、构建镜像" class="headerlink" title="3.2、构建镜像"></a>3.2、构建镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker build -t docker-npc /app/docker-npc/<br></code></pre></td></tr></table></figure><h3 id="3-3、运行镜像"><a href="#3-3、运行镜像" class="headerlink" title="3.3、运行镜像"></a>3.3、运行镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -td --restart always --name npc --network host docker-npc<br></code></pre></td></tr></table></figure><p>注：–network host ：运行的镜像与宿主机共享网络</p><hr><h2 id="三、客户端与服务端连接（内网与外网机器连接）"><a href="#三、客户端与服务端连接（内网与外网机器连接）" class="headerlink" title="三、客户端与服务端连接（内网与外网机器连接）"></a>三、客户端与服务端连接（内网与外网机器连接）</h2><h3 id="1、连接服务端web页面后，点击客户端-gt-gt-新增"><a href="#1、连接服务端web页面后，点击客户端-gt-gt-新增" class="headerlink" title="1、连接服务端web页面后，点击客户端 &gt;&gt; 新增"></a>1、连接服务端web页面后，点击客户端 &gt;&gt; 新增</h3><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127103504265.png" alt="image-20220127103504265"></p><h3 id="2、填写新增的客户端信息后-gt-gt-根据实际需要填写信息-gt-gt-新增"><a href="#2、填写新增的客户端信息后-gt-gt-根据实际需要填写信息-gt-gt-新增" class="headerlink" title="2、填写新增的客户端信息后 &gt;&gt; 根据实际需要填写信息 &gt;&gt; 新增"></a>2、填写新增的客户端信息后 &gt;&gt; 根据实际需要填写信息 &gt;&gt; 新增</h3><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127105150833.png" alt="image-20220127105150833"></p><h3 id="3、在客户端可看到新增的ID旁有个“-”的符号-gt-gt-点击“-”-可以看到客户端命令"><a href="#3、在客户端可看到新增的ID旁有个“-”的符号-gt-gt-点击“-”-可以看到客户端命令" class="headerlink" title="3、在客户端可看到新增的ID旁有个“+”的符号 &gt;&gt; 点击“+” 可以看到客户端命令"></a>3、在客户端可看到新增的ID旁有个“+”的符号 &gt;&gt; 点击“+” 可以看到客户端命令</h3><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127103547752.png" alt="image-20220127103547752"></p><h3 id="4、将内网机器与外网机器连接："><a href="#4、将内网机器与外网机器连接：" class="headerlink" title="4、将内网机器与外网机器连接："></a>4、将内网机器与外网机器连接：</h3><p>查询到客户端命令为：<code>./npc -server=192.168.94.156:3002 -vkey=f0a1ssnpxkuxd3hs -type=tcp</code></p><h4 id="4-1、不使用镜像运行，直接源码运行时："><a href="#4-1、不使用镜像运行，直接源码运行时：" class="headerlink" title="4.1、不使用镜像运行，直接源码运行时："></a>4.1、不使用镜像运行，直接源码运行时：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">/app/docker-npc/npc -server=192.168.94.156:3002 -vkey=f0a1ssnpxkuxd3hs -<span class="hljs-built_in">type</span>=tcp &amp;<br></code></pre></td></tr></table></figure><p>注：加 “&amp;”代表后台运行，如果不需要后台运行，可将“&amp;”符号删除</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#后台运行可通过 ：ps -ef | grep npc 查看进程是否运行！</span><br></code></pre></td></tr></table></figure><h4 id="4-2、使用docker镜像运行时："><a href="#4-2、使用docker镜像运行时：" class="headerlink" title="4.2、使用docker镜像运行时："></a>4.2、使用docker镜像运行时：</h4><h5 id="4-2-1、进入到运行的容器内"><a href="#4-2-1、进入到运行的容器内" class="headerlink" title="4.2.1、进入到运行的容器内"></a>4.2.1、进入到运行的容器内</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it npc sh<br></code></pre></td></tr></table></figure><h5 id="4-2-2、在容器内输入复制的客户端命令"><a href="#4-2-2、在容器内输入复制的客户端命令" class="headerlink" title="4.2.2、在容器内输入复制的客户端命令"></a>4.2.2、在容器内输入复制的客户端命令</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npc -server=192.168.94.156:3002 -vkey=f0a1ssnpxkuxd3hs -<span class="hljs-built_in">type</span>=tcp &amp;<br></code></pre></td></tr></table></figure><h3 id="5、验证是否连接成功！"><a href="#5、验证是否连接成功！" class="headerlink" title="5、验证是否连接成功！"></a>5、验证是否连接成功！</h3><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127103608428.png" alt="image-20220127105104033"></p><p>注：显示为在线即表示已经连接成功！</p><h2 id="四、实现某些操作"><a href="#四、实现某些操作" class="headerlink" title="四、实现某些操作"></a>四、实现某些操作</h2><h3 id="1、实现：通过连接公网服务器（192-168-94-156）的3008端口远程连接内网机器（192-168-94-154）"><a href="#1、实现：通过连接公网服务器（192-168-94-156）的3008端口远程连接内网机器（192-168-94-154）" class="headerlink" title="1、实现：通过连接公网服务器（192.168.94.156）的3008端口远程连接内网机器（192.168.94.154）"></a>1、实现：通过连接公网服务器（192.168.94.156）的3008端口远程连接内网机器（192.168.94.154）</h3><h4 id="1-1、完成-步骤一、二、三后，点击隧道-gt-gt-点击新增"><a href="#1-1、完成-步骤一、二、三后，点击隧道-gt-gt-点击新增" class="headerlink" title="1.1、完成 步骤一、二、三后，点击隧道 &gt;&gt; 点击新增"></a>1.1、完成 步骤一、二、三后，点击隧道 &gt;&gt; 点击新增</h4><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127103632274.png" alt="image-20220127103632274"></p><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127103720043.png" alt="image-20220127103720043"></p><h4 id="1-2、输入我们设置的服务端端口和目标ip端口-gt-gt-新增"><a href="#1-2、输入我们设置的服务端端口和目标ip端口-gt-gt-新增" class="headerlink" title="1.2、输入我们设置的服务端端口和目标ip端口 &gt;&gt; 新增"></a>1.2、输入我们设置的服务端端口和目标ip端口 &gt;&gt; 新增</h4><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127103734930.png" alt="image-20220127103734930"></p><h4 id="1-3、在我们的公网机器上使用xshell连接3008端口"><a href="#1-3、在我们的公网机器上使用xshell连接3008端口" class="headerlink" title="1.3、在我们的公网机器上使用xshell连接3008端口"></a>1.3、在我们的公网机器上使用xshell连接3008端口</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh -p3008 root@192.168.94.156<br></code></pre></td></tr></table></figure><p>注：出现如下内容即实现了连接公网3008端口，远程连接内网机器！即：可以在其他机器上通过连接公网机器+设置的服务端口进行连接内网机器</p><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127110121856.png" alt="image-20220127110121856"></p><h3 id="2、实现：使用sock模式进行内网访问，设置认证账号：admin-认证密码：admin123-认证端口为3007！"><a href="#2、实现：使用sock模式进行内网访问，设置认证账号：admin-认证密码：admin123-认证端口为3007！" class="headerlink" title="2、实现：使用sock模式进行内网访问，设置认证账号：admin 认证密码：admin123  认证端口为3007！"></a>2、实现：使用sock模式进行内网访问，设置认证账号：admin 认证密码：admin123  认证端口为3007！</h3><h4 id="2-1、完成-步骤一、二、三，在步骤三新增客户端时-gt-gt-填写basic认证用户名和密码-gt-gt-新增"><a href="#2-1、完成-步骤一、二、三，在步骤三新增客户端时-gt-gt-填写basic认证用户名和密码-gt-gt-新增" class="headerlink" title="2.1、完成 步骤一、二、三，在步骤三新增客户端时&gt;&gt; 填写basic认证用户名和密码 &gt;&gt; 新增"></a>2.1、完成 步骤一、二、三，在步骤三新增客户端时&gt;&gt; 填写basic认证用户名和密码 &gt;&gt; 新增</h4><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127110151297.png" alt="image-20220127110151297"></p><h4 id="2-2、点击隧道-gt-gt-新增-gt-gt-选择模式为SOCKS代理-gt-gt-填写服务端端口"><a href="#2-2、点击隧道-gt-gt-新增-gt-gt-选择模式为SOCKS代理-gt-gt-填写服务端端口" class="headerlink" title="2.2、点击隧道 &gt;&gt;  新增  &gt;&gt;  选择模式为SOCKS代理  &gt;&gt; 填写服务端端口"></a>2.2、点击隧道 &gt;&gt;  新增  &gt;&gt;  选择模式为SOCKS代理  &gt;&gt; 填写服务端端口</h4><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127110216963.png" alt="image-20220127110216963"></p><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127110236198.png" alt="image-20220127110236198"></p><h4 id="2-3、下载并安装Proxifier。"><a href="#2-3、下载并安装Proxifier。" class="headerlink" title="2.3、下载并安装Proxifier。"></a>2.3、下载并安装Proxifier。</h4><p><code>下载地址：http://soft.onlinedown.net/soft/971579.htm</code></p><p>#中文汉化版，直接安装。</p><h4 id="2-4、打开Proxifier-gt-gt-点击配置文件-gt-gt-代理服务器"><a href="#2-4、打开Proxifier-gt-gt-点击配置文件-gt-gt-代理服务器" class="headerlink" title="2.4、打开Proxifier  &gt;&gt; 点击配置文件  &gt;&gt;  代理服务器"></a>2.4、打开Proxifier  &gt;&gt; 点击配置文件  &gt;&gt;  代理服务器</h4><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127110254912.png" alt="image-20220127110254912"></p><h4 id="2-5、添加代理服务器-gt-gt-输入公网ip（192-168-94-156）端口：3007-gt-gt-协议选择socks版本5-gt-gt-验证选择启用：（输入设置的basic用户名：admin-密码：-admin123）-gt-gt-点击检查"><a href="#2-5、添加代理服务器-gt-gt-输入公网ip（192-168-94-156）端口：3007-gt-gt-协议选择socks版本5-gt-gt-验证选择启用：（输入设置的basic用户名：admin-密码：-admin123）-gt-gt-点击检查" class="headerlink" title="2.5、添加代理服务器  &gt;&gt;  输入公网ip（192.168.94.156）端口：3007  &gt;&gt;  协议选择socks版本5  &gt;&gt;  验证选择启用：（输入设置的basic用户名：admin 密码： admin123） &gt;&gt;  点击检查"></a>2.5、添加代理服务器  &gt;&gt;  输入公网ip（192.168.94.156）端口：3007  &gt;&gt;  协议选择socks版本5  &gt;&gt;  验证选择启用：（输入设置的basic用户名：admin 密码： admin123） &gt;&gt;  点击检查</h4><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127110317058.png" alt="image-20220127110317058"></p><h4 id="2-6、显示通过以后-gt-gt-连接"><a href="#2-6、显示通过以后-gt-gt-连接" class="headerlink" title="2.6、显示通过以后  &gt;&gt;  连接"></a>2.6、显示通过以后  &gt;&gt;  连接</h4><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127110334282.png" alt="image-20220127110334282"></p><h4 id="2-7、连接后-gt-gt-点击代理规则，规则名称默认选择的为Localhost，或者自己新增规则名称（自己新增的话，可以根据自己的需求选择由哪个应用程序访问网络，我这边选择用qq浏览器访问该网络）-gt-gt-动作选择为刚刚我们socks的ip-gt-gt-点击确定"><a href="#2-7、连接后-gt-gt-点击代理规则，规则名称默认选择的为Localhost，或者自己新增规则名称（自己新增的话，可以根据自己的需求选择由哪个应用程序访问网络，我这边选择用qq浏览器访问该网络）-gt-gt-动作选择为刚刚我们socks的ip-gt-gt-点击确定" class="headerlink" title="2.7、连接后  &gt;&gt;  点击代理规则，规则名称默认选择的为Localhost，或者自己新增规则名称（自己新增的话，可以根据自己的需求选择由哪个应用程序访问网络，我这边选择用qq浏览器访问该网络） &gt;&gt;  动作选择为刚刚我们socks的ip  &gt;&gt;   点击确定"></a>2.7、连接后  &gt;&gt;  点击代理规则，规则名称默认选择的为Localhost，或者自己新增规则名称（自己新增的话，可以根据自己的需求选择由哪个应用程序访问网络，我这边选择用qq浏览器访问该网络） &gt;&gt;  动作选择为刚刚我们socks的ip  &gt;&gt;   点击确定</h4><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127110406976.png" alt="image-20220127110406976"></p><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127110441124.png" alt="image-20220127110441124"></p><h4 id="2-8、确定以后，就可以让在另一个地方的机器（不同网络下的机器）ping该内网机器ip（192-168-94-154）是否通，或者ssh连接该内网ip（192-168-94-154），或者直接访问该内网机器某些运行的服务。"><a href="#2-8、确定以后，就可以让在另一个地方的机器（不同网络下的机器）ping该内网机器ip（192-168-94-154）是否通，或者ssh连接该内网ip（192-168-94-154），或者直接访问该内网机器某些运行的服务。" class="headerlink" title="2.8、确定以后，就可以让在另一个地方的机器（不同网络下的机器）ping该内网机器ip（192.168.94.154）是否通，或者ssh连接该内网ip（192.168.94.154），或者直接访问该内网机器某些运行的服务。"></a>2.8、确定以后，就可以让在另一个地方的机器（不同网络下的机器）ping该内网机器ip（192.168.94.154）是否通，或者ssh连接该内网ip（192.168.94.154），或者直接访问该内网机器某些运行的服务。</h4><p><img src="/2023/04/10/%E4%B8%AD%E9%97%B4%E4%BB%B6/nps/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cnps%E3%80%81%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20220127110458832.png" alt="image-20220127110458832"></p><p>注：内网内其他的机器能返回数据，即已成功实现使用sock模式进行内网访问！</p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>nps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker-compose安装prometheus</title>
    <link href="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/docker-compose%E5%AE%89%E8%A3%85prometheus/"/>
    <url>/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/docker-compose%E5%AE%89%E8%A3%85prometheus/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker-compose安装prometheus"><a href="#使用docker-compose安装prometheus" class="headerlink" title="使用docker-compose安装prometheus"></a>使用docker-compose安装prometheus</h1><h2 id="docker-compose-yaml文件"><a href="#docker-compose-yaml文件" class="headerlink" title="docker-compose.yaml文件"></a>docker-compose.yaml文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">prometheus:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">prom/prometheus:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">monitoring_prometheus</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/prometheus/config:/etc/prometheus/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/prometheus/data:/prometheus</span><br>    <span class="hljs-attr">command:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;-config.file=/etc/prometheus/prometheus.yml&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;-storage.local.path=/prometheus&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;-alertmanager.url=http://alertmanager:9093&#x27;</span><br>    <span class="hljs-attr">expose:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">9090</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">9090</span><span class="hljs-string">:9090</span><br>    <span class="hljs-attr">links:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">cadvisor:cadvisor</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">node-exporter:node-exporter</span><br><br>  <span class="hljs-attr">node-exporter:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">prom/node-exporter:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">monitoring_node_exporter</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">expose:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">9100</span><br><br>  <span class="hljs-attr">cadvisor:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">google/cadvisor:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">monitoring_cadvisor</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/:/rootfs:ro</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run:/var/run:rw</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/sys:/sys:ro</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/lib/docker/:/var/lib/docker:ro</span><br>    <span class="hljs-attr">expose:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><br>  <br>  <span class="hljs-attr">grafana:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">grafana/grafana:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">monitoring_grafana</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">links:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">prometheus:prometheus</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/grafana:/var/lib/grafana</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">GF_SECURITY_ADMIN_PASSWORD=MYPASSWORT</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">GF_USERS_ALLOW_SIGN_UP=false</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">GF_SERVER_DOMAIN=myrul.com</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">GF_SMTP_ENABLED=true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">GF_SMTP_HOST=smtp.gmail.com:587</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">GF_SMTP_USER=myadrress@gmail.com</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">GF_SMTP_PASSWORD=mypassword</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">GF_SMTP_FROM_ADDRESS=myaddress@gmail.com</span><br></code></pre></td></tr></table></figure><h2 id="映射出来的配置文件prometheus-yml"><a href="#映射出来的配置文件prometheus-yml" class="headerlink" title="映射出来的配置文件prometheus.yml"></a>映射出来的配置文件<code>prometheus.yml</code></h2><p>附上prometheus.yml文件参数详细解释：<a href="https://blog.51cto.com/shijianfeng/5151307">https://blog.51cto.com/shijianfeng/5151307</a></p><p>以下为示例文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># my global config</span><br><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">scrape_interval:</span>     <span class="hljs-string">120s</span> <span class="hljs-comment"># 默认情况下，每 15 秒抓取一次目标</span><br>  <span class="hljs-attr">evaluation_interval:</span> <span class="hljs-string">120s</span> <span class="hljs-comment"># 默认情况下，每 15 秒抓取一次目标</span><br>  <span class="hljs-comment"># scrape_timeout 设置为全局默认值（10 秒）。</span><br><br>  <span class="hljs-comment"># Attach these labels to any time series or alerts when communicating with</span><br>  <span class="hljs-comment"># external systems (federation, remote storage, Alertmanager).</span><br>  <span class="hljs-attr">external_labels:</span><br>      <span class="hljs-attr">monitor:</span> <span class="hljs-string">&#x27;my-project&#x27;</span><br><br><span class="hljs-comment"># Load and evaluate rules in this file every &#x27;evaluation_interval&#x27; seconds.</span><br><span class="hljs-attr">rule_files:</span><br>  <span class="hljs-comment"># - &quot;alert.rules&quot;</span><br>  <span class="hljs-comment"># - &quot;first.rules&quot;</span><br>  <span class="hljs-comment"># - &quot;second.rules&quot;</span><br><br><span class="hljs-comment"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="hljs-comment"># Here it&#x27;s Prometheus itself.</span><br><span class="hljs-attr">scrape_configs:</span><br>  <span class="hljs-comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;prometheus&#x27;</span><br><br>    <span class="hljs-comment"># Override the global default and scrape targets from this job every 5 seconds.</span><br>    <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">120s</span><br><br>    <span class="hljs-comment"># metrics_path defaults to &#x27;/metrics&#x27;</span><br>    <span class="hljs-comment"># scheme defaults to &#x27;http&#x27;.</span><br><br>    <span class="hljs-attr">static_configs:</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;localhost:9090&#x27;</span>,<span class="hljs-string">&#x27;cadvisor:8080&#x27;</span>,<span class="hljs-string">&#x27;node-exporter:9100&#x27;</span>, <span class="hljs-string">&#x27;nginx-exporter:9113&#x27;</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>监控</category>
      
      <category>prometheus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装Prometheus之部署组件以及模板</title>
    <link href="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/"/>
    <url>/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker安装Prometheus之部署组件及模板、邮件通知"><a href="#Docker安装Prometheus之部署组件及模板、邮件通知" class="headerlink" title="Docker安装Prometheus之部署组件及模板、邮件通知"></a>Docker安装Prometheus之部署组件及模板、邮件通知</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档1：https://www.freesion.com/article/7143903065/<br>参考文档2：https://www.freesion.com/article/4040903004/<br><br>其他参考文档：https://blog.csdn.net/weixin_43909790/article/details/126562341<br></code></pre></td></tr></table></figure><p><strong>环境：(全部关闭防火墙，禁用selinux)</strong></p><table><thead><tr><th>服务器节点名称</th><th>ip地址</th><th>安装组件</th></tr></thead><tbody><tr><td>Docker1</td><td>192.168.94.154</td><td>nodeExporter,Cadvisor,grafana,Prometheus server</td></tr><tr><td>Docker2</td><td>192.168.94.155</td><td>nodeExporter,Cadvisor</td></tr><tr><td>Docker3</td><td>192.168.94.156</td><td>nodeExporter,Cadvisor</td></tr></tbody></table><p><strong>需要部署的组件：</strong></p><ul><li>Prometheus server:普罗米修斯的主服务器</li><li>nodeexporter:负责收集host硬件信息和操作系统信息</li><li>CAdvisor:负责收集host上运行的容器信息</li><li>grafana:负责展示普罗米修斯监控界面</li></ul><h2 id="一、部署基础的组件（Prometheus-grafana）"><a href="#一、部署基础的组件（Prometheus-grafana）" class="headerlink" title="一、部署基础的组件（Prometheus +  grafana）"></a>一、部署基础的组件（Prometheus +  grafana）</h2><h3 id="1、）将三个服务器节点，全部部署node-exporter和cadvisor"><a href="#1、）将三个服务器节点，全部部署node-exporter和cadvisor" class="headerlink" title="1、）将三个服务器节点，全部部署node-exporter和cadvisor"></a>1、）将三个服务器节点，全部部署node-exporter和cadvisor</h3><h4 id="1-1、部署node-exporter"><a href="#1-1、部署node-exporter" class="headerlink" title="1.1、部署node-exporter"></a>1.1、部署node-exporter</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d -p 9100:9100 \<br>-v /proc:/host/proc \<br>-v /sys:/host/sys \<br>-v /:/rootfs \<br>--name node-exporter \<br>--net=host prom/node-exporter \<br><span class="hljs-comment">#--web.listen-address=:7100 设置端口为7100</span><br>--path.procfs /host/proc --path.sysfs /host/sys --collector.filesystem.ignored-mount-points <span class="hljs-string">&quot;^/(sys|proc|dev|host|etc)($|/)&quot;</span><br></code></pre></td></tr></table></figure><p>注意：这里使用了–net&#x3D;host，这样prometheus   server 可以直接与node-exporter通信。<br>docker ps 可以看到有一个image为：prom&#x2F;node-exporter的镜像运行</p><h4 id="1-2、部署安装cadvisor-收集节点容器信息：（在浏览器上验证，猫头鹰头像）"><a href="#1-2、部署安装cadvisor-收集节点容器信息：（在浏览器上验证，猫头鹰头像）" class="headerlink" title="1.2、部署安装cadvisor,收集节点容器信息：（在浏览器上验证，猫头鹰头像）"></a>1.2、部署安装cadvisor,收集节点容器信息：（在浏览器上验证，猫头鹰头像）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -v /:/rootfs:ro \<br>-v /var/run:/var/run/:rw \<br>-v /sys:/sys:ro \<br>-v /var/lib/docker:/var/lib/docker:ro \<br>-p 8080:8080 \<br>--detach=<span class="hljs-literal">true</span> \<br>--name=cadvisor \<br>--net=host google/cadvisor<br></code></pre></td></tr></table></figure><p>运行完成后，可以访问ip+9100端口显示：Node Exporter</p><h3 id="2、）在docker1上部署prometheus-server服务：在部署prometheus之前，我们需要对它的配置文件进行修改，所以我们先运行一个容器，先将其配置文件拷贝出来"><a href="#2、）在docker1上部署prometheus-server服务：在部署prometheus之前，我们需要对它的配置文件进行修改，所以我们先运行一个容器，先将其配置文件拷贝出来" class="headerlink" title="2、）在docker1上部署prometheus server服务：在部署prometheus之前，我们需要对它的配置文件进行修改，所以我们先运行一个容器，先将其配置文件拷贝出来**"></a>2、）在docker1上部署prometheus server服务：在部署prometheus之前，我们需要对它的配置文件进行修改，所以我们先运行一个容器，先将其配置文件拷贝出来**</h3><h4 id="2-1、创建文件目录，并临时运行一个容器"><a href="#2-1、创建文件目录，并临时运行一个容器" class="headerlink" title="2.1、创建文件目录，并临时运行一个容器"></a>2.1、创建文件目录，并临时运行一个容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app<br>docker run -d -p 9090:9090 --name prometheus --net=host prom/prometheus<br><span class="hljs-comment">#docker exec -it prometheus /bin/sh</span><br></code></pre></td></tr></table></figure><p>将容器内的prometheus.yml拷贝到&#x2F;app目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">cp</span> prometheus:/etc/prometheus/prometheus.yml ./<br></code></pre></td></tr></table></figure><h4 id="2-2、修改prometheus-yml文件"><a href="#2-2、修改prometheus-yml文件" class="headerlink" title="2.2、修改prometheus.yml文件"></a>2.2、修改prometheus.yml文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#第29行，这里指定了promethus的监控项，包括它也会监控自己收集到的数据。</span><br>    - targets：[<span class="hljs-string">&#x27;localhost:9090&#x27;</span>,<span class="hljs-string">&#x27;localhost:8080&#x27;</span>,<span class="hljs-string">&#x27;localhost:9100&#x27;</span>,<span class="hljs-string">&#x27;192.168.94.155:8080&#x27;</span>,<span class="hljs-string">&#x27;192.168.94.155:9100&#x27;</span>,<span class="hljs-string">&#x27;192.168.94.156:8080&#x27;</span>,<span class="hljs-string">&#x27;192.168.94.156:9100&#x27;</span>]  <br></code></pre></td></tr></table></figure><h4 id="2-3、删除临时运行的容器。重新运行，并指定prometheus-yml配置文件"><a href="#2-3、删除临时运行的容器。重新运行，并指定prometheus-yml配置文件" class="headerlink" title="2.3、删除临时运行的容器。重新运行，并指定prometheus.yml配置文件"></a>2.3、删除临时运行的容器。重新运行，并指定prometheus.yml配置文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">rm</span> -f prometheus<br>docker run -d -p 9090:9090 --name prometheus --restart=always --net=host -v /app/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus<br></code></pre></td></tr></table></figure><p>备注:在浏览器上访问我们的docker1服务器：192.168.94.154:9090 点击status–targets这里能够查看到我们各个监控项：</p><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/2.3.png" alt="5398e3e3f9e82616ba8a567998bcdd39.png"></p><h3 id="3、）在docker1上，部署gragana服务，用来展示prometheus"><a href="#3、）在docker1上，部署gragana服务，用来展示prometheus" class="headerlink" title="3、）在docker1上，部署gragana服务，用来展示prometheus"></a>3、）在docker1上，部署gragana服务，用来展示prometheus</h3><h4 id="3-1、创建挂载目录，并设置权限"><a href="#3-1、创建挂载目录，并设置权限" class="headerlink" title="3.1、创建挂载目录，并设置权限"></a>3.1、创建挂载目录，并设置权限</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /app/grafana-storage<br><span class="hljs-built_in">chmod</span> 777 -R /app/grafana-storage<br></code></pre></td></tr></table></figure><h4 id="3-2、运行grafana服务"><a href="#3-2、运行grafana服务" class="headerlink" title="3.2、运行grafana服务"></a>3.2、运行grafana服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d -p 3000:3000 --name grafana  --restart=always -v /app/grafana-storage:/var/lib/grafana -e <span class="hljs-string">&quot;GF_SECURITY_ADMIN_PASSWORD=123456&quot;</span> grafana/grafana<br></code></pre></td></tr></table></figure><p>登录：192.168.94.154:3000 输入账号密码登录：admin&#x2F;123456</p><h3 id="4、）配置prometheus和grafana连接"><a href="#4、）配置prometheus和grafana连接" class="headerlink" title="4、）配置prometheus和grafana连接"></a>4、）配置prometheus和grafana连接</h3><h4 id="4-1、登录成功后-gt-gt-添加数据源"><a href="#4-1、登录成功后-gt-gt-添加数据源" class="headerlink" title="4.1、登录成功后&gt;&gt;添加数据源"></a>4.1、登录成功后&gt;&gt;添加数据源</h4><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20220222163231173.png" alt="image-20220222163231173"></p><h4 id="4-2、选择Prometheus源-gt-gt-自定义名称和源地址-gt-gt-选择”save-amp-test”"><a href="#4-2、选择Prometheus源-gt-gt-自定义名称和源地址-gt-gt-选择”save-amp-test”" class="headerlink" title="4.2、选择Prometheus源&gt;&gt;自定义名称和源地址&gt;&gt;选择”save &amp; test”"></a>4.2、选择Prometheus源&gt;&gt;自定义名称和源地址&gt;&gt;选择”save &amp; test”</h4><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20220222163321309.png" alt="image-20220222163321309"></p><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20220222163703942.png" alt="image-20220222163703942"></p><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20220222163923398.png" alt="image-20220222163923398"></p><h4 id="4-3、grafana官方为我们提供了一些模板，提供数据展示，"><a href="#4-3、grafana官方为我们提供了一些模板，提供数据展示，" class="headerlink" title="4.3、grafana官方为我们提供了一些模板，提供数据展示，"></a>4.3、grafana官方为我们提供了一些模板，提供数据展示，</h4><p>地址：<a href="https://grafana.com/grafana/dashboards/?pg=community&plcmt=topnav">https://grafana.com/grafana/dashboards/?pg=community&amp;plcmt=topnav</a></p><h5 id="4-3-1、打开官网后，选择“Dashboards”-gt-gt-选择DataSource为Prometheus后搜索“docker”-gt-gt-选择模板"><a href="#4-3-1、打开官网后，选择“Dashboards”-gt-gt-选择DataSource为Prometheus后搜索“docker”-gt-gt-选择模板" class="headerlink" title="4.3.1、打开官网后，选择“Dashboards”&gt;&gt;选择DataSource为Prometheus后搜索“docker”&gt;&gt;选择模板"></a>4.3.1、打开官网后，选择“Dashboards”&gt;&gt;选择DataSource为Prometheus后搜索“docker”&gt;&gt;选择模板</h5><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20220222164300151.png" alt="image-20220222164300151"></p><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20220222164423204.png" alt="image-20220222164423204"></p><h5 id="4-3-2、复制ID或者下载JSON文件-gt-gt-打开grafana，选择Import-gt-gt-输入ID或者上传JSON-gt-gt-选择数据源即可"><a href="#4-3-2、复制ID或者下载JSON文件-gt-gt-打开grafana，选择Import-gt-gt-输入ID或者上传JSON-gt-gt-选择数据源即可" class="headerlink" title="4.3.2、复制ID或者下载JSON文件&gt;&gt;打开grafana，选择Import &gt;&gt;输入ID或者上传JSON&gt;&gt;选择数据源即可"></a>4.3.2、复制ID或者下载JSON文件&gt;&gt;打开grafana，选择Import &gt;&gt;输入ID或者上传JSON&gt;&gt;选择数据源即可</h5><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20220222164826393.png" alt="image-20220222164826393"></p><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20220222164938738.png" alt="image-20220222164938738"></p><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20220222165201800.png" alt="image-20220222165201800"></p><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20220222165755007.png" alt="image-20220222165755007"></p><h2 id="二、部署监控及邮件、钉钉飞书报警"><a href="#二、部署监控及邮件、钉钉飞书报警" class="headerlink" title="二、部署监控及邮件、钉钉飞书报警"></a>二、部署监控及邮件、钉钉飞书报警</h2><p>在<strong>docker1</strong>上部署AlertManager报警插件。</p><h3 id="1、）配置alertmanager"><a href="#1、）配置alertmanager" class="headerlink" title="1、）配置alertmanager:"></a>1、）配置alertmanager:</h3><p><strong>alertmanager</strong>：用来接收<strong>prometheus</strong>发送的报警信息，并且执行设置好的报警方式，报警内容。</p><p><strong>Prometheus</strong>的报警方式有好几种方式，如：邮箱、钉钉、微信等。</p><h4 id="以下采用邮箱报警："><a href="#以下采用邮箱报警：" class="headerlink" title="以下采用邮箱报警："></a>以下采用邮箱报警：</h4><h4 id="1-1、拉取AlertManager的镜像："><a href="#1-1、拉取AlertManager的镜像：" class="headerlink" title="1.1、拉取AlertManager的镜像："></a>1.1、拉取AlertManager的镜像：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@docker1 ~]<span class="hljs-comment"># docker pull prom/alertmanager</span><br>[root@docker1 ~]<span class="hljs-comment"># docker images</span><br>prom/alertmanager    latest              30594e96cbe8        3 months ago        53.2MB<br></code></pre></td></tr></table></figure><h4 id="1-2、先运行一个容器，将配置文件导出到本地。"><a href="#1-2、先运行一个容器，将配置文件导出到本地。" class="headerlink" title="1.2、先运行一个容器，将配置文件导出到本地。"></a>1.2、先运行一个容器，将配置文件导出到本地。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@docker1 ~]<span class="hljs-comment"># docker run -d --name alertmanager -p 9300:9300 prom/alertmanager</span><br><br>[root@docker1 ~]<span class="hljs-comment"># docker cp alertmanager:/etc/alertmanager/alertmanager.yml /app/prometheus/</span><br><span class="hljs-comment">#将容器中的配置文件复制到本地/app/prometheus/目录下</span><br></code></pre></td></tr></table></figure><h4 id="1-3、修改配置文件，修改后的配置文件如下："><a href="#1-3、修改配置文件，修改后的配置文件如下：" class="headerlink" title="1.3、修改配置文件，修改后的配置文件如下："></a>1.3、修改配置文件，修改后的配置文件如下：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@docker ~]<span class="hljs-comment"># cat /app/prometheus/alertmanager.yml </span><br>global:<br>  resolve_timeout: 5m        <span class="hljs-comment">#处理超时时间，默认为5min              </span><br>  smtp_from: <span class="hljs-string">&#x27;1962821461@qq.com&#x27;</span>                 <span class="hljs-comment">###发送者信息</span><br>  smtp_smarthost: <span class="hljs-string">&#x27;smtp.qq.com:465&#x27;</span>             <span class="hljs-comment">###qq邮箱的SMTP服务器地址</span><br>  smtp_auth_username: <span class="hljs-string">&#x27;1962821461@qq.com&#x27;</span><span class="hljs-comment">###接收者信息</span><br>  smtp_auth_password: <span class="hljs-string">&#x27;shouquanma&#x27;</span><span class="hljs-comment">###使用qq邮箱生成的授权码</span><br>  smtp_require_tls: <span class="hljs-literal">false</span><br>  smtp_hello: <span class="hljs-string">&#x27;qq.com&#x27;</span><br>route:<br>  group_by: [<span class="hljs-string">&#x27;alertname&#x27;</span>] <br>  group_wait: 5s<br>  group_interval: 5s<br>  repeat_interval: 5m<br>  receiver: <span class="hljs-string">&#x27;email&#x27;</span><br>receivers:<br>- name: <span class="hljs-string">&#x27;email&#x27;</span><br>  email_configs:<br>  - to: <span class="hljs-string">&#x27;1962821461@qq.com&#x27;</span><span class="hljs-comment">###发送者信息</span><br>    send_resolved: <span class="hljs-literal">true</span><br>inhibit_rules:<br>  - source_match:<br>      severity: <span class="hljs-string">&#x27;critical&#x27;</span><br>    target_match:<br>      severity: <span class="hljs-string">&#x27;warning&#x27;</span><br>    equal: [<span class="hljs-string">&#x27;alertname&#x27;</span>, <span class="hljs-string">&#x27;dev&#x27;</span>, <span class="hljs-string">&#x27;instance&#x27;</span>]<br></code></pre></td></tr></table></figure><p><strong>AlertManager.yml</strong>配置文件详解：</p><ul><li>global：全局配置，包括报警解决后的超时时间、<strong>SMTP</strong>相关配置、各种渠道通知的<strong>API</strong>地址等新消息。</li><li>route：用来设置报警的分发策略。</li><li>receivers：配置告警消息接收者信息。<br>​- inhibit_rules：抑制规则配置，当存在于另一组匹配的警报时，抑制规则将禁用于一组匹配的警报。</li></ul><h4 id="1-4、删除刚刚运行的容器（alertmanager）。"><a href="#1-4、删除刚刚运行的容器（alertmanager）。" class="headerlink" title="1.4、删除刚刚运行的容器（alertmanager）。"></a>1.4、删除刚刚运行的容器（alertmanager）。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@docker1 ~]<span class="hljs-comment"># docker rm -f alertmanager </span><br>Alertmanager<br> <br>重新运行容器：<br>[root@docker1 ~]<span class="hljs-comment"># docker run -d --name alertmanager --restart=always -p 9093:9093 -v /app/prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml prom/alertmanager</span><br> <br></code></pre></td></tr></table></figure><h4 id="1-5、Prometheus配置alertmanager报警规则："><a href="#1-5、Prometheus配置alertmanager报警规则：" class="headerlink" title="1.5、Prometheus配置alertmanager报警规则："></a>1.5、Prometheus配置alertmanager报警规则：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@docker1 ~]<span class="hljs-comment"># mkdir -p /app/prometheus/rules</span><br>[root@docker1 ~]<span class="hljs-comment"># cd /app/prometheus/rules/</span><br>[root@docker1 rules]<span class="hljs-comment"># vim node-up.rules </span><br><span class="hljs-built_in">groups</span>:<br>- name: node-up<br>  rules:<br>  - alert: node-up<br>    <span class="hljs-built_in">expr</span>: up&#123;job=<span class="hljs-string">&quot;prometheus&quot;</span>&#125; == 0<span class="hljs-comment">#必须与prometheus中配置文件（yml文件）中的  - job_name: &#x27;prometheus&#x27; 一样。可执行【cat /app/prometheus.yml | grep  job】查看。</span><br>    <span class="hljs-keyword">for</span>: 15s<br>    labels:<br>      severity: 1<br>      team: node<br>    annotations:<br>      summary: <span class="hljs-string">&quot;&#123;&#123; <span class="hljs-variable">$labels</span>.instance &#125;&#125; 已停止运行超过 15s！&quot;</span><br></code></pre></td></tr></table></figure><p>​#具体的规则怎么写，在官网文档上有规则模板：<a href="https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/">https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/</a></p><h4 id="1-6、配置完报警规则后，编辑prometheus的配置文件（本地挂载的）"><a href="#1-6、配置完报警规则后，编辑prometheus的配置文件（本地挂载的）" class="headerlink" title="1.6、配置完报警规则后，编辑prometheus的配置文件（本地挂载的）"></a>1.6、配置完报警规则后，编辑prometheus的配置文件（本地挂载的）</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@docker01</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># vim /app/prometheus.yml </span><br><span class="hljs-comment"># Alertmanager configuration</span><br><span class="hljs-attr">alerting:</span><br>  <span class="hljs-attr">alertmanagers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">static_configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.94</span><span class="hljs-number">.154</span><span class="hljs-string">:9093</span><span class="hljs-comment">#修改这一行。必须格外注意配置文件的格式，注意缩进。</span><br>      <br><span class="hljs-attr">rule_files:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/usr/local/prometheus/rules/*.rules&quot;</span><span class="hljs-comment">#添加该行，此为容器内的路径，是我们刚刚定义的报警规则。</span><br>  <span class="hljs-comment"># - &quot;first_rules.yml&quot;</span><br>  <span class="hljs-comment"># - &quot;second_rules.yml&quot;</span><br></code></pre></td></tr></table></figure><h4 id="1-7、删除Prometheus的容器："><a href="#1-7、删除Prometheus的容器：" class="headerlink" title="1.7、删除Prometheus的容器："></a>1.7、删除Prometheus的容器：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">rm</span> -f prometheus <br></code></pre></td></tr></table></figure><h4 id="1-8、重新运行prometheus容器："><a href="#1-8、重新运行prometheus容器：" class="headerlink" title="1.8、重新运行prometheus容器："></a>1.8、重新运行prometheus容器：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d -p 9090:9090 --name prometheus  --restart=always --net=host \<br>-v /app/prometheus.yml:/etc/prometheus/prometheus.yml \<br>-v /app/prometheus/rules:/usr/local/prometheus/rules  prom/prometheus<br></code></pre></td></tr></table></figure><h3 id="2、）创建监控规则，使用email报警方式。监控服务运行状态，如果服务节点down机状态，则发送邮件。"><a href="#2、）创建监控规则，使用email报警方式。监控服务运行状态，如果服务节点down机状态，则发送邮件。" class="headerlink" title="2、）创建监控规则，使用email报警方式。监控服务运行状态，如果服务节点down机状态，则发送邮件。"></a>2、）创建监控规则，使用email报警方式。监控服务运行状态，如果服务节点down机状态，则发送邮件。</h3><h4 id="2-1、访问：http-192-168-94-154-9090-rules，验证查询报警规则"><a href="#2-1、访问：http-192-168-94-154-9090-rules，验证查询报警规则" class="headerlink" title="2.1、访问：http://192.168.94.154:9090/rules，验证查询报警规则"></a>2.1、访问：<a href="http://192.168.94.154:9090/rules%EF%BC%8C%E9%AA%8C%E8%AF%81%E6%9F%A5%E8%AF%A2%E6%8A%A5%E8%AD%A6%E8%A7%84%E5%88%99">http://192.168.94.154:9090/rules，验证查询报警规则</a></h4><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20220302153227063.png" alt="image-20220302153227063"></p><h4 id="2-2、将docker3机器的node-exporter服务停止，测试是否会推送邮件。"><a href="#2-2、将docker3机器的node-exporter服务停止，测试是否会推送邮件。" class="headerlink" title="2.2、将docker3机器的node-exporter服务停止，测试是否会推送邮件。"></a>2.2、将docker3机器的node-exporter服务停止，测试是否会推送邮件。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@docker3 ~]<span class="hljs-comment"># docker stop node-exporter </span><br></code></pre></td></tr></table></figure><p>会推送邮件到指定的邮件接收人:</p><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20220302153640005.png" alt="image-20220302153640005"></p><p><strong>Altermanager配置自定义邮件模板</strong></p><p><code>可参考文档：https://www.appblog.cn/2019/09/09/Prometheus%20+%20Alertmanager%20%E6%8A%A5%E8%AD%A6%E5%AE%9E%E7%8E%B0%EF%BC%88email%E6%8A%A5%E8%AD%A6%EF%BC%89/</code></p><h4 id="2-3、创建文件夹，存放email-tmpl"><a href="#2-3、创建文件夹，存放email-tmpl" class="headerlink" title="2.3、创建文件夹，存放email.tmpl"></a>2.3、创建文件夹，存放email.tmpl</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@docker01 prometheus]<span class="hljs-comment"># mkdir -p  /app/prometheus/alertmanager-tmpl</span><br>[root@docker01 prometheus]<span class="hljs-comment"># ls</span><br>alertmanager-tmpl  rules<br>[root@docker01 prometheus]<span class="hljs-comment"># cd alertmanager-tmpl/</span><br>[root@docker01 alertmanager-tmpl]<span class="hljs-comment"># vim email.tmpl</span><br>&#123;&#123; define <span class="hljs-string">&quot;email.html&quot;</span> &#125;&#125;<br>&lt;table border=<span class="hljs-string">&quot;1&quot;</span>&gt;<br>    &lt;<span class="hljs-built_in">tr</span>&gt;<br>        &lt;td&gt;报警项&lt;/td&gt;<br>        &lt;td&gt;告警级别&lt;/td&gt;<br>        &lt;td&gt;故障主机&lt;/td&gt;<br>        &lt;td&gt;告警主题&lt;/td&gt;<br>        &lt;td&gt;触发时间&lt;/td&gt;<br>    &lt;/tr&gt;<br>    &#123;&#123; range <span class="hljs-variable">$i</span>, <span class="hljs-variable">$alert</span> := .Alerts &#125;&#125;<br>        &lt;<span class="hljs-built_in">tr</span>&gt;<br>            &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Labels <span class="hljs-string">&quot;alertname&quot;</span> &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Labels <span class="hljs-string">&quot;severity&quot;</span> &#125;&#125;级&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Labels <span class="hljs-string">&quot;instance&quot;</span> &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Annotations <span class="hljs-string">&quot;summary&quot;</span> &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; <span class="hljs-variable">$alert</span>.StartsAt &#125;&#125;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &#123;&#123; end &#125;&#125;<br>&lt;/table&gt;<br>&#123;&#123; end &#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4、编辑完成后，保存退出，编辑alertmanager配置文件。"><a href="#2-4、编辑完成后，保存退出，编辑alertmanager配置文件。" class="headerlink" title="2.4、编辑完成后，保存退出，编辑alertmanager配置文件。"></a>2.4、编辑完成后，保存退出，编辑alertmanager配置文件。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@docker01 ~]<span class="hljs-comment"># vim /app/prometheus/alertmanager.yml </span><br>global:<br>  resolve_timeout: 5m<br>  smtp_from: <span class="hljs-string">&#x27;1962821461@qq.com&#x27;</span>                 <span class="hljs-comment">###发送者信息</span><br>  smtp_smarthost: <span class="hljs-string">&#x27;smtp.qq.com:465&#x27;</span>             <span class="hljs-comment">###qq邮箱的SMTP服务器地址</span><br>  smtp_auth_username: <span class="hljs-string">&#x27;1962821461@qq.com&#x27;</span>                <span class="hljs-comment">###接收者信息</span><br>  smtp_auth_password: <span class="hljs-string">&#x27;iehrzrphebqmgace&#x27;</span>                <span class="hljs-comment">###使用qq邮箱生成的授权码</span><br>  smtp_require_tls: <span class="hljs-literal">false</span><br>  smtp_hello: <span class="hljs-string">&#x27;qq.com&#x27;</span><br>templates:               <span class="hljs-comment">#添加此行</span><br>  - <span class="hljs-string">&#x27;/etc/alertmanager-tmpl/*.tmpl&#x27;</span>     <span class="hljs-comment">#容器内的路径，需要去挂载一下。</span><br>route:<br>  group_by: [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br>  group_wait: 5s<br>  group_interval: 5s<br>  repeat_interval: 5m<br>  receiver: <span class="hljs-string">&#x27;email&#x27;</span><br>receivers:<br>- name: <span class="hljs-string">&#x27;email&#x27;</span><br>  email_configs:<br> - to: <span class="hljs-string">&#x27;&#123;&#123; template &quot;email.to&quot; &#125;&#125;&#x27;</span>  <span class="hljs-comment">#接收警报的email配置，也可以直接写邮箱地址，例如：  - to: &#x27;1962821461@qq.com&#x27;</span><br>    html: <span class="hljs-string">&#x27;&#123;&#123; template &quot;email.html&quot; . &#125;&#125;&#x27;</span><span class="hljs-comment">#设定邮箱的内容模板，必须和email.tmpl中的&#123;&#123; define &quot;email.html&quot; &#125;&#125; 对应</span><br>    headers: &#123; Subject: <span class="hljs-string">&quot;[WARN] 报警邮件&quot;</span>&#125;   <span class="hljs-comment">## 接收邮件的标题</span><br>    send_resolved: <span class="hljs-literal">true</span><br>inhibit_rules:<br>  - source_match:<br>      severity: <span class="hljs-string">&#x27;critical&#x27;</span><br>    target_match:<br>      severity: <span class="hljs-string">&#x27;warning&#x27;</span><br>    equal: [<span class="hljs-string">&#x27;alertname&#x27;</span>, <span class="hljs-string">&#x27;dev&#x27;</span>, <span class="hljs-string">&#x27;instance&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="2-5、将alertmanager容器删除，重新运行。重新运行alertmanager容器，并挂载模板文件。"><a href="#2-5、将alertmanager容器删除，重新运行。重新运行alertmanager容器，并挂载模板文件。" class="headerlink" title="2.5、将alertmanager容器删除，重新运行。重新运行alertmanager容器，并挂载模板文件。"></a>2.5、将alertmanager容器删除，重新运行。重新运行alertmanager容器，并挂载模板文件。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">rm</span> -f alertmanager<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name alertmanger --restart=always -p 9093:9093 -v /app/prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml -v /app/prometheus/alertmanager-tmpl:/etc/alertmanager-tmpl \<br>prom/alertmanager<br></code></pre></td></tr></table></figure><h4 id="2-6、邮件可接收到如下信息。"><a href="#2-6、邮件可接收到如下信息。" class="headerlink" title="2.6、邮件可接收到如下信息。"></a>2.6、邮件可接收到如下信息。</h4><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20220302170928150.png" alt="image-20220302170928150"></p><h3 id="3、）融合邮件-lark飞书、钉钉同时告警（需要安装prometheus-alert）"><a href="#3、）融合邮件-lark飞书、钉钉同时告警（需要安装prometheus-alert）" class="headerlink" title="3、）融合邮件+lark飞书、钉钉同时告警（需要安装prometheus-alert）**"></a>3、）融合邮件+lark飞书、钉钉同时告警（需要安装prometheus-alert）**</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://blog.csdn.net/yyuggjggg/article/details/122862496<br>参考文档：https://feiyu563.gitbook.io/prometheusalert/base-install<br></code></pre></td></tr></table></figure><h4 id="3-1、使用docker运行prometheus-alert"><a href="#3-1、使用docker运行prometheus-alert" class="headerlink" title="3.1、使用docker运行prometheus-alert"></a>3.1、使用docker运行prometheus-alert</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建配置文件</span><br><span class="hljs-built_in">mkdir</span> /etc/prometheusalert-center/<br>wget https://raw.githubusercontent.com/feiyu563/PrometheusAlert/master/conf/app-example.conf -O /etc/prometheusalert-center/app.conf<br><br><span class="hljs-comment">#启动PrometheusAlert并挂载配置文件</span><br>docker run -d -p 9999:8080 -v /etc/prometheusalert-center:/app/conf --name prometheusalert-center feiyu563/prometheus-alert:latest<br><br><span class="hljs-comment">#启动后可使用浏览器打开以下地址查看：http://127.0.0.1:9999</span><br><span class="hljs-comment">#默认登录帐号和密码在app.conf中有配置：</span><br><span class="hljs-comment">#账号：密码</span><br>login_user=prometheusalert          <br><span class="hljs-comment">#............                                                                                  </span><br>login_password=prometheusalert <br><br><br><span class="hljs-comment">#以下为设置环境变量传参</span><br>docker run -d \<br>-p 8080:8080 \<br>-e PA_LOGIN_USER=prometheusalert \<br>-e PA_LOGIN_PASSWORD=prometheusalert \<br>-e PA_TITLE=PrometheusAlert \<br>-e PA_OPEN_FEISHU=1 \<br>-e PA_OPEN_DINGDING=1 \<br>-e PA_OPEN_WEIXIN=1 \<br>feiyu563/prometheus-alert:latest<br><span class="hljs-comment">#设置的账号密码为：prometheusalert</span><br></code></pre></td></tr></table></figure><h4 id="3-2、运行后打开prometheus-alert并登录"><a href="#3-2、运行后打开prometheus-alert并登录" class="headerlink" title="3.2、运行后打开prometheus-alert并登录"></a>3.2、运行后打开prometheus-alert并登录</h4><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20221216113452790.png" alt="image-20221216113452790"></p><h4 id="3-3、根据自己需求，复制默认自带的模板路径url（也可自己添加模板，自己添加模板步骤已略过）"><a href="#3-3、根据自己需求，复制默认自带的模板路径url（也可自己添加模板，自己添加模板步骤已略过）" class="headerlink" title="3.3、根据自己需求，复制默认自带的模板路径url（也可自己添加模板，自己添加模板步骤已略过）"></a>3.3、根据自己需求，复制默认自带的模板路径url（也可自己添加模板，自己添加模板步骤已略过）</h4><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20221216113631968.png" alt="image-20221216113631968"></p><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20221216120124489.png" alt="image-20221216120124489"></p><p>例如我的为：<a href="http://192.168.62.128:9999/prometheusalert?type=fs&tpl=prometheus-fsv2&fsurl=https://open.larksuite.com/open-apis/bot/v2/hook/00af844f-26a1-4f20-8a36-ec31e4879eab">http://192.168.62.128:9999/prometheusalert?type=fs&amp;tpl=prometheus-fsv2&amp;fsurl=https://open.larksuite.com/open-apis/bot/v2/hook/00af844f-26a1-4f20-8a36-ec31e4879eab</a></p><h4 id="3-4、编辑alertmanager配置文件"><a href="#3-4、编辑alertmanager配置文件" class="headerlink" title="3.4、编辑alertmanager配置文件"></a>3.4、编辑alertmanager配置文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@localhost ~]<span class="hljs-comment"># cat /app/prometheus/alertmanager.yml</span><br>global:<br>  resolve_timeout: 5m<br>  smtp_from: <span class="hljs-string">&#x27;1962821461@qq.com&#x27;</span>                 <span class="hljs-comment">###发送者信息</span><br>  smtp_smarthost: <span class="hljs-string">&#x27;smtp.qq.com:465&#x27;</span>             <span class="hljs-comment">###qq邮箱的SMTP服务器地址</span><br>  smtp_auth_username: <span class="hljs-string">&#x27;1962821461@qq.com&#x27;</span>                <span class="hljs-comment">###接收者信息</span><br>  smtp_auth_password: <span class="hljs-string">&#x27;iehrzrphebqmgace&#x27;</span>                <span class="hljs-comment">###使用qq邮箱生成的授权码</span><br>  smtp_require_tls: <span class="hljs-literal">false</span><br>  smtp_hello: <span class="hljs-string">&#x27;qq.com&#x27;</span><br>templates:               <span class="hljs-comment">#添加此行</span><br>  - <span class="hljs-string">&#x27;/etc/alertmanager-tmpl/*.tmpl&#x27;</span>     <span class="hljs-comment">#容器内的路径，需要去挂载一下。</span><br>route:<br>  group_by: [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br>  group_wait: 5s<br>  group_interval: 5s<br>  repeat_interval: 15s<br>  receiver: <span class="hljs-string">&#x27;email&#x27;</span><br>  <br>receivers:<br>- name: <span class="hljs-string">&#x27;email&#x27;</span><br>  email_configs:<br>  - to: <span class="hljs-string">&#x27;1962821461@qq.com&#x27;</span>  <span class="hljs-comment">#接收警报的email配置，也可以直接写邮箱地址，例如：  - to: &#x27;1962821461@qq.com&#x27;</span><br>    html: <span class="hljs-string">&#x27;&#123;&#123; template &quot;email.html&quot; . &#125;&#125;&#x27;</span>   <span class="hljs-comment">#设定邮箱的内容模板，必须和email.tmpl中的&#123;&#123; define &quot;email.html&quot; &#125;&#125; 对应</span><br>    headers: &#123; Subject: <span class="hljs-string">&quot;[WARN] 报警邮件&quot;</span>&#125;   <span class="hljs-comment">## 接收邮件的标题</span><br>    send_resolved: <span class="hljs-literal">true</span><br><span class="hljs-comment">#为自定义机器人生成的 webhook 地址，需修改成自己的</span><br>  webhook_configs:<br>    - url: <span class="hljs-string">&quot;http://192.168.62.128:9999/prometheusalert?type=fs&amp;tpl=prometheus-fsv2&amp;fsurl=https://open.larksuite.com/open-apis/bot/v2/hook/00af844f-26a1-4f20-8a36-ec31e4879eab&quot;</span><br><br>inhibit_rules:<br>  - source_match:<br>      severity: <span class="hljs-string">&#x27;critical&#x27;</span><br>    target_match:<br>      severity: <span class="hljs-string">&#x27;warning&#x27;</span><br>    equal: [<span class="hljs-string">&#x27;alertname&#x27;</span>, <span class="hljs-string">&#x27;dev&#x27;</span>, <span class="hljs-string">&#x27;instance&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="3-5、重启alertmanager服务"><a href="#3-5、重启alertmanager服务" class="headerlink" title="3.5、重启alertmanager服务"></a>3.5、重启alertmanager服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker restart alertmanager<br></code></pre></td></tr></table></figure><h4 id="3-6、停止监控的项后即可接收到飞书和邮件告警"><a href="#3-6、停止监控的项后即可接收到飞书和邮件告警" class="headerlink" title="3.6、停止监控的项后即可接收到飞书和邮件告警"></a>3.6、停止监控的项后即可接收到飞书和邮件告警</h4><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20221216114556777.png" alt="image-20221216114556777"></p><p><img src="/2023/04/10/%E7%9B%91%E6%8E%A7/Prometheus/Docker%E5%AE%89%E8%A3%85Prometheus%E4%B9%8B%E9%83%A8%E7%BD%B2%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF/image-20221216114644906.png" alt="image-20221216114644906"></p><h3 id="4、）当只需要钉钉或者飞书告警时"><a href="#4、）当只需要钉钉或者飞书告警时" class="headerlink" title="4、）当只需要钉钉或者飞书告警时"></a>4、）当只需要钉钉或者飞书告警时</h3><p><strong>## 备注：如果不需要邮件告警，可直接略过步骤二中的2、），如果没有略过也不影响结果！只需要修改alertmanager.yml文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@localhost</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># cat /app/prometheus/alertmanager.yml</span><br><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">resolve_timeout:</span> <span class="hljs-string">1m</span><br><span class="hljs-attr">route:</span><br>  <span class="hljs-attr">group_by:</span> [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br>  <span class="hljs-attr">group_wait:</span> <span class="hljs-string">5s</span><br>  <span class="hljs-attr">group_interval:</span> <span class="hljs-string">5s</span><br>  <span class="hljs-attr">repeat_interval:</span> <span class="hljs-string">1m</span><br>  <span class="hljs-attr">receiver:</span> <span class="hljs-string">&#x27;prometheusalert-feishu&#x27;</span><br><span class="hljs-comment">#  receiver: &#x27;web.hook.prometheusalert&#x27;</span><br><span class="hljs-comment">#  routes:</span><br><span class="hljs-comment">#  - receiver: &#x27;prometheusalert-feishu&#x27;</span><br><span class="hljs-comment">#    group_wait: 10s</span><br><span class="hljs-comment">#    match:</span><br><span class="hljs-comment">#      level: &#x27;2&#x27;</span><br><span class="hljs-attr">receivers:</span><br><span class="hljs-comment">#- name: &#x27;web.hook.prometheusalert&#x27;</span><br><span class="hljs-comment">#  webhook_configs:</span><br><span class="hljs-comment">#  - url: &quot;http://[prometheusalert_url]:9999/prometheusalert/alert&quot;</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;prometheusalert-feishu&#x27;</span><br><span class="hljs-comment">#为自定义机器人生成的 webhook 地址，需修改成自己的</span><br>  <span class="hljs-attr">webhook_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;http://192.168.62.128:9999/prometheusalert?type=fs&amp;tpl=prometheus-fsv2&amp;fsurl=https://open.larksuite.com/open-apis/bot/v2/hook/00af844f-26a1-4f20-8a36-ec31e4879eab&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="5、）未推送飞书消息时，查看日志提示飞书接口未配置未开启状态-请先配置open-feishu为1"><a href="#5、）未推送飞书消息时，查看日志提示飞书接口未配置未开启状态-请先配置open-feishu为1" class="headerlink" title="5、）未推送飞书消息时，查看日志提示飞书接口未配置未开启状态,请先配置open-feishu为1"></a>5、）未推送飞书消息时，查看日志提示飞书接口未配置未开启状态,请先配置open-feishu为1</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">1.进入容器内<br><br>2.修改/app/conf/app.conf文件<br><br>修改成：open-feishu=1<br><br>3.重启prometheus-alert服务<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>监控</category>
      
      <category>prometheus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu安装slurm</title>
    <link href="/2023/04/07/%E4%B8%AD%E9%97%B4%E4%BB%B6/slurm/Ubuntu%E5%AE%89%E8%A3%85slurm/"/>
    <url>/2023/04/07/%E4%B8%AD%E9%97%B4%E4%BB%B6/slurm/Ubuntu%E5%AE%89%E8%A3%85slurm/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu安装slurm"><a href="#Ubuntu安装slurm" class="headerlink" title="Ubuntu安装slurm"></a>Ubuntu安装slurm</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：http://t.csdn.cn/0nZEE<br></code></pre></td></tr></table></figure><p><strong>演示环境</strong></p><table><thead><tr><th>服务器ip</th><th>系统</th><th>安装服务</th></tr></thead><tbody><tr><td>192.168.94.128</td><td>Ubuntu 20.04.5</td><td>mysql、slurm</td></tr></tbody></table><h2 id="一、安装必要库文件"><a href="#一、安装必要库文件" class="headerlink" title="一、安装必要库文件"></a>一、安装必要库文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo su -<br>apt-get install make hwloc libhwloc-dev libmunge-dev libmunge2 munge libmysqlclient-dev -y<br></code></pre></td></tr></table></figure><h2 id="二、启动munge服务"><a href="#二、启动munge服务" class="headerlink" title="二、启动munge服务"></a>二、启动munge服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#设置munge开机自启动</span><br>systemctl <span class="hljs-built_in">enable</span> munge   <br><span class="hljs-comment">#启动munge服务</span><br>systemctl start munge    <br><span class="hljs-comment">#查看munge状态</span><br>systemctl status munge   <br></code></pre></td></tr></table></figure><h2 id="三、编译安装slurm"><a href="#三、编译安装slurm" class="headerlink" title="三、编译安装slurm"></a>三、编译安装slurm</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#下载安装包</span><br>wget https://download.schedmd.com/slurm/slurm-20.11.9.tar.bz2<br><br><span class="hljs-comment">#解压安装包</span><br>tar -jxvf slurm-20.11.9.tar.bz2 <br><br><span class="hljs-comment">#进入解压后的文件夹中</span><br><span class="hljs-built_in">cd</span> slurm-20.11.9<br><br><span class="hljs-comment">#编译安装，指定路径</span><br>./configure --prefix=/opt/slurm/20.11.9 --sysconfdir=/opt/slurm/20.11.9/etc<br>make -j16<br>make install<br><br></code></pre></td></tr></table></figure><h2 id="四、拷贝配置文件"><a href="#四、拷贝配置文件" class="headerlink" title="四、拷贝配置文件"></a>四、拷贝配置文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#拷贝service启动脚本</span><br><span class="hljs-built_in">cp</span> -r etc/slurm*.service /etc/systemd/system/<br><br><span class="hljs-comment">#创建conf文件目录</span><br><span class="hljs-built_in">mkdir</span> -p  /opt/slurm/20.11.9/etc<br><br><span class="hljs-comment">#拷贝conf文件</span><br><span class="hljs-built_in">cp</span> etc/slurm.conf.example /opt/slurm/20.11.9/etc/slurm.conf<br><span class="hljs-built_in">cp</span> etc/cgroup.conf.example /opt/slurm/20.11.9/etc/cgroup.conf<br><span class="hljs-built_in">cp</span> etc/slurmdbd.conf.example /opt/slurm/20.11.9/etc/slurmdbd.conf<br><br><span class="hljs-comment">#赋予权限</span><br><span class="hljs-built_in">chmod</span> 600 /opt/slurm/20.11.9/etc/slurmdbd.conf<br></code></pre></td></tr></table></figure><h2 id="五、安装数据库（我采用docker运行mysql，也可使用MariaDB）"><a href="#五、安装数据库（我采用docker运行mysql，也可使用MariaDB）" class="headerlink" title="五、安装数据库（我采用docker运行mysql，也可使用MariaDB）"></a>五、安装数据库（我采用docker运行mysql，也可使用MariaDB）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#拉取mysql镜像</span><br>docker pull mysql:5.7<br><br><span class="hljs-comment">#创建工作目录</span><br><span class="hljs-built_in">mkdir</span> -p /app/mysql/&#123;data,conf&#125;<br><br><span class="hljs-comment">#为了满足配置要求</span><br><span class="hljs-built_in">cat</span> &gt;&gt; /app/mysql/conf/my.cnf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[mysqld]</span><br><span class="hljs-string">innodb_buffer_pool_size=1024M</span><br><span class="hljs-string">innodb_log_file_size=64M</span><br><span class="hljs-string">innodb_lock_wait_timeout=900</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">#运行mysql</span><br>docker run -p 3306:3306 \<br>--name mysql -e TZ=Asia/Shanghai \<br>--restart=always \<br>-v /app/mysql/data:/var/lib/mysql \<br>-v /app/mysql/conf:/etc/mysql/conf.d \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-d mysql:5.7<br></code></pre></td></tr></table></figure><h2 id="六、修改配置文件"><a href="#六、修改配置文件" class="headerlink" title="六、修改配置文件"></a>六、修改配置文件</h2><h3 id="1、修改slurm-conf文件"><a href="#1、修改slurm-conf文件" class="headerlink" title="1、修改slurm.conf文件"></a>1、修改slurm.conf文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /opt/slurm/20.11.9/etc/slurm.conf<br><span class="hljs-comment">#修改如下内容：</span><br><br>ClusterName=cluster  <span class="hljs-comment">#集群名，可自己填写</span><br>ControlMachine=<span class="hljs-built_in">test</span>  <span class="hljs-comment">#控制节点名</span><br><span class="hljs-comment">#......</span><br><span class="hljs-comment">#SlurmUser=slurm //把这一行注释掉，一定要把这一行注释掉。（我改成了root）</span><br><br><span class="hljs-comment">#......</span><br>AccountingStorageType=accounting_storage/slurmdbd<br><span class="hljs-comment">#......</span><br>StateSaveLocation=/var/spool/slurmctld <span class="hljs-comment">#主节点log日志</span><br>SlurmdSpoolDir=/var/spool/slurmd <span class="hljs-comment">#子节点log日志</span><br><br><span class="hljs-comment">#......</span><br>NodeName=<span class="hljs-built_in">test</span> Procs=1 State=UNKNOWN <br></code></pre></td></tr></table></figure><h3 id="2、修改slurmdbd-conf"><a href="#2、修改slurmdbd-conf" class="headerlink" title="2、修改slurmdbd.conf"></a>2、修改slurmdbd.conf</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /opt/slurm/20.11.9/etc/slurmdbd.conf<br><span class="hljs-comment">#修改如下内容：</span><br><br><span class="hljs-comment">#ArchiveScript=</span><br><span class="hljs-comment">##JobPurge=12</span><br><span class="hljs-comment">##StepPurge=1</span><br><span class="hljs-comment">##</span><br><span class="hljs-comment">## Authentication info</span><br>AuthType=auth/munge<br>AuthInfo=/var/run/munge/munge.socket.2<br><span class="hljs-comment">##</span><br><span class="hljs-comment">## slurmDBD info</span><br>DbdAddr=192.168.94.128  <span class="hljs-comment">#数据存储控制节点</span><br>DbdHost=<span class="hljs-built_in">test</span> <span class="hljs-comment">#数据存储控制节点名</span><br>DbdPort=7031<br>SlurmUser=root  <span class="hljs-comment">#如果设置了slurm，则改为slurm</span><br><span class="hljs-comment">#iMessageTimeout=60</span><br>DebugLevel=4<br><span class="hljs-comment">#DefaultQOS=normal</span><br>LogFile=/var/log/Slurmdbd.<span class="hljs-built_in">log</span><br>PidFile=/var/run/slurmdbd.pid<br><br><span class="hljs-comment">## Database info</span><br>StorageType=accounting_storage/mysql<br>StorageHost=192.168.94.128  <span class="hljs-comment">#数据库连接地址</span><br>StoragePort=3306   <span class="hljs-comment">#数据库端口</span><br>StoragePass=123456  <span class="hljs-comment">#数据库密码</span><br>StorageUser=root <span class="hljs-comment">#数据库用户，设置了slurm的改为slurm</span><br>StorageLoc=slurm_acct_db<br></code></pre></td></tr></table></figure><h2 id="七、启动slurm服务"><a href="#七、启动slurm服务" class="headerlink" title="七、启动slurm服务"></a>七、启动slurm服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">slurmdbd -vvvvDDDD<br><span class="hljs-comment">#检查，日志输出无错误后启动服务</span><br><br>systemctl <span class="hljs-built_in">enable</span> slurmd<br>systemctl start slurmd<br>systemctl status slurmd<br><span class="hljs-comment"># systemctl stop slurmd</span><br> <br>systemctl <span class="hljs-built_in">enable</span> slurmdbd<br>systemctl start slurmdbd<br>systemctl status slurmdbd<br><span class="hljs-comment"># systemctl stop slurmdbd</span><br> <br>systemctl <span class="hljs-built_in">enable</span> slurmctld<br>systemctl start slurmctld<br>systemctl status slurmctld<br><span class="hljs-comment"># systemctl stop slurmctld</span><br><br></code></pre></td></tr></table></figure><h2 id="八、设置环境变量"><a href="#八、设置环境变量" class="headerlink" title="八、设置环境变量"></a>八、设置环境变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">SLURMPATH=/opt/slurm/20.11.9<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=\$PATH:<span class="hljs-variable">$SLURMPATH</span>/bin:<span class="hljs-variable">$SLURMPATH</span>/sbin&quot;</span> &gt;&gt; /etc/bash.bashrc<br><span class="hljs-built_in">source</span> /etc/bash.bashrc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Slurm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Slurm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Slurm集群部署</title>
    <link href="/2023/04/07/%E4%B8%AD%E9%97%B4%E4%BB%B6/slurm/Slurm%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/04/07/%E4%B8%AD%E9%97%B4%E4%BB%B6/slurm/Slurm%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Slurm集群部署"><a href="#Slurm集群部署" class="headerlink" title="Slurm集群部署:"></a>Slurm集群部署:</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">#参考文档：https://blog.csdn.net/qq_34149581/article/details/101902935<br>#详细参考全文档：http://hmli.ustc.edu.cn/doc/linux/slurm-install/slurm-install.html#id14<br>#参考文档：https://blog.csdn.net/u010797364/article/details/119929836<br>#参考文档：https://www.cnblogs.com/liu-shaobo/p/13285839.html<br>#参考文档：https://www.slothparadise.com/how-to-install-slurm-on-centos-7-cluster/<br>#相对全面的SLURM集群的配置详解、安装及一些小问题的解决：https://blog.csdn.net/datuqiqi/article/details/50827040<br>#大集群框架搭建参考文档：https://blog.csdn.net/weixin_28686463/article/details/111927953<br>#单机安装：https://cndaqiang.github.io/2020/02/24/slurm/<br>#浅谈slurm作业调度系统：https://blog.csdn.net/lovebaby1689/article/details/123208698<br></code></pre></td></tr></table></figure><h2 id="一、基础环境："><a href="#一、基础环境：" class="headerlink" title="一、基础环境："></a>一、基础环境：</h2><table><thead><tr><th>ip地址</th><th>主机名</th><th>备注</th></tr></thead><tbody><tr><td>192.168.94.154</td><td>mt1</td><td>控制节点，数据存储控制器</td></tr><tr><td>192.168.94.155</td><td>ct1</td><td>计算节点</td></tr><tr><td>192.168.94.156</td><td>ct2</td><td>计算节点、数据存储节点（安装mysql）</td></tr></tbody></table><h3 id="1-设置主机名（各节点执行）："><a href="#1-设置主机名（各节点执行）：" class="headerlink" title="1.设置主机名（各节点执行）："></a>1.设置主机名（各节点执行）：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">hostnamectl set-hostname mt1<br>hostnamectl set-hostname ct1<br>hostnamectl set-hostname ct2<br><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">192.168.94.154  mt1</span><br><span class="hljs-string">192.168.94.155  ct1</span><br><span class="hljs-string">192.168.94.156  ct2</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="2-关闭防火墙（各节点执行）："><a href="#2-关闭防火墙（各节点执行）：" class="headerlink" title="2.关闭防火墙（各节点执行）："></a>2.关闭防火墙（各节点执行）：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl stop firewalld<br>systemctl <span class="hljs-built_in">disable</span> firewalld<br>systemctl stop iptables<br>systemctl <span class="hljs-built_in">disable</span> iptables<br></code></pre></td></tr></table></figure><h3 id="3-修改资源限制（各节点执行）"><a href="#3-修改资源限制（各节点执行）" class="headerlink" title="3.修改资源限制（各节点执行）"></a>3.修改资源限制（各节点执行）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/security/limits.conf&lt;&lt;-<span class="hljs-string">EOF</span><br><span class="hljs-string">* hard nofile 1000000</span><br><span class="hljs-string">* soft nofile 1000000</span><br><span class="hljs-string">* soft core unlimited</span><br><span class="hljs-string">* soft stack 10240</span><br><span class="hljs-string">* soft memlock unlimited</span><br><span class="hljs-string">* hard memlock unlimited</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="4-调整系统时区为中国-x2F-上海（各节点执行）"><a href="#4-调整系统时区为中国-x2F-上海（各节点执行）" class="headerlink" title="4.调整系统时区为中国&#x2F;上海（各节点执行）"></a>4.调整系统时区为中国&#x2F;上海（各节点执行）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br><span class="hljs-comment">#设置时间同步</span><br><span class="hljs-comment">#安装ntpdate工具</span><br>yum -y install ntp ntpdate<br><span class="hljs-comment">#设置系统时间与网络时间同步</span><br>ntpdate cn.pool.ntp.org<br><span class="hljs-comment"># 将系统时间写入硬件时间</span><br>hwclock --systohc<br><span class="hljs-comment">#强制系统时间写入CMOS中防止重启失效</span><br>hwclock -w <span class="hljs-comment">#或 clock -w</span><br>systemctl start ntpd<br>systemctl <span class="hljs-built_in">enable</span> ntpd<br></code></pre></td></tr></table></figure><h3 id="5-安装EPEL源（各节点执行）"><a href="#5-安装EPEL源（各节点执行）" class="headerlink" title="5.安装EPEL源（各节点执行）"></a>5.安装EPEL源（各节点执行）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install epel-release -y<br></code></pre></td></tr></table></figure><h3 id="6-安装NFS（控制节点执行）"><a href="#6-安装NFS（控制节点执行）" class="headerlink" title="6.安装NFS（控制节点执行）"></a>6.安装NFS（控制节点执行）</h3><p><strong>如果需要共享目录时执行步骤6！！</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install nfs-utils rpcbind<br><span class="hljs-comment">#编辑/etc/exports文件</span><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/exports &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">/software/ *(rw,async,insecure,no_root_squash)</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment">#启动NFS</span><br>systemctl start nfs<br>systemctl start rpcbind<br>systemctl <span class="hljs-built_in">enable</span> nfs<br>systemctl <span class="hljs-built_in">enable</span> rpcbind<br><span class="hljs-comment">#客户端挂载NFS（在需要共享到的客户端上执行）</span><br>yum -y install nfs-utils<br><span class="hljs-built_in">mkdir</span> /software<br>mount 192.168.94.154:/software /software<br></code></pre></td></tr></table></figure><h3 id="7、配置SSH免登陆（控制节点执行）"><a href="#7、配置SSH免登陆（控制节点执行）" class="headerlink" title="7、配置SSH免登陆（控制节点执行）"></a>7、配置SSH免登陆（控制节点执行）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen  <span class="hljs-comment">#一路回车</span><br>ssh-copy-id -i .ssh/id_rsa.pub ct1<br>ssh-copy-id -i .ssh/id_rsa.pub ct2<br></code></pre></td></tr></table></figure><h2 id="二、配置Munge"><a href="#二、配置Munge" class="headerlink" title="二、配置Munge:"></a>二、配置Munge:</h2><h3 id="1-创建Munge用户（各节点执行）"><a href="#1-创建Munge用户（各节点执行）" class="headerlink" title="1.创建Munge用户（各节点执行）"></a>1.创建Munge用户（各节点执行）</h3><p>Munge用户要确保Master Node和Compute Nodes的UID和GID相同，所有节点都需要创建Munge；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">groupadd -g 1108 munge<br>useradd -m -c <span class="hljs-string">&quot;Munge Uid &#x27;N&#x27; Gid Emporium&quot;</span> -d /var/lib/munge -u 1108 -g munge -s /sbin/nologin munge<br></code></pre></td></tr></table></figure><h3 id="2-部署Munge（各节点执行）"><a href="#2-部署Munge（各节点执行）" class="headerlink" title="2.部署Munge（各节点执行）"></a>2.部署Munge（各节点执行）</h3><p>Munge是认证服务，实现本地或者远程主机进程的UID、GID验证</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install munge munge-libs munge-devel -y<br></code></pre></td></tr></table></figure><h3 id="3-生成熵池-安装rng-tools-控制节点执行后，从控制节点同步Munge的key到所有的计算节点"><a href="#3-生成熵池-安装rng-tools-控制节点执行后，从控制节点同步Munge的key到所有的计算节点" class="headerlink" title="3.生成熵池,安装rng-tools(控制节点执行后，从控制节点同步Munge的key到所有的计算节点)"></a>3.生成熵池,安装rng-tools(控制节点执行后，从控制节点同步Munge的key到所有的计算节点)</h3><h4 id="3-1、安装rng-tools"><a href="#3-1、安装rng-tools" class="headerlink" title="3.1、安装rng-tools"></a>3.1、安装rng-tools</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install -y rng-tools<br><br>rngd -r /dev/urandom<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /usr/lib/systemd/system/rngd.service<br><span class="hljs-comment">#修改如下参数</span><br>[service]<br>ExecStart=/sbin/rngd -f -r /dev/urandom<br><span class="hljs-comment">#或者使用替换命令修改参数：</span><br><span class="hljs-comment">#sed -i &#x27;s\ExecStart=/sbin/rngd -f\ExecStart=/sbin/rngd -f -r /dev/urandom\g&#x27; /usr/lib/systemd/system/rngd.service</span><br><br>systemctl daemon-reload<br>systemctl start rngd<br>systemctl <span class="hljs-built_in">enable</span> rngd<br></code></pre></td></tr></table></figure><h4 id="3-2、创建全局密钥"><a href="#3-2、创建全局密钥" class="headerlink" title="3.2、创建全局密钥"></a>3.2、创建全局密钥</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#在Master Node创建全局使用的密钥（192.168.94.154）</span><br>/usr/sbin/create-munge-key -r<br><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/urandom bs=1 count=1024 &gt; /etc/munge/munge.key<br></code></pre></td></tr></table></figure><h4 id="3-3、将控制节点密钥同步到所有计算节点"><a href="#3-3、将控制节点密钥同步到所有计算节点" class="headerlink" title="3.3、将控制节点密钥同步到所有计算节点"></a>3.3、将控制节点密钥同步到所有计算节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">scp -p /etc/munge/munge.key root@ct1:/etc/munge<br>scp -p /etc/munge/munge.key root@ct2:/etc/munge<br></code></pre></td></tr></table></figure><h4 id="3-4、所有的节点上都已经有了key，启动Munge并且配置munge权限"><a href="#3-4、所有的节点上都已经有了key，启动Munge并且配置munge权限" class="headerlink" title="3.4、所有的节点上都已经有了key，启动Munge并且配置munge权限"></a>3.4、所有的节点上都已经有了key，启动Munge并且配置munge权限</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chown</span> -R munge: /etc/munge/ /var/log/munge/<br><span class="hljs-built_in">chmod</span> 0700 /etc/munge/ /var/log/munge/<br><br><span class="hljs-comment">#赋予权限（各节点执行）</span><br><span class="hljs-built_in">chown</span> munge: /etc/munge/munge.key<br><span class="hljs-built_in">chmod</span> 400 /etc/munge/munge.key<br><br><span class="hljs-comment">#启动所有节点（各节点执行）</span><br>systemctl start munge<br>systemctl <span class="hljs-built_in">enable</span> munge<br>systemctl status munge<br></code></pre></td></tr></table></figure><h3 id="4-以下为测试Munge服务"><a href="#4-以下为测试Munge服务" class="headerlink" title="4.以下为测试Munge服务"></a>4.以下为测试Munge服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#本地查看凭据</span><br>munge -n<br><span class="hljs-comment">#本地解码</span><br>munge -n | unmunge<br><span class="hljs-comment">#验证:远程解码,每个计算节点与控制节点进行连接。</span><br>munge -n | ssh ct1 unmunge<br><span class="hljs-comment">#Munge凭证基准测试</span><br>remunge<br></code></pre></td></tr></table></figure><h2 id="三、配置Slurm"><a href="#三、配置Slurm" class="headerlink" title="三、配置Slurm"></a>三、配置Slurm</h2><h3 id="1、创建Slurm用户-各节点执行"><a href="#1、创建Slurm用户-各节点执行" class="headerlink" title="1、创建Slurm用户(各节点执行)"></a>1、创建Slurm用户(各节点执行)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">groupadd -g 1109 slurm<br>useradd -m -c <span class="hljs-string">&quot;Slurm manager&quot;</span> -d /var/lib/slurm -u 1109 -g slurm -s /bin/bash slurm<br></code></pre></td></tr></table></figure><h3 id="2、安装Slurm及依赖（各节点安装依赖）"><a href="#2、安装Slurm及依赖（各节点安装依赖）" class="headerlink" title="2、安装Slurm及依赖（各节点安装依赖）"></a>2、安装Slurm及依赖（各节点安装依赖）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install gcc gcc-c++ readline-devel perl-ExtUtils-MakeMaker pam-devel rpm-build mysql-devel python3 -y<br><span class="hljs-comment">#yum install openssl openssl-devel pam-devel numactl numactl-devel hwloc hwloc-devel lua lua-devel readline-devel rrdtool-devel ncurses-devel man2html libibmad libibumad -y</span><br></code></pre></td></tr></table></figure><h4 id="2-1、下载并编译Slurm（在控制节点上创建安装包，其他节点可以通过scp-r-命令将安装包所在目录传输过去）"><a href="#2-1、下载并编译Slurm（在控制节点上创建安装包，其他节点可以通过scp-r-命令将安装包所在目录传输过去）" class="headerlink" title="2.1、下载并编译Slurm（在控制节点上创建安装包，其他节点可以通过scp -r 命令将安装包所在目录传输过去）"></a>2.1、下载并编译Slurm（在控制节点上创建安装包，其他节点可以通过scp -r 命令将安装包所在目录传输过去）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://download.schedmd.com/slurm/slurm-20.11.9.tar.bz2<br><span class="hljs-comment">#传输到其他节点</span><br>scp -r slurm-20.11.9.tar.bz2 ct1:/root<br>scp -r slurm-20.11.9.tar.bz2 ct2:/root<br></code></pre></td></tr></table></figure><h4 id="2-2、安装（各节点执行）"><a href="#2-2、安装（各节点执行）" class="headerlink" title="2.2、安装（各节点执行）"></a>2.2、安装（各节点执行）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">rpmbuild -ta slurm-20.11.9.tar.bz2 <br><span class="hljs-built_in">cd</span> /root/rpmbuild/RPMS/x86_64/<br></code></pre></td></tr></table></figure><h4 id="2-3、安装Slurm（各节点执行）"><a href="#2-3、安装Slurm（各节点执行）" class="headerlink" title="2.3、安装Slurm（各节点执行）"></a>2.3、安装Slurm（各节点执行）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum localinstall slurm-* -y<br></code></pre></td></tr></table></figure><h3 id="3、配置控制节点Slurm-控制节点上操作"><a href="#3、配置控制节点Slurm-控制节点上操作" class="headerlink" title="3、配置控制节点Slurm(控制节点上操作)"></a>3、配置控制节点Slurm(控制节点上操作)</h3><h4 id="3-1、安装完成后，需要配置slurm的配置文件"><a href="#3-1、安装完成后，需要配置slurm的配置文件" class="headerlink" title="3.1、安装完成后，需要配置slurm的配置文件"></a>3.1、安装完成后，需要配置slurm的配置文件</h4><p>方法一：可以访问官网，填写相关信息后生成配置文件：<a href="http://slurm.schedmd.com/configurator.easy.html%EF%BC%8C%E5%B0%86%E7%94%9F%E6%88%90%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6%E5%88%B0/etc/slurm%E4%B8%8B">http://slurm.schedmd.com/configurator.easy.html，将生成的配置文件复制到/etc/slurm下</a></p><p>方法二：在&#x2F;etc&#x2F;slurm&#x2F;文件夹下有slurm的配置文件模板xxx.conf.example，以下为方法二：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考slurm.conf文件：https://blog.csdn.net/xhk12345678/article/details/124710528<br>参考slurm.conf文件：https://blog.csdn.net/qq_34149581/article/details/104868057<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> /etc/slurm/slurm.conf.example /etc/slurm/slurm.conf<br><br><br>vim /etc/slurm/slurm.conf<br><span class="hljs-comment">#修改如下部分</span><br>ClusterName=cluster  <span class="hljs-comment">#集群名，可自己填写</span><br>ControlMachine=mt1  <span class="hljs-comment">#控制节点名</span><br><span class="hljs-comment">#......</span><br>StateSaveLocation=/var/spool/slurmctld <span class="hljs-comment">#主节点log日志</span><br>SlurmdSpoolDir=/var/spool/slurmd <span class="hljs-comment">#子节点log日志</span><br><span class="hljs-comment">#......</span><br>NodeName=ct[1-2] Procs=1 State=UNKNOWN <span class="hljs-comment">#ct[1-2] 指的计算节点ct1和ct2,也可以写成ct1,ct2</span><br><br><span class="hljs-comment">#Slurm中默认是没有配置accounting的功能的，开启在该文件内添加：</span><br>JobAcctGatherType=jobacct_gather/linux<br>JobAcctGatherFrequency=30<br><span class="hljs-comment">#</span><br>AccountingStorageEnforce=associations,limits,qos  <span class="hljs-comment">#account存储数据的配置选项</span><br>AccountingStorageHost=192.168.94.188    <span class="hljs-comment">#数据库存储节点</span><br>AccountingStoragePass=/var/run/munge/munge.socket.2 <span class="hljs-comment">#munge认证文件，与slurmdbd.conf文件中的AuthInfo文件同名。</span><br>AccountingStoragePort=7031     <span class="hljs-comment">#slurmd服务监听端口，默认为6819，下文用到的为7031</span><br>AccountingStorageType=accounting_storage/slurmdbd   <span class="hljs-comment">#数据库记账服务</span><br>AccountingStorageTRES=cpu,mem,energy,node,billing,fs/disk,vmem,pages,gres/gpu:tesla  <span class="hljs-comment">#记账信息</span><br>AcctGatherEnergyType=acct_gather_energy/none   <span class="hljs-comment">#作业消耗能源信息，none代表不采集</span><br>AcctGatherFilesystemType=acct_gather_filesystem/none<br>AcctGatherInterconnectType=acct_gather_interconnect/none<br>AcctGatherNodeFreq=0<br>AcctGatherProfileType=acct_gather_profile/none<br>ExtSensorsType=ext_sensors/none<br>ExtSensorsFreq=0<br><br><br><span class="hljs-comment">#可以设置默认的，也可以设置整个集群</span><br><span class="hljs-comment">#NodeName=mt1,ct[1-2] Procs=1 State=UNKNOWN</span><br><span class="hljs-comment">#PartitionName=control Nodes=mt1 Default=NO MaxTime=INFINITE State=UP</span><br><span class="hljs-comment">#PartitionName=compute Nodes=ct[1-2] Default=YES MaxTime=INFINITE State=UP</span><br></code></pre></td></tr></table></figure><h4 id="3-2、复制控制节点配置文件到计算节点（控制节点上操作）"><a href="#3-2、复制控制节点配置文件到计算节点（控制节点上操作）" class="headerlink" title="3.2、复制控制节点配置文件到计算节点（控制节点上操作）"></a>3.2、复制控制节点配置文件到计算节点（控制节点上操作）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> /etc/slurm/cgroup.conf.example /etc/slurm/cgroup.conf<br>scp /etc/slurm/*.conf ct1:/etc/slurm/<br>scp /etc/slurm/*.conf ct2:/etc/slurm/<br></code></pre></td></tr></table></figure><p><strong>对于控制节点必要的是slurm.conf，对于计算节点必要的是slurm.conf, cgroup.conf</strong></p><h3 id="4、设置文件权限（以下文件在slurm-conf文件内写明的路径，请注意核对）"><a href="#4、设置文件权限（以下文件在slurm-conf文件内写明的路径，请注意核对）" class="headerlink" title="4、设置文件权限（以下文件在slurm.conf文件内写明的路径，请注意核对）"></a>4、设置文件权限（以下文件在slurm.conf文件内写明的路径，请注意核对）</h3><h4 id="4-1、在控制节点上："><a href="#4-1、在控制节点上：" class="headerlink" title="4.1、在控制节点上："></a>4.1、在控制节点上：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /var/spool/slurmctld<br><span class="hljs-built_in">chown</span> slurm: /var/spool/slurmctld<br><span class="hljs-built_in">chmod</span> 755 /var/spool/slurmctld<br><br><span class="hljs-built_in">touch</span> /var/log/slurmctld.log<br><span class="hljs-built_in">chown</span> slurm: /var/log/slurmctld.log<br><br><span class="hljs-comment">#touch /var/log/slurm_jobacct.log /var/log/slurm_jobcomp.log</span><br><span class="hljs-comment">#chown slurm: /var/log/slurm_jobacct.log /var/log/slurm_jobcomp.log</span><br></code></pre></td></tr></table></figure><h4 id="4-2、在所有计算节点上，配置日志文件"><a href="#4-2、在所有计算节点上，配置日志文件" class="headerlink" title="4.2、在所有计算节点上，配置日志文件"></a>4.2、在所有计算节点上，配置日志文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /var/spool/slurmd<br><span class="hljs-built_in">chown</span> slurm: /var/spool/slurmd<br><span class="hljs-built_in">chmod</span> 755 /var/spool/slurmd<br><span class="hljs-built_in">touch</span> /var/log/slurmd.log<br><span class="hljs-built_in">chown</span> slurm: /var/log/slurmd.log<br></code></pre></td></tr></table></figure><h3 id="5、配置节点Slurm-Accounting-（我这里使用的是mt1机器作为slurmdb的数据存储控制节点）"><a href="#5、配置节点Slurm-Accounting-（我这里使用的是mt1机器作为slurmdb的数据存储控制节点）" class="headerlink" title="5、配置节点Slurm Accounting （我这里使用的是mt1机器作为slurmdb的数据存储控制节点）"></a>5、配置节点Slurm Accounting （我这里使用的是mt1机器作为slurmdb的数据存储控制节点）</h3><p>Accounting records为slurm收集作业步骤的信息，可以写入一个文本文件或数据库，但这个文件会变得越来越大，最简单的方法是使用MySQL来存储信息。</p><h4 id="5-1、在slurmdbd（控制节点），配置slurmdbd的日志文件"><a href="#5-1、在slurmdbd（控制节点），配置slurmdbd的日志文件" class="headerlink" title="5.1、在slurmdbd（控制节点），配置slurmdbd的日志文件"></a>5.1、在slurmdbd（控制节点），配置slurmdbd的日志文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">touch</span> /var/log/slurmdbd.log<br><span class="hljs-built_in">chown</span> slurm: /var/log/slurmdbd.log<br></code></pre></td></tr></table></figure><h4 id="5-2、创建数据库的Slurm用户（MySQL自行安装-以下使用docker安装，我安装在了ct2机器上）"><a href="#5-2、创建数据库的Slurm用户（MySQL自行安装-以下使用docker安装，我安装在了ct2机器上）" class="headerlink" title="5.2、创建数据库的Slurm用户（MySQL自行安装,以下使用docker安装，我安装在了ct2机器上）"></a>5.2、创建数据库的Slurm用户（MySQL自行安装,以下使用docker安装，我安装在了ct2机器上）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull mysql:5.7<br><br><span class="hljs-built_in">mkdir</span> -p /app/mysql/&#123;data,conf&#125;<br><br><span class="hljs-comment">#为了满足配置要求</span><br><span class="hljs-built_in">cat</span> &gt;&gt; /app/mysql/conf/my.cnf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[mysqld]</span><br><span class="hljs-string">innodb_buffer_pool_size=1024M</span><br><span class="hljs-string">innodb_log_file_size=64M</span><br><span class="hljs-string">innodb_lock_wait_timeout=900</span><br><span class="hljs-string">EOF</span><br><br>docker run -p 3306:3306 \<br>--name mysql -e TZ=Asia/Shanghai \<br>--restart=always \<br>-v /app/mysql/data:/var/lib/mysql \<br>-v /app/mysql/conf:/etc/mysql/conf.d \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-d mysql:5.7<br><br></code></pre></td></tr></table></figure><p>设置slurm用户去访问（我直接使用的root用户进行的连接，需账号权限划分的可执行以下命令）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it mysql bash<br>&gt;mysql -uroot -p123456<br>mysql&gt; grant all on slurm_acct_db.* to <span class="hljs-string">&#x27;slurm&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;slurm*123&#x27;</span> with grant option;<br><br></code></pre></td></tr></table></figure><h4 id="5-3、配置slurmdbd-conf文件（控制节点上）"><a href="#5-3、配置slurmdbd-conf文件（控制节点上）" class="headerlink" title="5.3、配置slurmdbd.conf文件（控制节点上）"></a>5.3、配置slurmdbd.conf文件（控制节点上）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> /etc/slurm/slurmdbd.conf.example /etc/slurm/slurmdbd.conf<br><br><span class="hljs-comment">#参考的slurmdbd.conf文件，https://blog.csdn.net/qq_34149581/article/details/104868194</span><br><span class="hljs-built_in">cat</span> /etc/slurm/slurmdbd.conf <br><span class="hljs-comment">#ArchiveScript=</span><br><span class="hljs-comment">##JobPurge=12</span><br><span class="hljs-comment">##StepPurge=1</span><br><span class="hljs-comment">##</span><br><span class="hljs-comment">## Authentication info</span><br>AuthType=auth/munge<br>AuthInfo=/var/run/munge/munge.socket.2<br><span class="hljs-comment">##</span><br><span class="hljs-comment">## slurmDBD info</span><br>DbdAddr=192.168.94.154  <span class="hljs-comment">#数据存储控制节点</span><br>DbdHost=mt1 <span class="hljs-comment">#数据存储控制节点名</span><br>DbdPort=7031<br>SlurmUser=root  <span class="hljs-comment">#如果设置了slurm，则改为slurm</span><br><span class="hljs-comment">#iMessageTimeout=60</span><br>DebugLevel=4<br><span class="hljs-comment">#DefaultQOS=normal</span><br>LogFile=/var/log/Slurmdbd.<span class="hljs-built_in">log</span><br>PidFile=/var/run/slurmdbd.pid<br><br><span class="hljs-comment">## Database info</span><br>StorageType=accounting_storage/mysql<br>StorageHost=192.168.94.156  <span class="hljs-comment">#数据库连接地址</span><br>StoragePort=3306   <span class="hljs-comment">#数据库端口</span><br>StoragePass=123456  <span class="hljs-comment">#数据库密码</span><br>StorageUser=root <span class="hljs-comment">#数据库用户，设置了slurm的改为slurm</span><br>StorageLoc=slurm_acct_db<br><br></code></pre></td></tr></table></figure><h4 id="5-4、在数据库控制节点-192-168-94-154-启动slurmdbd"><a href="#5-4、在数据库控制节点-192-168-94-154-启动slurmdbd" class="headerlink" title="5.4、在数据库控制节点(192.168.94.154)启动slurmdbd:"></a>5.4、在数据库控制节点(192.168.94.154)启动slurmdbd:</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">slurmdbd -vvvvDDDD<br><span class="hljs-comment">#进行调试启动，查看是否启动过程中有无错误。无错误后启动slurmdbd</span><br></code></pre></td></tr></table></figure><h3 id="6-开启节点服务"><a href="#6-开启节点服务" class="headerlink" title="6.开启节点服务"></a>6.开启节点服务</h3><h4 id="6-1、启动控制节点Slurmdbd服务"><a href="#6-1、启动控制节点Slurmdbd服务" class="headerlink" title="6.1、启动控制节点Slurmdbd服务"></a>6.1、启动控制节点Slurmdbd服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start slurmdbd<br>systemctl status slurmdbd<br>systemctl <span class="hljs-built_in">enable</span> slurmdbd<br></code></pre></td></tr></table></figure><h4 id="6-2、启动控制节点slurmctld服务"><a href="#6-2、启动控制节点slurmctld服务" class="headerlink" title="6.2、启动控制节点slurmctld服务"></a>6.2、启动控制节点slurmctld服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start slurmctld<br>systemctl status slurmctld<br>systemctl <span class="hljs-built_in">enable</span> slurmctld<br></code></pre></td></tr></table></figure><h4 id="6-3、启动计算节点的服务"><a href="#6-3、启动计算节点的服务" class="headerlink" title="6.3、启动计算节点的服务"></a>6.3、启动计算节点的服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start slurmd<br>systemctl status slurmd<br>systemctl <span class="hljs-built_in">enable</span> slurmd<br></code></pre></td></tr></table></figure><h2 id="四、检查Slurm集群"><a href="#四、检查Slurm集群" class="headerlink" title="四、检查Slurm集群"></a>四、检查Slurm集群</h2><h3 id="1-启动集群："><a href="#1-启动集群：" class="headerlink" title="1.启动集群："></a>1.启动集群：</h3><p>Master节点需要执行 <code>slurmctld -c</code>和<code>slurmd -c</code>，都以root账户执行，所有Slaver节点都执行 <code>slurmd -c</code></p><h3 id="2-查看集群"><a href="#2-查看集群" class="headerlink" title="2.查看集群"></a>2.查看集群</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">sinfo<br><span class="hljs-comment">#集群启动正常。State有idle（空闲），salloc（占用）,unknown（刚启动时可能出现），down（连不上）等状态。</span><br><br>scontrol show partition<br>scontrol show node<br></code></pre></td></tr></table></figure><h3 id="3-提交作业"><a href="#3-提交作业" class="headerlink" title="3.提交作业"></a>3.提交作业</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">srun -N2 hostname<br><span class="hljs-comment">#-N 允许您选择要使用的计算节点数量。</span><br></code></pre></td></tr></table></figure><h3 id="4-以下为实际操作举例："><a href="#4-以下为实际操作举例：" class="headerlink" title="4.以下为实际操作举例："></a>4.以下为实际操作举例：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;&gt; /home/ceshi.sh &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">#!/bin/sh</span><br><span class="hljs-string">sudo docker pull nginx:latest</span><br><span class="hljs-string">sudo docker run --name nginx-test -p 8088:80 -d nginx </span><br><span class="hljs-string">echo &quot;Is OK!&quot; &gt;&gt; /home/nginx.log  </span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">#提交作业</span><br>sbatch /home/job.sh<br><span class="hljs-comment">#sbatch -N 1 -w ct2 /home/job.sh </span><br><span class="hljs-comment">#-w 在ct2上执行该脚本</span><br><span class="hljs-comment">#-N 允许您选择要使用的计算节点数量。</span><br><br><span class="hljs-comment">#查看作业</span><br>squeue -a<br><br><span class="hljs-comment">#查看标准输出流，正在运行的作业或作业步骤</span><br>scontrol show job 22 <br><br><span class="hljs-comment">#杀死工作进程</span><br>scancel 135  <span class="hljs-comment">#135：查询出来的JOBID</span><br></code></pre></td></tr></table></figure><h2 id="五、使用"><a href="#五、使用" class="headerlink" title="五、使用"></a>五、使用</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">官网手册：https://docs.slurm.cn/users/shou-ce-ye<br>基本使用：https://www.codeleading.com/article/58322478361/<br>Slurm基本用法：https://blog.csdn.net/qq_31910613/article/details/102993478<br>基础命令详解：https://www.cnblogs.com/dahu-daqing/p/12693334.html<br>使用参考：https://bicmr.pku.edu.cn/~wenzw/pages/slurm.html<br><br>操作参考文档：https://blog.csdn.net/ZuoShifan/article/details/80472741?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-1-80472741.pc_agg_new_rank&amp;utm_term=slurm%E5%A6%82%E4%BD%95%E6%89%80%E6%9C%89%E8%B5%84%E6%BA%90%E7%94%A8%E4%BA%8E%E4%B8%80%E4%B8%AA%E4%BB%BB%E5%8A%A1&amp;spm=1000.2123.3001.4430<br></code></pre></td></tr></table></figure><p>SLURM 环境变量：</p><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>SLURM_NPROCS</td><td>要加载的进程数</td></tr><tr><td>SLURM_TASKS_PER_NODE</td><td>每节点要加载的任务数</td></tr><tr><td>SLURM_JOB_ID</td><td>作业的 JobID</td></tr><tr><td>SLURM_SUBMIT_DIR</td><td>提交作业时的工作目录</td></tr><tr><td>SLURM_JOB_NODELIST</td><td>作业分配的节点列表</td></tr><tr><td>SLURM_JOB_CPUS_PER_NODE</td><td>每个节点上分配给作业的 CPU 数</td></tr><tr><td>SLURM_JOB_NUM_NODES</td><td>作业分配的节点数</td></tr><tr><td>HOSTNAME</td><td>对于批处理作业，此变量被设置为批处理脚本所执行节点的节点名</td></tr></tbody></table><h2 id="六、拓展：将运行过程的输出流，复制到本机-x2F-home下（机器与机器之间未免密）："><a href="#六、拓展：将运行过程的输出流，复制到本机-x2F-home下（机器与机器之间未免密）：" class="headerlink" title="六、拓展：将运行过程的输出流，复制到本机&#x2F;home下（机器与机器之间未免密）："></a>六、拓展：将运行过程的输出流，复制到本机&#x2F;home下（机器与机器之间未免密）：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment">#author：zhangzhenzhou</span><br><span class="hljs-comment">#version：1.0</span><br><span class="hljs-comment">#readme:执行命令后加入以下命令，将输出流复制到本机的/home目录下</span><br><span class="hljs-comment">#$SLURM_JOB_ID 作业的 JobID</span><br><span class="hljs-comment">#$SLURM_JOB_NODELIST  #作业分配的节点名</span><br>out_path=`scontrol show job <span class="hljs-variable">$SLURM_JOB_ID</span> | grep StdOut | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><br><span class="hljs-comment">#scp到本机上</span><br>/app/scp.exp <span class="hljs-variable">$out_path</span> root@mt1:/home/<br><br><span class="hljs-comment">#输出流信息进行记录</span><br>scontrol show job <span class="hljs-variable">$SLURM_JOB_ID</span>  &gt;&gt; /home/job_<span class="hljs-variable">$SLURM_JOB_ID</span>.version<br>/app/scp.exp /home/job_<span class="hljs-variable">$SLURM_JOB_ID</span>.version root@mt1:/home/<br><br></code></pre></td></tr></table></figure><p>scp自动输入密码脚本，需要scp的机器执行完一次后不再执行:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">##!/bin/sh</span><br><span class="hljs-comment">#author：jiangzhenzhou</span><br><span class="hljs-comment">#version：1.0</span><br><br>yum install expect <br><br><span class="hljs-comment">#第一行这里是你机器上expect程序的路径</span><br><span class="hljs-comment">#password后面接你的密码</span><br><span class="hljs-built_in">cat</span> &gt; /app/scp.exp &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">#!/usr/bin/expect  </span><br><span class="hljs-string">set timeout 20  </span><br><span class="hljs-string">if &#123; [llength \$argv] &lt; 2&#125; &#123;  </span><br><span class="hljs-string">    puts &quot;Usage:&quot;  </span><br><span class="hljs-string">    puts &quot;\$argv0 local_file remote_path&quot;  </span><br><span class="hljs-string">    exit 1  </span><br><span class="hljs-string">&#125;  </span><br><span class="hljs-string">set local_file [lindex \$argv 0]  </span><br><span class="hljs-string">set remote_path [lindex \$argv 1]  </span><br><span class="hljs-string">set passwd 123456  </span><br><span class="hljs-string">set passwderror 0  </span><br><span class="hljs-string">spawn scp \$local_file \$remote_path  </span><br><span class="hljs-string"></span><br><span class="hljs-string">expect &#123;  </span><br><span class="hljs-string">    &quot;*assword:*&quot; &#123;  </span><br><span class="hljs-string">        if &#123; \$passwderror == 1 &#125; &#123;  </span><br><span class="hljs-string">        puts &quot;passwd is error&quot;  </span><br><span class="hljs-string">        exit 2  </span><br><span class="hljs-string">        &#125;  </span><br><span class="hljs-string">        set timeout 1000  </span><br><span class="hljs-string">        set passwderror 1  </span><br><span class="hljs-string">        send &quot;\$passwd\r&quot;  </span><br><span class="hljs-string">        exp_continue  </span><br><span class="hljs-string">    &#125;  </span><br><span class="hljs-string">    &quot;*es/no)?*&quot; &#123;  </span><br><span class="hljs-string">        send &quot;yes\r&quot;  </span><br><span class="hljs-string">        exp_continue  </span><br><span class="hljs-string">    &#125;  </span><br><span class="hljs-string">    timeout &#123;  </span><br><span class="hljs-string">        puts &quot;connect is timeout&quot;  </span><br><span class="hljs-string">        exit 3  </span><br><span class="hljs-string">    &#125;  </span><br><span class="hljs-string">&#125;  </span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>添加可执行权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> +x /app/scp.exp<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Slurm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Slurm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker-compose运行sky+es</title>
    <link href="/2023/04/06/%E4%B8%AD%E9%97%B4%E4%BB%B6/SkyWalking/%E4%BD%BF%E7%94%A8docker-compose%E8%BF%90%E8%A1%8Csky+es8/"/>
    <url>/2023/04/06/%E4%B8%AD%E9%97%B4%E4%BB%B6/SkyWalking/%E4%BD%BF%E7%94%A8docker-compose%E8%BF%90%E8%A1%8Csky+es8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker-compose运行sky-es"><a href="#使用docker-compose运行sky-es" class="headerlink" title="使用docker-compose运行sky+es"></a>使用docker-compose运行sky+es</h1><h2 id="sky9-es8"><a href="#sky9-es8" class="headerlink" title="sky9+es8"></a>sky9+es8</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">elasticsearch:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:8.5.3</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">elasticsearch</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">9200</span><span class="hljs-string">:9200</span><br>    <span class="hljs-attr">healthcheck:</span><br>      <span class="hljs-attr">test:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">CMD-SHELL</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">curl</span> <span class="hljs-string">-sf</span> <span class="hljs-string">http://localhost:9200/_cluster/health</span> <span class="hljs-string">||</span> <span class="hljs-string">exit</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">interval:</span> <span class="hljs-string">30s</span><br>      <span class="hljs-attr">timeout:</span> <span class="hljs-string">10s</span><br>      <span class="hljs-attr">retries:</span> <span class="hljs-number">3</span><br>      <span class="hljs-attr">start_period:</span> <span class="hljs-string">40s</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">discovery.type:</span> <span class="hljs-string">single-node</span><br>      <span class="hljs-attr">ingest.geoip.downloader.enabled:</span> <span class="hljs-string">&quot;false&quot;</span><br>      <span class="hljs-attr">bootstrap.memory_lock:</span> <span class="hljs-string">&quot;true&quot;</span><br>      <span class="hljs-attr">ES_JAVA_OPTS:</span> <span class="hljs-string">-Xms512m</span> <span class="hljs-string">-Xmx512m</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>      <span class="hljs-attr">xpack.security.enabled:</span> <span class="hljs-string">&quot;false&quot;</span><br>    <span class="hljs-attr">ulimits:</span><br>      <span class="hljs-attr">memlock:</span><br>        <span class="hljs-attr">soft:</span> <span class="hljs-number">-1</span><br>        <span class="hljs-attr">hard:</span> <span class="hljs-number">-1</span><br>        <br>  <span class="hljs-attr">skywalking-oap:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">apache/skywalking-oap-server:9.3.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">skywalking-oap</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-attr">elasticsearch:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">service_healthy</span><br>    <span class="hljs-attr">links:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">SW_HEALTH_CHECKER:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">SW_STORAGE:</span> <span class="hljs-string">elasticsearch</span><br>      <span class="hljs-attr">SW_STORAGE_ES_CLUSTER_NODES:</span> <span class="hljs-string">elasticsearch:9200</span><br>      <span class="hljs-attr">JAVA_OPTS:</span> <span class="hljs-string">-Xms2048m</span> <span class="hljs-string">-Xmx2048m</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>      <span class="hljs-attr">SW_TELEMETRY:</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">healthcheck:</span><br>      <span class="hljs-attr">test:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">CMD-SHELL</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/skywalking/bin/swctl</span> <span class="hljs-string">ch</span><br>      <span class="hljs-attr">interval:</span> <span class="hljs-string">30s</span><br>      <span class="hljs-attr">timeout:</span> <span class="hljs-string">10s</span><br>      <span class="hljs-attr">retries:</span> <span class="hljs-number">3</span><br>      <span class="hljs-attr">start_period:</span> <span class="hljs-string">10s</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">11800</span><span class="hljs-string">:11800</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">12800</span><span class="hljs-string">:12800</span><br><br>  <span class="hljs-attr">skywalking-ui:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">apache/skywalking-ui:9.3.0</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-attr">skywalking-oap:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">service_healthy</span><br>    <span class="hljs-attr">links:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">skywalking-oap</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:8080</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">SW_OAP_ADDRESS:</span> <span class="hljs-string">http://skywalking-oap:12800</span><br>      <span class="hljs-attr">SW_HEALTH_CHECKER:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br><br></code></pre></td></tr></table></figure><h2 id="sky8-9-es7"><a href="#sky8-9-es7" class="headerlink" title="sky8.9+es7"></a>sky8.9+es7</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">elasticsearch:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:7.17.8</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">elasticsearch</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">9200</span><span class="hljs-string">:9200</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/sky+es/es/data:/usr/share/elasticsearch/data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/sky+es/es/logs:/usr/share/elasticsearch/logs</span><br>    <span class="hljs-attr">healthcheck:</span><br>      <span class="hljs-attr">test:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">CMD-SHELL</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">curl</span> <span class="hljs-string">-sf</span> <span class="hljs-string">http://localhost:9200/_cluster/health</span> <span class="hljs-string">||</span> <span class="hljs-string">exit</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">interval:</span> <span class="hljs-string">30s</span><br>      <span class="hljs-attr">timeout:</span> <span class="hljs-string">10s</span><br>      <span class="hljs-attr">retries:</span> <span class="hljs-number">3</span><br>      <span class="hljs-attr">start_period:</span> <span class="hljs-string">40s</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">discovery.type:</span> <span class="hljs-string">single-node</span><br>      <span class="hljs-attr">ingest.geoip.downloader.enabled:</span> <span class="hljs-string">&quot;false&quot;</span><br>      <span class="hljs-attr">bootstrap.memory_lock:</span> <span class="hljs-string">&quot;true&quot;</span><br>      <span class="hljs-attr">ES_JAVA_OPTS:</span> <span class="hljs-string">-Xms512m</span> <span class="hljs-string">-Xmx512m</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>      <span class="hljs-attr">xpack.security.enabled:</span> <span class="hljs-string">&quot;false&quot;</span><br>    <span class="hljs-attr">ulimits:</span><br>      <span class="hljs-attr">memlock:</span><br>        <span class="hljs-attr">soft:</span> <span class="hljs-number">-1</span><br>        <span class="hljs-attr">hard:</span> <span class="hljs-number">-1</span><br>        <br>  <span class="hljs-attr">skywalking-oap:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">apache/skywalking-oap-server:8.9.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">skywalking-oap</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-attr">elasticsearch:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">service_healthy</span><br>    <span class="hljs-attr">links:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">SW_HEALTH_CHECKER:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">SW_STORAGE:</span> <span class="hljs-string">elasticsearch</span><br>      <span class="hljs-attr">SW_STORAGE_ES_CLUSTER_NODES:</span> <span class="hljs-string">elasticsearch:9200</span><br>      <span class="hljs-attr">JAVA_OPTS:</span> <span class="hljs-string">-Xms2048m</span> <span class="hljs-string">-Xmx2048m</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>      <span class="hljs-attr">SW_TELEMETRY:</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">healthcheck:</span><br>      <span class="hljs-attr">test:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">CMD-SHELL</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/skywalking/bin/swctl</span> <span class="hljs-string">ch</span><br>      <span class="hljs-attr">interval:</span> <span class="hljs-string">30s</span><br>      <span class="hljs-attr">timeout:</span> <span class="hljs-string">10s</span><br>      <span class="hljs-attr">retries:</span> <span class="hljs-number">3</span><br>      <span class="hljs-attr">start_period:</span> <span class="hljs-string">10s</span><br>    <span class="hljs-string">restart:always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">11800</span><span class="hljs-string">:11800</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">12800</span><span class="hljs-string">:12800</span><br><br>  <span class="hljs-attr">skywalking-ui:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">apache/skywalking-ui:8.9.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">skywalking-ui</span><br>    <span class="hljs-string">restart:always</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-attr">skywalking-oap:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">service_healthy</span><br>    <span class="hljs-attr">links:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">skywalking-oap</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:8080</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">SW_OAP_ADDRESS:</span> <span class="hljs-string">http://skywalking-oap:12800</span><br>      <span class="hljs-attr">SW_HEALTH_CHECKER:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>SkyWalking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SkyWalking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker运行SkyWalking</title>
    <link href="/2023/04/06/%E4%B8%AD%E9%97%B4%E4%BB%B6/SkyWalking/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8CSkyWalking/"/>
    <url>/2023/04/06/%E4%B8%AD%E9%97%B4%E4%BB%B6/SkyWalking/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8CSkyWalking/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker运行SkyWalking"><a href="#使用docker运行SkyWalking" class="headerlink" title="使用docker运行SkyWalking"></a>使用docker运行SkyWalking</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://ggball.top/pages/787755/#%E6%96%87%E4%BB%B6%E5%87%86%E5%A4%87<br></code></pre></td></tr></table></figure><h2 id="一、安装es"><a href="#一、安装es" class="headerlink" title="一、安装es"></a>一、安装es</h2><h3 id="启动-elasticsearch"><a href="#启动-elasticsearch" class="headerlink" title="启动 elasticsearch"></a>启动 elasticsearch</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建挂载目录</span><br><span class="hljs-built_in">mkdir</span> -p /data/elasticsearch/data<br><span class="hljs-built_in">mkdir</span> -p /data/elasticsearch/logs<br><span class="hljs-built_in">chmod</span> -R 777 /data/elasticsearch/data<br><span class="hljs-built_in">chmod</span> -R 777 /data/elasticsearch/logs<br><span class="hljs-comment">#使用docker运行</span><br>docker run -d --name=es7 \<br>  --restart=always \<br>  -p 9200:9200 -p 9300:9300 \<br>  -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \<br>  -v /data/elasticsearch/data:/usr/share/elasticsearch/data \<br>  -v /data/elasticsearch/logs:/usr/share/elasticsearch/logs \<br>elasticsearch:7.17.8<br><br></code></pre></td></tr></table></figure><h2 id="二、安装-oap"><a href="#二、安装-oap" class="headerlink" title="二、安装 oap"></a>二、安装 oap</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br><span class="hljs-comment">#注意：等待 elasticsearch 完全启动之后，再启动 oap</span><br><br><span class="hljs-comment">#使用docker运行oap</span><br>docker run --name oap --restart always -d \<br>--restart=always \<br>-e TZ=Asia/Shanghai \<br>-p 12800:12800 \<br>-p 11800:11800 \<br>--<span class="hljs-built_in">link</span> es7:es7 \<br>-e SW_STORAGE=elasticsearch7 \<br>-e SW_STORAGE_ES_CLUSTER_NODES=es7:9200 \<br>apache/skywalking-oap-server:8.3.0-es7<br><br><span class="hljs-comment">#说明：</span><br>–<span class="hljs-built_in">link</span>： es7 和你启动的 es 容器的 name 保持一致<br>-e SW_STORAGE=elasticsearch7 指定 elasticsearch7 来存储数据<br>-e SW_STORAGE_ES_CLUSTER_NODES：es7 也可改为你 es 服务器部署的 Ip 地址，即 ip:9200<br><br></code></pre></td></tr></table></figure><h3 id="当更改到更高的skywalking后，skywalking报错：no-provider-found-for-module-storage"><a href="#当更改到更高的skywalking后，skywalking报错：no-provider-found-for-module-storage" class="headerlink" title="当更改到更高的skywalking后，skywalking报错：no provider found for module storage"></a>当更改到更高的skywalking后，skywalking报错：no provider found for module storage</h3><p>原因分析：<br>skywalking 8.8之前不能自动感知存储源是什么，需要手动指定是es6还是7；<br>8.8之后可以自动感知存储源的版本，不需要手动指定es6还是7，直接写es即可；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">将：-e SW_STORAGE=elasticsearch7 \<br><br>改成：-e SW_STORAGE=elasticsearch<br><br></code></pre></td></tr></table></figure><h2 id="三、安装UI"><a href="#三、安装UI" class="headerlink" title="三、安装UI"></a>三、安装UI</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name skywalking-ui \<br>--restart=always \<br>-e TZ=Asia/Shanghai \<br>-p 8080:8080 \<br>--<span class="hljs-built_in">link</span> oap:oap \<br>-e SW_OAP_ADDRESS=oap:12800 \<br>apache/skywalking-ui:8.3.0<br><br><span class="hljs-comment">#说明：</span><br>– <span class="hljs-built_in">link</span>：注意容器的名称<br>-e SW_OAP_ADDRESS：oap 容器名称，也可改为 ip:12800，即其他服务的 IP 和端口<br></code></pre></td></tr></table></figure><h2 id="四、使用agent"><a href="#四、使用agent" class="headerlink" title="四、使用agent"></a>四、使用agent</h2><h3 id="4-1、下载源码包"><a href="#4-1、下载源码包" class="headerlink" title="4.1、下载源码包"></a>4.1、下载源码包</h3><p>下载地址：<code>https://archive.apache.org/dist/skywalking/</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://archive.apache.org/dist/skywalking/8.6.0/apache-skywalking-apm-es7-8.6.0.tar.gz<br><span class="hljs-comment">#下载源码包并解压，会用到其中agent文件夹</span><br>tar -xnf apache-skywalking-apm-es7-8.6.0.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> apache-skywalking-apm-bin-es7<br><br><span class="hljs-comment">#文件夹拷贝到发布容器中，位置可以根据情况调整</span><br><span class="hljs-built_in">cp</span> -r ./agent/*  /opt/skywalkingAgent<br><br><span class="hljs-comment">#文件说明</span><br>config/agent.config：为客户端代理配置文件，可以根据系统情况进行响应调整。<br>logs：SW agent 相关运行情况日志。<br>skywalking-agent.jar：agent 代理 jar 包。<br></code></pre></td></tr></table></figure><h3 id="4-2、使用方式"><a href="#4-2、使用方式" class="headerlink" title="4.2、使用方式"></a>4.2、使用方式</h3><p>有四种方式配置，优先级如下:</p><blockquote><p>探针配置 &gt; JVM配置 &gt; 系统环境变量配置 &gt; agent.config文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">java -javaagent:/opt/skywalking/apache-skywalking-apm-bin-es7/agent/skywalking-agent.jar -Dskywalking.agent.service_name=service-pfm   -Dskywalking.collector.backend_service=127.0.0.1:11800  -jar lab-39-demo-2.2.2.RELEASE.jar<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>SkyWalking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SkyWalking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建SkyWalking单机环境</title>
    <link href="/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/SkyWalking/%E6%90%AD%E5%BB%BASkyWalking%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/SkyWalking/%E6%90%AD%E5%BB%BASkyWalking%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="搭建-SkyWalking-单机环境"><a href="#搭建-SkyWalking-单机环境" class="headerlink" title="搭建 SkyWalking 单机环境"></a>搭建 SkyWalking 单机环境</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://skywalking.apache.org/zh/2020-04-19-skywalking-quick-start/#<br></code></pre></td></tr></table></figure><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>分布式系统的应用程序性能监视工具，专为微服务、云原生架构和基于容器（Docker、K8s、Mesos）架构而设计。<br>提供分布式追踪、服务网格遥测分析、度量聚合和可视化一体化解决方案。</p><p><img src="/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/SkyWalking/%E6%90%AD%E5%BB%BASkyWalking%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83/0081Kckwly1gkl533fk5xj31pc0s8h04.jpg" alt="img"></p><h2 id="一、搭建过程"><a href="#一、搭建过程" class="headerlink" title="一、搭建过程"></a>一、搭建过程</h2><h3 id="1-根据下面SkyWalking指定的es版本安装es"><a href="#1-根据下面SkyWalking指定的es版本安装es" class="headerlink" title="1.根据下面SkyWalking指定的es版本安装es"></a>1.根据下面SkyWalking指定的es版本安装es</h3><p>（Elasticsearch 搭建过程已略过，可参考个人文档ElasticSearch安装）</p><h3 id="2-下载-SkyWalking-软件包"><a href="#2-下载-SkyWalking-软件包" class="headerlink" title="2.下载 SkyWalking 软件包"></a>2.下载 SkyWalking 软件包</h3><p>下载地址：<a href="https://archive.apache.org/dist/skywalking/">https://archive.apache.org/dist/skywalking/</a></p><p><img src="/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/SkyWalking/%E6%90%AD%E5%BB%BASkyWalking%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83/image-20221221153753854.png" alt="image-20221221153753854"></p><p><strong>备注，选择上面备注了es版本的包下载</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /opt/SkyWalking &amp;&amp; <span class="hljs-built_in">cd</span> /opt/SkyWalking<br><br>wget https://archive.apache.org/dist/skywalking/8.6.0/<br><br>tar -xnf apache-skywalking-apm-es7-8.6.0.tar.gz<br></code></pre></td></tr></table></figure><h3 id="3-修改Skywalking存储的数据源配置"><a href="#3-修改Skywalking存储的数据源配置" class="headerlink" title="3.修改Skywalking存储的数据源配置"></a>3.修改Skywalking存储的数据源配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> apache-skywalking-apm-bin-es7/<br><br>vim config/application.yml<br><br><span class="hljs-comment">#SkyWalking9版本后已经兼容了es678,只需要修改elasticsearch即可</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/SkyWalking/%E6%90%AD%E5%BB%BASkyWalking%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83/image-20221221163158665.png" alt="image-20221221163158665"></p><p>备注：$SW_NAMESPACE后面名称为：es的elasticsearch.yml文件中的cluster.name:字段名称</p><h3 id="4-修改UI配置文件，端口号默认为8080，为了避免端口号冲突，可以将其修改（也可不修改）"><a href="#4-修改UI配置文件，端口号默认为8080，为了避免端口号冲突，可以将其修改（也可不修改）" class="headerlink" title="4.修改UI配置文件，端口号默认为8080，为了避免端口号冲突，可以将其修改（也可不修改）"></a>4.修改UI配置文件，端口号默认为8080，为了避免端口号冲突，可以将其修改（也可不修改）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim  webapp/webapp.yml<br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/SkyWalking/%E6%90%AD%E5%BB%BASkyWalking%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83/520237-20220329231847575-1603485708.png" alt="img"></p><h3 id="5-启动skywalking服务"><a href="#5-启动skywalking服务" class="headerlink" title="5.启动skywalking服务"></a>5.启动skywalking服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">bin/startup.sh<br></code></pre></td></tr></table></figure><h3 id="6-浏览器访问skywalking客户端页面"><a href="#6-浏览器访问skywalking客户端页面" class="headerlink" title="6.浏览器访问skywalking客户端页面"></a>6.浏览器访问skywalking客户端页面</h3><p><img src="/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/SkyWalking/%E6%90%AD%E5%BB%BASkyWalking%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83/image-20221221165424543.png" alt="image-20221221165424543"></p><h2 id="二、使用Agent"><a href="#二、使用Agent" class="headerlink" title="二、使用Agent"></a>二、使用Agent</h2><h3 id="1、agent文件夹详情："><a href="#1、agent文件夹详情：" class="headerlink" title="1、agent文件夹详情："></a>1、agent文件夹详情：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">ll /opt/SkyWalking/apache-skywalking-apm-bin-es7/agent<br><span class="hljs-comment">#可以看到有如下文件夹</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/SkyWalking/%E6%90%AD%E5%BB%BASkyWalking%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83/20200720171829856.png" alt="img"></p><h3 id="2、为继续测试以下步骤，从网上已找到一个lab-39-demo-2-2-2-RELEASE-jar包，github地址为：https-github-com-YunaiV-SpringBoot-Labs-tree-master-lab-39-lab-39-demo，可使用-mvn-clean-package-Dmaven-test-skip-true-编译，已保存本地"><a href="#2、为继续测试以下步骤，从网上已找到一个lab-39-demo-2-2-2-RELEASE-jar包，github地址为：https-github-com-YunaiV-SpringBoot-Labs-tree-master-lab-39-lab-39-demo，可使用-mvn-clean-package-Dmaven-test-skip-true-编译，已保存本地" class="headerlink" title="2、为继续测试以下步骤，从网上已找到一个lab-39-demo-2.2.2.RELEASE.jar包，github地址为：https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-39/lab-39-demo，可使用 mvn clean package -Dmaven.test.skip=true 编译，已保存本地"></a>2、为继续测试以下步骤，从网上已找到一个lab-39-demo-2.2.2.RELEASE.jar包，github地址为：<a href="https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-39/lab-39-demo%EF%BC%8C%E5%8F%AF%E4%BD%BF%E7%94%A8">https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-39/lab-39-demo，可使用</a> <code>mvn clean package -Dmaven.test.skip=true</code> 编译，已保存本地</h3><h3 id="3、修改配置"><a href="#3、修改配置" class="headerlink" title="3、修改配置"></a>3、修改配置</h3><p>有四种方式配置，优先级如下:</p><blockquote><p>探针配置 &gt; JVM配置 &gt; 系统环境变量配置 &gt; agent.config文件</p></blockquote><h4 id="方式一：系统环境变量配置："><a href="#方式一：系统环境变量配置：" class="headerlink" title="方式一：系统环境变量配置："></a>方式一：系统环境变量配置：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># SkyWalking Agent 配置</span><br><span class="hljs-built_in">export</span> SW_AGENT_NAME=my-test <span class="hljs-comment"># 配置 Agent 名字。一般来说，我们直接使用 Spring Boot 项目的 `spring.application.name` 。</span><br><span class="hljs-built_in">export</span> SW_AGENT_COLLECTOR_BACKEND_SERVICES=127.0.0.1:11800 <span class="hljs-comment"># 配置 Collector 地址。</span><br><span class="hljs-built_in">export</span> SW_AGENT_SPAN_LIMIT=2000 <span class="hljs-comment"># 配置链路的最大 Span 数量。一般情况下，不需要配置，默认为 300 。主要考虑，有些新上 SkyWalking Agent 的项目，代码可能比较糟糕。</span><br><span class="hljs-built_in">export</span> JAVA_AGENT=-javaagent:/opt/skywalking/apache-skywalking-apm-bin-es7/agent/skywalking-agent.jar <span class="hljs-comment"># SkyWalking Agent jar 地址。</span><br><br><span class="hljs-comment"># Jar 启动</span><br>java -jar <span class="hljs-variable">$JAVA_AGENT</span> -jar lab-39-demo-2.2.2.RELEASE.jar<br></code></pre></td></tr></table></figure><h4 id="方式二：JVM启动："><a href="#方式二：JVM启动：" class="headerlink" title="方式二：JVM启动："></a>方式二：JVM启动：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">java -javaagent:/opt/skywalking/apache-skywalking-apm-bin-es7/agent/skywalking-agent.jar -Dskywalking.agent.service_name=service-pfm   -Dskywalking.collector.backend_service=127.0.0.1:11800  -jar lab-39-demo-2.2.2.RELEASE.jar<br></code></pre></td></tr></table></figure><h4 id="方法三：配置文件启动"><a href="#方法三：配置文件启动" class="headerlink" title="方法三：配置文件启动"></a>方法三：配置文件启动</h4><p>agent.config主要配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim  /opt/SkyWalking/apache-skywalking-apm-bin-es7/agent/conf/agent.conf<br><br><span class="hljs-comment"># 不同的namespace会导致调用链路追踪中断</span><br>agent.namespace=<span class="hljs-variable">$&#123;SW_AGENT_NAMESPACE:default-namespace&#125;</span><br><br><span class="hljs-comment"># 页面上展示的service的名称，也可以通过-Dskywalking.agent.service_name=xxx指定</span><br>agent.service_name=<span class="hljs-variable">$&#123;SW_AGENT_NAME:my-test&#125;</span><br><br><span class="hljs-comment"># 平台的调用地址，也可以通过-Dskywalking.collector.backend_service=127.0.0.1:11800指定</span><br>collector.backend_service=<span class="hljs-variable">$&#123;SW_AGENT_COLLECTOR_BACKEND_SERVICES:127.0.0.1:11800&#125;</span><br><br><span class="hljs-comment"># 忽略指定后缀的请求收集</span><br>agent.ignore_suffix=<span class="hljs-variable">$&#123;SW_AGENT_IGNORE_SUFFIX:.jpg,.jpeg,.js,.css,.png,.bmp,.gif,.ico,.mp3,.mp4,.html,.svg&#125;</span><br><br><span class="hljs-comment"># 每3秒的采样率，负数代表100%</span><br>agent.sample_n_per_3_secs=<span class="hljs-variable">$&#123;SW_AGENT_SAMPLE:-1&#125;</span><br></code></pre></td></tr></table></figure><p><em>注意：如果Collector以集群方式部署，比如：Acollector和Bcollector，建议Acollector.sampleRate &#x3D; Bcollector.sampleRate</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -javaagent:/opt/skywalking/apache-skywalking-apm-bin-es7/agent/skywalking-agent.jar  -jar lab-39-demo-2.2.2.RELEASE.jar<br></code></pre></td></tr></table></figure><p>–注意：运行后都将会在logs文件夹下产生日志文件–</p><h3 id="4、根据以上配置修改后进行启动；我选择的是《方式二JVM启动》。"><a href="#4、根据以上配置修改后进行启动；我选择的是《方式二JVM启动》。" class="headerlink" title="4、根据以上配置修改后进行启动；我选择的是《方式二JVM启动》。"></a>4、根据以上配置修改后进行启动；我选择的是《方式二JVM启动》。</h3><p>当按照命令将demo的jar包运行后，可在本地查看到有个为8079的端口</p><p><img src="/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/SkyWalking/%E6%90%AD%E5%BB%BASkyWalking%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83/image-20221222164509266.png" alt="image-20221222164509266"></p><p>访问：<a href="http://192.168.62.128:8079/demo/echo">http://192.168.62.128:8079/demo/echo</a></p><p><img src="/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/SkyWalking/%E6%90%AD%E5%BB%BASkyWalking%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83/image-20221222165132936.png" alt="image-20221222165132936"></p><p>然后打开我们的skywalking客户端页面，可以看到我们的服务和数据</p><p><img src="/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/SkyWalking/%E6%90%AD%E5%BB%BASkyWalking%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83/image-20221222165937262.png" alt="image-20221222165937262"></p><h2 id="三、使用systemctl"><a href="#三、使用systemctl" class="headerlink" title="三、使用systemctl"></a>三、使用systemctl</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建后台启动模版</span><br>vim /etc/systemd/system/skywaking.service<br><span class="hljs-comment"># 内容如下：</span><br>[Unit]<br>Description=skywaking<br>After=network.target<br><br>[Service]<br><span class="hljs-comment">#/opt/SkyWalking/apache-skywalking-apm-bin-es7/ 文件所在路径</span><br>ExecStart=/opt/SkyWalking/apache-skywalking-apm-bin-es7/bin/startup.sh<br><br>[Install]<br>WantedBy=multi-user.target<br><br><br><span class="hljs-comment"># 启动测试</span><br>systemctl start skywaking.service<br><span class="hljs-comment"># 查看启动状态</span><br>systemctl status skywaking.service<br><span class="hljs-comment"># 开机自启</span><br>systemctl <span class="hljs-built_in">enable</span> skywaking.service<br><span class="hljs-comment"># 重新启动</span><br>systemctl restart skywaking.service<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>SkyWalking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SkyWalking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Seata安装部署</title>
    <link href="/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/Seata/Seata%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/Seata/Seata%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Seata安装部署"><a href="#Seata安装部署" class="headerlink" title="Seata安装部署"></a>Seata安装部署</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">官方文档：https://seata.io/zh-cn/docs/ops/deploy-guide-beginner.html<br>参考博主文档：https://www.yht7.com/news/213351<br>Seata分TC、TM和RM三个角色，TC（Server端）为单独服务端部署，TM和RM（Client端）由业务系统集成。<br></code></pre></td></tr></table></figure><p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p><h2 id="1、部署方式："><a href="#1、部署方式：" class="headerlink" title="1、部署方式："></a>1、部署方式：</h2><p>以下采用DB+Nacos方式进行部署，Seata是一个分布式事务，seata服务端也是一个微服务，和其他微服务一样需要注册中心和配置中心。<br>同时事务回滚，需要数据库日志记录:</p><ul><li>注册中心和配置中心: nacos</li><li>数据库: mysql</li></ul><h3 id="2、机器-、服务规划："><a href="#2、机器-、服务规划：" class="headerlink" title="2、机器 、服务规划："></a>2、机器 、服务规划：</h3><table><thead><tr><th>服务器名</th><th>ip地址</th><th>备注</th></tr></thead><tbody><tr><td>mysql-seata</td><td>192.168.62.128</td><td>部署seata和mysql服务</td></tr><tr><td>nacos</td><td>192.168.62.129</td><td>部署nacos服务</td></tr></tbody></table><h3 id="3、安装nacos、mysql"><a href="#3、安装nacos、mysql" class="headerlink" title="3、安装nacos、mysql"></a>3、安装nacos、mysql</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">nacos：（安装过程略过）<br>访问页面：192.168.62.129:8848/nacos<br>账号：nacos<br>密码：nacos<br><br>mysql：（使用docker运行、过程略过）<br>端口：3306<br>账号：root<br>密码：123456<br><br></code></pre></td></tr></table></figure><h3 id="4、安装Seata-均在192-168-62-128服务器上执行）"><a href="#4、安装Seata-均在192-168-62-128服务器上执行）" class="headerlink" title="4、安装Seata(均在192.168.62.128服务器上执行）"></a>4、安装Seata(均在192.168.62.128服务器上执行）</h3><p>安装包下载地址：<a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p><h4 id="4-1、下载并解压安装包"><a href="#4-1、下载并解压安装包" class="headerlink" title="4.1、下载并解压安装包"></a>4.1、下载并解压安装包</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /app &amp;&amp; <span class="hljs-built_in">cd</span> /app<br>wget https://github.com/seata/seata/releases/download/v1.5.2/seata-server-1.5.2.tar.gz<br><br>tar -xnf seata-server-1.5.2.tar.gz<br><span class="hljs-built_in">cd</span> seata<br></code></pre></td></tr></table></figure><h4 id="4-2、创建数据库，并创建所需的表"><a href="#4-2、创建数据库，并创建所需的表" class="headerlink" title="4.2、创建数据库，并创建所需的表"></a>4.2、创建数据库，并创建所需的表</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建seata数据库</span><br>mysql -uroot -p123456 -e <span class="hljs-string">&#x27;create database seata;&#x27;</span><br><br><br><span class="hljs-comment">#创建所需表</span><br><span class="hljs-comment">#在seata文件夹里面的script文件，找到server -&gt; db -&gt; mysql.sql，然后在数据库中执行sql语句</span><br>mysql -uroot -p123456 seata &lt; /app/seata/script/server/db/mysql.sql<br><br><span class="hljs-comment">#全局事务会话由：全局事务、分支事务、全局锁，对应表分别为global_table、branch_table、lock_table</span><br></code></pre></td></tr></table></figure><h4 id="4-3、配置-nacos"><a href="#4-3、配置-nacos" class="headerlink" title="4.3、配置 nacos"></a>4.3、配置 nacos</h4><p>在nacos控制台添加新的命名空间：添加<code>seata</code>，<code>命名空间ID</code>在后面需要用到</p><p><img src="/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/Seata/Seata%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/image-20221107175920290.png" alt="image-20221107175920290"></p><h4 id="4-4、上传配置至Nacos配置中心"><a href="#4-4、上传配置至Nacos配置中心" class="headerlink" title="4.4、上传配置至Nacos配置中心"></a>4.4、上传配置至Nacos配置中心</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#在seata目录中，找到nacos-config.sh文件，路径：script -&gt; config-center -&gt; nacos -&gt; nacos-config.sh。</span><br><span class="hljs-built_in">cd</span> /app/seata/script/config-center/nacos/<br><br><span class="hljs-comment">#授予执行权限</span><br>chomd 755 nacos-config.sh<br><br><span class="hljs-comment">#执行nacos-config.sh脚本：</span><br>sh nacos-config.sh -h 192.168.62.129 -p 8848 -g SEATA_GROUP -t 31a973ea-870b-454b-b103-eeec168ca766 -u nacos -w nacos<br><br><span class="hljs-comment">##参数详解:</span><br>-h nacos服务IP<br>-p nacos服务端口<br>-u nacos登录名<br>-w nacos登录密码<br>-g nacos 配置的分组名称，默认设置SEATA_GROUP<br>-t 上一步配置的命名空间ID<br><br><span class="hljs-comment">##执行脚本之后，输出以下脚本:</span><br>Set server.maxCommitRetryTimeout=-1 successfully <br>Set server.maxRollbackRetryTimeout=-1 successfully <br>Set server.rollbackRetryTimeoutUnlockEnable=<span class="hljs-literal">false</span> successfully <br>Set server.distributedLockExpireTime=10000 successfully<br><span class="hljs-comment">###...内容省略</span><br></code></pre></td></tr></table></figure><p>打开<code>nacos</code>控制台查看配置是否导入：</p><p><img src="/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/Seata/Seata%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/image-20221107180534786.png" alt="image-20221107180534786"></p><h4 id="4-5、修改appplication-yml文件"><a href="#4-5、修改appplication-yml文件" class="headerlink" title="4.5、修改appplication.yml文件"></a>4.5、修改appplication.yml文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#找到appplication.yml文件，路径为：seata -&gt; conf -&gt; application.yml</span><br><span class="hljs-built_in">cd</span>  /app/seata/conf/ &amp;&amp; <span class="hljs-built_in">cat</span> appplication.yml<br></code></pre></td></tr></table></figure><p>修改appplication.yml文件中的三个小节，分别配置store、config、registry:</p><p><img src="/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/Seata/Seata%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/image-20221107180833048.png" alt="image-20221107180833048"></p><h5 id="4-5-1、配置seata-store"><a href="#4-5-1、配置seata-store" class="headerlink" title="4.5.1、配置seata.store"></a>4.5.1、配置seata.store</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#seata.store配置seata的存储</span><br>vim appplication.yml<br><br><span class="hljs-comment">##修改store.mode=&quot;db&quot;</span><br><span class="hljs-comment">##修改数据库连接，将 seata -&gt; conf -&gt; application.example.yml中附带的模板配置，将其db相关配置复制至application.yml,修改store.db相关属性。和数据库：</span><br><br><span class="hljs-comment">###..以下为修改后内容，此块内容可在application.example.yml文件内找到模板..</span><br>  store:<br>    <span class="hljs-comment"># support: file 、 db 、 redis</span><br>    mode: db<br>    db:<br>      datasource: druid<br>      db-type: mysql<br>      driver-class-name: com.mysql.jdbc.Driver<br>      url: jdbc:mysql://192.168.62.128:3306/seata?rewriteBatchedStatements=<span class="hljs-literal">true</span><br>      user: root<br>      password: 123456<br>      min-conn: 5<br>      max-conn: 100<br>      global-table: global_table<br>      branch-table: branch_table<br>      lock-table: lock_table<br>      distributed-lock-table: distributed_lock<br>      query-limit: 100<br>      max-wait: 5000<br></code></pre></td></tr></table></figure><h5 id="4-5-2、配置seata-config"><a href="#4-5-2、配置seata-config" class="headerlink" title="4.5.2、配置seata.config"></a>4.5.2、配置seata.config</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#seata.config是配置nacos配置中心相关的配置。</span><br><br>vim appplication.yml<br><br><span class="hljs-comment">##将seata.config.type修改成nacos</span><br><span class="hljs-comment">###..以下为修改后内容，此块内容可在application.example.yml文件内找到模板..</span><br>  config:<br>    <span class="hljs-comment"># support: nacos, consul, apollo, zk, etcd3</span><br>    <span class="hljs-built_in">type</span>: nacos<br>    nacos:<br>      server-addr: 192.168.62.129:8848<br>      <span class="hljs-comment">#其中namespace是在nacos控制台添加新的命名空间ID</span><br>      namespace: 31a973ea-870b-454b-b103-eeec168ca766<br>      group: SEATA_GROUP<br>      username: nacos<br>      password: nacos<br>      <span class="hljs-comment">##if use MSE Nacos with auth, mutex with username/password attribute</span><br>      <span class="hljs-comment">#      #access-key: &quot;&quot;</span><br>      <span class="hljs-comment">#            #secret-key: &quot;&quot;</span><br>      <span class="hljs-comment">#data-id: seataServer.properties</span><br><br></code></pre></td></tr></table></figure><h5 id="4-5-3、配置seata-registry"><a href="#4-5-3、配置seata-registry" class="headerlink" title="4.5.3、配置seata.registry"></a>4.5.3、配置seata.registry</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#seata.registry是配置注册中心相关字段，将seata服务作为一个微服务注册到注册中心</span><br><br>vim appplication.yml<br><br><span class="hljs-comment">##将registry.type改成nacos</span><br><span class="hljs-comment">###..以下为修改后内容，此块内容可在application.example.yml文件内找到模板..</span><br>  registry:<br>    <span class="hljs-comment"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span><br>    <span class="hljs-built_in">type</span>: nacos<br>    nacos:<br>      application: seata-server<br>      server-addr: 192.168.62.129:8848<br>      group: SEATA_GROUP<br>      <span class="hljs-comment">#其中namespace是在nacos控制台添加新的命名空间ID</span><br>      namespace: 31a973ea-870b-454b-b103-eeec168ca766<br>      cluster: default<br>      username: nacos<br>      password: nacos<br>      <span class="hljs-comment">##if use MSE Nacos with auth, mutex with username/password attribute</span><br>      <span class="hljs-comment">#      #access-key: &quot;&quot;</span><br>      <span class="hljs-comment">#            #secret-key: &quot;&quot;</span><br><br></code></pre></td></tr></table></figure><h4 id="4-6、启动"><a href="#4-6、启动" class="headerlink" title="4.6、启动"></a>4.6、启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/seata/bin<br><br><br>./seata-server.sh -h 127.0.0.1 -p 8091 -m db<br><br><span class="hljs-comment">##控制台输出：</span><br>apm-skywalking not enabled<br>seata-server is starting, you can check the /app/seata/logs/start.out<br><br><br><span class="hljs-comment">##参数详情：</span><br>-h: 注册到注册中心的ip<br>-p: Server rpc 监听端口<br>-m: 全局事务会话信息存储模式，file、db、redis，优先读取启动参数 <br><br><span class="hljs-comment">##注: 堆内存建议分配2G，堆外内存1G</span><br><br></code></pre></td></tr></table></figure><h4 id="4-7、验证是否正常运行"><a href="#4-7、验证是否正常运行" class="headerlink" title="4.7、验证是否正常运行"></a>4.7、验证是否正常运行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#打开start.out日志</span><br><span class="hljs-built_in">tail</span> -20f /app/seata/logs/start.out<br><br><span class="hljs-comment">#系统启动成功后,登陆seata控制台</span><br>登录地址：http://192.168.62.128:709<br>登录账号：seata<br>密码：seata<br></code></pre></td></tr></table></figure><p><code>nacos</code>控制台服务列表新增了一个服务，说明<code>seata</code>服务成功注册到了<code>nacos</code>注册中心：</p><p><img src="/2023/04/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/Seata/Seata%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/image-20221107183004871.png" alt="image-20221107183004871"></p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Seata</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Seata</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rocketmq集群模式搭建</title>
    <link href="/2023/04/04/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/rocketmq%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/04/04/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/rocketmq%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Rocketmq集群模式搭建"><a href="#Rocketmq集群模式搭建" class="headerlink" title="Rocketmq集群模式搭建"></a>Rocketmq集群模式搭建</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">官方文档：https://rocketmq.apache.org/zh/docs/deploymentOperations/15deploy/<br></code></pre></td></tr></table></figure><h2 id="角色："><a href="#角色：" class="headerlink" title="角色："></a>角色：</h2><p>RocketMQ中主要涉及到四种角色：NameServer注册服务器、Broker服务器、Producer生产者、Consumer消费者。每种角色都可以单独搭建集群。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs txt">(一)、NameServer 集群<br>NameServer 是一个无状态的节点，可集群部署，节点都是各自独立的，无任何信息同步。<br><br>(二)、 Broker 集群<br>① Broker 分为 Master 与 Slave，一个 Master 可以对应多个 Slave，但一个 Slave 只能对应一个Master；<br>② Master 与 Slave 的对应关系通过指定相同的 BrokerName，不同的 BrokerID 来定义，id 为 0 表示 Master， 非 0 表示 Slave；<br>③ 可以部署多个 Master 实现 Broker 集群，即多组 Master - Slave 的 Broker 节点；<br>④ Master 通常用于写入数据，Slave 用于读取数据；<br>⑤ 每个 Broker 与 NameServer 集群中的所有节点建立长连接，定时注册 Topic 信息到所有 NameServer；<br><br>(三)、Producer 集群<br>① Producer 为消息的生产者，都是各自独立的无状态的节点，可以认为只要向 mq 中推送消息的节点都算作 Producer 节点。<br>② Producer 节点与 NameServer 集群中的随机一个节点建立长连接，定期从 NameServer 取出 Topic 路由信息，并向提供 Topic 服务的 Master 建立长连接，且定时向 Master 发送心跳。<br><br>(四)、Customer 集群<br>① Customer 为消息的消费者，都是各自独立的无状态的节点，可以认为只要向 mq 中获取消息的节点都算作 Customer 节点；<br>② Customer 节点与 NameServer 集群中的随机一个节点建立长连接，定期从 NameServer 取出 Topic 路由信息，并向提供 Topic 服务的 Master、Slave 建立长连接，且定时向 Master、Slave 发送心跳；<br>③ Customer 节点既可以从 Master 订阅消息，也可以从 Slave 订阅消息，订阅规则由 Broker 配置决定；<br></code></pre></td></tr></table></figure><h2 id="RocketMQ的四种集群模式"><a href="#RocketMQ的四种集群模式" class="headerlink" title="RocketMQ的四种集群模式"></a>RocketMQ的四种集群模式</h2><h3 id="一、单Master模式"><a href="#一、单Master模式" class="headerlink" title="一、单Master模式"></a>一、单Master模式</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">这种部署方式的风险比较大，一旦Broker宕掉，就会导致整个服务不可用，一般只在开发环境为了节约资源的时候使用，线上环境非常不建议使用。<br></code></pre></td></tr></table></figure><p><strong>部署文档:《二进制搭建rocketmq单节点.md》</strong></p><h3 id="二、多Master模式"><a href="#二、多Master模式" class="headerlink" title="二、多Master模式"></a>二、多Master模式</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">这种模式会在一个集群中部署多个Master，没有Slave，这种模式也是存在一定的优缺点：<br><br>优点：配置简单，单个Master宕掉其他几Master可以正常提供服务，在磁盘配置为RAID10时，消息基本上不会丢失，之所以不是百分百是因为异步刷盘可能会丢失少量消息，同步刷盘不会丢失消息。<br>缺点：如果其中一个Master宕掉，这台机器上还没有消费的消息在恢复之前不能被消费，可能影响消息的消费时效。<br></code></pre></td></tr></table></figure><h4 id="部署步骤："><a href="#部署步骤：" class="headerlink" title="部署步骤："></a><strong>部署步骤：</strong></h4><h5 id="1、下载并解压RocketMQ"><a href="#1、下载并解压RocketMQ" class="headerlink" title="1、下载并解压RocketMQ"></a>1、下载并解压RocketMQ</h5><p>二进制包下载地址：<a href="https://www.apache.org/dyn/closer.cgi?path=rocketmq/5.0.0/rocketmq-all-5.0.0-bin-release.zip">https://www.apache.org/dyn/closer.cgi?path=rocketmq/5.0.0/rocketmq-all-5.0.0-bin-release.zip</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://dlcdn.apache.org/rocketmq/5.0.0/rocketmq-all-5.0.0-bin-release.zip --no-check-certificate<br>unzip rocketmq-all-5.0.0-bin-release.zip<br><span class="hljs-built_in">cd</span> rocketmq-all-5.0.0-bin-release/<br></code></pre></td></tr></table></figure><h5 id="2、启动NameServer"><a href="#2、启动NameServer" class="headerlink" title="2、启动NameServer"></a>2、启动NameServer</h5><p>NameServer需要先于Broker启动，且如果在生产环境使用，为了保证高可用，建议一般规模的集群启动3个NameServer，各节点的启动命令相同，如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 首先启动NameServer</span><br><span class="hljs-built_in">nohup</span> sh bin/mqnamesrv &amp;<br> <br><span class="hljs-comment"># 验证Name Server 是否启动成功</span><br><span class="hljs-built_in">tail</span> -f ~/logs/rocketmqlogs/namesrv.log<br>The Name Server boot success...<br></code></pre></td></tr></table></figure><h5 id="3、启动Broker集群（三台Master，一个mqnamesrv）"><a href="#3、启动Broker集群（三台Master，一个mqnamesrv）" class="headerlink" title="3、启动Broker集群（三台Master，一个mqnamesrv）"></a>3、启动Broker集群（三台Master，一个mqnamesrv）</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 在机器A，启动第一个Master，例如NameServer的IP为：192.168.62.128</span><br><span class="hljs-comment">## conf/中有许多配置文件夹，我们下文直接沿用该2m-noslave文件夹内容</span><br><span class="hljs-comment">### 2m-2s-async:目录为双master双slave异步复制配置目录</span><br><span class="hljs-comment">### 2m-2s-sync :目录为双master双slave同步双写配置目录</span><br><span class="hljs-comment">### 2m-noslave :目录为多master配置目录</span><br><span class="hljs-built_in">nohup</span> sh bin/mqbroker -n 192.168.62.128:9876 -c ./conf/2m-noslave/broker-a.properties &amp;<br> <br><span class="hljs-comment"># 在机器B，启动第二个Master，例如NameServer的IP为：192.168.62.128</span><br><span class="hljs-built_in">nohup</span> sh bin/mqbroker -n 192.168.62.128:9876 -c ./conf/2m-noslave/broker-b.properties &amp;<br><br><span class="hljs-comment"># 在机器C，启动第三个Master，例如NameServer的IP为：192.168.62.128</span><br><span class="hljs-comment">## 复制配置文件</span><br><span class="hljs-built_in">cp</span> ./conf/2m-noslave/broker-a.properties ./conf/2m-noslave/broker-c.properties<br>vim ./conf/2m-noslave/broker-c.properties<br><br><span class="hljs-comment">## 修改brokerName</span><br>brokerName=broker-c<br><br><span class="hljs-comment">## 启动第三个Master</span><br><span class="hljs-built_in">nohup</span> sh bin/mqbroker -n 192.168.62.128:9876 -c ./conf/2m-noslave/broker-c.properties &amp;<br><br><br>备注：对于多个NameServer的集群，Broker启动命令中-n后面的地址列表用分号隔开即可，例如<span class="hljs-string">&#x27;192.168.1.1:9876;192.161.2:9876&#x27;</span>。也可在broker配置文件内定义。<br></code></pre></td></tr></table></figure><h5 id="4、启动proxy（可以在多台机器启动多个Proxy）"><a href="#4、启动proxy（可以在多台机器启动多个Proxy）" class="headerlink" title="4、启动proxy（可以在多台机器启动多个Proxy）"></a>4、启动proxy（可以在多台机器启动多个Proxy）</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#在机器A，启动第一个Proxy</span><br><span class="hljs-built_in">nohup</span> sh bin/mqproxy  -n 192.168.62.128:9876 &amp;<br><br><span class="hljs-comment">#在机器B，启动第一个Proxy</span><br><span class="hljs-built_in">nohup</span> sh bin/mqproxy  -n 192.168.62.128:9876 &amp;<br><br><span class="hljs-comment">#在机器C，启动第一个Proxy</span><br><span class="hljs-built_in">nohup</span> sh bin/mqproxy  -n 192.168.62.128:9876 &amp;<br><br><span class="hljs-comment"># 可通过如下命令查看启动状态</span><br>jps <br></code></pre></td></tr></table></figure><h3 id="三、多Master多Salve模式（异步）"><a href="#三、多Master多Salve模式（异步）" class="headerlink" title="三、多Master多Salve模式（异步）"></a>三、多Master多Salve模式（异步）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">每个Master配置一个Slave，有多对Master-Slave一起提供服务，HA采用异步复制方式，主备有很短暂的消息延迟，这种模式的优缺点：<br><br>优点：即使磁盘损坏，也只是会丢失非常少的消息，消息的时效性也不会有影响，Master宕机后依然可以消费从Slave消费消息，并且这个过程不需要人工干预，性能和多Master模式接近。<br>缺点：Master宕机磁盘损坏的情况下会丢失少量消息。<br></code></pre></td></tr></table></figure><h4 id="部署步骤：-1"><a href="#部署步骤：-1" class="headerlink" title="部署步骤："></a><strong>部署步骤：</strong></h4><h5 id="1、启动NameServer-高可用，集群启动3个NameServer"><a href="#1、启动NameServer-高可用，集群启动3个NameServer" class="headerlink" title="1、启动NameServer(高可用，集群启动3个NameServer)"></a>1、启动NameServer(高可用，集群启动3个NameServer)</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#已略过下载和解压步骤</span><br><span class="hljs-comment">#启动Name Server</span><br>$ <span class="hljs-built_in">nohup</span> sh mqnamesrv &amp;<br> <br><span class="hljs-comment">### 验证Name Server 是否启动成功</span><br>$ <span class="hljs-built_in">tail</span> -f ~/logs/rocketmqlogs/namesrv.log<br>The Name Server boot success...<br></code></pre></td></tr></table></figure><h5 id="2、启动Broker集群"><a href="#2、启动Broker集群" class="headerlink" title="2、启动Broker集群"></a>2、启动Broker集群</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">## conf/中有许多配置文件夹，我们下文直接沿用该2m-2s-async文件夹内容</span><br><span class="hljs-comment">### 2m-2s-async:目录为双master双slave异步复制配置目录</span><br><span class="hljs-comment">### 2m-2s-sync :目录为双master双slave同步双写配置目录</span><br><span class="hljs-comment">### 2m-noslave :目录为多master配置目录</span><br><br><span class="hljs-comment"># 在机器A，启动第一个Master,NameServer集群地址为：192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876</span><br><span class="hljs-built_in">nohup</span> sh bin/mqbroker -n <span class="hljs-string">&#x27;192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876&#x27;</span> -c conf/2m-2s-async/broker-a.properties autoCreateTopicEnable=<span class="hljs-literal">true</span> &amp;<br><br><span class="hljs-comment"># 在机器B，启动第二个Master,NameServer集群地址为：192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876</span><br><span class="hljs-built_in">nohup</span> sh bin/mqbroker -n <span class="hljs-string">&#x27;192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876&#x27;</span> -c conf/2m-2s-async/broker-a.properties autoCreateTopicEnable=<span class="hljs-literal">true</span> &amp;<br><br><span class="hljs-comment"># 在机器C，启动第一个Slave,NameServer集群地址为：192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876</span><br><span class="hljs-built_in">nohup</span> sh bin/mqbroker -n <span class="hljs-string">&#x27;192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876&#x27;</span> -c conf/2m-2s-async/broker-a-s.properties autoCreateTopicEnable=<span class="hljs-literal">true</span> &amp;<br><br><span class="hljs-comment"># 在机器D，启动第二个Slave,NameServer集群地址为：192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876</span><br><span class="hljs-built_in">nohup</span> sh bin/mqbroker -n <span class="hljs-string">&#x27;192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876&#x27;</span> -c conf/2m-2s-async/broker-b-s.properties autoCreateTopicEnable=<span class="hljs-literal">true</span> &amp;<br> <br><span class="hljs-comment">##autoCreateTopicEnable=true:允许创建topic，可去掉</span><br></code></pre></td></tr></table></figure><h5 id="3、启动proxy（可以在多台机器启动多个Proxy）"><a href="#3、启动proxy（可以在多台机器启动多个Proxy）" class="headerlink" title="3、启动proxy（可以在多台机器启动多个Proxy）"></a>3、启动proxy（可以在多台机器启动多个Proxy）</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#在机器A，启动第一个Proxy</span><br><span class="hljs-built_in">nohup</span> sh bin/mqproxy  -n <span class="hljs-string">&#x27;192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876&#x27;</span> &amp;<br><br><span class="hljs-comment">#在机器B，启动第一个Proxy</span><br><span class="hljs-built_in">nohup</span> sh bin/mqproxy  -n <span class="hljs-string">&#x27;192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876&#x27;</span> &amp;<br><br><span class="hljs-comment">#在机器C，启动第一个Proxy</span><br><span class="hljs-built_in">nohup</span> sh bin/mqproxy  -n <span class="hljs-string">&#x27;192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876&#x27;</span> &amp;<br><br><span class="hljs-comment"># 可通过如下命令查看启动状态</span><br>jps <br></code></pre></td></tr></table></figure><h3 id="四、多Master多Slave模式（同步）"><a href="#四、多Master多Slave模式（同步）" class="headerlink" title="四、多Master多Slave模式（同步）"></a>四、多Master多Slave模式（同步）</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">每个Master配置一个Slave，有多对Master-Slave，HA采用同步双写方式，即只有主备都写成功，才向应用返回成功，这种模式的优缺点如下：<br><br>优点：数据与服务都无单点故障，Master宕机情况下，消息无延迟，服务可用性与数据可用性都非常高；<br>缺点：性能比异步复制模式略低（大约低10%左右），发送单个消息的RT会略高，且目前版本在主节点宕机后，备机不能自动切换为主机。<br></code></pre></td></tr></table></figure><h4 id="部署步骤：-2"><a href="#部署步骤：-2" class="headerlink" title="部署步骤："></a><strong>部署步骤：</strong></h4><h5 id="1、启动NameServer-高可用，集群启动3个NameServer-1"><a href="#1、启动NameServer-高可用，集群启动3个NameServer-1" class="headerlink" title="1、启动NameServer(高可用，集群启动3个NameServer)"></a>1、启动NameServer(高可用，集群启动3个NameServer)</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#已略过下载和解压步骤</span><br><span class="hljs-comment">#启动Name Server</span><br>$ <span class="hljs-built_in">nohup</span> sh mqnamesrv &amp;<br> <br><span class="hljs-comment">### 验证Name Server 是否启动成功</span><br>$ <span class="hljs-built_in">tail</span> -f ~/logs/rocketmqlogs/namesrv.log<br>The Name Server boot success...<br></code></pre></td></tr></table></figure><h5 id="2、启动Broker集群-1"><a href="#2、启动Broker集群-1" class="headerlink" title="2、启动Broker集群"></a>2、启动Broker集群</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">## conf/中有许多配置文件夹，我们下文直接沿用该2m-2s-sync文件夹内容（生产环境可根据实际情况进行修改）</span><br><span class="hljs-comment">### 2m-2s-async:目录为双master双slave异步复制配置目录</span><br><span class="hljs-comment">### 2m-2s-sync :目录为双master双slave同步双写配置目录</span><br><span class="hljs-comment">### 2m-noslave :目录为多master配置目录</span><br><br><span class="hljs-comment"># 在机器A，启动第一个Master,NameServer集群地址为：192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876</span><br><span class="hljs-built_in">nohup</span> sh bin/mqbroker -n <span class="hljs-string">&#x27;192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876&#x27;</span> -c conf/2m-2s-<span class="hljs-built_in">sync</span>/broker-a.properties autoCreateTopicEnable=<span class="hljs-literal">true</span> &amp;<br><br><span class="hljs-comment"># 在机器B，启动第二个Master,NameServer集群地址为：192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876</span><br><span class="hljs-built_in">nohup</span> sh bin/mqbroker -n <span class="hljs-string">&#x27;192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876&#x27;</span> -c conf/2m-2s-<span class="hljs-built_in">sync</span>/broker-a.properties autoCreateTopicEnable=<span class="hljs-literal">true</span> &amp;<br><br><span class="hljs-comment"># 在机器C，启动第一个Slave,NameServer集群地址为：192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876</span><br><span class="hljs-built_in">nohup</span> sh bin/mqbroker -n <span class="hljs-string">&#x27;192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876&#x27;</span> -c conf/2m-2s-<span class="hljs-built_in">sync</span>/broker-a-s.properties autoCreateTopicEnable=<span class="hljs-literal">true</span> &amp;<br><br><span class="hljs-comment"># 在机器D，启动第二个Slave,NameServer集群地址为：192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876</span><br><span class="hljs-built_in">nohup</span> sh bin/mqbroker -n <span class="hljs-string">&#x27;192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876&#x27;</span> -c conf/2m-2s-<span class="hljs-built_in">sync</span>/broker-b-s.properties autoCreateTopicEnable=<span class="hljs-literal">true</span> &amp;<br></code></pre></td></tr></table></figure><h5 id="3、启动proxy（可以在多台机器启动多个Proxy）-1"><a href="#3、启动proxy（可以在多台机器启动多个Proxy）-1" class="headerlink" title="3、启动proxy（可以在多台机器启动多个Proxy）"></a>3、启动proxy（可以在多台机器启动多个Proxy）</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#在机器A，启动第一个Proxy</span><br><span class="hljs-built_in">nohup</span> sh bin/mqproxy  -n <span class="hljs-string">&#x27;192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876&#x27;</span> &amp;<br><br><span class="hljs-comment">#在机器B，启动第一个Proxy</span><br><span class="hljs-built_in">nohup</span> sh bin/mqproxy  -n <span class="hljs-string">&#x27;192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876&#x27;</span> &amp;<br><br><span class="hljs-comment">#在机器C，启动第一个Proxy</span><br><span class="hljs-built_in">nohup</span> sh bin/mqproxy  -n <span class="hljs-string">&#x27;192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876&#x27;</span> &amp;<br><br><span class="hljs-comment"># 可通过如下命令查看启动状态</span><br>jps <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>rocketmq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rocketmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RocketMQ集群架构</title>
    <link href="/2023/04/04/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/Rocketmq%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/"/>
    <url>/2023/04/04/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/Rocketmq%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RocketMQ集群架构"><a href="#RocketMQ集群架构" class="headerlink" title="RocketMQ集群架构"></a>RocketMQ集群架构</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考链接：https://blog.csdn.net/Weixiaohuai/article/details/123607472<br></code></pre></td></tr></table></figure><h2 id="一、集群架构："><a href="#一、集群架构：" class="headerlink" title="一、集群架构："></a>一、集群架构：</h2><h3 id="网络部署图："><a href="#网络部署图：" class="headerlink" title="网络部署图："></a>网络部署图：</h3><p><img src="/2023/04/04/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/Rocketmq%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/478598db4e9d3582aa7b8bac569e6c15.png" alt="img"></p><p>RocketMQ中主要涉及到四种角色：NameServer注册服务器、Broker服务器、Producer生产者、Consumer消费者。每种角色都可以单独搭建集群，下面我们分别介绍一下NameServer 集群、Broker 集群、Producer 集群、Customer 集群。</p><h3 id="一-、NameServer-集群"><a href="#一-、NameServer-集群" class="headerlink" title="(一)、NameServer 集群"></a><strong>(一)、NameServer 集群</strong></h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">NameServer 是一个无状态的节点，可集群部署，节点都是各自独立的，无任何信息同步。<br></code></pre></td></tr></table></figure><h3 id="二-、-Broker-集群"><a href="#二-、-Broker-集群" class="headerlink" title="(二)、 Broker 集群"></a><strong>(二)、 Broker 集群</strong></h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">① Broker 分为 Master 与 Slave，一个 Master 可以对应多个 Slave，但一个 Slave 只能对应一个Master；<br>② Master 与 Slave 的对应关系通过指定相同的 BrokerName，不同的 BrokerID 来定义，id 为 0 表示 Master， 非 0 表示 Slave；<br>③ 可以部署多个 Master 实现 Broker 集群，即多组 Master - Slave 的 Broker 节点；<br>④ Master 通常用于写入数据，Slave 用于读取数据；<br>⑤ 每个 Broker 与 NameServer 集群中的所有节点建立长连接，定时注册 Topic 信息到所有 NameServer；<br></code></pre></td></tr></table></figure><h3 id="三-、Producer-集群"><a href="#三-、Producer-集群" class="headerlink" title="(三)、Producer 集群"></a><strong>(三)、Producer 集群</strong></h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">① Producer 为消息的生产者，都是各自独立的无状态的节点，可以认为只要向 mq 中推送消息的节点都算作 Producer 节点。<br>② Producer 节点与 NameServer 集群中的随机一个节点建立长连接，定期从 NameServer 取出 Topic 路由信息，并向提供 Topic 服务的 Master 建立长连接，且定时向 Master 发送心跳。<br></code></pre></td></tr></table></figure><h3 id="四-、Customer-集群"><a href="#四-、Customer-集群" class="headerlink" title="(四)、Customer 集群"></a><strong>(四)、Customer 集群</strong></h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">① Customer 为消息的消费者，都是各自独立的无状态的节点，可以认为只要向 mq 中获取消息的节点都算作 Customer 节点；<br>② Customer 节点与 NameServer 集群中的随机一个节点建立长连接，定期从 NameServer 取出 Topic 路由信息，并向提供 Topic 服务的 Master、Slave 建立长连接，且定时向 Master、Slave 发送心跳；<br>③ Customer 节点既可以从 Master 订阅消息，也可以从 Slave 订阅消息，订阅规则由 Broker 配置决定；<br></code></pre></td></tr></table></figure><h2 id="二、RocketMQ集群工作流程"><a href="#二、RocketMQ集群工作流程" class="headerlink" title="二、RocketMQ集群工作流程"></a>二、RocketMQ集群工作流程</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">1、启动NameServer，NameServer启动后监听端口，等待Broker、Producer、Consumer连上来，相当于一个路由控制中心。<br>2、Broker启动，跟所有的NameServer保持长连接，定时发送心跳包。心跳包中包含当前Broker信息(IP+端口等)以及存储所有Topic信息。注册成功后，NameServer集群中就有Topic跟Broker的映射关系。<br>3、收发消息前，先创建Topic，创建Topic时需要指定该Topic要存储在哪些Broker上，也可以在发送消息时自动创建Topic。<br>4、Producer发送消息，启动时先跟NameServer集群中的其中一台建立长连接，并从NameServer中获取当前发送的Topic存在哪些Broker上，轮询从队列列表中选择一个队列，然后与队列所在的Broker建立长连接从而向Broker发消息。<br>5、Consumer跟Producer类似，跟其中一台NameServer建立长连接，获取当前订阅Topic存在哪些Broker上，然后直接跟Broker建立连接通道，开始消费消息。<br></code></pre></td></tr></table></figure><p>Master支持读和写，Slave仅支持读，也就是 Producer只能和Master连接写入消息；Consumer可以连接 Master，也可以连接Slave来读取消息。</p><h2 id="三、RocketMQ刷盘机制"><a href="#三、RocketMQ刷盘机制" class="headerlink" title="三、RocketMQ刷盘机制"></a>三、RocketMQ刷盘机制</h2><p>RocketMQ的消息是存储到磁盘上的，这样既能保证断电后恢复， 又可以让存储的消息量超出内存的限制。RocketMQ为了提高性能，会尽可能地保证磁盘的顺序写。消息在通过Producer写入RocketMQ的时候，有两种写磁盘方式：同步刷盘和异步刷盘。如下图：</p><h3 id="1）同步刷盘"><a href="#1）同步刷盘" class="headerlink" title="1）同步刷盘"></a>1）同步刷盘</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">在返回写成功状态时，消息已经被写入磁盘。具体流程是，消息写入内存的PAGECACHE后，立刻通知刷盘线程刷盘， 然后等待刷盘完成，刷盘线程执行完成后唤醒等待的线程，返回消息写成功的状态。<br></code></pre></td></tr></table></figure><h3 id="2）异步刷盘"><a href="#2）异步刷盘" class="headerlink" title="2）异步刷盘"></a>2）异步刷盘</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">在返回写成功状态时，消息可能只是被写入了内存的PAGECACHE，写操作的返回快，吞吐量大；当内存里的消息量积累到一定程度时，统一触发写磁盘动作，快速写入。<br></code></pre></td></tr></table></figure><h3 id="3）怎么配置刷盘方式？"><a href="#3）怎么配置刷盘方式？" class="headerlink" title="3）怎么配置刷盘方式？"></a>3）怎么配置刷盘方式？</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">同步刷盘还是异步刷盘，都是通过Broker配置文件里的flushDiskType参数设置的，这个参数被配置成SYNC_FLUSH（同步刷盘）、ASYNC_FLUSH（异步刷盘）中的 一个。<br></code></pre></td></tr></table></figure><h2 id="四、RocketMQ主从复制机制"><a href="#四、RocketMQ主从复制机制" class="headerlink" title="四、RocketMQ主从复制机制"></a>四、RocketMQ主从复制机制</h2><p>如果一个Broker组有Master和Slave，消息需要从Master复制到Slave 上，有同步和异步两种复制方式。</p><h3 id="1）同步复制"><a href="#1）同步复制" class="headerlink" title="1）同步复制"></a>1）同步复制</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">同步复制方式是等Master和Slave均写成功后，才反馈给客户端写成功状态；<br><br>在同步复制方式下，如果Master出故障， Slave上有全部的备份数据，容易恢复，但是同步复制会增大数据写入延迟，降低系统吞吐量。<br></code></pre></td></tr></table></figure><h3 id="2）异步复制"><a href="#2）异步复制" class="headerlink" title="2）异步复制"></a>2）异步复制</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">异步复制方式是只要Master写成功，即可反馈给客户端写成功状态。<br><br>在异步复制方式下，系统拥有较低的延迟和较高的吞吐量，但是如果Master出了故障，有些数据因为没有被写入Slave，有可能会丢失；<br></code></pre></td></tr></table></figure><h3 id="3）怎么配置复制方式？"><a href="#3）怎么配置复制方式？" class="headerlink" title="3）怎么配置复制方式？"></a>3）怎么配置复制方式？</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">同步复制和异步复制是通过Broker配置文件里的brokerRole参数进行设置的，这个参数可以被设置成ASYNC_MASTER（同步Master）、 SYNC_MASTER（异步Master）、SLAVE（从节点）三个值中的一个。<br></code></pre></td></tr></table></figure><h3 id="4）总结"><a href="#4）总结" class="headerlink" title="4）总结"></a>4）总结</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">实际应用中要结合业务场景，合理设置刷盘方式和主从复制方式， 尤其是SYNC_FLUSH方式，由于频繁地触发磁盘写动作，会明显降低性能。通常情况下，应该把Master和Save配置成ASYNC_FLUSH（异步刷盘）的刷盘方式，主从之间配置成SYNC_MASTER（同步复制）的复制方式，这样即使有一台机器出故障，仍然能保证数据不丢，是个不错的选择。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>rocketmq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rocketmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker运行RocketMQ管理利器Dashboard</title>
    <link href="/2023/04/04/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8CRocketMQ%E7%AE%A1%E7%90%86%E5%88%A9%E5%99%A8Dashboard/"/>
    <url>/2023/04/04/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8CRocketMQ%E7%AE%A1%E7%90%86%E5%88%A9%E5%99%A8Dashboard/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker运行RocketMQ管理利器Dashboard"><a href="#使用docker运行RocketMQ管理利器Dashboard" class="headerlink" title="使用docker运行RocketMQ管理利器Dashboard"></a>使用docker运行RocketMQ管理利器Dashboard</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://rocketmq.apache.org/zh/docs/deploymentOperations/17Dashboard<br></code></pre></td></tr></table></figure><p><strong>备注：以下记录的是docker运行rocketmq-dashboard管理利器，二进制包可查阅《参考文档》</strong></p><p><strong>RocketMQ Dashboard 是 RocketMQ 的管控利器</strong></p><h2 id="1、docker镜像拉取"><a href="#1、docker镜像拉取" class="headerlink" title="1、docker镜像拉取"></a>1、docker镜像拉取</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull apacherocketmq/rocketmq-dashboard:latest<br></code></pre></td></tr></table></figure><h2 id="2、运行容器"><a href="#2、运行容器" class="headerlink" title="2、运行容器"></a>2、运行容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name rocketmq-dashboard \<br>-e <span class="hljs-string">&quot;JAVA_OPTS=-Drocketmq.namesrv.addr=127.0.0.1:9876&quot;</span> \<br>-p 8080:8080 \<br>-t apacherocketmq/rocketmq-dashboard:latest<br><br><br>备注：namesrv.addr:port 需替换为 rocketmq 中配置的 nameserver 地址：端口号<br>例如：<br>docker run -d --name rocketmq-dashboard \<br>-e <span class="hljs-string">&quot;JAVA_OPTS=-Drocketmq.namesrv.addr=192.168.62.128:9876;192.168.62.129:9876;192.168.62.130:9876&quot;</span> \<br>-p 8080:8080 \<br>-t apacherocketmq/rocketmq-dashboard:latest<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>rocketmq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rocketmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker-compose安装rocketmq集群</title>
    <link href="/2023/04/04/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/%E4%BD%BF%E7%94%A8docker-compose%E5%AE%89%E8%A3%85rocketmq%E9%9B%86%E7%BE%A4/"/>
    <url>/2023/04/04/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/%E4%BD%BF%E7%94%A8docker-compose%E5%AE%89%E8%A3%85rocketmq%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker-compose安装rocketmq集群"><a href="#使用docker-compose安装rocketmq集群" class="headerlink" title="使用docker-compose安装rocketmq集群"></a>使用docker-compose安装rocketmq集群</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">#参考文档：https://blog.csdn.net/weixin_42410658/article/details/121668061<br>#集群结构为2Master：参考文档：https://blog.csdn.net/scmagic/article/details/124771179<br></code></pre></td></tr></table></figure><p>rocketMQ集群组成（双主双从异步刷盘）:</p><table><thead><tr><th>容器名称</th><th>与宿主机的端口映射</th></tr></thead><tbody><tr><td>rmqnamesrv-a</td><td>9876:9876</td></tr><tr><td>rmqnamesrv-b</td><td>9876:9877</td></tr><tr><td>rmqbroker-a</td><td>10911:10911</td></tr><tr><td>rmqbroker-a-s</td><td>10911:10912</td></tr><tr><td>rmqbroker-b</td><td>10911:10913</td></tr><tr><td>rmqbroker-b-s</td><td>10911:10914</td></tr><tr><td>rmqconsole</td><td>8080:8080</td></tr></tbody></table><h2 id="1-创建文件夹"><a href="#1-创建文件夹" class="headerlink" title="1.创建文件夹"></a>1.创建文件夹</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app/rocketmq/conf/broker1<br><span class="hljs-built_in">mkdir</span> -p /app/rocketmq/conf/broker2<br><span class="hljs-built_in">mkdir</span> -p /app/rocketmq/conf/broker3<br><span class="hljs-built_in">mkdir</span> -p /app/rocketmq/conf/broker4<br></code></pre></td></tr></table></figure><h2 id="2-创建broker-conf"><a href="#2-创建broker-conf" class="headerlink" title="2.创建broker.conf"></a>2.创建broker.conf</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#需要为每个节点配置一个broker.conf配置文件</span><br>vim /app/rocketmq/conf/broker1/broker.conf<br><br><span class="hljs-comment"># 所属集群名称，如果节点较多可以配置多个</span><br>brokerClusterName = rocketmq-cluster<br><span class="hljs-comment">#broker名称，master和slave使用相同的名称，表明他们的主从关系</span><br>brokerName = broker-a<br><span class="hljs-comment"># 0表示broker master  非0表示 broker slaver</span><br>brokerId = 0<br><br><span class="hljs-comment"># brokerIP1 当前broker监听的IP，不写将会使用docker镜像ip</span><br>brokerIP1 = rmqbroker-a<br><br><span class="hljs-comment"># brokerIP2 存在broker主从时，在broker主节点上配置了brokerIP2的话,broker从节点会连接主节点配置的brokerIP2来同步</span><br><span class="hljs-comment"># brokerIP2 = 192.168.111.129</span><br><br><span class="hljs-comment">#表示几点做消息删除动作，默认是凌晨4点</span><br>deleteWhen = 04<br><span class="hljs-comment">#在磁盘上保留消息的时长，单位是小时</span><br>fileReservedTime = 48<br><br>namesrvAddr = rmqnamesrv-a:9876;rmqnamesrv-b:9876<br><br><span class="hljs-comment"># 是否能够自动创建topic</span><br>autoCreateTopicEnable = <span class="hljs-literal">true</span><br><br><span class="hljs-comment">#Broker 对外服务的监听端口, 默认10911</span><br><span class="hljs-comment"># listenPort = 10911</span><br><br><span class="hljs-comment">#Broker角色</span><br><span class="hljs-comment">#- ASYNC_MASTER 异步复制Master</span><br><span class="hljs-comment">#- SYNC_MASTER 同步双写Master</span><br><span class="hljs-comment">#- SLAVE</span><br>brokerRole = ASYNC_MASTER<br><br><span class="hljs-comment">#刷盘策略，取值为：ASYNC_FLUSH，SYNC_FLUSH表示同步刷盘和异步刷盘；SYNC_FLUSH消息写入磁盘后才返回成功状态，ASYNC_FLUSH不需要；</span><br>flushDiskType = ASYNC_FLUSH<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /app/rocketmq/conf/broker2/broker.conf<br><span class="hljs-comment">#-=================输入以下内容-======================</span><br>brokerClusterName = rocketmq-cluster<br>brokerName = broker-a<br><br><span class="hljs-comment"># 0表示broker master  非0表示 broker slaver</span><br>brokerId = 1<br><span class="hljs-comment"># brokerIP1 当前broker监听的IP，不写将会使用docker镜像ip</span><br>brokerIP1 = rmqbroker-a-s<br><br>deleteWhen = 04<br>fileReservedTime = 48<br><br>namesrvAddr = rmqnamesrv-a:9876;rmqnamesrv-b:9876<br><br><span class="hljs-comment"># autoCreateTopicEnable=true</span><br><br><span class="hljs-comment">#Broker 对外服务的监听端口,</span><br><span class="hljs-comment">#listenPort = 10912</span><br><br><span class="hljs-comment">#Broker角色</span><br><span class="hljs-comment">#- ASYNC_MASTER 异步复制Master</span><br><span class="hljs-comment">#- SYNC_MASTER 同步双写Master</span><br><span class="hljs-comment">#- SLAVE</span><br>brokerRole = SLAVE<br><br><span class="hljs-comment">#刷盘方式</span><br><span class="hljs-comment">#- ASYNC_FLUSH 异步刷盘</span><br><span class="hljs-comment">#- SYNC_FLUSH 同步刷盘</span><br>flushDiskType = ASYNC_FLUSH<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim  /app/rocketmq/conf/broker3/broker.conf<br><br>brokerClusterName = rocketmq-cluster<br>brokerName = broker-b<br><br><span class="hljs-comment"># 0表示broker master  非0表示 broker slaver</span><br>brokerId = 0<br><br><span class="hljs-comment"># brokerIP1 当前broker监听的IP，不写将会使用docker镜像ip</span><br>brokerIP1 = rmqbroker-b<br><br><span class="hljs-comment"># brokerIP2 存在broker主从时，在broker主节点上配置了brokerIP2的话,broker从节点会连接主节点配置的brokerIP2来同步</span><br><span class="hljs-comment"># brokerIP2 = 192.168.111.129</span><br><br>deleteWhen = 04<br>fileReservedTime = 48<br><br><br>namesrvAddr = rmqnamesrv-a:9876;rmqnamesrv-b:9876<br><br><span class="hljs-comment"># 是否能够自动创建topic</span><br>autoCreateTopicEnable = <span class="hljs-literal">true</span><br><br><span class="hljs-comment">#Broker 对外服务的监听端口, 默认10911</span><br><span class="hljs-comment"># listenPort = 10913</span><br><br><span class="hljs-comment">#Broker角色</span><br><span class="hljs-comment">#- ASYNC_MASTER 异步复制Master</span><br><span class="hljs-comment">#- SYNC_MASTER 同步双写Master</span><br><span class="hljs-comment">#- SLAVE</span><br>brokerRole = ASYNC_MASTER<br><br><span class="hljs-comment">#刷盘方式</span><br><span class="hljs-comment">#- ASYNC_FLUSH 异步刷盘</span><br><span class="hljs-comment">#- SYNC_FLUSH 同步刷盘</span><br>flushDiskType = ASYNC_FLUSH<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /app/rocketmq/conf/broker4/broker.conf<br><br>brokerClusterName = rocketmq-cluster<br>brokerName = broker-b<br><br><span class="hljs-comment"># 0表示broker master  非0表示 broker slaver</span><br>brokerId = 1<br><span class="hljs-comment"># brokerIP1 当前broker监听的IP，不写将会使用docker镜像ip</span><br>brokerIP1 = rmqbroker-b-s<br><br>deleteWhen = 04<br>fileReservedTime = 48<br><br><br>namesrvAddr = rmqnamesrv-a:9876;rmqnamesrv-b:9876<br><br><span class="hljs-comment"># 是否能够自动创建topic</span><br>autoCreateTopicEnable = <span class="hljs-literal">true</span><br><br><span class="hljs-comment">#Broker 对外服务的监听端口,</span><br><span class="hljs-comment"># listenPort = 10914</span><br><br><span class="hljs-comment">#Broker角色</span><br><span class="hljs-comment">#- ASYNC_MASTER 异步复制Master</span><br><span class="hljs-comment">#- SYNC_MASTER 同步双写Master</span><br><span class="hljs-comment">#- SLAVE</span><br>brokerRole = SLAVE<br><br><span class="hljs-comment">#刷盘方式</span><br><span class="hljs-comment">#- ASYNC_FLUSH 异步刷盘</span><br><span class="hljs-comment">#- SYNC_FLUSH 同步刷盘</span><br>flushDiskType = ASYNC_FLUSH<br></code></pre></td></tr></table></figure><h2 id="3-编写rocketmq集群yaml文件："><a href="#3-编写rocketmq集群yaml文件：" class="headerlink" title="3.编写rocketmq集群yaml文件："></a>3.编写rocketmq集群yaml文件：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> rocketmq.yml<br><br>version: <span class="hljs-string">&#x27;3.5&#x27;</span><br>services:<br>  rmqnamesrv-a:<br>    image: rocketmqinc/rocketmq:latest<br>    container_name: rmqnamesrv-a<br>    ports:<br>      - 9876:9876<br>    volumes:<br>      - /app/rocketmq/logs/broker1:/root/logs<br>      - /app/rocketmq/store/broker1:/root/store<br>    <span class="hljs-built_in">command</span>: sh mqnamesrv<br>    networks:<br>      rmq:<br>        aliases:<br>          - rmqnamesrv-a<br><br>  rmqnamesrv-b:<br>    image: rocketmqinc/rocketmq:latest<br>    container_name: rmqnamesrv-b<br>    ports:<br>      - 9877:9876<br>    volumes:<br>      - /app/rocketmq/logs/broker1:/root/logs<br>      - /app/rocketmq/store/broker1:/root/store<br>    <span class="hljs-built_in">command</span>: sh mqnamesrv<br>    networks:<br>      rmq:<br>        aliases:<br>          - rmqnamesrv-b<br><br>  rmqbroker-a:<br>    image: rocketmqinc/rocketmq:latest<br>    container_name: rmqbroker-a<br>    ports:<br>      - 10911:10911<br>    volumes:<br>      - /app/rocketmq/logs/broker1:/root/logs<br>      - /app/rocketmq/store/broker1:/root/store<br>      - /app/rocketmq/conf/broker1/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf<br>    environment:<br>      TZ: Asia/Shanghai<br>      NAMESRV_ADDR: <span class="hljs-string">&quot;rmqnamesrv-a:9876&quot;</span><br>      JAVA_OPTS: <span class="hljs-string">&quot; -Duser.home=/opt&quot;</span><br>      JAVA_OPT_EXT: <span class="hljs-string">&quot;-server -Xms128m -Xmx128m -Xmn128m&quot;</span><br>    <span class="hljs-built_in">command</span>: sh mqbroker -c /opt/rocketmq-4.4.0/conf/broker.conf autoCreateTopicEnable=<span class="hljs-literal">true</span> &amp;<br>    links:<br>      - rmqnamesrv-a:rmqnamesrv-a<br>      - rmqnamesrv-b:rmqnamesrv-b<br>    networks:<br>      rmq:<br>        aliases:<br>          - rmqbroker-a<br><br>  rmqbroker-a-s:<br>    image: rocketmqinc/rocketmq:latest<br>    container_name: rmqbroker-a-s<br>    ports:<br>      - 10912:10911<br>    volumes:<br>      - /app/rocketmq/logs/broker2:/root/logs<br>      - /app/rocketmq/store/broker2:/root/store<br>      - /app/rocketmq/conf/broker2/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf<br>    environment:<br>      TZ: Asia/Shanghai<br>      NAMESRV_ADDR: <span class="hljs-string">&quot;rmqnamesrv-a:9876&quot;</span><br>      JAVA_OPTS: <span class="hljs-string">&quot; -Duser.home=/opt&quot;</span><br>      JAVA_OPT_EXT: <span class="hljs-string">&quot;-server -Xms128m -Xmx128m -Xmn128m&quot;</span><br>    <span class="hljs-built_in">command</span>: sh mqbroker -c /opt/rocketmq-4.4.0/conf/broker.conf autoCreateTopicEnable=<span class="hljs-literal">true</span> &amp;<br>    links:<br>      - rmqnamesrv-a:rmqnamesrv-a<br>      - rmqnamesrv-b:rmqnamesrv-b<br>    networks:<br>      rmq:<br>        aliases:<br>          - rmqbroker-a-s<br><br>  rmqbroker-b:<br>    image: rocketmqinc/rocketmq:latest<br>    container_name: rmqbroker-b<br>    ports:<br>      - 10913:10911<br>    volumes:<br>      - /app/rocketmq/logs/broker3:/root/logs<br>      - /app/rocketmq/store/broker3:/root/store<br>      - /app/rocketmq/conf/broker3/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf<br>    environment:<br>      TZ: Asia/Shanghai<br>      NAMESRV_ADDR: <span class="hljs-string">&quot;rmqnamesrv-a:9876&quot;</span><br>      JAVA_OPTS: <span class="hljs-string">&quot; -Duser.home=/opt&quot;</span><br>      JAVA_OPT_EXT: <span class="hljs-string">&quot;-server -Xms128m -Xmx128m -Xmn128m&quot;</span><br>    <span class="hljs-built_in">command</span>: sh mqbroker -c /opt/rocketmq-4.4.0/conf/broker.conf autoCreateTopicEnable=<span class="hljs-literal">true</span> &amp;<br>    links:<br>      - rmqnamesrv-a:rmqnamesrv-a<br>      - rmqnamesrv-b:rmqnamesrv-b<br>    networks:<br>      rmq:<br>        aliases:<br>          - rmqbroker-b<br><br>  rmqbroker-b-s:<br>    image: rocketmqinc/rocketmq:latest<br>    container_name: rmqbroker-b-s<br>    ports:<br>      - 10914:10911<br>    volumes:<br>      - /app/rocketmq/logs/broker4:/root/logs<br>      - /app/rocketmq/store/broker4:/root/store<br>      - /app/rocketmq/conf/broker4/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf<br>    environment:<br>      TZ: Asia/Shanghai<br>      NAMESRV_ADDR: <span class="hljs-string">&quot;rmqnamesrv-a:9876&quot;</span><br>      JAVA_OPTS: <span class="hljs-string">&quot; -Duser.home=/opt&quot;</span><br>      JAVA_OPT_EXT: <span class="hljs-string">&quot;-server -Xms128m -Xmx128m -Xmn128m&quot;</span><br>    <span class="hljs-built_in">command</span>: sh mqbroker -c /opt/rocketmq-4.4.0/conf/broker.conf autoCreateTopicEnable=<span class="hljs-literal">true</span> &amp;<br>    links:<br>      - rmqnamesrv-a:rmqnamesrv-a<br>      - rmqnamesrv-b:rmqnamesrv-b<br>    networks:<br>      rmq:<br>        aliases:<br>          - rmqbroker-b-s<br><br>  rmqconsole:<br>    image: styletang/rocketmq-console-ng:latest<br>    container_name: rmqconsole<br>    ports:<br>      - 8080:8080<br>    environment:<br>      JAVA_OPTS: -Drocketmq.namesrv.addr=rmqnamesrv-a:9876;rmqnamesrv-b:9877 -Dcom.rocketmq.sendMessageWithVIPChannel=<span class="hljs-literal">false</span><br>    networks:<br>      rmq:<br>        aliases:<br>          - rmqconsole<br><br><span class="hljs-comment"># 自定义网络</span><br>networks:<br>  rmq:<br>    name: rmq<br>    driver: bridge<br></code></pre></td></tr></table></figure><h2 id="4-启动集群"><a href="#4-启动集群" class="headerlink" title="4.启动集群"></a>4.启动集群</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose -f rocketmq.yml  up -d<br></code></pre></td></tr></table></figure><p>访问控制台：http&#x2F;&#x2F;ip:8080</p><h2 id="5-操作："><a href="#5-操作：" class="headerlink" title="5.操作："></a>5.操作：</h2><p>点击右上角，可以选择中文 -&gt; 切换中文后点击页面上的集群 -&gt; 查看是否有显示4行数据</p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>rocketmq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rocketmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker安装rocketmq</title>
    <link href="/2023/04/04/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85rocketmq/"/>
    <url>/2023/04/04/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85rocketmq/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker安装rocketmq"><a href="#使用docker安装rocketmq" class="headerlink" title="使用docker安装rocketmq"></a>使用docker安装rocketmq</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">#参考文档：https://blog.csdn.net/ming19951224/article/details/109063041<br></code></pre></td></tr></table></figure><h2 id="1-创建namesrv服务"><a href="#1-创建namesrv服务" class="headerlink" title="1.创建namesrv服务"></a>1.创建namesrv服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#拉取镜像：</span><br>docker pull rocketmqinc/rocketmq<br><br><span class="hljs-comment">#创建namesrv数据存储路径</span><br><span class="hljs-built_in">mkdir</span> -p /app/rocketmq/data/namesrv/&#123;logs,store&#125;<br><br><span class="hljs-comment">## 构建namesrv容器</span><br><br>docker run -d \<br>--restart=always \<br>--name rmqnamesrv \<br>-p 9876:9876 \<br>-v /app/rocketmq/data/namesrv/logs:/root/logs \<br>-v /app/rocketmq/data/namesrv/store:/root/store \<br>-e <span class="hljs-string">&quot;MAX_POSSIBLE_HEAP=100000000&quot;</span> \<br>rocketmqinc/rocketmq \<br>sh mqnamesrv <br><br>参数说明：<br>-e <span class="hljs-string">&quot;MAX_POSSIBLE_HEAP=100000000&quot;</span> <span class="hljs-comment">#设置容器的最大堆内存为100000000</span><br>sh mqnamesrv<span class="hljs-comment">#启动namesrv服务</span><br></code></pre></td></tr></table></figure><h2 id="2-创建broker节点"><a href="#2-创建broker节点" class="headerlink" title="2.创建broker节点"></a>2.创建broker节点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建broker数据存储路径</span><br><span class="hljs-built_in">mkdir</span> -p /app/rocketmq/data/broker/&#123;logs,store&#125; /app/rocketmq/conf<br><br><span class="hljs-comment">#创建配置文件：</span><br>vim /app/rocketmq/conf/broker.conf<br><span class="hljs-comment">#//所属集群名称，如果节点较多可以配置多个</span><br>brokerClusterName = DefaultCluster<br><span class="hljs-comment">#//broker名称，master和slave使用相同的名称，表明他们的主从关系</span><br>brokerName = broker-a<br><span class="hljs-comment">#//0表示Master，大于0表示不同的slave</span><br>brokerId = 0<br><span class="hljs-comment">#//表示几点做消息删除动作，默认是凌晨4点</span><br>deleteWhen = 04<br><span class="hljs-comment">#//在磁盘上保留消息的时长，单位是小时</span><br>fileReservedTime = 48<br><span class="hljs-comment">#//有三个值：SYNC_MASTER，ASYNC_MASTER，SLAVE；同步和异步表示Master和Slave之间同步数据的机制；</span><br>brokerRole = ASYNC_MASTER<br><span class="hljs-comment">#//刷盘策略，取值为：ASYNC_FLUSH，SYNC_FLUSH表示同步刷盘和异步刷盘；SYNC_FLUSH消息写入磁盘后才返回成功状态，ASYNC_FLUSH不需要；</span><br>flushDiskType = ASYNC_FLUSH<br><span class="hljs-comment">#//设置broker节点所在服务器的ip地址</span><br>brokerIP1 = 192.168.5.112<br><span class="hljs-comment">#//磁盘使用达到95%之后,生产者再写入消息会报错 CODE: 14 DESC: service not available now, maybe disk full</span><br>diskMaxUsedSpaceRatio=95<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#构建broker容器</span><br>docker run -d  \<br>--restart=always \<br>--name rmqbroker \<br>--<span class="hljs-built_in">link</span> rmqnamesrv:namesrv \<br>-p 10911:10911 \<br>-p 10909:10909 \<br>-v  /app/rocketmq/data/broker/logs:/root/logs \<br>-v  /app/rocketmq/data/broker/store:/root/store \<br>-v /app/rocketmq/conf/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf \<br>-e <span class="hljs-string">&quot;NAMESRV_ADDR=namesrv:9876&quot;</span> \<br>-e <span class="hljs-string">&quot;MAX_POSSIBLE_HEAP=200000000&quot;</span> \<br>rocketmqinc/rocketmq \<br>sh mqbroker -c /opt/rocketmq-4.4.0/conf/broker.conf <br><br>参数说明：<br>- --<span class="hljs-built_in">link</span> rmqnamesrv:namesrv和rmqnamesrv容器通信<br>-p 10911:10911把容器的非vip通道端口挂载到宿主机<br>-p 10909:10909把容器的vip通道端口挂载到宿主机<br>-e “NAMESRV_ADDR=namesrv:9876”指定namesrv的地址为本机namesrv的ip地址:9876<br>-e “MAX_POSSIBLE_HEAP=200000000” rocketmqinc/rocketmq sh mqbroker指定broker服务的最大堆内存<br>sh mqbroker -c /opt/rocketmq-4.4.0/conf/broker.conf指定配置文件启动<br></code></pre></td></tr></table></figure><h2 id="3-创建rockermq-console服务"><a href="#3-创建rockermq-console服务" class="headerlink" title="3.创建rockermq-console服务"></a>3.创建rockermq-console服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#拉取镜像</span><br>docker pull pangliang/rocketmq-console-ng<br><br><span class="hljs-comment">#构建rockermq-console容器</span><br><span class="hljs-comment">#需要把192.168.5.112换成部署namesrv机器地址</span><br>docker run -d \<br>--restart=always \<br>--name rmqadmin \<br>-e <span class="hljs-string">&quot;JAVA_OPTS=-Drocketmq.namesrv.addr=192.168.5.112:9876 \</span><br><span class="hljs-string">-Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;</span> \<br>-p 9999:8080 \<br>pangliang/rocketmq-console-ng<br><br>参数说明：<br>-e <span class="hljs-string">&quot;JAVA_OPTS=-Drocketmq.namesrv.addr=192.168.52.136:9876设置namesrv服务的ip地址</span><br><span class="hljs-string">-Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;</span>不使用vip通道发送消息<br>–p 9999:8080把容器内的端口8080挂载到宿主机上的9999端口<br></code></pre></td></tr></table></figure><h2 id="4-访问控制台"><a href="#4-访问控制台" class="headerlink" title="4.访问控制台"></a>4.访问控制台</h2><p>网页访问<a href="http://192.168.5.112:9999/%E6%9F%A5%E7%9C%8B%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BF%A1%E6%81%AF">http://192.168.5.112:9999/查看控制台信息</a></p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>rocketmq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rocketmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制搭建rocketmq单MASTER</title>
    <link href="/2023/04/04/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%90%AD%E5%BB%BArocketmq%E5%8D%95%E8%8A%82%E7%82%B9/"/>
    <url>/2023/04/04/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%90%AD%E5%BB%BArocketmq%E5%8D%95%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二进制搭建rocketmq单MASTER"><a href="#二进制搭建rocketmq单MASTER" class="headerlink" title="二进制搭建rocketmq单MASTER"></a>二进制搭建rocketmq单MASTER</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">参考文档：https:<span class="hljs-regexp">//</span>rocketmq.apache.org<span class="hljs-regexp">/zh/</span>docs<span class="hljs-regexp">/quickStart/</span><span class="hljs-number">02</span>quickstart<br></code></pre></td></tr></table></figure><p>RocketMQ中主要涉及到四种角色：NameServer注册服务器、Broker服务器、Producer生产者、Consumer消费者。每种角色都可以单独搭建集群</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs txt">(一)、NameServer<br>NameServer 是一个无状态的节点，可集群部署，节点都是各自独立的，无任何信息同步。<br><br>(二)、 Broker 集群<br>① Broker 分为 Master 与 Slave，一个 Master 可以对应多个 Slave，但一个 Slave 只能对应一个Master；<br>② Master 与 Slave 的对应关系通过指定相同的 BrokerName，不同的 BrokerID 来定义，id 为 0 表示 Master， 非 0 表示 Slave；<br>③ 可以部署多个 Master 实现 Broker 集群，即多组 Master - Slave 的 Broker 节点；<br>④ Master 通常用于写入数据，Slave 用于读取数据；<br>⑤ 每个 Broker 与 NameServer 集群中的所有节点建立长连接，定时注册 Topic 信息到所有 NameServer；<br><br>(三)、Producer 集群<br>① Producer 为消息的生产者，都是各自独立的无状态的节点，可以认为只要向 mq 中推送消息的节点都算作 Producer 节点。<br>② Producer 节点与 NameServer 集群中的随机一个节点建立长连接，定期从 NameServer 取出 Topic 路由信息，并向提供 Topic 服务的 Master 建立长连接，且定时向 Master 发送心跳。<br><br>(四)、Customer 集群<br>① Customer 为消息的消费者，都是各自独立的无状态的节点，可以认为只要向 mq 中获取消息的节点都算作 Customer 节点；<br>② Customer 节点与 NameServer 集群中的随机一个节点建立长连接，定期从 NameServer 取出 Topic 路由信息，并向提供 Topic 服务的 Master、Slave 建立长连接，且定时向 Master、Slave 发送心跳；<br>③ Customer 节点既可以从 Master 订阅消息，也可以从 Slave 订阅消息，订阅规则由 Broker 配置决定；<br></code></pre></td></tr></table></figure><h2 id="1、安装JDK-1-8-（已略过）"><a href="#1、安装JDK-1-8-（已略过）" class="headerlink" title="1、安装JDK 1.8+（已略过）"></a>1、安装JDK 1.8+（已略过）</h2><h2 id="2、下载安装Apache-RocketMQ"><a href="#2、下载安装Apache-RocketMQ" class="headerlink" title="2、下载安装Apache RocketMQ"></a>2、下载安装Apache RocketMQ</h2><p>二进制包下载地址：<code>https://dlcdn.apache.org/rocketmq</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://dlcdn.apache.org/rocketmq/5.0.0/rocketmq-all-5.0.0-bin-release.zip --no-check-certificate<br><br></code></pre></td></tr></table></figure><h2 id="3、解压压缩文件"><a href="#3、解压压缩文件" class="headerlink" title="3、解压压缩文件"></a>3、解压压缩文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">unzip rocketmq-all-5.0.0-bin-release.zip<br><span class="hljs-built_in">cd</span> rocketmq-all-5.0.0-bin-release/<br></code></pre></td></tr></table></figure><h2 id="4、启动NameServer"><a href="#4、启动NameServer" class="headerlink" title="4、启动NameServer"></a>4、启动NameServer</h2><p>注意：rocket安装包bin目录下的runserver.sh和runbroker.sh中配置的最小内存占用为4G，配置过低将启动不了。</p><p>解决方案：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim bin/runserver.sh<br>JAVA_OPT=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -server -Xms128m -Xmx128m -Xmn128m -XX:MetaspaceSize=32m -XX:MaxMetaspaceSize=64m&quot;</span><br><span class="hljs-comment">#保存并退出(此参数配置根据实际服务器硬件条件调大或调小)</span><br><br>vim bin/runbroker.sh<br>JAVA_OPT=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -server -Xms128m -Xmx128m -Xmn128m&quot;</span><br><span class="hljs-comment">#保存并退出(此参数配置根据实际服务器硬件条件调大或调小)</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动namesrv</span><br><span class="hljs-built_in">nohup</span> sh bin/mqnamesrv &amp;<br> <br><span class="hljs-comment"># 验证namesrv是否启动成功</span><br><span class="hljs-built_in">tail</span> -f ~/logs/rocketmqlogs/namesrv.log<br><br>The Name Server boot success...<br></code></pre></td></tr></table></figure><h2 id="5、启动Broker-Proxy"><a href="#5、启动Broker-Proxy" class="headerlink" title="5、启动Broker+Proxy"></a>5、启动Broker+Proxy</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">nohup</span> sh bin/mqbroker -n localhost:9876 --enable-proxy &amp;<br><br><span class="hljs-comment"># 验证Name Server 是否启动成功，例如Broker的IP为：192.168.1.2，且名称为broker-a</span><br><span class="hljs-built_in">tail</span> -f ~/logs/rocketmqlogs/broker_default.log <br>The broker[xxx, 192.169.1.2:10911] boot success...<br></code></pre></td></tr></table></figure><h2 id="6、工具测试消息收发"><a href="#6、工具测试消息收发" class="headerlink" title="6、工具测试消息收发"></a>6、工具测试消息收发</h2><p>在进行工具测试消息收发之前，我们需要告诉客户端NameServer的地址，RocketMQ有多种方式在客户端中设置NameServer地址，这里我们利用环境变量NAMESRV_ADDR</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> NAMESRV_ADDR=localhost:9876<br>sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer<br>&gt; SendResult [sendStatus=SEND_OK, msgId= ...<br><br>sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer<br>&gt; ConsumeMessageThread_%d Receive New Messages: [MessageExt...<br></code></pre></td></tr></table></figure><h2 id="7、关闭服务器"><a href="#7、关闭服务器" class="headerlink" title="7、关闭服务器"></a>7、关闭服务器</h2><p>完成实验后，我们可以通过以下方式关闭服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">sh bin/mqshutdown broker<br>&gt;The mqbroker(36695) is running...<br>&gt;Send shutdown request to mqbroker with proxy <span class="hljs-built_in">enable</span> OK(36695)<br><br><br>sh bin/mqshutdown namesrv<br>&gt;The mqnamesrv(36664) is running...<br>Send shutdown request to mqnamesrv(36664) OK<br></code></pre></td></tr></table></figure><h2 id="8、brocker-conf文件详解"><a href="#8、brocker-conf文件详解" class="headerlink" title="8、brocker.conf文件详解"></a>8、brocker.conf文件详解</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#所属集群名字</span><br>brokerClusterName=rocketmq_cluster<br><span class="hljs-comment">#通过配置文件指定机器的集群和broker归属，比如brokerName一样的属于同一个broker,一个broker只能有一个master，可以有多个slave，brokerId为0的为master，其他的为slave。</span><br>brokerName=broker-a<br><span class="hljs-comment">#0表示Master，&gt;0表示Slave</span><br>brokerId=0<br><span class="hljs-comment">#删除文件时间点，默认凌晨 4点</span><br>deleteWhen=04<br><span class="hljs-comment">#文件保留时间，默认 48 小时</span><br>fileReservedTime=48<br><span class="hljs-comment">#Broker 的角色</span><br>brokerRole=SYNC_MASTER<br><span class="hljs-comment">#异步刷新ASYNC_FLUSH /同步刷新SYNC_FLUSH</span><br>flushDiskType=SYNC_FLUSH<br><br><span class="hljs-comment">#nameServer地址，分号分割</span><br>namesrvAddr=192.168.5.57:9876;192.168.5.58:9876<br><span class="hljs-comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span><br>defaultTopicQueueNums=4<br><span class="hljs-comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span><br>autoCreateTopicEnable=<span class="hljs-literal">true</span><br><span class="hljs-comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span><br>autoCreateSubscriptionGroup=<span class="hljs-literal">true</span><br><span class="hljs-comment">#Broker 对外服务的监听端口</span><br>listenPort=10911<br><span class="hljs-comment">#commitLog每个文件的大小默认1G</span><br>mapedFileSizeCommitLog=1073741824<br><span class="hljs-comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span><br>mapedFileSizeConsumeQueue=300000<br><span class="hljs-comment">#检测物理文件磁盘空间</span><br>diskMaxUsedSpaceRatio=88<br><span class="hljs-comment">#存储路径</span><br>storePathRootDir=/data/rocketmq-m<br><span class="hljs-comment">#commitLog 存储路径</span><br>storePathCommitLog=/data/rocketmq-m/commitlog<br><span class="hljs-comment">#消费队列存储路径存储路径</span><br>storePathConsumeQueue=/data/rocketmq-m/consumequeue<br><span class="hljs-comment">#消息索引存储路径</span><br>storePathIndex=/data/rocketmq-m/index<br><span class="hljs-comment">#checkpoint 文件存储路径</span><br>storeCheckpoint=/data/rocketmq-m/checkpoint<br><span class="hljs-comment">#abort 文件存储路径</span><br>abortFile=/data/rocketmq-m/abort<br><span class="hljs-comment">#限制的消息大小</span><br>maxMessageSize=65536<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>rocketmq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rocketmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用redis-shake进行数据迁移以及同步</title>
    <link href="/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/%E4%BD%BF%E7%94%A8redis-shake%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E4%BB%A5%E5%8F%8A%E5%90%8C%E6%AD%A5/"/>
    <url>/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/%E4%BD%BF%E7%94%A8redis-shake%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E4%BB%A5%E5%8F%8A%E5%90%8C%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用redis-shake进行数据迁移以及同步"><a href="#使用redis-shake进行数据迁移以及同步" class="headerlink" title="使用redis-shake进行数据迁移以及同步"></a>使用redis-shake进行数据迁移以及同步</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：http://www.ioo.cool/posts/ce1f9162def9/#cluster%E5%88%B0cluster%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB<br>参考文档：https://github.com/alibaba/RedisShake/wiki/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%EF%BC%9A%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB<br></code></pre></td></tr></table></figure><p><strong>备注：RedisShake是一款开源的Redis迁移工具，支持Cluster集群的在线迁移与离线迁移（备份文件导入）。DCS Cluster集群与Redis Cluster集群设计一致，数据可平滑迁移。</strong><br>官方GitHub地址：<a href="https://github.com/alibaba/RedisShake">https://github.com/alibaba/RedisShake</a></p><h2 id="1-安装redis-shake"><a href="#1-安装redis-shake" class="headerlink" title="1.安装redis-shake"></a>1.安装redis-shake</h2><h3 id="采用的是v2版本，v3版本使用时有环境变量导致的问题"><a href="#采用的是v2版本，v3版本使用时有环境变量导致的问题" class="headerlink" title="采用的是v2版本，v3版本使用时有环境变量导致的问题"></a>采用的是v2版本，v3版本使用时有环境变量导致的问题</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://oss.putianhui.cn/software/redis-shake.tar.gz<br><br>tar xzvf redis-shake.tar.gz<br><br>ll |grep redis-shake<br>-rwxr-xr-x 1 1320024 <span class="hljs-built_in">users</span> 10851553 5月  26 2019 redis-shake<br>-rw-r--r-- 1 1320024 <span class="hljs-built_in">users</span>     8541 2月  28 15:46 redis-shake.conf<br>-rw-r--r-- 1 root    root   3801776 2月  28 15:30 redis-shake.tar.gz<br><br></code></pre></td></tr></table></figure><h2 id="2-修改redis-shake-conf配置文件，添加源cluster到目标cluster的配置信息。"><a href="#2-修改redis-shake-conf配置文件，添加源cluster到目标cluster的配置信息。" class="headerlink" title="2.修改redis-shake.conf配置文件，添加源cluster到目标cluster的配置信息。"></a>2.修改redis-shake.conf配置文件，添加源cluster到目标cluster的配置信息。</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 源redis类型</span><br>source.type = cluster<br><span class="hljs-comment"># 源redis的集群master地址</span><br>source.address = 192.168.99.62:7000;192.168.99.62:7001;192.168.99.62:7002<br><span class="hljs-comment"># 源redis集群的认证</span><br>source.password_raw = test-redis123<br>source.auth_type = auth<br>source.tls_enable = <span class="hljs-literal">false</span><br><span class="hljs-comment"># 目标redis类型</span><br>target.type = cluster<br><span class="hljs-comment"># 目标redis的集群master地址</span><br>target.address = 192.168.99.60:7000;192.168.99.60:7001;192.168.99.60:7002<br><span class="hljs-comment"># 目标redis集群的认证</span><br>target.password_raw =test123456<br>target.auth_type = auth<br><span class="hljs-comment"># 目标redis的数据库编号，集群模式用-1,单机可以指定你的redis数据库编号</span><br>target.db = -1<br>target.tls_enable = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="3-启动redis-shake"><a href="#3-启动redis-shake" class="headerlink" title="3.启动redis-shake"></a>3.启动redis-shake</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">./redis-shake -<span class="hljs-built_in">type</span> <span class="hljs-built_in">sync</span> -conf redis-shake.conf<br><br><span class="hljs-comment">#后台运行</span><br><span class="hljs-built_in">nohup</span> /data/back-redis/redis-shake -<span class="hljs-built_in">type</span> <span class="hljs-built_in">sync</span> -conf redis-shake.conf &amp;&gt; /data/back-redis/shake.log &amp; 2&gt;&amp;1<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br><span class="hljs-comment">##执行日志中出现如下信息，代表全量数据同步完成，进入增量同步阶段：</span><br><span class="hljs-built_in">sync</span> rdb <span class="hljs-keyword">done</span>.<br><br><br><br><span class="hljs-comment">##执行日志出现如下信息时，代表增量同步无新增内容，可手动停止同步（Ctrl + C）：</span><br><span class="hljs-built_in">sync</span>:  +forwardCommands=0  +filterCommands=0  +writeBytes=0<br><br><br></code></pre></td></tr></table></figure><p><strong>常见问题：<code>https://github.com/alibaba/RedisShake/wiki/redis%E2%80%90shake-2.x-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98</code></strong></p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis高可用集群部署</title>
    <link href="/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis高可用集群部署"><a href="#Redis高可用集群部署" class="headerlink" title="Redis高可用集群部署"></a>Redis高可用集群部署</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://blog.51cto.com/u_12393361/5021565<br>参考文档：https://blog.csdn.net/Liu_jianshan/article/details/117512511<br>参考文档：https://cloud.tencent.com/developer/article/1412673<br></code></pre></td></tr></table></figure><p>Redis的集群方案大致有三种：1）redis cluster集群方案；2）master&#x2F;slave主从方案；3）哨兵模式来进行主从替换以及故障恢复。</p><h2 id="一、Redis-集群方案比较"><a href="#一、Redis-集群方案比较" class="headerlink" title="一、Redis 集群方案比较"></a>一、Redis 集群方案比较</h2><h3 id="1-哨兵模式"><a href="#1-哨兵模式" class="headerlink" title="1. 哨兵模式"></a>1. 哨兵模式</h3><p>   <img src="/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20221024104836469.png" alt="image-20221024104836469"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">在redis3.0以前的版本要实现集群一般是借助哨兵sentinel工具来监控master节点的状态，如果master节点异常，则会做主从切换，将某一台slave作为master，哨兵的配置略微复杂，并且性能和高可用性等各方面表现一般，特别是在主从切换的瞬间存在访问瞬断的情况，而且哨兵模式只有一个主节点对外提供服务，没法支持很高的并发，且单个主节点内存也不宜设置得过大，否则会导致持久化文件过大，影响数据恢复或主从同步的效率。<br></code></pre></td></tr></table></figure><h3 id="2-高可用集群模式"><a href="#2-高可用集群模式" class="headerlink" title="2. 高可用集群模式"></a>2. 高可用集群模式</h3><p> <img src="/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20221024105016717.png" alt="image-20221024105016717"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Redis集群是一个由多个主从节点群组成的分布式服务器群，它具有复制、高可用和分片特性。Redis集群不需要sentinel哨兵也能完成节点移除和故障转移的功能。需要将每个节点设置成集群模式，这种集群模式没有中心节点，可水平扩展，据官方文档称可以线性扩展到上万个节点(官方推荐不超过1000个节点)。redis集群的性能和高可用性均优于之前版本的哨兵模式，且集群配置非常简单 。<br></code></pre></td></tr></table></figure><h2 id="二、搭建步骤（三主三从，模拟一台一主一从）"><a href="#二、搭建步骤（三主三从，模拟一台一主一从）" class="headerlink" title="二、搭建步骤（三主三从，模拟一台一主一从）"></a>二、搭建步骤（三主三从，模拟一台一主一从）</h2><p>搭建环境：</p><table><thead><tr><th>主机名</th><th>ip地址</th><th>备注</th></tr></thead><tbody><tr><td>redis-1</td><td>192.168.62.128</td><td></td></tr><tr><td>redis-2</td><td>192.168.62.129</td><td></td></tr><tr><td>redis-3</td><td>192.168.62.130</td><td></td></tr></tbody></table><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">Redis的基础介绍与安装使用步骤：https://www.jianshu.com/p/2a23257af57b<br>redis安装包下载地址：http://redis.io/download <br></code></pre></td></tr></table></figure><h3 id="1、redis安装："><a href="#1、redis安装：" class="headerlink" title="1、redis安装："></a>1、redis安装：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#安装gcc</span><br>yum install gcc -y<br><br><br><span class="hljs-comment">#下载安装包(使用5.0以上版本，为了后面的redis cluster)</span><br><span class="hljs-built_in">mkdir</span> -p /app/redis &amp;&amp; <span class="hljs-built_in">cd</span> /app/redis<br>wget http://download.redis.io/releases/redis-7.0.5.tar.gz<br>tar -xnf redis-7.0.5.tar.gz<br><br><span class="hljs-comment">#进入到解压的目录下，进行编译与安装</span><br><br><span class="hljs-built_in">cd</span> redis-7.0.5 <br><br>make<br><br><br><span class="hljs-comment">#启动并指定配置文件</span><br><br>src/redis-server redis.conf<br>注意：要使用后台启动，所以修改redis.conf里的daemonize改为<span class="hljs-built_in">yes</span><br><br><br><span class="hljs-comment"># 验证启动是否成功</span><br>ps -ef | grep redis<br><br><span class="hljs-comment"># 进入redis客户端 </span><br>src/redis-cli -p 6379  (默认6379端口)<br><br><span class="hljs-comment"># 退出客户端</span><br>quit<br><br><span class="hljs-comment">#退出redis服务</span><br>pkill redis-server<br><span class="hljs-comment">#或者</span><br><span class="hljs-built_in">kill</span> 进程号<br><span class="hljs-comment">#或者</span><br>src/redis-cli shutdown<br></code></pre></td></tr></table></figure><h3 id="2、集群搭建"><a href="#2、集群搭建" class="headerlink" title="2、集群搭建"></a>2、集群搭建</h3><h4 id="2-1、创建工作目录"><a href="#2-1、创建工作目录" class="headerlink" title="2.1、创建工作目录"></a>2.1、创建工作目录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#在三台机器的/app下创建文件夹redis‐cluster，然后在其下面分别创建2个文件夾如下 </span><br><span class="hljs-built_in">mkdir</span> /app/redis-cluster &amp;&amp; <span class="hljs-built_in">cd</span> /app/redis-cluster<br><span class="hljs-built_in">mkdir</span> 6379 6380<br><br>并将redis.conf配置文件按照如下步骤修改，除端口不一致！<br></code></pre></td></tr></table></figure><h4 id="2-2、修改配置文件"><a href="#2-2、修改配置文件" class="headerlink" title="2.2、修改配置文件"></a>2.2、修改配置文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#将redis的配置文件copy到6379下，修改如下内容： </span><br><span class="hljs-comment">#如果需要更好的区分，可将redis.conf重命名：redis-6379.conf</span><br><span class="hljs-built_in">cp</span> /app/redis/redis‐7.0.5/redis.conf /app/redis-cluster/6379/<br><br>vim /app/redis-cluster/6379/redis.conf<br><span class="hljs-comment">#修改如下内容</span><br>1）daemonize <span class="hljs-built_in">yes</span> <br>2）port 6379（分别对每个机器的端口号进行设置） <br>3）pidfile /var/run/redis_6379.pid<br>4）logfile <span class="hljs-string">&quot;6379.log&quot;</span><br>5）<span class="hljs-built_in">dir</span> /app/redis‐cluster/6379/（指定数据文件存放位置，必须要指定不同的目录位置，不然会丢失数据） <br>6）cluster‐enabled <span class="hljs-built_in">yes</span>（启动集群模式） <br>7）cluster‐config‐file nodes‐6379.conf（集群节点信息文件，这里与port对应上） <br>8）cluster‐node‐<span class="hljs-built_in">timeout</span> 5000 <br>9）<span class="hljs-comment"># bind 127.0.0.1（去掉bind绑定访问ip信息） </span><br>10）protected‐mode no （关闭保护模式） <br>11）appendonly <span class="hljs-built_in">yes</span> <br><br><span class="hljs-comment">#如果要设置密码需要增加如下配置： </span><br>12） requirepass 123456 (设置redis访问密码) <br>13） masterauth 123456 (设置集群节点间访问密码，跟上面一致)<br><br><br><span class="hljs-comment">#复制修改后的配置文件到6380目录</span><br><span class="hljs-built_in">cp</span> /app/redis-cluster/6379/redis.conf /app/redis-cluster/6380/<br><br><span class="hljs-comment">#修改配置文件，可用sed命令替换</span><br>sed -i <span class="hljs-string">&#x27;s/6379/6380/g&#x27;</span> /app/redis-cluster/6380/redis.conf<br><br><span class="hljs-comment">#分发到其他两台机器上</span><br>scp /app/redis-cluster/6379/redis.conf redis-2:/app/redis-cluster/6379/<br>scp /app/redis-cluster/6380/redis.conf redis-2:/app/redis-cluster/6380/<br>scp /app/redis-cluster/6379/redis.conf redis-3:/app/redis-cluster/6379/<br>scp /app/redis-cluster/6380/redis.conf redis-3:/app/redis-cluster/6380/<br><br></code></pre></td></tr></table></figure><h4 id="2-3、分别启动6个redis实例"><a href="#2-3、分别启动6个redis实例" class="headerlink" title="2.3、分别启动6个redis实例"></a>2.3、分别启动6个redis实例</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#启动redis实例</span><br>/app/redis/redis-7.0.5/src/redis-server /app/redis-cluster/6379/redis.conf<br>/app/redis/redis-7.0.5/src/redis-server /app/redis-cluster/6380/redis.conf<br><br><span class="hljs-comment">#查看是否启动成功</span><br>ps -ef | grep redis<br></code></pre></td></tr></table></figure><h4 id="2-4、用redis‐cli创建redis集群-redis5以前的版本集群是依靠ruby脚本redis‐trib-rb实现"><a href="#2-4、用redis‐cli创建redis集群-redis5以前的版本集群是依靠ruby脚本redis‐trib-rb实现" class="headerlink" title="2.4、用redis‐cli创建redis集群(redis5以前的版本集群是依靠ruby脚本redis‐trib.rb实现)"></a>2.4、用redis‐cli创建redis集群(redis5以前的版本集群是依靠ruby脚本redis‐trib.rb实现)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#执行前需要确认三台机器之间的redis实例要能相互访问，可以先简单把所有机器防火墙关掉，如果不关闭防火墙 则需要打开redis服务端口和集群节点gossip通信端口 </span><br><br>/app/redis/redis-7.0.5/src/redis-cli -a 123456 --cluster create --cluster-replicas 1 192.168.62.128:6379 192.168.62.129:6379 192.168.62.130:6379 192.168.62.128:6380 192.168.62.129:6380 192.168.62.130:6380<br><br><span class="hljs-comment"># --cluster-replicas 1：命令里的1代表为每个创建的主服务器节点创建一个从服务器节点 </span><br>举例：为集群创建两个从节点：<br>redis-cli -a 123456 --cluster create --cluster-replicas 2 192.168.100.200:6379 192.168.100.200:6380 192.168.100.200:6381 192.168.100.201:6379 192.168.100.201:6380 192.168.100.201:6381 192.168.100.202:6379 192.168.100.202:6380 192.168.100.202:6381<br></code></pre></td></tr></table></figure><h4 id="2-5、验证集群"><a href="#2-5、验证集群" class="headerlink" title="2.5、验证集群"></a>2.5、验证集群</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#连接任意一个客户端</span><br>/app/redis/redis-7.0.5/src/redis-cli -a 123456 -h 192.168.62.128 -p 6379 -c<br>‐a:访问服务端密码<br>-h:指定IP地址<br>-p:指定端口号<br>‐c:表示集群模式,可省略<br><br><span class="hljs-comment">#查看集群信息</span><br>&gt; cluster info<br>输出信息中：cluster_known_nodes:6<br><br><span class="hljs-comment">#查看节点列表</span><br>&gt;cluster nodes<br>输出信息中有各个节点的ip地址以及master和slave状态<br><br><br><span class="hljs-comment">#查看集群状态</span><br>/app/redis/redis-7.0.5/src/redis-cli -a 123456 --cluster check 192.168.62.128:6379<br><br><br>关闭集群则需要逐个进行关闭，使用命令： <br>/app/redis/redis-7.0.5/src/redis-cli -a 123456 -c -h 192.168.62.128 -p 6379 shutdown<br>/app/redis/redis-7.0.5/src/redis-cli -a 123456 -c -h 192.168.62.128 -p 6380 shutdown<br></code></pre></td></tr></table></figure><h4 id="2-6、Redis集群增加节点和删除节点"><a href="#2-6、Redis集群增加节点和删除节点" class="headerlink" title="2.6、Redis集群增加节点和删除节点"></a>2.6、Redis集群增加节点和删除节点</h4><p>参考文档：<code>https://www.cnblogs.com/hopeofthevillage/p/11535683.html</code></p><p><strong>添加一个从节点到集群：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">在192.168.62.128机器上运行一个新的redis实例（端口：6381，步骤略过）：<br><br><span class="hljs-comment">#添加新节点：</span><br>redis-cli -a 123456 --cluster add-node 192.168.62.128:6381 192.168.62.128:6379<br><span class="hljs-comment">#第一个ip为新增的节点  第二个ip为集群中的节点</span><br><br><span class="hljs-comment">#加入集群成功，登录到redis查看一下集群状态：</span><br>/app/redis/redis-7.0.5/src/redis-cli -a 123456 -h 192.168.62.128 -p 6381 -c<br>&gt;cluster nodes<br><span class="hljs-comment">#可以看到6381是一个Master节点，而且没有拥有自己的slot槽</span><br><br>使用cluster replicate命令改变状态<br>&gt;cluster replicate 53f276d1d7eb9df832a339ea1031e8f84ab63d90 <span class="hljs-comment">#需要加入的master的节点ID</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20221024162249070.png" alt="image-20221024162249070"></p><p><strong>添加一个新master节点到集群</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">在192.168.62.129机器上运行率一个redis实例（端口：6381，步骤略过）<br><br>redis-cli -a 123456 --cluster add-node 192.168.62.129:6381 192.168.62.128:6379<br><span class="hljs-comment">#第一个ip为新增的节点  第二个ip为集群中的节点</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20221024175533147.png" alt="image-20221024175533147"></p><p>  新节点现在已经连接上了集群， 成为集群的一份子， 并且可以对客户端的命令请求进行转向了， 但是和其他主节点相比， 新节点还有两点区别：<br>1.新节点没有包含任何数据， 因为它没有包含任何哈希槽.<br>2.尽管新节点没有包含任何哈希槽， 但它仍然是一个主节点， 所以在集群需要将某个从节点升级为新的主节点时， 这个新节点不会被选中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#将集群中的某些哈希桶移动到新节点里面， 新节点就会成为真正的主节点了。</span><br><br>redis-cli -a 123456  --cluster reshard 192.168.62.128:6379 <span class="hljs-comment">##可以为任意的节点 在此登录只是作为客户端去访问的</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20221024180800833.png" alt="image-20221024180800833"></p><p>注意：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">1.Redis Cluster 采用的是虚拟槽分区，一个集群共有 16384 个哈希槽，Redis Cluster会自动把这些槽平均分布在集群实例上。例如，如果集群中有 N 个实例，那么，每个实例上的槽个数为 16384/N个，因为我们增加6381为主节点后，一共存在四个主节点，为了平均分配我们需要给6381端口的redis分配：16384除以4等于4096个节点，所以我们输入4096，按enter继续<br><br>2.为的6381的节点ID，按enter继续<br><br>3.从哪些主节点抽取槽到新节点中：all为所有主节点，done：指定节点，在这里我们输入all，按enter继续<br><br>最后询问我们是否接受这个计划，输入yes<br></code></pre></td></tr></table></figure><p>登录集群查看集群状态即可看到：</p><p><img src="/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20221024181541011.png" alt="image-20221024181541011"></p><p>至此主节点已经添加完毕了</p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker安装redis</title>
    <link href="/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/docker%E5%AE%89%E8%A3%85redis/"/>
    <url>/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/docker%E5%AE%89%E8%A3%85redis/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h1><h2 id="1-新建目录"><a href="#1-新建目录" class="headerlink" title="1.新建目录"></a>1.新建目录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /app/docker/redis/&#123;conf,data&#125; -p<br><br><span class="hljs-built_in">cd</span> /app/docker/redis<br></code></pre></td></tr></table></figure><h2 id="2-获取redis模板配置"><a href="#2-获取redis模板配置" class="headerlink" title="2.获取redis模板配置"></a>2.获取redis模板配置</h2><p><strong>可通过wget 或者上传conf文件</strong></p><p>获取 redis 的默认配置模版<br>这里主要是想设置下 redis 的 log &#x2F; password &#x2F; appendonly<br>redis 的 docker 运行参数提供了 –appendonly yes 但没 password</p><h3 id="在线下载conf文件"><a href="#在线下载conf文件" class="headerlink" title="在线下载conf文件"></a>在线下载conf文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://raw.githubusercontent.com/antirez/redis/4.0/redis.conf -O ./conf/redis.conf  <span class="hljs-comment">#可本地上传</span><br><br><span class="hljs-comment"># 直接替换编辑，修改conf文件</span><br>sed -i <span class="hljs-string">&#x27;s/logfile &quot;&quot;/logfile &quot;access.log&quot;/g&#x27;</span> /app/docker/redis/conf/redis.conf<br>sed -i <span class="hljs-string">&#x27;s/# 、、 foobared/requirepass 123456/g&#x27;</span> /app/docker/redis/conf/redis.conf<br>sed -i <span class="hljs-string">&#x27;s/appendonly no/appendonly yes/g&#x27;</span> /app/docker/redis/conf/redis.conf<br><br></code></pre></td></tr></table></figure><h3 id="上传conf文件"><a href="#上传conf文件" class="headerlink" title="上传conf文件"></a>上传conf文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /app/docker/conf/redis.conf<br><br>requirepass 123456   <span class="hljs-comment">#//找到，修改密码</span><br><br><br></code></pre></td></tr></table></figure><p>这里可能还需配置<code>bind</code>,<code> protected-mode</code></p><ul><li><p>protected-mode 是在没有显示定义 bind 地址（即监听全网断），又没有设置密码 requirepass时，protected-mode 只允许本地回环 127.0.0.1 访问。也就是说当开启了 protected-mode 时，如果你既没有显示的定义了 bind 监听的地址，同时又没有设置 auth 密码。那你只能通过 127.0.0.1 来访问 redis 服务。</p></li><li><p>关闭绑定[允许所有外网访问]： # bind 127.0.0.1  或者 解除只有本地能链接客户端  0.0.0.0 -::1</p></li><li><p>开启密码验证： requirepass redispassword</p></li><li><p>开启数据持久化[aof]：appendonly yes</p></li><li><p>配置日志存放目录和文件：logfile &#x2F;logs&#x2F;redis.log</p></li></ul><h2 id="3-创建并运行一个名为-myredis-的容器"><a href="#3-创建并运行一个名为-myredis-的容器" class="headerlink" title="3.创建并运行一个名为 myredis 的容器"></a>3.创建并运行一个名为 myredis 的容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建并运行一个名为 myredis 的容器</span><br>docker run \<br>--restart=always \<br>-p 6379:6379 \<br>-v <span class="hljs-variable">$PWD</span>/data:/data \<br>-v <span class="hljs-variable">$PWD</span>/conf/redis.conf:/etc/redis/redis.conf \<br>--privileged=<span class="hljs-literal">true</span> \<br>--name myredis \<br>-d redis redis-server /etc/redis/redis.conf<br><br><span class="hljs-comment">#$PWD等于目录变量 ，以上代码等于</span><br>docker run -p 6379:6379 -v /app/docker/redis/data:/data -v /app/docker/redis/conf/redis.conf:/etc/redis/redis.conf --privileged=<span class="hljs-literal">true</span> --name myredis -d redis redis-server /etc/redis/redis.conf<br></code></pre></td></tr></table></figure><p>以上命令解析：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run \<br>--restart=always \ <span class="hljs-comment">#当 Docker 重启时，容器自动启动。</span><br>-p 6379:6379 \ <span class="hljs-comment"># 端口映射 宿主机:容器</span><br>-v <span class="hljs-variable">$PWD</span>/data:/data:rw \ <span class="hljs-comment"># 映射数据目录 rw 为读写</span><br>-v <span class="hljs-variable">$PWD</span>/conf/redis.conf:/etc/redis/redis.conf:ro \ <span class="hljs-comment"># 挂载配置文件 ro 为readonly</span><br>--privileged=<span class="hljs-literal">true</span> \ <span class="hljs-comment"># 给与一些权限</span><br>--name myredis \ <span class="hljs-comment"># 给容器起个名字</span><br>-d redis redis-server /etc/redis/redis.conf <span class="hljs-comment"># deamon 运行容器 并使用配置文件启动容器内的 redis-server </span><br><br></code></pre></td></tr></table></figure><h2 id="4-其他操作"><a href="#4-其他操作" class="headerlink" title="4.其他操作"></a>4.其他操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看活跃的容器</span><br>docker ps<br><br><span class="hljs-comment"># 如果没有 myredis 说明启动失败 查看错误日志</span><br>docker logs myredis<br><br><span class="hljs-comment"># 查看 myredis 的 ip 挂载 端口映射等信息</span><br>docker inspect myredis<br><br><span class="hljs-comment"># 查看 myredis 的端口映射</span><br>docker port myredis<br></code></pre></td></tr></table></figure><h2 id="5-redis登录"><a href="#5-redis登录" class="headerlink" title="5.redis登录"></a>5.redis登录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it redis bash<br><br>&gt; redis-cli <br>&gt; auth  密码 <br><br></code></pre></td></tr></table></figure><h2 id="6-redis-key操作"><a href="#6-redis-key操作" class="headerlink" title="6.redis-key操作"></a>6.redis-key操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查询key</span><br>keys +查询的key<br><br><span class="hljs-comment">#删除key</span><br>del key +删除的key名称<br><br><span class="hljs-comment">#查看key的类型</span><br><span class="hljs-built_in">type</span> <span class="hljs-string">&quot;查询的key&quot;</span><br><br><span class="hljs-comment">#查看key的值</span><br>hkey <span class="hljs-string">&quot;key的名称&quot;</span>  查询出key的类型是bash  可以用hkey查看<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker-compose启动rabbitmq</title>
    <link href="/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/rabbitmq/%E4%BD%BF%E7%94%A8docker-compose%E5%90%AF%E5%8A%A8rabbitmq/"/>
    <url>/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/rabbitmq/%E4%BD%BF%E7%94%A8docker-compose%E5%90%AF%E5%8A%A8rabbitmq/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker-compose启动rabbitmq"><a href="#使用docker-compose启动rabbitmq" class="headerlink" title="使用docker-compose启动rabbitmq"></a>使用docker-compose启动rabbitmq</h1><h2 id="1-安装docker-compose"><a href="#1-安装docker-compose" class="headerlink" title="1.安装docker-compose"></a>1.安装docker-compose</h2><h2 id="2-新建工作目录"><a href="#2-新建工作目录" class="headerlink" title="2.新建工作目录"></a>2.新建工作目录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /app/rabbitmq<br></code></pre></td></tr></table></figure><h2 id="3-编写yaml文件"><a href="#3-编写yaml文件" class="headerlink" title="3.编写yaml文件"></a>3.编写yaml文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.7&quot;</span><br><span class="hljs-attr">services:</span><br> <br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">rabbitmq:3-management</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">rabbitmq</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;5672:5672&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;15672:15672&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/app/rabbitmq:/var/lib/rabbitmq</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">RABBITMQ_DEFAULT_USER=root</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">RABBITMQ_DEFAULT_PASS=root1234</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br></code></pre></td></tr></table></figure><h2 id="4-启动"><a href="#4-启动" class="headerlink" title="4.启动"></a>4.启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose  up -d <br><span class="hljs-comment">#-f 指定yaml文件</span><br><span class="hljs-comment">#docker-compose  -f rabbitmq.yaml up -d </span><br></code></pre></td></tr></table></figure><h2 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h2><h3 id="15672端口是rabbitmq的web访问页面，安装RabbitMQ启动后无法访问15672端口"><a href="#15672端口是rabbitmq的web访问页面，安装RabbitMQ启动后无法访问15672端口" class="headerlink" title="15672端口是rabbitmq的web访问页面，安装RabbitMQ启动后无法访问15672端口"></a>15672端口是rabbitmq的web访问页面，安装RabbitMQ启动后无法访问15672端口</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl localhost:15672 <span class="hljs-comment">#发现无页面</span><br><span class="hljs-comment">##进入容器</span><br>docker <span class="hljs-built_in">exec</span> -it rabbitmq bash<br><br><span class="hljs-comment">#查看端口是否启动</span><br>netstat -lntup | grep 5672<br><br><span class="hljs-comment">#发现15672端口未启动，执行启动rabbit管理插件</span><br>rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>rabbitmq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rabbitmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos集群搭建</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/Nacos/Nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/Nacos/Nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Nacos集群搭建"><a href="#Nacos集群搭建" class="headerlink" title="Nacos集群搭建"></a>Nacos集群搭建</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html<br></code></pre></td></tr></table></figure><h2 id="1、Nacos集群部署架构"><a href="#1、Nacos集群部署架构" class="headerlink" title="1、Nacos集群部署架构"></a>1、Nacos集群部署架构</h2><p><strong>生产环境大多使用集群模式以确保高可用。</strong></p><p>nacos集群架构图如下：</p><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/Nacos/Nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/28cba1735c84ae4b24d3564c61f34dc4-1681290380221.png" alt="image-20220415183010933"></p><p>nacos支持三种部署模式：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">- 单击模式：用于测试和单击试用。<br>- 集群模式：用于生产环境，确保高可用。<br>- 多集群模式：用于多数据中心场景。<br></code></pre></td></tr></table></figure><p>  官方推荐的集群方案，通过域名 + VIP模式的方式来实现，VIP模式就用 Nginx 就行，用它来负载多个 Nacos 节点 IP，外部客户端直接通过域名访问就可，不仅可读性好，而且更换 IP 方便，最为推荐采用！</p><h2 id="2、环境准备"><a href="#2、环境准备" class="headerlink" title="2、环境准备"></a>2、环境准备</h2><ul><li><strong>安装好 JDK，需要 1.8 及其以上版本</strong></li><li>建议: 2核 CPU &#x2F; 4G 内存 及其以上</li></ul><table><thead><tr><th>主机名</th><th>IP地址</th><th>备注</th></tr></thead><tbody><tr><td>nacos-1</td><td>192.168.62.128</td><td>使用默认的8848端口、安装docker运行mysql单节点</td></tr><tr><td>nacos-2</td><td>192.168.62.129</td><td>使用默认的8848端口</td></tr><tr><td>nacos-3</td><td>192.168.62.130</td><td>使用默认的8848端口、安装nginx</td></tr></tbody></table><h2 id="3、开始安装"><a href="#3、开始安装" class="headerlink" title="3、开始安装"></a>3、开始安装</h2><h3 id="1、创建工作目录并下载安装包（nacos-1、nacos-2、nacos-3均需要下载）"><a href="#1、创建工作目录并下载安装包（nacos-1、nacos-2、nacos-3均需要下载）" class="headerlink" title="1、创建工作目录并下载安装包（nacos-1、nacos-2、nacos-3均需要下载）"></a>1、创建工作目录并下载安装包（nacos-1、nacos-2、nacos-3均需要下载）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建工作目录</span><br><span class="hljs-built_in">mkdir</span> /app &amp;&amp; <span class="hljs-built_in">cd</span> /app<br><br><span class="hljs-comment">#下载安装包，下载地址：https://github.com/alibaba/nacos/tags</span><br>wget https://github.com/alibaba/nacos/releases/download/1.3.0/nacos-server-1.3.0.tar.gz<br><br><span class="hljs-comment">#解压并进入目录</span><br>tar -xnf nacos-server-1.3.0.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> nacos<br></code></pre></td></tr></table></figure><h3 id="2、修改配置文件（nacos-1、nacos-2、nacos-3均需要做修改）"><a href="#2、修改配置文件（nacos-1、nacos-2、nacos-3均需要做修改）" class="headerlink" title="2、修改配置文件（nacos-1、nacos-2、nacos-3均需要做修改）"></a>2、修改配置文件（nacos-1、nacos-2、nacos-3均需要做修改）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#conf文件夹中有cluster.conf.example，复制一份并更名成conf文件，直接使用如下追加命令修改配置文件则不需要执行该步骤</span><br><span class="hljs-comment">#cp conf/cluster.conf.example conf/cluster.conf</span><br><br><span class="hljs-comment">#修改配置文件</span><br><span class="hljs-comment">##配置成ip:port</span><br><span class="hljs-built_in">echo</span> 192.168.62.128:8848 &gt; conf/cluster.conf<br><span class="hljs-built_in">echo</span> 192.168.62.129:8848 &gt;&gt; conf/cluster.conf<br><span class="hljs-built_in">echo</span> 192.168.62.130:8848 &gt;&gt; conf/cluster.conf<br></code></pre></td></tr></table></figure><h3 id="3、配置MySQL数据库（使用外置数据源）（nacos-1机器上操作，运行mysql）"><a href="#3、配置MySQL数据库（使用外置数据源）（nacos-1机器上操作，运行mysql）" class="headerlink" title="3、配置MySQL数据库（使用外置数据源）（nacos-1机器上操作，运行mysql）"></a>3、配置MySQL数据库（使用外置数据源）（nacos-1机器上操作，运行mysql）</h3><p>生产环境中数据库使用建议至少主备模式，或者采用高可用数据库。以下为了简化，使用docker运行一个mysql容器实现</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#使用docker运行一个mysql</span><br>docker run -p 3306:3306 \<br>--name mysql -e TZ=Asia/Shanghai \<br>--restart=always \<br>-v /app/mysql/conf:/etc/mysql/conf.d \<br>-v /app/mysql/log:/logs \<br>-v /app/mysql/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-d mysql:5.7<br></code></pre></td></tr></table></figure><p>连接mysql数据库，并创建名为：nacos_config的数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">create database nacos_config;<br></code></pre></td></tr></table></figure><p>将conf文件夹下的nacos-mysql.sql脚本在mysql中执行（复制到容器或者安装mysql插件宿主机执行）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#宿主机（服务器）上执行</span><br>mysql -uroot -p123456 nacos_config &lt; conf/nacos-mysql.sql<br><br><span class="hljs-comment">#以下为复制到容器内执行</span><br>docker <span class="hljs-built_in">cp</span> conf/nacos-mysql.sql mysql:/<br>mysql -uroot -p123456 nacos_config &lt; /nacos-mysql.sql<br><br></code></pre></td></tr></table></figure><h3 id="4、修改application-properties（nacos-1、nacos-2、nacos-3中都需要修改）"><a href="#4、修改application-properties（nacos-1、nacos-2、nacos-3中都需要修改）" class="headerlink" title="4、修改application.properties（nacos-1、nacos-2、nacos-3中都需要修改）"></a>4、修改application.properties（nacos-1、nacos-2、nacos-3中都需要修改）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim conf/application.properties<br><span class="hljs-comment">#----------修改以下内容--------------------</span><br>server.port=8848 <span class="hljs-comment">#端口号，默认8848，可根据实际情况更改</span><br><br>spring.datasource.platform=mysql<br><br><span class="hljs-comment"># Count of DB:</span><br>db.num=1<br><br><span class="hljs-comment"># Connect URL of DB:</span><br>db.url.0=jdbc:mysql://192.168.62.128:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=<span class="hljs-literal">true</span>&amp;useUnicode=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC （复制问号?前面内容即可）<br>rue&amp;useUnicode=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC<br>db.user=root<span class="hljs-comment">#数据库连接用户名，生产环境可设置其他用户名和密码</span><br>db.password=123456<span class="hljs-comment">#连接密码</span><br><br></code></pre></td></tr></table></figure><h3 id="5、-启动服务器-nacos-1、nacos-2、nacos-3启动）"><a href="#5、-启动服务器-nacos-1、nacos-2、nacos-3启动）" class="headerlink" title="5、 启动服务器 (nacos-1、nacos-2、nacos-3启动）"></a>5、 启动服务器 (nacos-1、nacos-2、nacos-3启动）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">sh bin/startup.sh<br><br><span class="hljs-comment">#将输出以集群模式(cluster)启动的日志提示：</span><br>nacos is starting with cluster<br>nacos is starting，you can check the /app/nacos/nacos/logs/start.out<br><br><span class="hljs-comment">#可使用jps命令查看是否运行</span><br><span class="hljs-comment">#备注：当服务器配置过低时可能会导致服务起不来，可修改bin/startup.sh中的Xms配置</span><br>JAVA_OPT=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=256m&quot;</span><br></code></pre></td></tr></table></figure><h3 id="6、访问三台节点的控制台查看是否成功-ip-端口-x2F-nacos"><a href="#6、访问三台节点的控制台查看是否成功-ip-端口-x2F-nacos" class="headerlink" title="6、访问三台节点的控制台查看是否成功(ip+端口&#x2F;nacos)"></a>6、访问三台节点的控制台查看是否成功(ip+端口&#x2F;nacos)</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">访问地址：192.168.62.128:8848/nacos、192.168.62.129:8848/nacos、192.168.62.130:8848/nacos<br>初始账号：nacos<br>初始密码：nacos<br><br>#登录进去后。点击集群管理&gt;-节点管理；可看到nacos集群存在<br></code></pre></td></tr></table></figure><h3 id="7、使用nginx做负载均衡-nacos-3上安装了nginx"><a href="#7、使用nginx做负载均衡-nacos-3上安装了nginx" class="headerlink" title="7、使用nginx做负载均衡(nacos-3上安装了nginx)"></a>7、使用nginx做负载均衡(nacos-3上安装了nginx)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#修改nginx文件</span><br>vim default.conf<br><br>upstream nacos&#123;<br>        server 192.168.62.128:8848;<br>        server 192.168.62.129:8848;<br>        server 192.168.62.130:8848;<br>&#125;<br>server &#123;<br>        listen 8888;<br>        server_name localhost;<br>        location / &#123;<br>            proxy_set_header Host <span class="hljs-variable">$http_host</span>;<br>            proxy_set_header X-Forwarded-For <span class="hljs-variable">$remote_addr</span>;<br>            client_body_buffer_size 10M;<br>            client_max_body_size 10G;<br>            proxy_buffers 1024 4k;<br>            proxy_read_timeout 300;<br>            proxy_next_upstream error <span class="hljs-built_in">timeout</span> http_404;<br>            proxy_pass http://nacos;<br>        &#125;<br>&#125;<br><br><br><span class="hljs-comment">#修改后启动nginx!</span><br><span class="hljs-comment">#即可通过：http://192.168.62.130:8888/nacos 访问nacos页面</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Nacos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka安装部署及使用(集群)</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E9%9B%86%E7%BE%A4)/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E9%9B%86%E7%BE%A4)/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Kafka集群搭建（多节点多Broker）"><a href="#Kafka集群搭建（多节点多Broker）" class="headerlink" title="Kafka集群搭建（多节点多Broker）"></a>Kafka集群搭建（多节点多Broker）</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考博客：https://blog.csdn.net/mengshicheng1992/article/details/119730753<br></code></pre></td></tr></table></figure><p>备注：生产环境中为确保高可用时，一般使用集群部署（即：多节点多Broker，以集群的方式来部署Kafka）</p><p>注意：Kafka强依赖ZooKeeper(以下简称ZK），部署Kafka集群，需要先安装ZK集群。</p><p><strong>以下操作如未指定，则命令在所有节点上执行！</strong></p><h2 id="一、系统资源及组件规划"><a href="#一、系统资源及组件规划" class="headerlink" title="一、系统资源及组件规划"></a>一、系统资源及组件规划</h2><table><thead><tr><th>节点名称</th><th>CPU&#x2F;内存</th><th>IP地址</th><th>节点角色</th></tr></thead><tbody><tr><td>Kafka1</td><td>2CPU&#x2F;4G&#x2F;40G</td><td>192.168.62.128</td><td>Kafka、ZooKeeper</td></tr><tr><td>Kafka2</td><td>2CPU&#x2F;4G&#x2F;40G</td><td>192.168.62.129</td><td>Kafka、ZooKeeper</td></tr><tr><td>Kafka3</td><td>2CPU&#x2F;4G&#x2F;40G</td><td>192.168.62.130</td><td>Kafka、ZooKeeper</td></tr></tbody></table><h2 id="二、系统软件安装与设置"><a href="#二、系统软件安装与设置" class="headerlink" title="二、系统软件安装与设置"></a>二、系统软件安装与设置</h2><h3 id="1、系统初始设置"><a href="#1、系统初始设置" class="headerlink" title="1、系统初始设置"></a>1、系统初始设置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">1）修改主机名<br><br>2）安装依赖包<br>yum -y install vim lrzsz bash-completion<br><br>3)设置NTP时间同步<br>yum -y install chrony<br><br><span class="hljs-comment">#启动chrony并设置自启动</span><br>systemctl start chronyd<br>systemctl <span class="hljs-built_in">enable</span> chronyd<br>systemctl status chronyd<br><br>chronyc sources<br><br>4）设置SELinux、关闭防火墙<br><br></code></pre></td></tr></table></figure><h3 id="2、设置名称解析"><a href="#2、设置名称解析" class="headerlink" title="2、设置名称解析"></a>2、设置名称解析</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> 192.168.62.128 kafka1 &gt;&gt; /etc/hosts<br><span class="hljs-built_in">echo</span> 192.168.62.129 kafka2 &gt;&gt; /etc/hosts<br><span class="hljs-built_in">echo</span> 192.168.62.130 kafka3 &gt;&gt; /etc/hosts<br></code></pre></td></tr></table></figure><h2 id="三、搭建Kafka高可用集群"><a href="#三、搭建Kafka高可用集群" class="headerlink" title="三、搭建Kafka高可用集群"></a>三、搭建Kafka高可用集群</h2><h3 id="1、安装JDK"><a href="#1、安装JDK" class="headerlink" title="1、安装JDK"></a>1、安装JDK</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#已略过，详情可参考《配置java环境》文档或执行《jdk安装.sh》脚本</span><br></code></pre></td></tr></table></figure><h3 id="2、安装zookeeper"><a href="#2、安装zookeeper" class="headerlink" title="2、安装zookeeper"></a>2、安装zookeeper</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#已略过，详情可参考《Linux之Zookeeper集群搭建》文档</span><br></code></pre></td></tr></table></figure><h3 id="3、下载并安装Kafka"><a href="#3、下载并安装Kafka" class="headerlink" title="3、下载并安装Kafka"></a>3、下载并安装Kafka</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#下载Kafka</span><br><span class="hljs-comment">#下载地址：http://kafka.apache.org/downloads</span><br>wget https://dlcdn.apache.org/kafka/3.3.1/kafka_2.13-3.3.1.tgz --no-check-certificate<br><br><span class="hljs-comment">#解压到指定目录</span><br>tar -xnf kafka_2.13-3.3.1.tgz -C /app/<br><br><span class="hljs-comment">#更名或者设置软链接</span><br><span class="hljs-built_in">mv</span> /app/kafka_2.13-3.3.1 /app/kafka<br><br><span class="hljs-comment">#设置环境变量</span><br>vim /etc/profile<br><br><span class="hljs-built_in">export</span> KAFKA_HOME=/app/kafka<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$KAFKA_HOME</span>/bin<br><br><span class="hljs-comment">#使之生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="4、配置Kafka集群"><a href="#4、配置Kafka集群" class="headerlink" title="4、配置Kafka集群"></a>4、配置Kafka集群</h3><p>在所有Kafka节点上修改&#x2F;app&#x2F;kafka&#x2F;config&#x2F;server.properties文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /app/kafka/config/server.properties &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string"></span><br><span class="hljs-string">#broker的全局唯一编号，不能重复,各环节修改编号分别为：0,1,2</span><br><span class="hljs-string">broker.id=0</span><br><span class="hljs-string"># 配置监听</span><br><span class="hljs-string">listeners=PLAINTEXT://192.168.62.129:9092</span><br><span class="hljs-string">advertised.listeners=PLAINTEXT://192.168.62.129:9092</span><br><span class="hljs-string"># 处理网络请求的线程数量，默认</span><br><span class="hljs-string">num.network.threads=3</span><br><span class="hljs-string"># 用来处理磁盘IO的线程数量，默认</span><br><span class="hljs-string">num.io.threads=8</span><br><span class="hljs-string"># 发送套接字的缓冲区大小，默认</span><br><span class="hljs-string">socket.send.buffer.bytes=102400</span><br><span class="hljs-string"># 接收套接字的缓冲区大小，默认</span><br><span class="hljs-string">socket.receive.buffer.bytes=102400</span><br><span class="hljs-string"># 请求套接字的缓冲区大小，默认</span><br><span class="hljs-string">socket.request.max.bytes=104857600</span><br><span class="hljs-string">#日志文件存放路径</span><br><span class="hljs-string">log.dirs=/tmp/kafka-logs</span><br><span class="hljs-string"># topic 在当前broker上的分片个数，默认为1</span><br><span class="hljs-string">num.partitions=1</span><br><span class="hljs-string"># 用来恢复和清理data下数据的线程数量，默认</span><br><span class="hljs-string">num.recovery.threads.per.data.dir=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">offsets.topic.replication.factor=1</span><br><span class="hljs-string">transaction.state.log.replication.factor=1</span><br><span class="hljs-string">transaction.state.log.min.isr=1</span><br><span class="hljs-string"># segment文件保留的最长时间，超时将被删除，默认</span><br><span class="hljs-string">log.retention.hours=168</span><br><span class="hljs-string"></span><br><span class="hljs-string">log.segment.bytes=1073741824</span><br><span class="hljs-string">log.retention.check.interval.ms=300000</span><br><span class="hljs-string"># 滚动生成新的segment文件的最大时间，默认</span><br><span class="hljs-string">log.roll.hours=168</span><br><span class="hljs-string"></span><br><span class="hljs-string">zookeeper.connect=kafka1:2181,kafka2:2181,kafka3:2181</span><br><span class="hljs-string">zookeeper.connection.timeout.ms=18000</span><br><span class="hljs-string">group.initial.rebalance.delay.ms=0</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="5、启动Kafka集群"><a href="#5、启动Kafka集群" class="headerlink" title="5、启动Kafka集群"></a>5、启动Kafka集群</h3><p>在所有Kafka节点上启动Kafka</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">kafka-server-start.sh -daemon /app/kafka/config/server.properties<br><br><span class="hljs-comment">#查看Kafka进程：</span><br>jps<br></code></pre></td></tr></table></figure><h3 id="6、查看集群是否加入"><a href="#6、查看集群是否加入" class="headerlink" title="6、查看集群是否加入"></a>6、查看集群是否加入</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#连接zookeeper</span><br>zkCli.sh -server localhost:2181<br><br><span class="hljs-built_in">ls</span> /brokers/ids<br><br>输出：[0, 1, 2]代表已经有三个节点加入<br><br><br><span class="hljs-comment">#完全清理kafka和zookeeper数据：</span><br><span class="hljs-comment">##停止kafka</span><br>jps<br><br><span class="hljs-built_in">kill</span> -9 kafka进程ID<br><br><span class="hljs-comment">##然后删除kafka日志目录</span><br><span class="hljs-built_in">rm</span> -rf /tmp/kafka-logs<br><br><span class="hljs-comment">##连接zookeeper</span><br>zkCli.sh -server localhost:2181<br><br><span class="hljs-comment">##查看数据</span><br><span class="hljs-built_in">ls</span> /<br><br><span class="hljs-comment">##删除/下的数据（除zookeeper）</span><br>rmr /config<br><br></code></pre></td></tr></table></figure><h3 id="7、Kafka功能演示"><a href="#7、Kafka功能演示" class="headerlink" title="7、Kafka功能演示"></a>7、Kafka功能演示</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建topic（指定副本数量为3）</span><br>kafka-topics.sh --create --bootstrap-server kafka1:9092 --replication-factor 3 --partitions 2 --topic <span class="hljs-built_in">test</span><br><br><span class="hljs-comment">#查看所有的topic信息</span><br>kafka-topics.sh --list  --bootstrap-server kafka3:9092<br><br><span class="hljs-comment">#启动生产者</span><br>kafka-console-producer.sh --broker-list kafka1:9092,kafka2:9092,kafka3:9092 --topic <span class="hljs-built_in">test</span><br><br><span class="hljs-comment">#启动消费者</span><br>kafka-console-consumer.sh --bootstrap-server kafka2:9092 --topic <span class="hljs-built_in">test</span> --from-beginning<br><br><span class="hljs-comment">#删除topic</span><br>kafka-topics.sh --alter --bootstrap-server kafka2:9092 --topic <span class="hljs-built_in">test</span> --delete-config flush.messages<br><br></code></pre></td></tr></table></figure><h2 id="四、把zookeeper和kafka做成系统服务并开机自动启动（可以把之前在终端执行的启动命令关了，不然起不来）"><a href="#四、把zookeeper和kafka做成系统服务并开机自动启动（可以把之前在终端执行的启动命令关了，不然起不来）" class="headerlink" title="四、把zookeeper和kafka做成系统服务并开机自动启动（可以把之前在终端执行的启动命令关了，不然起不来）"></a>四、把zookeeper和kafka做成系统服务并开机自动启动（可以把之前在终端执行的启动命令关了，不然起不来）</h2><h3 id="把zookeeper做成系统服务"><a href="#把zookeeper做成系统服务" class="headerlink" title="把zookeeper做成系统服务"></a>把zookeeper做成系统服务</h3><h4 id="1、设置zookeeper的环境变量"><a href="#1、设置zookeeper的环境变量" class="headerlink" title="1、设置zookeeper的环境变量"></a>1、设置zookeeper的环境变量</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /home/zk/zookeeper/bin/zkEnv.sh<br><br><span class="hljs-comment">#添加java环境变量,服务启动时依赖java环境，不然会启动不了</span><br>JAVA_HOME=/opt/jdk<br><br></code></pre></td></tr></table></figure><h4 id="2、创建zookeeper的service文件"><a href="#2、创建zookeeper的service文件" class="headerlink" title="2、创建zookeeper的service文件"></a>2、创建zookeeper的service文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /lib/systemd/system/zookeeper.service <br><br>[Unit]<br>Description=Zookeeper<br>After=network.target remote-fs.target nss-lookup.target<br> <br>[Service]<br>Type=forking<br>ExecStart=/home/zk/zookeeper/bin/zkServer.sh start /home/zk/zookeeper/conf/zoo.cfg<br>ExecReload=/bin/kill -s HUP <span class="hljs-variable">$MAINPID</span><br>ExecStop=/home/zk/zookeeper/bin/zkServer.sh stop<br> <br>[Install]<br>WantedBy=multi-user.target<br><br></code></pre></td></tr></table></figure><h4 id="3、启动zookeeper服务并设置开机启动"><a href="#3、启动zookeeper服务并设置开机启动" class="headerlink" title="3、启动zookeeper服务并设置开机启动"></a>3、启动zookeeper服务并设置开机启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start zookeeper<br>systemctl <span class="hljs-built_in">enable</span> zookeeper<br></code></pre></td></tr></table></figure><h3 id="把kafka做成系统服务"><a href="#把kafka做成系统服务" class="headerlink" title="把kafka做成系统服务"></a>把kafka做成系统服务</h3><h4 id="1、创建kafka-service文件"><a href="#1、创建kafka-service文件" class="headerlink" title="1、创建kafka.service文件"></a>1、创建kafka.service文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /lib/systemd/system/kafka.service<br><br>[Unit]<br>Description=kafka<br>After=network.target remote-fs.target nss-lookup.target zookeeper.service<br> <br>[Service]<br>Type=forking<br>Environment=<span class="hljs-string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/jdk/bin&quot;</span><br>ExecStart=/app/kafka/bin/kafka-server-start.sh -daemon /app/kafka/config/server.properties<br>ExecReload=/bin/kill -s HUP <span class="hljs-variable">$MAINPID</span><br>ExecStop=/app/kafka/bin/kafka-server-stop.sh<br><span class="hljs-comment">#PrivateTmp=true</span><br> <br>[Install]<br>WantedBy=multi-user.target<br><br></code></pre></td></tr></table></figure><p>注意：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">[service]<br>Type 服务启动类型， forking：后台启动<br>Environment 为依赖的环境，“/opt/jdk/bin”是自己jdk的安装路径<br>ExecStart 定义启动的命令，“/app/kafka/” 为自己的kafka安装路径，“-daemon”：后台启动<br>ExecReload? 定义重启命令，“/bin/kill -s HUP <span class="hljs-variable">$MAINPID</span>” 通用重启命令<br>ExecStop 定义停止命令<br>PrivateTmp 是否分配独立空间，若分配，则jps将查不到。<br></code></pre></td></tr></table></figure><h4 id="2、启动kafka服务并设置开机启动"><a href="#2、启动kafka服务并设置开机启动" class="headerlink" title="2、启动kafka服务并设置开机启动"></a>2、启动kafka服务并设置开机启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start kafka<br><br>systemctl <span class="hljs-built_in">enable</span> kafka<br></code></pre></td></tr></table></figure><p>查看服务日志：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">journalctl -u kafka -f<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka安装部署及使用(单节点)</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8-%E5%8D%95%E8%8A%82%E7%82%B9/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8-%E5%8D%95%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Kafka安装部署及使用-单节点"><a href="#Kafka安装部署及使用-单节点" class="headerlink" title="Kafka安装部署及使用(单节点)"></a>Kafka安装部署及使用(单节点)</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文献：https://blog.csdn.net/HG_Harvey/article/details/79174104<br></code></pre></td></tr></table></figure><p>备注：单节点单Broker部署、单节点多Broker部署、集群部署（多节点多Broker）。实际生产环境中使用的是第三种方式，以集群的方式来部署Kafka。</p><p>注意：Kafka强依赖ZooKeeper(以下简称ZK），如果想要使用Kafka，就必须安装ZK，Kafka中的消费偏置信息、kafka集群、topic信息会被存储在ZK中。有人可能会说我在使用Kafka的时候就没有安装ZK，那是因为Kafka内置了一个ZK，一般我们不使用它</p><p>Kafka中单节点部署又分为两种，一种为单节点单Broker部署，一种为单节点多Broker部署。因为是单节点的Kafka，所以在安装ZK时也只需要单节点即可。</p><p>ZooKeeper官网：<a href="http://zookeeper.apache.org/">http://zookeeper.apache.org/</a></p><h2 id="1、安装Zookeeper-下列为单节点，集群模式可参考文档-lt-Linux搭建Zookeeper集群搭建-gt"><a href="#1、安装Zookeeper-下列为单节点，集群模式可参考文档-lt-Linux搭建Zookeeper集群搭建-gt" class="headerlink" title="1、安装Zookeeper(下列为单节点，集群模式可参考文档&lt;Linux搭建Zookeeper集群搭建&gt;)"></a>1、安装Zookeeper(下列为单节点，集群模式可参考文档&lt;Linux搭建Zookeeper集群搭建&gt;)</h2><h3 id="1-1、安装JDK"><a href="#1-1、安装JDK" class="headerlink" title="1.1、安装JDK"></a>1.1、安装JDK</h3><h3 id="1-2、创建zookeeper用户-集群各节点参照执行"><a href="#1-2、创建zookeeper用户-集群各节点参照执行" class="headerlink" title="1.2、创建zookeeper用户 (集群各节点参照执行)"></a>1.2、创建zookeeper用户 (集群各节点参照执行)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">useradd zk<br>passwd zk<br>&gt;输入密码<br><br>su - zk<br></code></pre></td></tr></table></figure><h3 id="1-3、下载Zookeeper最新稳定版"><a href="#1-3、下载Zookeeper最新稳定版" class="headerlink" title="1.3、下载Zookeeper最新稳定版"></a>1.3、下载Zookeeper最新稳定版</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://mirrors.bfsu.edu.cn/apache/zookeeper/zookeeper-3.5.10/apache-zookeeper-3.5.10-bin.tar.gz --no-check-certificate<br><span class="hljs-comment">#其他版本：https://mirrors.bfsu.edu.cn/apache/zookeeper</span><br></code></pre></td></tr></table></figure><h3 id="1-4、解压Zookeeper压缩包"><a href="#1-4、解压Zookeeper压缩包" class="headerlink" title="1.4、解压Zookeeper压缩包"></a>1.4、解压Zookeeper压缩包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -xnf apache-zookeeper-3.5.10-bin.tar.gz<br><br><span class="hljs-comment">#设置软链接：</span><br><span class="hljs-built_in">ln</span> -s apache-zookeeper-3.5.10-bin zookeeper<br></code></pre></td></tr></table></figure><h3 id="1-5、修改配置文件zoo-cfg"><a href="#1-5、修改配置文件zoo-cfg" class="headerlink" title="1.5、修改配置文件zoo.cfg"></a>1.5、修改配置文件zoo.cfg</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> data<br><span class="hljs-built_in">cd</span> zookeeper/conf<br><span class="hljs-built_in">cp</span> zoo_sample.cfg zoo.cfg<br><br><span class="hljs-comment">#编辑cfg文件，配置如下：</span><br>vim  zoo.cfg<br><br>tickTime=2000<br>initLimit=10<br>syncLimit=5<br>dataDir=/home/zk/data<br></code></pre></td></tr></table></figure><h3 id="1-6、启动Zookeeper服务"><a href="#1-6、启动Zookeeper服务" class="headerlink" title="1.6、启动Zookeeper服务"></a>1.6、启动Zookeeper服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~/zookeeper/bin/<br>./zkServer.sh start<br></code></pre></td></tr></table></figure><h3 id="1-7、设置环境变量"><a href="#1-7、设置环境变量" class="headerlink" title="1.7、设置环境变量"></a>1.7、设置环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#需切换为root用户</span><br>vim /etc/profile<br><br><span class="hljs-built_in">export</span> ZOOKEEPER_HOME=/home/zk/zookeeper<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$ZOOKEEPER_HOME</span>/bin<br><br><span class="hljs-comment">#使之生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br><br><span class="hljs-comment">#测试是否生效</span><br>zkServer.sh status<br></code></pre></td></tr></table></figure><h2 id="2、Kafka-单节点单Broker部署及使用"><a href="#2、Kafka-单节点单Broker部署及使用" class="headerlink" title="2、Kafka 单节点单Broker部署及使用"></a>2、Kafka 单节点单Broker部署及使用</h2><p>架构图：</p><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8-%E5%8D%95%E8%8A%82%E7%82%B9/image-20221020164316467.png" alt="img"></p><h3 id="2-1、下载Kafka"><a href="#2-1、下载Kafka" class="headerlink" title="2.1、下载Kafka"></a>2.1、下载Kafka</h3><p><code>官网下载地址：http://kafka.apache.org/downloads</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#下载kafka安装包</span><br>wget https://dlcdn.apache.org/kafka/3.3.1/kafka_2.13-3.3.1.tgz --no-check-certificate<br><br><span class="hljs-comment">#解压到指定目录</span><br>tar -xnf kafka_2.13-3.3.1.tgz -C /app/<br><br><span class="hljs-comment">#更名或者设置软链接</span><br><span class="hljs-built_in">mv</span> /app/kafka_2.13-3.3.1 /app/kafka<br></code></pre></td></tr></table></figure><h3 id="2-2、配置kafka"><a href="#2-2、配置kafka" class="headerlink" title="2.2、配置kafka"></a>2.2、配置kafka</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#进入kafka的config目录下，并修改server.properties</span><br><span class="hljs-built_in">cd</span> /app/kafak/config/ &amp;&amp; vim server.properties <br><br><span class="hljs-comment"># broker的全局唯一编号，不能重复</span><br>broker.id=0<br><span class="hljs-comment"># 监听端口</span><br>listeners=PLAINTEXT://:9092<br><span class="hljs-comment"># 日志目录</span><br>log.dirs=/tmp/kafka-logs<br><span class="hljs-comment"># 配置zookeeper的连接（如果不是本机，需要该为ip或主机名）</span><br>zookeeper.connect=localhost:2181<br><br></code></pre></td></tr></table></figure><h3 id="2-3、启动zookeeper和kafka"><a href="#2-3、启动zookeeper和kafka" class="headerlink" title="2.3、启动zookeeper和kafka"></a>2.3、启动zookeeper和kafka</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#启动zookeeper</span><br>zkServer.sh start<br><br><span class="hljs-comment">#启动kafka</span><br>/app/kafka/bin/kafka-server-start.sh /app/kafka/config/server.properties<br><br><span class="hljs-comment"># 后台启动服务 , 运行的日志打印在 logs 目录里的server.log 里，不会打印日志到控制台</span><br><span class="hljs-comment">#方法1：</span><br>bin/kafka-server-start.sh -daemon config/server.properties<br><span class="hljs-comment">#方法2：</span><br>bin/kafka‐server‐start.sh config/server.properties &amp;<br><br><span class="hljs-comment">#停止kafka</span><br>bin/kafka‐server‐stop.sh<br><br><span class="hljs-comment">#输入jps查看进程，如果可以看到Kafka进程，表示启动成功</span><br>jps<br></code></pre></td></tr></table></figure><h3 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h3><p><code>参考官网：https://kafka.apache.org/30/documentation.html#quickstart</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/kafka<br><br><span class="hljs-comment">#创建topic</span><br>bin/kafka-topics.sh --create --topic test-topic --bootstrap-server localhost:9092 --replication-factor 1 --partitions 4<br><br><span class="hljs-comment">#参数详解：</span><br>--bootstrap-server: 指定kafka连接url<br>–-replication-factor：指定副本数量<br>–-partitions：指定分区数量<br>–-topic：主题名称<br><br><span class="hljs-comment">#查看所有的topic信息</span><br>bin/kafka-topics.sh --list  --bootstrap-server localhost:9092<br><span class="hljs-comment">#----------输出内容-------------</span><br>test-topic<br><br><span class="hljs-comment">#启动生产者</span><br>bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic<br>&gt;hello,word<br><br><br><span class="hljs-comment">#启动消费者</span><br>bin/kafka-console-consumer.sh  --topic test-topic --from-beginning --bootstrap-server localhost:9092<br><span class="hljs-comment">#----------输出内容-------------</span><br>hello,word<br><br><span class="hljs-comment">#参数详解：</span><br>--from-beginning：参数如果有表示从最开始消费数据，旧的和新的数据都会被消费，而没有该参数表示只会消费新产生的数据<br></code></pre></td></tr></table></figure><h2 id="3、Kafka-单节点多Broker部署及使用"><a href="#3、Kafka-单节点多Broker部署及使用" class="headerlink" title="3、Kafka 单节点多Broker部署及使用"></a>3、Kafka 单节点多Broker部署及使用</h2><p>部署架构<br><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8-%E5%8D%95%E8%8A%82%E7%82%B9/image-20221020164810461.png" alt="image-20221020164810461"></p><h3 id="3-1、按照2-1步骤下载并解压kafka后，拷贝server-properties三份"><a href="#3-1、按照2-1步骤下载并解压kafka后，拷贝server-properties三份" class="headerlink" title="3.1、按照2.1步骤下载并解压kafka后，拷贝server.properties三份"></a>3.1、按照2.1步骤下载并解压kafka后，拷贝server.properties三份</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/kafka/config/<br><span class="hljs-built_in">cp</span> server.properties server-1.properties<br><span class="hljs-built_in">cp</span> server.properties server-2.properties<br><span class="hljs-built_in">cp</span> server.properties server-3.properties<br></code></pre></td></tr></table></figure><h3 id="3-2、修改配置文件"><a href="#3-2、修改配置文件" class="headerlink" title="3.2、修改配置文件"></a>3.2、修改配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim server-1.properties<br><br><span class="hljs-comment"># broker的全局唯一编号，不能重复</span><br>broker.id=1<br><span class="hljs-comment"># 监听</span><br>listeners=PLAINTEXT://:9093<br><span class="hljs-comment"># 日志目录</span><br>log.dirs=/tmp/kafka-logs-1<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim server-2.properties<br><br><span class="hljs-comment"># broker的全局唯一编号，不能重复</span><br>broker.id=2<br><span class="hljs-comment"># 监听</span><br>listeners=PLAINTEXT://:9094<br><span class="hljs-comment"># 日志目录</span><br>log.dirs=/tmp/kafka-logs-2<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim server-3.properties<br><br><span class="hljs-comment"># broker的全局唯一编号，不能重复</span><br>broker.id=3<br><span class="hljs-comment"># 监听</span><br>listeners=PLAINTEXT://:9095<br><span class="hljs-comment"># 日志目录</span><br>log.dirs=/tmp/kafka-logs-3<br></code></pre></td></tr></table></figure><h3 id="3-3、启动Zookeeper"><a href="#3-3、启动Zookeeper" class="headerlink" title="3.3、启动Zookeeper"></a>3.3、启动Zookeeper</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">zkServer.sh start<br></code></pre></td></tr></table></figure><h3 id="3-4、启动Kafka（分别启动server1、2、3）"><a href="#3-4、启动Kafka（分别启动server1、2、3）" class="headerlink" title="3.4、启动Kafka（分别启动server1、2、3）"></a>3.4、启动Kafka（分别启动server1、2、3）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/kafka<br><br>bin/kafka-server-start.sh -daemon config/server-1.properties<br>bin/kafka-server-start.sh -daemon config/server-2.properties<br>bin/kafka-server-start.sh -daemon config/server-3.properties<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看端口是否占用</span><br>netstat -lntup| grep java | grep 909<br><span class="hljs-comment">#出现9003、9004、9005端口</span><br><span class="hljs-comment">#查看进程</span><br>jps -m<br></code></pre></td></tr></table></figure><h3 id="3-5、创建topic（指定副本数量为3）"><a href="#3-5、创建topic（指定副本数量为3）" class="headerlink" title="3.5、创建topic（指定副本数量为3）"></a>3.5、创建topic（指定副本数量为3）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">bin/kafka-topics.sh --create --bootstrap-server localhost:9093 --replication-factor 3 --partitions 1 --topic my-replicated-topic<br><br><span class="hljs-comment">#输出Created topic my-replicated-topic.</span><br></code></pre></td></tr></table></figure><h3 id="3-6、查看所有的topic信息"><a href="#3-6、查看所有的topic信息" class="headerlink" title="3.6、查看所有的topic信息"></a>3.6、查看所有的topic信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">bin/kafka-topics.sh --list  --bootstrap-server localhost:9093<br><br><span class="hljs-comment">#查看某个topic的详细信息</span><br><br>bin/kafka-topics.sh --describe --bootstrap-server localhost:9093 --topic my-replicated-topic<br></code></pre></td></tr></table></figure><h3 id="3-7、启动生产者"><a href="#3-7、启动生产者" class="headerlink" title="3.7、启动生产者"></a>3.7、启动生产者</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">bin/kafka-console-producer.sh --broker-list localhost:9093,localhost:9094,localhost:9095 --topic my-replicated-topic<br></code></pre></td></tr></table></figure><h3 id="3-8、启动消费者"><a href="#3-8、启动消费者" class="headerlink" title="3.8、启动消费者"></a>3.8、启动消费者</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">bin/kafka-console-consumer.sh --bootstrap-server localhost:9093 --topic my-replicated-topic --from-beginning<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">kafka全部数据清空与某一topic数据清空：https://blog.csdn.net/wutongyuWxc/article/details/104546169<br>Kafka图形化工具Eagle:https://juejin.cn/post/6971224791793532941<br>kafka可视化客户端 https://www.studytime.xin/article/kafka-tool.html<br></code></pre></td></tr></table></figure><h3 id="3-9、单节点多borker容错性测试"><a href="#3-9、单节点多borker容错性测试" class="headerlink" title="3.9、单节点多borker容错性测试"></a>3.9、单节点多borker容错性测试</h3><p>Kafka是支持容错的，上面我们已经完成了Kafka单节点多Blocker的部署，下面我们来对Kafka的容错性进行测试，测试步骤如下:</p><h4 id="验证一：kill掉状态是follower的borker后，测试生产和消费的信息是否正确"><a href="#验证一：kill掉状态是follower的borker后，测试生产和消费的信息是否正确" class="headerlink" title="验证一：kill掉状态是follower的borker后，测试生产和消费的信息是否正确"></a>验证一：kill掉状态是follower的borker后，测试生产和消费的信息是否正确</h4><h5 id="1-查看topic的详细信息"><a href="#1-查看topic的详细信息" class="headerlink" title="(1)查看topic的详细信息"></a>(1)查看topic的详细信息</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">bin/kafka-topics.sh --describe --topic my-replicated-topic --bootstrap-server localhost:9093<br><br><span class="hljs-comment">#输出信息中可以看到3为leader, 1和2为follower</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8-%E5%8D%95%E8%8A%82%E7%82%B9/image-20221020152107702.png" alt="image-20221020152107702"></p><h5 id="2-kill掉状态是follower的borker（我这将follower为1的进程kill掉），测试生成和消费信息是否正确"><a href="#2-kill掉状态是follower的borker（我这将follower为1的进程kill掉），测试生成和消费信息是否正确" class="headerlink" title="(2)kill掉状态是follower的borker（我这将follower为1的进程kill掉），测试生成和消费信息是否正确"></a>(2)kill掉状态是follower的borker（我这将follower为1的进程kill掉），测试生成和消费信息是否正确</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看进程信息</span><br>jps -m<br><br><span class="hljs-built_in">kill</span> -9 进程<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8-%E5%8D%95%E8%8A%82%E7%82%B9/image-20221020152801513.png" alt="image-20221020152801513"></p><h5 id="3-启动生产者和消费者，测试信息是否正确"><a href="#3-启动生产者和消费者，测试信息是否正确" class="headerlink" title="(3)启动生产者和消费者，测试信息是否正确"></a>(3)启动生产者和消费者，测试信息是否正确</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#启动生产者</span><br>bin/kafka-console-producer.sh --broker-list localhost:9093,localhost:9094,localhost:9095 --topic my-replicated-topic<br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8-%E5%8D%95%E8%8A%82%E7%82%B9/image-20221020153446152.png" alt="image-20221020153446152"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#启动消费者</span><br>bin/kafka-console-consumer.sh --bootstrap-server localhost:9094 --topic my-replicated-topic --from-beginning<br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8-%E5%8D%95%E8%8A%82%E7%82%B9/image-20221020153601755.png" alt="image-20221020153601755"></p><p><strong>结论：kill掉任意一个状态是follower的broker，生成和消费信息正确，不受任何影响</strong></p><h4 id="验证二：kill掉状态是Leader的borker后，测试生产和消费的信息是否正确"><a href="#验证二：kill掉状态是Leader的borker后，测试生产和消费的信息是否正确" class="headerlink" title="验证二：kill掉状态是Leader的borker后，测试生产和消费的信息是否正确"></a>验证二：kill掉状态是Leader的borker后，测试生产和消费的信息是否正确</h4><h5 id="1-查看topic详细信息，并kill掉状态为leader的borker"><a href="#1-查看topic详细信息，并kill掉状态为leader的borker" class="headerlink" title="(1)查看topic详细信息，并kill掉状态为leader的borker"></a>(1)查看topic详细信息，并kill掉状态为leader的borker</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">bin/kafka-topics.sh --describe --topic my-replicated-topic --bootstrap-server localhost:9094<br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8-%E5%8D%95%E8%8A%82%E7%82%B9/image-20221020160243454.png" alt="image-20221020160243454"></p><h5 id="2-启动生产和消费者测试信息是否正确"><a href="#2-启动生产和消费者测试信息是否正确" class="headerlink" title="(2)启动生产和消费者测试信息是否正确"></a>(2)启动生产和消费者测试信息是否正确</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#启动生产者</span><br>bin/kafka-console-producer.sh --broker-list localhost:9093,localhost:9094,localhost:9095 --topic my-replicated-topic<br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8-%E5%8D%95%E8%8A%82%E7%82%B9/image-20221020161457496.png" alt="image-20221020161457496"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#启动消费者</span><br>bin/kafka-console-consumer.sh --bootstrap-server localhost:9094 --topic my-replicated-topic --from-beginning<br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8-%E5%8D%95%E8%8A%82%E7%82%B9/image-20221020161607599.png" alt="image-20221020161607599"></p><p><strong>结论：kill掉状态是leader的borker，生产和消费的信息正确</strong></p><p><strong>根据验证一和验证二结果得知：不管当前状态的borker是leader还是follower，当我们kill掉后，只要有一个borker能够正常使用，则消息仍然能够正常的生产和发送。即Kafka的容错性是有保证的！</strong></p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker启动elasticsearch.md</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/docker%E5%90%AF%E5%8A%A8elasticsearch/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/docker%E5%90%AF%E5%8A%A8elasticsearch/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker启动elasticsearch-md"><a href="#docker启动elasticsearch-md" class="headerlink" title="docker启动elasticsearch.md"></a>docker启动elasticsearch.md</h1><h2 id="一、修改主机配置参数"><a href="#一、修改主机配置参数" class="headerlink" title="一、修改主机配置参数"></a>一、修改主机配置参数</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/sysctl.conf<br>vm.max_map_count=262144<br><br><span class="hljs-comment">#生效</span><br>sysctl -p<br><br>vim /etc/systemd/system.conf<br><br>DefaultLimitNOFILE=65536<br>DefaultLimitNPROC=32000<br>DefaultLimitMEMLOCK=infinity<br><br><span class="hljs-comment">#生效</span><br>systemctl daemon-reload<br><br>vim /etc/security/limits.conf<br><br>* soft nofile 65536<br>* hard nofile 65536<br>* soft <span class="hljs-built_in">nproc</span> 4096<br>* hard <span class="hljs-built_in">nproc</span> 4096<br>* hard memlock unlimited<br>* soft memlock unlimited<br><br></code></pre></td></tr></table></figure><h2 id="二、启动-elasticsearch"><a href="#二、启动-elasticsearch" class="headerlink" title="二、启动 elasticsearch"></a>二、启动 elasticsearch</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /data/elasticsearch/data<br><span class="hljs-built_in">mkdir</span> -p /data/elasticsearch/logs<br><span class="hljs-built_in">chmod</span> -R 777 /data/elasticsearch/data<br><span class="hljs-built_in">chmod</span> -R 777 /data/elasticsearch/logs<br>docker run -d --name=es7 \<br>  --restart=always \<br>  -p 9200:9200 -p 9300:9300 \<br>  -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \<br>  -v /data/elasticsearch/data:/usr/share/elasticsearch/data \<br>  -v /data/elasticsearch/logs:/usr/share/elasticsearch/logs \<br>elasticsearch:7.10.1<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name es_test \<br>-p 9200:9200 -p 9300:9300 \<br>-v /app/es/esdata:/data/elasticsearch/data \<br>-v /app/es/conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \<br>-e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms300m -Xmx300m&quot;</span> -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span>  ikpinyin:5.6.1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>elasticsearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>es</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch安装和辅助插件安装</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ElasticSearch安装和辅助插件安装"><a href="#ElasticSearch安装和辅助插件安装" class="headerlink" title="ElasticSearch安装和辅助插件安装"></a>ElasticSearch安装和辅助插件安装</h1><h2 id="一、ElasticSearch-安装"><a href="#一、ElasticSearch-安装" class="headerlink" title="一、ElasticSearch 安装"></a>一、ElasticSearch 安装</h2><h3 id="1、下载ElasticSearch安装包"><a href="#1、下载ElasticSearch安装包" class="headerlink" title="1、下载ElasticSearch安装包"></a>1、下载ElasticSearch安装包</h3><p>下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下载es安装包</span><br>wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.4.0-linux-x86_64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="2、执行解压操作"><a href="#2、执行解压操作" class="headerlink" title="2、执行解压操作"></a>2、执行解压操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 将elasticsearch-7.4.0-linux-x86_64.tar.gz解压到opt文件夹下. -C 大写</span><br>tar -zxvf elasticsearch-7.4.0-linux-x86_64.tar.gz  -C /opt<br></code></pre></td></tr></table></figure><h3 id="3、创建普通用户"><a href="#3、创建普通用户" class="headerlink" title="3、创建普通用户"></a>3、创建普通用户</h3><p>因为安全问题，Elasticsearch 不允许root用户直接运行，所以要创建新用户，在root用户中创建新用户,执行如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">useradd itheima  <span class="hljs-comment"># 新增itheima用户</span><br>passwd  itheima  <span class="hljs-comment"># 为itheima用户设置密码</span><br></code></pre></td></tr></table></figure><h3 id="4、为新用户授权，如下图"><a href="#4、为新用户授权，如下图" class="headerlink" title="4、为新用户授权，如下图"></a>4、为新用户授权，如下图</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chown</span> -R itheima:itheima /opt/elasticsearch-7.4.0 <span class="hljs-comment">#文件夹所有者</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/2226570-20210326181350582-2125565058.png" alt="img"></p><p>将 &#x2F;opt&#x2F;elasticsearch-7.4.0文件夹授权给itheima用户，由上图可见，我们的文件夹权限赋给了itheima</p><h3 id="5、修改elasticsearch-yml文件"><a href="#5、修改elasticsearch-yml文件" class="headerlink" title="5、修改elasticsearch.yml文件"></a>5、修改elasticsearch.yml文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /opt/elasticsearch-7.4.0/config/elasticsearch.yml <br><span class="hljs-comment"># ======================== Elasticsearch Configuration =========================</span><br>cluster.name: my-application<br>node.name: node-1<br>network.host: 0.0.0.0<br>http.port: 9200<br>cluster.initial_master_nodes: [<span class="hljs-string">&quot;node-1&quot;</span>]<br></code></pre></td></tr></table></figure><p>备注：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">cluster.name：配置elasticsearch的集群名称，默认是elasticsearch。建议修改成一个有意义的名称<br>node.name：节点名，elasticsearch会默认随机指定一个名字，建议指定一个有意义的名称，方便管理<br>network.host：设置为0.0.0.0允许外网访问<br>http.port：Elasticsearch的http访问端口<br>cluster.initial_master_nodes：初始化新的集群时需要此配置来选举master<br></code></pre></td></tr></table></figure><h3 id="6、修改配置文件"><a href="#6、修改配置文件" class="headerlink" title="6、修改配置文件"></a>6、修改配置文件</h3><p>新创建的itheima用户最大可创建文件数太小，最大虚拟内存太小，切换到root用户，编辑下列配置文件， 添加类似如下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 切换到root用户</span><br>su root <br><br><span class="hljs-comment">#1. ===最大可创建文件数太小=======</span><br>vim /etc/security/limits.conf <br><span class="hljs-comment"># 在文件末尾中增加下面内容</span><br>itheima soft nofile 65536<br>itheima hard nofile 65536<br><br>vim /etc/security/limits.d/20-nproc.conf<br><span class="hljs-comment"># 在文件末尾中增加下面内容</span><br>itheima soft nofile 65536<br>itheima hard nofile 65536<br>*  hard    <span class="hljs-built_in">nproc</span>     4096<br><span class="hljs-comment"># 注：* 代表Linux所有用户名称 </span><br><br><span class="hljs-comment">#2. ===最大虚拟内存太小=======</span><br>vim /etc/sysctl.conf<br><span class="hljs-comment"># 在文件中增加下面内容</span><br>vm.max_map_count=655360<br><br><span class="hljs-comment"># 重新加载，输入下面命令：</span><br>sysctl -p<br></code></pre></td></tr></table></figure><h3 id="7、启动elasticsearch"><a href="#7、启动elasticsearch" class="headerlink" title="7、启动elasticsearch"></a>7、启动elasticsearch</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#switch user</span><br>su itheima  <span class="hljs-comment"># 切换到itheima用户启动</span><br><span class="hljs-built_in">cd</span> /opt/elasticsearch-7.4.0/bin<br>./elasticsearch <span class="hljs-comment">#启动</span><br>./elasticsearch -d  <span class="hljs-comment">#后台启动</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/2226570-20210326181404318-915148786.png" alt="img"></p><p>通过上图我们可以看到elasticsearch已经成功启动</p><h3 id="8、设置elasticsearch为开机自启动服务"><a href="#8、设置elasticsearch为开机自启动服务" class="headerlink" title="8、设置elasticsearch为开机自启动服务"></a>8、设置elasticsearch为开机自启动服务</h3><h4 id="8-1、先查看当前的开机启动服务"><a href="#8-1、先查看当前的开机启动服务" class="headerlink" title="8.1、先查看当前的开机启动服务"></a>8.1、先查看当前的开机启动服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">chkconfig --list<br></code></pre></td></tr></table></figure><h4 id="8-2、创建es-的系统启动服务文件，进入到-cd-x2F-etc-x2F-init-d-目录，编写elasticsearch脚本"><a href="#8-2、创建es-的系统启动服务文件，进入到-cd-x2F-etc-x2F-init-d-目录，编写elasticsearch脚本" class="headerlink" title="8.2、创建es 的系统启动服务文件，进入到 cd &#x2F;etc&#x2F;init.d 目录，编写elasticsearch脚本"></a>8.2、创建es 的系统启动服务文件，进入到 cd &#x2F;etc&#x2F;init.d 目录，编写elasticsearch脚本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /etc/init.d    　　<span class="hljs-comment">#【进入到目录】</span><br><br>vim elasticsearch 　　 <span class="hljs-comment">#【创建es系统启动服务文件】</span><br><br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-comment"># chkconfig: - 85 15</span><br><span class="hljs-comment">#description: elasticsearch</span><br><span class="hljs-built_in">export</span> ES_HOME=/opt/elasticsearch-7.4.0<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span><br>start)<br>    su es&lt;&lt;!<br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$ES_HOME</span><br>    ./bin/elasticsearch -d -p pid<br>!<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;elasticsearch startup&quot;</span><br>    ;;  <br>stop)<br>    <span class="hljs-built_in">kill</span> -9 `<span class="hljs-built_in">cat</span> <span class="hljs-variable">$ES_HOME</span>/pid`<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;elasticsearch stopped&quot;</span><br>    ;;  <br>restart)<br>    <span class="hljs-built_in">kill</span> -9 `<span class="hljs-built_in">cat</span> <span class="hljs-variable">$ES_HOME</span>/pid`<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;elasticsearch stopped&quot;</span><br>    su es&lt;&lt;!<br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$ES_HOME</span><br>    ./bin/elasticsearch -d -p pid<br>!<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;elasticsearch startup&quot;</span><br>    ;;  <br>*)<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;start|stop|restart&quot;</span><br>    ;;  <br><span class="hljs-keyword">esac</span><br><span class="hljs-built_in">exit</span> $?<br></code></pre></td></tr></table></figure><h4 id="8-3、修改文件权限；"><a href="#8-3、修改文件权限；" class="headerlink" title="8.3、修改文件权限；"></a>8.3、修改文件权限；</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> 777 elasticsearch<br></code></pre></td></tr></table></figure><h4 id="8-4、添加和删除服务并设置启动方式；"><a href="#8-4、添加和删除服务并设置启动方式；" class="headerlink" title="8.4、添加和删除服务并设置启动方式；"></a>8.4、添加和删除服务并设置启动方式；</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">chkconfig --add elasticsearch　　　　<span class="hljs-comment"># 【添加系统服务】</span><br>chkconfig --del elasticsearch　　　　<span class="hljs-comment"># 【删除系统服务】</span><br></code></pre></td></tr></table></figure><h4 id="8-5、关闭和启动服务；"><a href="#8-5、关闭和启动服务；" class="headerlink" title="8.5、关闭和启动服务；"></a>8.5、关闭和启动服务；</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start elasticsearch   　　　<span class="hljs-comment"># 【启动服务】</span><br>systemctl stop elasticsearch 　　　　　 <span class="hljs-comment"># 【停止服务】</span><br>systemctl restart elasticsearch       <span class="hljs-comment"># 【重启服务】</span><br></code></pre></td></tr></table></figure><h4 id="8-6、设置服务是否开机启动；"><a href="#8-6、设置服务是否开机启动；" class="headerlink" title="8.6、设置服务是否开机启动；"></a>8.6、设置服务是否开机启动；</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#【开启服务】</span><br>chkconfig elasticsearch on　　　　　<br>systemctl <span class="hljs-built_in">enable</span> elasticsearch <br><span class="hljs-comment"># 【关闭服务】</span><br>chkconfig elasticsearch off　　   　<br>systemctl <span class="hljs-built_in">disable</span> elasticsearch <br><br></code></pre></td></tr></table></figure><h3 id="9-访问elasticsearch"><a href="#9-访问elasticsearch" class="headerlink" title="9. 访问elasticsearch"></a>9. 访问elasticsearch</h3><h4 id="在访问elasticsearch前，请确保防火墙是关闭的，执行命令："><a href="#在访问elasticsearch前，请确保防火墙是关闭的，执行命令：" class="headerlink" title="在访问elasticsearch前，请确保防火墙是关闭的，执行命令："></a>在访问elasticsearch前，请确保防火墙是关闭的，执行命令：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#暂时关闭防火墙</span><br>systemctl  stop  firewalld<br><br><span class="hljs-comment"># 或者</span><br><span class="hljs-comment">#永久设置防火墙状态</span><br>systemctl <span class="hljs-built_in">enable</span> firewalld.service  <span class="hljs-comment">#打开防火墙永久性生效，重启后不会复原 </span><br>systemctl <span class="hljs-built_in">disable</span> firewalld.service <span class="hljs-comment">#关闭防火墙，永久性生效，重启后不会复原 </span><br></code></pre></td></tr></table></figure><p>浏览器输入<a href="http://192.168.52.128:9200/%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE">http://192.168.52.128:9200/，如下图</a></p><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/2226570-20210326181413062-739940539.png" alt="img"></p><p>此时elasticsearch已成功启动：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs d">重点几个关注下即可:<br>numbe<span class="hljs-string">r&quot; : &quot;</span><span class="hljs-number">7.4</span><span class="hljs-number">.0</span><span class="hljs-string">&quot;   表示elasticsearch版本</span><br><span class="hljs-string">lucene_version&quot;</span> : <span class="hljs-string">&quot;8.2.0&quot;</span>  表示lucene版本<br>name ： 默认启动的时候指定了 ES 实例名称<br>cluster_name ： 默认名为 elasticsearch<br></code></pre></td></tr></table></figure><h2 id="二、-Elasticsearch辅助插件安装"><a href="#二、-Elasticsearch辅助插件安装" class="headerlink" title="二、 Elasticsearch辅助插件安装"></a>二、 Elasticsearch辅助插件安装</h2><h3 id="1-、Postman安装"><a href="#1-、Postman安装" class="headerlink" title="1 、Postman安装"></a>1 、Postman安装</h3><p>Postman是一个http模拟请求的工具。它是一个专门测试 API 的工具，Postman 提供功能强大的 Web API 和 HTTP 请求的调试，它能够发送任何类型的HTTP 请求 (GET, POST, PUT, DELETE…)，并且能附带任何数量的参数和 Headers。不仅如此，它还提供测试数据和环境配置数据的导入导出。</p><p>进入官网<a href="https://www.cnblogs.com/859630097com/p/www.getpostman.com">www.getpostman.com</a>，下载</p><h3 id="2、-Kibana安装"><a href="#2、-Kibana安装" class="headerlink" title="2、 Kibana安装"></a>2、 Kibana安装</h3><p>Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。</p><p>Kibana让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示Elasticsearch查询动态。</p><h4 id="2-1、上传并解压kibana"><a href="#2-1、上传并解压kibana" class="headerlink" title="2.1、上传并解压kibana"></a>2.1、上传并解压kibana</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#解压到当前目录（/opt）下</span><br>tar -xzf kibana-7.4.0-linux-x86_64.tar.gz -C /opt<br></code></pre></td></tr></table></figure><h4 id="2-2、修改kibana配置"><a href="#2-2、修改kibana配置" class="headerlink" title="2.2、修改kibana配置"></a>2.2、修改kibana配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /opt/kibana-7.4.0-linux-x86_64/config/kibana.yml<br>server.port: 5601<br>server.host: <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>server.name: <span class="hljs-string">&quot;kibana-itcast&quot;</span><br>elasticsearch.hosts: [<span class="hljs-string">&quot;http://127.0.0.1:9200&quot;</span>]<br>elasticsearch.requestTimeout: 99999<br><br><span class="hljs-comment">#参数解释：</span><br>server.port：http访问端口<br>server.host：ip地址，0.0.0.0表示可远程访问<br>server.name：kibana服务名<br>elasticsearch.hosts：elasticsearch地址<br>elasticsearch.requestTimeout：请求elasticsearch超时时间，默认为30000，此处可根据情况设置<br></code></pre></td></tr></table></figure><h4 id="2-3、启动kibana"><a href="#2-3、启动kibana" class="headerlink" title="2.3、启动kibana"></a>2.3、启动kibana</h4><p>由于kibana不建议使用root用户启动，如果用root启动，需要加–allow-root参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 切换到kibana的bin目录</span><br><span class="hljs-built_in">cd</span> /opt/kibana-7.4.0-linux-x86_64/bin<br><span class="hljs-comment"># 启动</span><br>./kibana --allow-root<br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/2226570-20210326181435785-1459362013.png" alt="img"></p><p>启动成功。</p><h4 id="2-4、访问kibana"><a href="#2-4、访问kibana" class="headerlink" title="2.4、访问kibana"></a>2.4、访问kibana</h4><p>浏览器输入http:&#x2F;&#x2F;服务器IP:5601&#x2F;，如下图：</p><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/2226570-20210326181443577-1850236452.png" alt="img"></p><p>看到这个界面，说明Kibanan已成功安装！。</p><p><code>Discover</code>：可视化查询分析器 <code>Visualize</code>：统计分析图表 <code>Dashboard</code>：自定义主面板（添加图表） <code>Timelion</code>：Timelion是一个kibana时间序列展示组件（暂时不用） <code>Dev Tools</code>：Console控制台（同CURL&#x2F;POSTER，操作ES代码工具，代码提示，很方便） <code>Management</code>：管理索引库(index)、已保存的搜索和可视化结果(save objects)、设置 kibana 服务器属性。</p><h3 id="3、head安装"><a href="#3、head安装" class="headerlink" title="3、head安装"></a>3、head安装</h3><p><strong>head简介</strong></p><p>head插件是ES的一个可视化管理插件，用来监视ES的状态，并通过head客户端和ES服务进行交互，比如创建映射、创建索引等。</p><p>在登陆和访问head插件地址和ElasticSearch前需要事先在服务器上安装和配置好ElasticSearch以及head插件。安装完后，默认head插件的web端口为9100，ElasticSearch服务的端口为9200，使用浏览器访问head地址，如<a href="http://10.82.25.183:9100/">http://IP地址:9100/</a>，推荐使用Chrome浏览器，head插件对Chrome浏览器兼容更佳。进入head页面后将ElasticSearch连接输入框中填写正确的ElasticSearch服务地址，就可以监控ElasticSearch运行信息</p><h4 id="3-1-安装head首先需要安装Node"><a href="#3-1-安装head首先需要安装Node" class="headerlink" title="3.1 安装head首先需要安装Node"></a>3.1 安装head首先需要安装Node</h4><h5 id="3-1-1-什么是Node"><a href="#3-1-1-什么是Node" class="headerlink" title="3.1.1 什么是Node"></a>3.1.1 什么是Node</h5><p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 <a href="https://developers.google.com/v8/">Chrome V8</a> 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I&#x2F;O 的模型，使其轻量又高效。Node.js 的包管理器 <a href="https://www.npmjs.com/">npm</a>，是全球最大的开源库生态系统。</p><h5 id="3-1-2-下载Node"><a href="#3-1-2-下载Node" class="headerlink" title="3.1.2 下载Node"></a>3.1.2 下载Node</h5><p>由于elasticsearch-head插件是由nodejs语言编写，所以安装elasticsearch-head前需要先安装nodejs。 首先，执行以下命令安装nodejs和grunt</p><p>打开虚拟机，执行wget命令下载Node，如下图：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://nodejs.org/dist/v10.15.2/node-v10.15.2-linux-x64.tar.xz<br></code></pre></td></tr></table></figure><h5 id="3-1-3-解压Node包"><a href="#3-1-3-解压Node包" class="headerlink" title="3.1.3 解压Node包"></a>3.1.3 解压Node包</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar xvf node-v10.15.2-linux-x64.tar.xz<br></code></pre></td></tr></table></figure><h5 id="3-1-4-设置软连接"><a href="#3-1-4-设置软连接" class="headerlink" title="3.1.4 设置软连接"></a>3.1.4 设置软连接</h5><p>解压文件的 bin 目录底下包含了 node、npm 等命令，我们可以使用 ln 命令来设置软连接：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ln</span> -s bin/npm /usr/local/bin/<br><br><span class="hljs-built_in">ln</span> -s bin/node /usr/local/bin/<br></code></pre></td></tr></table></figure><p>在&#x2F;etc&#x2F;profile中配置好path环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi ~/.bash_profile<br><br><span class="hljs-built_in">export</span> NODE_HOME=/opt/nodejs/node-v10.15.2-linux-x64<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$NODE_HOME</span>/bin<br><br><br><span class="hljs-comment">#保存退出，使文件生效</span><br><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure><h5 id="3-1-5-验证安装"><a href="#3-1-5-验证安装" class="headerlink" title="3.1.5 验证安装"></a>3.1.5 验证安装</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">node -v<br></code></pre></td></tr></table></figure><h4 id="3-2-grunt安装"><a href="#3-2-grunt安装" class="headerlink" title="3.2 grunt安装"></a>3.2 grunt安装</h4><p>安装grunt（运行在Node.js上面的任务管理器（task runner）），为了获得Grunt的更多产品特性，需要全局安装Grunt’s 命令行接口（CLI），使用npm进行安装，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -g grunt-cli<br></code></pre></td></tr></table></figure><p>查看grunt版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">grunt --version<br><span class="hljs-comment">#输出grunt版本信息，表示安装成功。</span><br></code></pre></td></tr></table></figure><h4 id="3-3-head安装"><a href="#3-3-head安装" class="headerlink" title="3.3 head安装"></a>3.3 head安装</h4><h5 id="3-3-1-执行命令安装git"><a href="#3-3-1-执行命令安装git" class="headerlink" title="3.3.1 执行命令安装git"></a>3.3.1 执行命令安装git</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install git -y<br></code></pre></td></tr></table></figure><h5 id="3-3-2-切换到-x2F-opt目录下-执行下面的克隆命令"><a href="#3-3-2-切换到-x2F-opt目录下-执行下面的克隆命令" class="headerlink" title="3.3.2 切换到&#x2F;opt目录下,执行下面的克隆命令"></a>3.3.2 切换到&#x2F;opt目录下,执行下面的克隆命令</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> git://github.com/mobz/elasticsearch-head.git<br></code></pre></td></tr></table></figure><h5 id="3-3-3-进入到elasticsearch-head目录"><a href="#3-3-3-进入到elasticsearch-head目录" class="headerlink" title="3.3.3) 进入到elasticsearch-head目录"></a>3.3.3) 进入到elasticsearch-head目录</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> elasticsearch-head<br></code></pre></td></tr></table></figure><h5 id="3-3-4-运行"><a href="#3-3-4-运行" class="headerlink" title="3.3.4) 运行"></a>3.3.4) 运行</h5><p>在运行之前我们需要修改下elasticsearch.yml，因为ES默认不开启跨域访问，需要添加以下配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#开启cors跨域访问支持，默认为false </span><br>http.cors.enabled: <span class="hljs-literal">true</span><br><span class="hljs-comment">#跨域访问允许的域名地址，(允许所有域名)以上使用正则</span><br>http.cors.allow-origin: <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>然后开始执行运行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm run start<br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/2226570-20210326181555123-864219776.png" alt="img"></p><h5 id="3-3-5-访问head"><a href="#3-3-5-访问head" class="headerlink" title="3.3.5) 访问head"></a>3.3.5) 访问head</h5><p>浏览器输入ip:port:9100，如下图</p><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/2226570-20210326181602095-654760258.png" alt="img"></p><p>看到这个界面说明我们的head插件成功安装并且成功连接Elasticsearch。</p><h3 id="4、IK分词器安装"><a href="#4、IK分词器安装" class="headerlink" title="4、IK分词器安装"></a>4、IK分词器安装</h3><h4 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h4><p>Elasticsearch 要使用 ik，就要先构建 ik 的 jar包，这里要用到 maven 包管理工具，而 maven 需要java 环境，而 Elasticsearch 内置了jdk， 所以可以将JAVA_HOME设置为Elasticsearch 内置的jdk</p><h5 id="1-1）设置JAVA-HOME"><a href="#1-1）设置JAVA-HOME" class="headerlink" title="1.1）设置JAVA_HOME"></a>1.1）设置JAVA_HOME</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/profile<br><span class="hljs-comment"># 在profile文件末尾添加</span><br><span class="hljs-comment">#java environment</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/opt/elasticsearch-7.4.0/jdk<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin<br><br><span class="hljs-comment"># 保存退出后，重新加载profile</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h5 id="1-2）下载maven安装包"><a href="#1-2）下载maven安装包" class="headerlink" title="1.2）下载maven安装包"></a>1.2）下载maven安装包</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget http://mirror.cc.columbia.edu/pub/software/apache/maven/maven-3/3.1.1/binaries/apache-maven-3.1.1-bin.tar.gz  <br></code></pre></td></tr></table></figure><h5 id="1-3）解压maven安装包"><a href="#1-3）解压maven安装包" class="headerlink" title="1.3）解压maven安装包"></a>1.3）解压maven安装包</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar xzf apache-maven-3.1.1-bin.tar.gz <br></code></pre></td></tr></table></figure><h5 id="1-4）设置软连接"><a href="#1-4）设置软连接" class="headerlink" title="1.4）设置软连接"></a>1.4）设置软连接</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ln</span> -s apache-maven-3.1.1 maven <br></code></pre></td></tr></table></figure><h5 id="1-5）设置path"><a href="#1-5）设置path" class="headerlink" title="1.5）设置path"></a>1.5）设置path</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim  /etc/profile.d/maven.sh<br><br><span class="hljs-comment">#将下面的内容复制到文件，保存</span><br><span class="hljs-built_in">export</span> MAVEN_HOME=/opt/maven  <br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$&#123;MAVEN_HOME&#125;</span>/bin:<span class="hljs-variable">$&#123;PATH&#125;</span> <br><br><span class="hljs-comment">#设置好Maven的路径之后，需要运行下面的命令使其生效</span><br><span class="hljs-built_in">source</span> /etc/profile.d/maven.sh<br></code></pre></td></tr></table></figure><h5 id="1-6）验证maven是否安装成功"><a href="#1-6）验证maven是否安装成功" class="headerlink" title="1.6）验证maven是否安装成功"></a>1.6）验证maven是否安装成功</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mvn -v<br></code></pre></td></tr></table></figure><h4 id="2、安装IK分词器"><a href="#2、安装IK分词器" class="headerlink" title="2、安装IK分词器"></a>2、安装IK分词器</h4><h5 id="2-1）下载IK"><a href="#2-1）下载IK" class="headerlink" title="2.1）下载IK"></a>2.1）下载IK</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/medcl/elasticsearch-analysis-ik/archive/v7.4.0.zip<br></code></pre></td></tr></table></figure><h5 id="2-2）解压IK"><a href="#2-2）解压IK" class="headerlink" title="2.2）解压IK"></a>2.2）解压IK</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">unzip v7.4.0.zip<br></code></pre></td></tr></table></figure><h5 id="2-3）编译jar包"><a href="#2-3）编译jar包" class="headerlink" title="2.3）编译jar包"></a>2.3）编译jar包</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 切换到 elasticsearch-analysis-ik-7.4.0目录</span><br><span class="hljs-built_in">cd</span> elasticsearch-analysis-ik-7.4.0/<br><span class="hljs-comment">#打包</span><br>mvn package<br></code></pre></td></tr></table></figure><h5 id="2-4）-jar包移动"><a href="#2-4）-jar包移动" class="headerlink" title="2.4） jar包移动"></a>2.4） jar包移动</h5><p>package执行完毕后会在当前目录下生成target&#x2F;releases目录，将其中的elasticsearch-analysis-ik-7.4.0.zip拷贝到elasticsearch目录下的新建的目录plugins&#x2F;analysis-ik，并解压</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#切换目录</span><br><span class="hljs-built_in">cd</span> /opt/elasticsearch-7.4.0/plugins/<br><span class="hljs-comment">#新建目录</span><br><span class="hljs-built_in">mkdir</span> analysis-ik<br><span class="hljs-built_in">cd</span> analysis-ik<br><span class="hljs-comment">#执行拷贝</span><br><span class="hljs-built_in">cp</span> -R /opt/elasticsearch-analysis-ik-7.4.0/target/releases/elasticsearch-analysis-ik-7.4.0.zip      /opt/elasticsearch-7.4.0/plugins/analysis-ik<br><span class="hljs-comment">#执行解压</span><br>unzip  /opt/elasticsearch-7.4.0/plugins/analysis-ik/elasticsearch-analysis-ik-7.4.0.zip<br></code></pre></td></tr></table></figure><h5 id="2-5）拷贝辞典"><a href="#2-5）拷贝辞典" class="headerlink" title="2.5）拷贝辞典"></a>2.5）拷贝辞典</h5><p>将elasticsearch-analysis-ik-7.4.0目录下的config目录中的所有文件 拷贝到elasticsearch的config目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> -R /opt/elasticsearch-analysis-ik-7.4.0/config/*   /opt/elasticsearch-7.4.0/config<br></code></pre></td></tr></table></figure><p><strong>记得一定要重启Elasticsearch！！！</strong></p><h4 id="3、使用IK分词器"><a href="#3、使用IK分词器" class="headerlink" title="3、使用IK分词器"></a>3、使用IK分词器</h4><p>IK分词器有两种分词模式：ik_max_word和ik_smart模式。</p><h5 id="3-1）ik-max-word"><a href="#3-1）ik-max-word" class="headerlink" title="3.1）ik_max_word"></a>3.1）ik_max_word</h5><p>会将文本做最细粒度的拆分，比如会将“乒乓球明年总冠军”拆分为“乒乓球、乒乓、球、明年、总冠军、冠军。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">GET /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;乒乓球明年总冠军&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>ik_max_word分词器执行如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs sh">&#123;<br>  <span class="hljs-string">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;乒乓球&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 0,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 3,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 0<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;乒乓&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 0,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 2,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 1<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;球&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 2,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 3,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_CHAR&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 2<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;明年&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 3,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 5,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 3<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;总冠军&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 5,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 8,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 4<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;冠军&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 6,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 8,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 5<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2）ik-smart"><a href="#3-2）ik-smart" class="headerlink" title="3.2）ik_smart"></a>3.2）ik_smart</h5><p>会做最粗粒度的拆分，比如会将“乒乓球明年总冠军”拆分为乒乓球、明年、总冠军。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh">GET /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;乒乓球明年总冠军&quot;</span><br>&#125;<br>ik_smart分词器执行如下：<br><br>&#123;<br>  <span class="hljs-string">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;乒乓球&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 0,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 3,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 0<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;明年&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 3,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 5,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 1<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;总冠军&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 5,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 8,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 2<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>由此可见 使用ik_smart可以将文本”text”: “乒乓球明年总冠军”分成了【乒乓球】【明年】【总冠军】</p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>elasticsearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>es</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch的IK分词插件、pinyin插件安装</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%8F%8AIK%E5%88%86%E8%AF%8D%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%8F%8AIK%E5%88%86%E8%AF%8D%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ElasticSearch的IK分词插件、pinyin插件安装"><a href="#ElasticSearch的IK分词插件、pinyin插件安装" class="headerlink" title="ElasticSearch的IK分词插件、pinyin插件安装"></a>ElasticSearch的IK分词插件、pinyin插件安装</h1><p><strong>安装时采用ElasticSearch版本5.6.12</strong></p><h2 id="一、安装ElasticSearch"><a href="#一、安装ElasticSearch" class="headerlink" title="一、安装ElasticSearch"></a>一、安装ElasticSearch</h2><h3 id="1-安装openjdk环境"><a href="#1-安装openjdk环境" class="headerlink" title="1.安装openjdk环境"></a>1.安装openjdk环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install java-1.8.0-openjdk-devel<br></code></pre></td></tr></table></figure><h3 id="2-使用yum安装rpm包"><a href="#2-使用yum安装rpm包" class="headerlink" title="2.使用yum安装rpm包"></a>2.使用yum安装rpm包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.12.rpm<br>yum install elasticsearch-5.6.12.rpm<br></code></pre></td></tr></table></figure><h3 id="3-查看安装的elasticsearch相关文件所在的目录"><a href="#3-查看安装的elasticsearch相关文件所在的目录" class="headerlink" title="3.查看安装的elasticsearch相关文件所在的目录"></a>3.查看安装的elasticsearch相关文件所在的目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">whereis elasticsearch<br><br><span class="hljs-comment">#输出:</span><br>elasticsearch: /etc/elasticsearch /usr/share/elasticsearch<br><br></code></pre></td></tr></table></figure><h3 id="4-修改yml文件"><a href="#4-修改yml文件" class="headerlink" title="4.修改yml文件"></a>4.修改yml文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/elasticsearch/elasticsearch.yml <br><br><span class="hljs-comment">#----------以下为解除注释的内容------------------#</span><br>cluster.name: my-application  <span class="hljs-comment">#该name可自己定义</span><br>node.name: node-1<br>network.host: 0.0.0.0  <span class="hljs-comment">#可设置为本地地址，正式环境建议设置为本机</span><br>http.port: 9200<br><br><span class="hljs-comment">#path.data: /path/to/data  #修改路径地址时，请先确保正常启动后再修改,系统默认启动后的默认日志存放路径在/var/log/elasticsearch/</span><br><span class="hljs-comment">#path.logs: /path/to/logs  #修改路径地址时，请先确保正常启动后再修改,系统默认启动后的默认日志存放路径在/var/log/elasticsearch/</span><br></code></pre></td></tr></table></figure><h3 id="5-启动elasticsearch"><a href="#5-启动elasticsearch" class="headerlink" title="5.启动elasticsearch"></a>5.启动elasticsearch</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start elasticsearch.service &amp;&amp; systemctl status elasticsearch.service<br></code></pre></td></tr></table></figure><p><strong>注：启动不成功时，请vim &#x2F;etc&#x2F;elasticsearch&#x2F;jvm.options  查看-Xms2g -Xmx2g 内存是否是服务器的50%</strong></p><h2 id="二、安装IK分词插件"><a href="#二、安装IK分词插件" class="headerlink" title="二、安装IK分词插件"></a>二、安装IK分词插件</h2><h3 id="1-将相关的插件包上传到-x2F-usr-x2F-share-x2F-elasticsearch-x2F-plugins目录下，并解压"><a href="#1-将相关的插件包上传到-x2F-usr-x2F-share-x2F-elasticsearch-x2F-plugins目录下，并解压" class="headerlink" title="1.将相关的插件包上传到&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins目录下，并解压"></a>1.将相关的插件包上传到&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins目录下，并解压</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/share/elasticsearch/plugins<br><br>unzip elasticsearch-analysis-ik-5.6.12.zip <br><br><span class="hljs-comment">#更名</span><br><span class="hljs-built_in">mv</span> elasticsearch analysis-ik  <br><br><span class="hljs-comment">#解压后需删除该目录下的zip文件</span><br><span class="hljs-built_in">rm</span> -rf elasticsearch-analysis-ik-5.6.12.zip <br></code></pre></td></tr></table></figure><h3 id="2-修改文件的权限"><a href="#2-修改文件的权限" class="headerlink" title="2.修改文件的权限"></a>2.修改文件的权限</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> 755 analysis-ik<br><span class="hljs-built_in">chown</span> -R elasticsearch:elasticsearch analysis-ik<br></code></pre></td></tr></table></figure><h3 id="3-拷贝辞典，将目录下的config目录中的所有文件-拷贝到elasticsearch的config目录"><a href="#3-拷贝辞典，将目录下的config目录中的所有文件-拷贝到elasticsearch的config目录" class="headerlink" title="3.拷贝辞典，将目录下的config目录中的所有文件 拷贝到elasticsearch的config目录"></a>3.拷贝辞典，将目录下的config目录中的所有文件 拷贝到elasticsearch的config目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> -R /usr/share/elasticsearch/plugins/analysis-ik/config/* /etc/elasticsearch/<br></code></pre></td></tr></table></figure><h3 id="4-重启elasticsearch服务-并实时查看日志，路径有在"><a href="#4-重启elasticsearch服务-并实时查看日志，路径有在" class="headerlink" title="4.重启elasticsearch服务,并实时查看日志，路径有在"></a>4.重启elasticsearch服务,并实时查看日志，路径有在</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart elasticsearch.service &amp;&amp; <span class="hljs-built_in">tail</span> -f /var/log/elasticsearch/elasticsearch.log<br></code></pre></td></tr></table></figure><h2 id="三、安装pinyin插件"><a href="#三、安装pinyin插件" class="headerlink" title="三、安装pinyin插件"></a>三、安装pinyin插件</h2><h3 id="1-将相关的插件包上传到-x2F-usr-x2F-share-x2F-elasticsearch-x2F-plugins目录下，并解压-1"><a href="#1-将相关的插件包上传到-x2F-usr-x2F-share-x2F-elasticsearch-x2F-plugins目录下，并解压-1" class="headerlink" title="1.将相关的插件包上传到&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins目录下，并解压"></a>1.将相关的插件包上传到&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins目录下，并解压</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/share/elasticsearch/plugins<br><br>unzip elasticsearch-analysis-pinyin-5.6.12.zip<br><br><span class="hljs-built_in">mv</span> elasticsearch/ analysis-pinyin <span class="hljs-comment">#更名</span><br><br><span class="hljs-built_in">rm</span> -rf elasticsearch-analysis-pinyin-5.6.12.zip <span class="hljs-comment">#解压后删除该目录下zip文件</span><br></code></pre></td></tr></table></figure><h3 id="2-修改文件的权限-1"><a href="#2-修改文件的权限-1" class="headerlink" title="2.修改文件的权限"></a>2.修改文件的权限</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> 755 analysis-pinyin/<br><span class="hljs-built_in">chown</span> -R elasticsearch:elasticsearch analysis-pinyin/<br></code></pre></td></tr></table></figure><h3 id="3-重启elasticsearch服务"><a href="#3-重启elasticsearch服务" class="headerlink" title="3.重启elasticsearch服务"></a>3.重启elasticsearch服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart elasticsearch.service <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>elasticsearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>es</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker-compose安装consul</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/consul/%E4%BD%BF%E7%94%A8docker-compose%E5%AE%89%E8%A3%85consul/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/consul/%E4%BD%BF%E7%94%A8docker-compose%E5%AE%89%E8%A3%85consul/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker-compose安装consul"><a href="#使用docker-compose安装consul" class="headerlink" title="使用docker-compose安装consul"></a>使用docker-compose安装consul</h1><h2 id="1-创建工作目录并拉取consul镜像"><a href="#1-创建工作目录并拉取consul镜像" class="headerlink" title="1.创建工作目录并拉取consul镜像"></a>1.创建工作目录并拉取consul镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app/consul &amp;&amp; <span class="hljs-built_in">cd</span> /app/consul<br><br>docker pull consul<br></code></pre></td></tr></table></figure><h2 id="2-修改docker的json配置"><a href="#2-修改docker的json配置" class="headerlink" title="2.修改docker的json配置"></a>2.修改docker的json配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/docker/daemon.json<br><br>&#123;<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>],<br>  <span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br>  <span class="hljs-string">&quot;log-opts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;max-size&quot;</span>: <span class="hljs-string">&quot;100m&quot;</span>,<br>    <span class="hljs-string">&quot;max-file&quot;</span>: <span class="hljs-string">&quot;5&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;storage-driver&quot;</span>: <span class="hljs-string">&quot;overlay2&quot;</span>,<br>  <span class="hljs-string">&quot;storage-opts&quot;</span>: [<br>    <span class="hljs-string">&quot;overlay2.override_kernel_check=true&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>:[<span class="hljs-string">&quot;https://r2hd8p9u.mirror.aliyuncs.com&quot;</span>],<br>  <span class="hljs-string">&quot;insecure-registries&quot;</span>:[<span class="hljs-string">&quot;120.77.159.14:5000&quot;</span>],<br>  <span class="hljs-string">&quot;graph&quot;</span>: <span class="hljs-string">&quot;/app/docker&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-编辑consul-compose-yaml文件"><a href="#3-编辑consul-compose-yaml文件" class="headerlink" title="3.编辑consul-compose.yaml文件"></a>3.编辑consul-compose.yaml文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> consul-compose.yaml:<br><br>services:<br><br>  consul1:<br>    image: consul:latest<br>    container_name: consul_server_1<br>    restart: always<br>    volumes:<br>      - /app/consul/server1/data:/consul/data<br>      - /app/consul/server1/config:/consul/config<br>    environment:<br>      - data-dir:/consul/data<br>      - config-dir:/consul/config<br>    <span class="hljs-built_in">command</span>:<br>      - agent<br>      - -server<br>      - -bootstrap-expect=3<br>      - -node=10.10.0.2<br>      - -client=0.0.0.0<br>      - -datacenter=dc1<br>    networks:<br>      consul:<br>        ipv4_address: 10.10.0.2<br><br>  consul2:<br>    image: consul:latest<br>    container_name: consul_server_2<br>    restart: always<br>    depends_on:<br>      - consul1<br>    volumes:<br>      - /app/consul/server2/data:/consul/data<br>      - /app/consul/server2/config:/consul/config<br>    environment:<br>      - data-dir:/consul/data<br>      - config-dir:/consul/config<br>    <span class="hljs-built_in">command</span>:<br>      - agent<br>      - -server<br>      - -node=10.10.0.3<br>      - -client=0.0.0.0<br>      - -datacenter=dc1<br>      - -retry-join=10.10.0.2<br>    networks:<br>      consul:<br>        ipv4_address: 10.10.0.3<br><br>  consul3:<br>    image: consul:latest<br>    container_name: consul_server_3<br>    restart: always<br>    depends_on:<br>      - consul1<br>    volumes:<br>      - /app/consul/server3/data:/consul/data<br>      - /app/consul/server3/config:/consul/config<br>    environment:<br>      - data-dir:/consul/data<br>      - config-dir:/consul/config<br>    <span class="hljs-built_in">command</span>:<br>      - agent<br>      - -server<br>      - -node=10.10.0.4<br>      - -client=0.0.0.0<br>      - -datacenter=dc1<br>      - -retry-join=10.10.0.2<br>    networks:<br>      consul:<br>        ipv4_address: 10.10.0.4<br><br>  consul_agent:<br>    image: consul:latest<br>    container_name: consul_agent<br>    restart: always<br>    depends_on:<br>      - consul1<br>    ports:<br>      - <span class="hljs-string">&quot;8500:8500&quot;</span><br>    volumes:<br>      - /app/consul/agent/data:/consul/data<br>      - /app/consul/agent/config:/consul/config<br>    environment:<br>      - data-dir:/consul/data<br>      - config-dir:/consul/config<br>    <span class="hljs-built_in">command</span>:<br>      - agent<br>      - -ui<br>      - -node=10.10.0.5<br>      - -client=0.0.0.0<br>      - -datacenter=dc1<br>      - -retry-join=10.10.0.2<br>    networks:<br>      consul:<br>        ipv4_address: 10.10.0.5<br><br>networks:<br>  consul:<br>    ipam:<br>      driver: default<br>      config:<br>        - subnet: <span class="hljs-string">&quot;10.10.0.0/24&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看yaml文件volumes数据卷文件，在该目录下新建</span><br><br><span class="hljs-built_in">mkdir</span> /app/consul/agent/&#123;config,data&#125;<br></code></pre></td></tr></table></figure><h2 id="4-启动"><a href="#4-启动" class="headerlink" title="4.启动"></a>4.启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose -f consul-compose.yaml up -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>consul</category>
      
    </categories>
    
    
    <tags>
      
      <tag>consul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker安装consul服务</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/consul/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85consul/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/consul/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85consul/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker安装consul服务"><a href="#使用docker安装consul服务" class="headerlink" title="使用docker安装consul服务"></a>使用docker安装consul服务</h1><h2 id="一、使用docker搭建consul单节点"><a href="#一、使用docker搭建consul单节点" class="headerlink" title="一、使用docker搭建consul单节点"></a>一、使用docker搭建consul单节点</h2><h3 id="1、创建工作目录"><a href="#1、创建工作目录" class="headerlink" title="1、创建工作目录"></a>1、创建工作目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /consul/node1/config<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --restart=always --name consul \<br>-p 8500:8500 \<br>-v /consul/node1:/consul \<br>consul:latest agent -server -ui -bootstrap-expect=1 -node=node1 -client=0.0.0.0<br><br>参数解释：<br>-server：表示启动的节点类型为server类型<br>-bootstrap-expect：用于server节点选举leader的参数,表示达到几个server节点时开始选举<br>-bootstrap：表示这个节点是 Server-Leader ，每个数据中心只能运行一台服务器<br>-node：节点的名称，集群中必须是唯一的<br></code></pre></td></tr></table></figure><h2 id="二、使用docker搭建consul集群"><a href="#二、使用docker搭建consul集群" class="headerlink" title="二、使用docker搭建consul集群"></a>二、使用docker搭建consul集群</h2><h3 id="1、创建docker网络和工作目录"><a href="#1、创建docker网络和工作目录" class="headerlink" title="1、创建docker网络和工作目录"></a>1、创建docker网络和工作目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker network create --subnet=172.25.2.2/16 consulnet<br><span class="hljs-built_in">mkdir</span> -p /consul/node&#123;0,1,2&#125;/config<br></code></pre></td></tr></table></figure><h3 id="2、docker运行consul服务（集群模式）"><a href="#2、docker运行consul服务（集群模式）" class="headerlink" title="2、docker运行consul服务（集群模式）"></a>2、docker运行consul服务（集群模式）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --restart=always \<br>--name node1 \<br>--net consulnet \<br>--ip 172.25.0.2 \<br>-e <span class="hljs-string">&#x27;CONSUL_LOCAL_CONFIG=&#123;&quot;skip_leave_on_interrupt&quot;: true&#125;&#x27;</span> \<br>-v /consul/node1:/consul \<br>consul:1.4.3 agent -server -node=node1 -bootstrap-expect=2<br><br>docker run -d --restart=always \<br>--name node2 \<br>--net consulnet \<br>--ip 172.25.0.3 \<br>-e <span class="hljs-string">&#x27;CONSUL_LOCAL_CONFIG=&#123;&quot;skip_leave_on_interrupt&quot;: true&#125;&#x27;</span> \<br>-v /consul/node2:/consul \<br>consul:1.4.3 agent -server -node=node2 \<br>-<span class="hljs-built_in">join</span> 172.25.0.2<br><br><br>docker run -d --restart=always \<br>--name node0 \<br>--net consulnet \<br>--ip 172.25.0.100 \<br>-p 8400:8400 -p 8500:8500 -p 8600:53/udp \<br>-e <span class="hljs-string">&#x27;CONSUL_LOCAL_CONFIG=&#123;&quot;skip_leave_on_interrupt&quot;: true&#125;&#x27;</span> \<br>-v /consul/node0:/consul \<br>consul:1.4.3 agent -ui -node=node0 \<br>-client=0.0.0.0 \<br>-<span class="hljs-built_in">join</span> 172.25.0.2<br><br><span class="hljs-comment">#参数详解：</span><br>agent：表示启动 Agent 进程。<br>-client：指定客户端访问consul集群（比如consul集群提供的web界面，DNS服务等）,表示启动 Consul Cilent 模式。<br>-server：表示该consul节点工作在server模式,表示启动 Consul Server 模式<br>-<span class="hljs-built_in">join</span> 172.17.0.1：与172.17.0.1这个地址的节点通信，以加入集群<br>-node：节点的名称，集群中必须是唯一的<br>-ui：表示启动 Web UI 管理器，默认开放端口 8500<br>-bootstrap-expect：用于server节点选举leader的参数,表示达到几个server节点时开始选举<br></code></pre></td></tr></table></figure><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">命令行备份：<br>consul snapshot save backup.snap<br><br>命令行恢复：<br>consul snapshot restore backup.snap<br></code></pre></td></tr></table></figure><h3 id="consul查看失效服务："><a href="#consul查看失效服务：" class="headerlink" title="consul查看失效服务："></a>consul查看失效服务：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl http://192.168.4.157:8500/v1/health/state/critical<br></code></pre></td></tr></table></figure><h3 id="consul删除失效服务："><a href="#consul删除失效服务：" class="headerlink" title="consul删除失效服务："></a>consul删除失效服务：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -request PUT http://192.168.4.157:8500/v1/agent/service/deregister/服务名<br><br>一条命令删除失效服务：<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `curl http://192.168.4.157:8500/v1/health/state/critical | <span class="hljs-built_in">tr</span> <span class="hljs-string">&quot;,&quot;</span> <span class="hljs-string">&quot;\n&quot;</span>|grep ServiceID| awk -F <span class="hljs-string">&#x27;:|&quot;&#x27;</span> <span class="hljs-string">&#x27;&#123;print $5&#125;&#x27;</span>` ; <span class="hljs-keyword">do</span> curl -request PUT http://192.168.4.157:8500/v1/agent/service/deregister/<span class="hljs-variable">$i</span> ;<span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>consul</category>
      
    </categories>
    
    
    <tags>
      
      <tag>consul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制安装consul</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/consul/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85consul/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/consul/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85consul/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二进制安装consul"><a href="#二进制安装consul" class="headerlink" title="二进制安装consul"></a>二进制安装consul</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置。Consul 使用 Go 语言编写，因此具有天然可移植性（支持Linux、windows和Mac OS X）。</p><p>Consul 内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key&#x2F;Value 存储、多数据中心方案，不再需要依赖其他工具（比如 ZooKeeper 等），使用起来也较为简单。</p><p>Consul 遵循CAP原理中的CP原则，保证了强一致性和分区容错性，且使用的是Raft算法，比zookeeper使用的Paxos算法更加简单。虽然保证了强一致性，但是可用性就相应下降了，例如服务注册的时间会稍长一些，因为 Consul 的 raft 协议要求必须过半数的节点都写入成功才认为注册成功 ；在leader挂掉了之后，重新选举出leader之前会导致Consul 服务不可用。</p><h2 id="一、consul单机安装"><a href="#一、consul单机安装" class="headerlink" title="一、consul单机安装"></a>一、consul单机安装</h2><h3 id="1-下载并解压consul"><a href="#1-下载并解压consul" class="headerlink" title="1.下载并解压consul"></a>1.下载并解压consul</h3><p>consul下载地址：<a href="https://releases.hashicorp.com/consul/">https://releases.hashicorp.com/consul/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://releases.hashicorp.com/consul/1.12.7/consul_1.12.7_linux_amd64.zip<br><br>unzip consul_1.12.7_linux_amd64.zip<br><br><span class="hljs-built_in">mv</span> consul /usr/local/bin<br><br><span class="hljs-comment">#测试是否成功安装</span><br>consul version<br><br><br><span class="hljs-comment">#使用开发模式启动测试</span><br>consul agent  -ui -node=consul-dev -client=0.0.0.0<br><br>启动后可使用ip+8500访问consul的web页面！<br></code></pre></td></tr></table></figure><h3 id="2-设置开机自启动"><a href="#2-设置开机自启动" class="headerlink" title="2.设置开机自启动"></a>2.设置开机自启动</h3><h4 id="2-1、新建一个名为consul-service的service服务"><a href="#2-1、新建一个名为consul-service的service服务" class="headerlink" title="2.1、新建一个名为consul.service的service服务"></a>2.1、新建一个名为<code>consul.service</code>的service服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /usr/lib/systemd/system/consul.service &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=consul</span><br><span class="hljs-string">After=network.target</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">ExecStart=/usr/local/consul/start.sh</span><br><span class="hljs-string">KillSignal=SIGTERM</span><br><span class="hljs-string">    </span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h4 id="2-2、新建consul启动脚本，以便上诉service服务调用该脚本"><a href="#2-2、新建consul启动脚本，以便上诉service服务调用该脚本" class="headerlink" title="2.2、新建consul启动脚本，以便上诉service服务调用该脚本"></a>2.2、新建consul启动脚本，以便上诉service服务调用该脚本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /usr/local/consul/start.sh <br><br><span class="hljs-comment">#!/bin/bash</span><br>consul agent -server -ui -bootstrap-expect=1 -data-dir=/app/consul/data -node=agent-1 -client=0.0.0.0 -log-file=/app/consul/log/consul_log-$(<span class="hljs-built_in">date</span> +%Y-%m-%d--%H-%M) -<span class="hljs-built_in">bind</span>=192.168.62.130<br><br><span class="hljs-built_in">mkdir</span> -p /app/consul/&#123;data,<span class="hljs-built_in">log</span>&#125;<br><span class="hljs-comment">#给脚本赋权</span><br><span class="hljs-built_in">chmod</span> 777 /usr/local/consul/start.sh <br></code></pre></td></tr></table></figure><h3 id="3-启动服务，并设置开机自启"><a href="#3-启动服务，并设置开机自启" class="headerlink" title="3.启动服务，并设置开机自启"></a>3.启动服务，并设置开机自启</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start consul<br>systemctl <span class="hljs-built_in">enable</span> consul <br>systemctl status consul<br></code></pre></td></tr></table></figure><h2 id="二、搭建consul集群"><a href="#二、搭建consul集群" class="headerlink" title="二、搭建consul集群"></a>二、搭建consul集群</h2><p>consul 架构:<br>Server负责组成 cluster 的复杂工作（选举、状态维护、转发请求到 lead），以及 consul 提供的服务（响应 RCP 请求）。考虑到容错和收敛，一般部署 3 ~ 5 个比较合适，而client数量不做限制</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">可参考文档：https://littlefxc.github.io/<span class="hljs-number">2021</span>/<span class="hljs-number">01</span>/<span class="hljs-number">11</span>/Consul-<span class="hljs-variable">%E5</span><span class="hljs-variable">%8</span>D<span class="hljs-variable">%95</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%9</span>C<span class="hljs-variable">%BA</span><span class="hljs-variable">%E9</span><span class="hljs-variable">%9</span>B<span class="hljs-variable">%86</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%BE</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%90</span><span class="hljs-variable">%AD</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%BA</span>/<br></code></pre></td></tr></table></figure><h3 id="1、准备环境"><a href="#1、准备环境" class="headerlink" title="1、准备环境"></a>1、准备环境</h3><table><thead><tr><th>IP地址</th><th>节点名</th></tr></thead><tbody><tr><td>192.168.62.128</td><td>consul-1</td></tr><tr><td>192.168.62.129</td><td>consul-2</td></tr><tr><td>192.168.62.130</td><td>consul-3</td></tr></tbody></table><p>备注：机器均已经关闭防火墙，seliunx</p><h3 id="2、下载并解压安装包"><a href="#2、下载并解压安装包" class="headerlink" title="2、下载并解压安装包"></a>2、下载并解压安装包</h3><p>consul下载地址：<a href="https://releases.hashicorp.com/consul/">https://releases.hashicorp.com/consul/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://releases.hashicorp.com/consul/1.12.7/consul_1.12.7_linux_amd64.zip<br><br>unzip consul_1.12.7_linux_amd64.zip<br><br><span class="hljs-built_in">mv</span> consul /usr/local/bin<br><br><span class="hljs-comment">#测试是否成功安装</span><br>consul version<br><br></code></pre></td></tr></table></figure><h3 id="3、集群启动"><a href="#3、集群启动" class="headerlink" title="3、集群启动"></a>3、集群启动</h3><p>consul集群:当一个consul agent启动后，它不知道任何其他节点,要学习到集群中的其他节点，agent必须加入一个已经存在的集群(cluster)。要加入这样的集群，它只需要知道这个集群中的一个节点即可。它加入后，将会和这个member gossip（交谈）并迅速发现集群中的其他节点。一个consul agent可以加入任何类型的其他agent，而不只是那些运行于server mode的agent。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app/consul/&#123;data,<span class="hljs-built_in">log</span>&#125;<br><br><br>consul agent -server -ui -bootstrap-expect=3 -data-dir=/app/consul/data -log-file=/app/consul/log/consul_log-$(<span class="hljs-built_in">date</span> +%Y-%m-%d--%H-%M) -node=consul-1 -<span class="hljs-built_in">bind</span>=192.168.62.128 -client=0.0.0.0 -datacenter=dc1  <br><br>consul agent -server -ui -bootstrap-expect=3 -data-dir=/app/consul/data -log-file=/app/consul/log/consul_log-$(<span class="hljs-built_in">date</span> +%Y-%m-%d--%H-%M) -node=consul-2 -<span class="hljs-built_in">bind</span>=192.168.62.129 -client=0.0.0.0 -datacenter=dc1  -<span class="hljs-built_in">join</span> 192.168.62.128<br><br>consul agent -server -ui -bootstrap-expect=3 -data-dir=/app/consul/data -log-file=/app/consul/log/consul_log-$(<span class="hljs-built_in">date</span> +%Y-%m-%d--%H-%M) -node=consul-3 -<span class="hljs-built_in">bind</span>=192.168.62.130 -client=0.0.0.0 -datacenter=dc1  -<span class="hljs-built_in">join</span> 192.168.62.128<br></code></pre></td></tr></table></figure><p>Agent各种各样的配置选项，可以通过命令行或者配置文件指定。<br>配置优先级为 命令行 -&gt; 配置文件<br>加载配置时，将按照词法顺序从目录中读取配置。 配置格式可以为 HCL（.hcl） 或 JSON(.json)格式。</p><h3 id="4、查看启动结果"><a href="#4、查看启动结果" class="headerlink" title="4、查看启动结果"></a>4、查看启动结果</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">consul members<br><br>Node           Address             Status  Type    Build  Protocol  DC   Segment<br>consul-1  192.168.62.128:8301      alive   server  1.12.7  2        dc1  &lt;all&gt;<br>consul-2  192.168.62.129:8301      alive   server  1.12.7  2        dc1  &lt;all&gt;<br>consul-3  192.168.62.130:8301      alive   server  1.12.7  2        dc1  &lt;all&gt;<br><br><br></code></pre></td></tr></table></figure><h3 id="5、集群重启或kill-consul时-需要删除-data-dir下所有文件"><a href="#5、集群重启或kill-consul时-需要删除-data-dir下所有文件" class="headerlink" title="5、集群重启或kill consul时 需要删除-data-dir下所有文件"></a>5、集群重启或kill consul时 需要删除-data-dir下所有文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">rm</span> -rf /app/consul/data/*<br></code></pre></td></tr></table></figure><h2 id="附上相关参数含义"><a href="#附上相关参数含义" class="headerlink" title="附上相关参数含义"></a>附上相关参数含义</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sh">advertise: 广播给集群中得其他节点得地址，<span class="hljs-built_in">bind</span>参数可能无法绑定时，使用此参数。<br><br><span class="hljs-built_in">bind</span>: 绑定集群通信得地址，这个ip地址应该是就集群内得其他节点可达，可找到得。 默认 0.0.0.0,将绑定机器得所有地址，同时把 ipv4地址告诉集群得其他人。如果指定[::],将广播IPV6地址。 如果存在多个IPV4/IPV6地址，启动则报错。<br><br>domain: 指定交由 Consul 处理的DNS域， 默认consul, 比如执行 xxx.consul时，由 Consul 进行域名解析。<br><br>node: 节点在集群中的名称。 在集群中一定是唯一的，默认为机器的HostName(主机名)。<br><br><span class="hljs-built_in">join</span>: 加入Server节点，组成集群，无法加入,将启动失败， 注意集群部署时，推荐使用 retry-join, 将自动重试Join列表，直到成功。<br><br>retry-join: 自动加入存在Server节点，组建数据中心, 如： -retry-join<br>“consul.domain.internal” -retry-join “10.0.4.67”<br><br>bootstrap: 不推荐使用, 是否开启bootstrap 模式, 如果一个数据中心只有一个节点时， 使用此模式，允许选举自己为<br>Leader.<br><br>bootstrap-expect: Consul将会等到Sever节点数达到指定数值时，才会启动集群（自动选举Leader）。<br>仅Server有此参数, 注意这个值集群中所有节点要一致， 或着仅指定一个节点。<br><br>client: 客户端连接Server的地址，默认127.0.0.1，可绑定多个。<br><br>ui: 启用内置 Web UI 和必要的 HTTP路由。<br><br>config-file：<br>指定要加载的配置文件，可多次指定。后面的配置将与前面的配置进行Merge。单个KV将直接代替，列表类型将进行追加。<br><br>config-dir: 配置目录，将加载目录中的 .hcl 或 .json 格式配置。 注意子路径不会加载。<br><br>data-dir: Agent存储状态的的数据目录。<br><br>dev: Consul开发模式，快速启动一个Consul Agent。 （此模式下， 所以持久化将关闭，适用内存）<br>此模式适用于开发阶段, 在此模式下Connect也是启用的，此模式不要用于生产级场景。<br><br>hcl: 配置片段，可指定多次。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>consul</category>
      
    </categories>
    
    
    <tags>
      
      <tag>consul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins使用时遇到的问题记录和处理</title>
    <link href="/2023/03/30/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E5%92%8C%E5%A4%84%E7%90%86/"/>
    <url>/2023/03/30/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E5%92%8C%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="jenkins使用时遇到的问题记录和处理"><a href="#jenkins使用时遇到的问题记录和处理" class="headerlink" title="jenkins使用时遇到的问题记录和处理"></a>jenkins使用时遇到的问题记录和处理</h1><h2 id="一、离线导入相关插件："><a href="#一、离线导入相关插件：" class="headerlink" title="一、离线导入相关插件："></a>一、离线导入相关插件：</h2><p>在有插件的机器上，先停掉jk服务，systemctl stop jenkins 然后进入到&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;plugins&#x2F;下 将里面的内容复制到离线的机器&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;plugins&#x2F;下</p><h2 id="二、jenkins配置文件不生效-在构建任务时，使用的是jenkins账户，导致命令无权限执行。"><a href="#二、jenkins配置文件不生效-在构建任务时，使用的是jenkins账户，导致命令无权限执行。" class="headerlink" title="二、jenkins配置文件不生效,在构建任务时，使用的是jenkins账户，导致命令无权限执行。"></a>二、jenkins配置文件不生效,在构建任务时，使用的是jenkins账户，导致命令无权限执行。</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">#参考文献：https://blog.csdn.net/C343500263/article/details/123400385<br></code></pre></td></tr></table></figure><p>配置文件 vim &#x2F;etc&#x2F;sysconfig&#x2F;jenkins 不生效，ps -ef | grep jenkins 发现启动的用户还是为jenkins<br>原因： 启动命令使用 systemctl start jenkins 。 systemd的资源Unit ，在目录&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system(Centos)或&#x2F;etc&#x2F;systemd&#x2F;system(Ubuntu)</p><p>启动未加载&#x2F;etc&#x2F;sysconfig&#x2F;jenkins 配置。（以下为centos)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /usr/lib/systemd/system/jenkins.service <br><span class="hljs-comment">#....</span><br><span class="hljs-comment">#修改用户和组</span><br>User=root<br>Group=root<br><span class="hljs-comment">#...</span><br><span class="hljs-comment">##修改端口</span><br>Environment=<span class="hljs-string">&quot;JENKINS_PORT=8080&quot;</span><br><br><span class="hljs-comment">#修改后重启jenkins</span><br>systemctl restart jenkins<br></code></pre></td></tr></table></figure><h2 id="三、通过-SSH-连接到远程服务器，然后在远程服务器上运行命令时"><a href="#三、通过-SSH-连接到远程服务器，然后在远程服务器上运行命令时" class="headerlink" title="三、通过 SSH 连接到远程服务器，然后在远程服务器上运行命令时"></a>三、通过 SSH 连接到远程服务器，然后在远程服务器上运行命令时</h2><p>ssh 192.168.94.155 #提示如下错误<br>Pseudo-terminal will not be allocated because stdin is not a terminal</p><p>因为：SSH 不会创建交互式会话，因此它与在交互式终端中执行一系列命令并不完全相同。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#要通过 SSH 会话运行特定命令，需要使用：</span><br>ssh root@192.168.94.155 <span class="hljs-string">&#x27;uname -a&#x27;</span><br><span class="hljs-comment">#或者使用：</span><br>ssh root@192.168.94.155 &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">pwd &amp;&amp; ip add</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="四、jenkins-关闭，开启tomcat时-提示："><a href="#四、jenkins-关闭，开启tomcat时-提示：" class="headerlink" title="四、jenkins 关闭，开启tomcat时 提示："></a>四、jenkins 关闭，开启tomcat时 提示：</h2><p>Neither the JAVA_HOME nor the JRE_HOME environment variable is defined At least one of these environment variable is needed to run this program</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#用vim打开tomcat的bin目录下的setclasspath.sh</span><br>vim /usr/local/tomcat/bin/setclasspath.sh<br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-comment">#  Set JAVA_HOME or JRE_HOME if not already set, ensure any provided settings</span><br><span class="hljs-comment">#  are valid and consistent with the selected start-up options and set up the</span><br><span class="hljs-comment">#  endorsed directory.</span><br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-comment"># 添加JAVA_HOME和JRE_HOME两个环境变量</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/local/jdk1.8.0<br><span class="hljs-built_in">export</span> JRE_HOME=/usr/local/jdk1.8.0<br><span class="hljs-comment"># Make sure prerequisite environment variables are set</span><br><span class="hljs-comment">#.....</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>远程触发jenkins任务</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E8%BF%9C%E7%A8%8B%E8%A7%A6%E5%8F%91jenkins%E4%BB%BB%E5%8A%A1/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E8%BF%9C%E7%A8%8B%E8%A7%A6%E5%8F%91jenkins%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="远程触发jenkins任务"><a href="#远程触发jenkins任务" class="headerlink" title="远程触发jenkins任务"></a>远程触发jenkins任务</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://blog.csdn.net/u013511989/article/details/113995842<br></code></pre></td></tr></table></figure><h2 id="1、系统配置：回到首页，点击用户列表-gt-选择用户"><a href="#1、系统配置：回到首页，点击用户列表-gt-选择用户" class="headerlink" title="1、系统配置：回到首页，点击用户列表&gt;选择用户"></a><strong>1、系统配置：回到首页，点击用户列表&gt;选择用户</strong></h2><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E8%BF%9C%E7%A8%8B%E8%A7%A6%E5%8F%91jenkins%E4%BB%BB%E5%8A%A1/image-20221114135805904.png" alt="image-20221114135805904.png"></p><p>  设置&gt;添加token，输入token名称，生产token（token需要复制保存）</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E8%BF%9C%E7%A8%8B%E8%A7%A6%E5%8F%91jenkins%E4%BB%BB%E5%8A%A1/image-20221114135928703.png" alt="image-20221114135928703"></p><h2 id="2、任务设置：进入job任务，选择触发远程构建（可自定义远程身份验证令牌）"><a href="#2、任务设置：进入job任务，选择触发远程构建（可自定义远程身份验证令牌）" class="headerlink" title="2、任务设置：进入job任务，选择触发远程构建（可自定义远程身份验证令牌）"></a><strong>2、任务设置：进入job任务，选择触发远程构建（可自定义远程身份验证令牌）</strong></h2><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E8%BF%9C%E7%A8%8B%E8%A7%A6%E5%8F%91jenkins%E4%BB%BB%E5%8A%A1/image-20221114140118138.png" alt="image-20221114140118138"></p><h2 id="3、使用postman触发"><a href="#3、使用postman触发" class="headerlink" title="3、使用postman触发"></a><strong>3、使用<a href="https://so.csdn.net/so/search?q=postman&spm=1001.2101.3001.7020">postman</a>触发</strong></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#不带参数触发：</span><br>http:<span class="hljs-regexp">//</span>admin:<span class="hljs-number">1145917</span>aeee2706f88711601f5b769deec@<span class="hljs-number">192.168</span>.<span class="hljs-number">0.196</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/job/</span>test/build?token=remotoToken<br><br><span class="hljs-comment">#带参数触发：</span><br>http:<span class="hljs-regexp">//</span>admin:<span class="hljs-number">1145917</span>aeee2706f88711601f5b769deec@<span class="hljs-number">192.168</span>.<span class="hljs-number">0.196</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/job/</span>test/buildWithParameters?token=test123456&amp;tag=<span class="hljs-number">0.0</span>.<span class="hljs-number">2</span><br><br><br></code></pre></td></tr></table></figure><h2 id="4、使用curl触发"><a href="#4、使用curl触发" class="headerlink" title="4、使用curl触发"></a><strong>4、使用curl触发</strong></h2><h3 id="4-1-通过build触发无参数job"><a href="#4-1-通过build触发无参数job" class="headerlink" title="4.1 通过build触发无参数job"></a>4.1 通过build触发无参数job</h3><p>举例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -X post <span class="hljs-string">&quot;http://token名称:token密码@jenkins地址/job/testforremote/build?token=remotoToken&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-通过buildWithParameters触发有参数job"><a href="#4-2-通过buildWithParameters触发有参数job" class="headerlink" title="4.2 通过buildWithParameters触发有参数job"></a>4.2 通过buildWithParameters触发有参数job</h3><p>举例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -X post <span class="hljs-string">&quot;http://token名称:token密码@jenkins地址/job/testforremote/build?token=remotoToken&amp;test=1&quot;</span><br><br><span class="hljs-comment">##举例：</span><br>curl -s -u admin:1145917aeee2706f88711601f5b769deec -X POST http://192.168.0.196:8080/job/test/buildWithParameters?token=test123456&amp;tag=0.0.1<br></code></pre></td></tr></table></figure><h3 id="4-3-通过传输json触发有参数job"><a href="#4-3-通过传输json触发有参数job" class="headerlink" title="4.3 通过传输json触发有参数job"></a>4.3 通过传输json触发有参数job</h3><p>当参数比较长时使用4.2的方法就不行了，此时可以使用json传参。</p><p>举例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -u token名称:token密码 -X POST -F <span class="hljs-string">&quot;token=remotoToken&quot;</span> -F json=<span class="hljs-string">&#x27;&#123;&quot;parameter&quot;:[&#123;&quot;name&quot;:&quot;test&quot;,&quot;value&quot;:&quot;1&quot;&#125;]&#125;&#x27;</span> http://jenkins地址/job/testforremote/build<br></code></pre></td></tr></table></figure><h3 id="4-4-传输文件"><a href="#4-4-传输文件" class="headerlink" title="4.4 传输文件"></a>4.4 传输文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -u token名称:token密码 -X POST -F <span class="hljs-string">&quot;token=remotoToken&quot;</span> -F json=<span class="hljs-string">&#x27;&#123;&quot;parameter&quot;:[&#123;&quot;name&quot;:&quot;test&quot;,&quot;value&quot;:&quot;1&quot;&#125;,</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins选择分支和tag构建</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E9%80%89%E6%8B%A9%E5%88%86%E6%94%AF%E6%9E%84%E5%BB%BA/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E9%80%89%E6%8B%A9%E5%88%86%E6%94%AF%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="jenkins选择分支和tag构建"><a href="#jenkins选择分支和tag构建" class="headerlink" title="jenkins选择分支和tag构建"></a>jenkins选择分支和tag构建</h1><h2 id="一、Jenkins选择分支发布Gitlab项目"><a href="#一、Jenkins选择分支发布Gitlab项目" class="headerlink" title="一、Jenkins选择分支发布Gitlab项目"></a>一、Jenkins选择分支发布Gitlab项目</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">官方文档：https://plugins.jenkins.io/git-parameter/<br><br>可参考文档：https://www.cnblogs.com/yucongblog/p/12993498.html<br></code></pre></td></tr></table></figure><h3 id="1、需要的插件"><a href="#1、需要的插件" class="headerlink" title="1、需要的插件"></a>1、需要的插件</h3><ul><li>Git plugin</li><li>Git Parameter Plugin</li><li>Gitlab Plugin</li></ul><h3 id="2、过程"><a href="#2、过程" class="headerlink" title="2、过程"></a>2、过程</h3><ul><li><p>创建test分支</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E9%80%89%E6%8B%A9%E5%88%86%E6%94%AF%E6%9E%84%E5%BB%BA/image-20220914161045429.png" alt="image-20220914161045429"></p></li><li><p>创建一个流水线项目，选择参数化构建过程-&gt;选择Git 参数，输入名称(下面将会用到该参数)，参数类型选择-&gt; 分支，输入默认分支名称（直接使用如下的流水线语法保存，将会自动选择）</p></li></ul><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E9%80%89%E6%8B%A9%E5%88%86%E6%94%AF%E6%9E%84%E5%BB%BA/image-20220913114139787.png" alt="image-20220913114139787"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E9%80%89%E6%8B%A9%E5%88%86%E6%94%AF%E6%9E%84%E5%BB%BA/image-20220913114327388.png" alt="image-20220913114327388"></p><ul><li>编写流水线</li></ul><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E9%80%89%E6%8B%A9%E5%88%86%E6%94%AF%E6%9E%84%E5%BB%BA/image-20220913145126454.png" alt="image-20220913145126454"></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gams">pipeline &#123;<br>  agent any<br>  <span class="hljs-keyword">parameters</span> &#123;<br>    gitParameter <span class="hljs-comment">branchFilter:</span> <span class="hljs-comment">&#x27;origin/(.*)&#x27;</span><span class="hljs-comment">, defaultValue:</span> <span class="hljs-comment">&#x27;main&#x27;</span><span class="hljs-comment">, name:</span> <span class="hljs-comment">&#x27;BRANCH&#x27;</span><span class="hljs-comment">, type:</span> <span class="hljs-comment">&#x27;PT_BRANCH&#x27;</span><br>  &#125;<br>  stages <span class="hljs-comment">&#123;</span><br>    stage(<span class="hljs-string">&#x27;测试&#x27;</span>) &#123;<br>      steps <span class="hljs-comment">&#123;</span><br>        git <span class="hljs-comment">branch:</span> <span class="hljs-comment">&quot;$&#123;params.BRANCH&#125;&quot;</span><span class="hljs-comment">, credentialsId:</span> <span class="hljs-comment">&#x27;gitlab-root-http&#x27;</span><span class="hljs-comment">, url:</span> <span class="hljs-comment">&#x27;http://192.168.5.111:8188/root/java-fuwu.git&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E9%80%89%E6%8B%A9%E5%88%86%E6%94%AF%E6%9E%84%E5%BB%BA/image-20220913145404722.png" alt="image-20220913145404722"></p><h2 id="二、jenkins选择tag标签构建"><a href="#二、jenkins选择tag标签构建" class="headerlink" title="二、jenkins选择tag标签构建"></a>二、jenkins选择tag标签构建</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php">pipeline &#123;<br>    agent any<br>    parameters &#123;<br>        gitParameter name: <span class="hljs-string">&#x27;TAG&#x27;</span>,<br>                     type: <span class="hljs-string">&#x27;PT_TAG&#x27;</span>,<br>                     defaultValue: <span class="hljs-string">&#x27;master&#x27;</span><br>    &#125;<br>    stages &#123;<br>        <span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;克隆&#x27;</span>) &#123;<br>            steps &#123;<br>                <span class="hljs-title function_ invoke__">checkout</span>([<span class="hljs-variable">$class</span>: <span class="hljs-string">&#x27;GitSCM&#x27;</span>,<br>                          <span class="hljs-attr">branches</span>: [[<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;$&#123;params.TAG&#125;&quot;</span>]],<br>                          <span class="hljs-attr">doGenerateSubmoduleConfigurations</span>: <span class="hljs-literal">false</span>,<br>                          <span class="hljs-attr">extensions</span>: [],<br>                          <span class="hljs-attr">gitTool</span>: <span class="hljs-string">&#x27;Default&#x27;</span>,<br>                          <span class="hljs-attr">submoduleCfg</span>: [],<br>                          //<span class="hljs-attr">userRemoteConfigs</span>:的<span class="hljs-attr">credentialsId</span>:<span class="hljs-number">1</span>为jenkins身份令牌的id，后面为代码仓库地址<br>                          <span class="hljs-attr">userRemoteConfigs</span>: [[<span class="hljs-attr">credentialsId</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://192.168.5.111:8188/root/java-fuwu.git&#x27;</span>]]<br>                        ])<br>            &#125;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;打包项目&#x27;</span>) &#123;<br>            steps &#123;<br>              sh <span class="hljs-string">&quot;/usr/local/go/bin/go build -o $&#123;params.tag&#125; main.go&quot;</span><br>            &#125;<br>         &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins基于shell实现简单的代码部署，与gitlab的使用</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Jenkins基于shell实现简单的代码部署，与gitlab的使用"><a href="#Jenkins基于shell实现简单的代码部署，与gitlab的使用" class="headerlink" title="Jenkins基于shell实现简单的代码部署，与gitlab的使用"></a>Jenkins基于shell实现简单的代码部署，与gitlab的使用</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">#参考视频：https://www.bilibili.com/video/BV16v411V7CQ?p=4<br>#全文档：https://github.com/pipiguai0123/Jenkinsdoc<br></code></pre></td></tr></table></figure><h2 id="先测试使用ssh进行代码克隆："><a href="#先测试使用ssh进行代码克隆：" class="headerlink" title="先测试使用ssh进行代码克隆："></a>先测试使用ssh进行代码克隆：</h2><p>首先在Jenkins服务器上生成ssh秘钥：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen -t rsa -P <span class="hljs-string">&quot;&quot;</span> -f ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><p>生成了公钥（id_rsa.pub）和私钥（id_rsa)</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211221112220027.png" alt="image-20211221112220027"></p><p>将生成的公钥（id_rsa.pub）复制到gitlab的SSH秘钥内</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211221113051193.png" alt="image-20211221113051193"></p><p>在Jenkins服务器上使用git命令测试是否能远程拷贝gitlab代码仓库内数据</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223154834727.png" alt="image-20211223154834727"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> ssh://git@192.168.94.188:2222/jiangzhenzhou/devops.git<br></code></pre></td></tr></table></figure><p><strong>我这里git使用的2222端口：采用的是docker运行的gitlab，2222端口映射的是gitlab容器22端口</strong></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211221172045756.png" alt="image-20211221172045756"></p><p>执行命令后，发现已经拉取成功，成功显示如下：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223155001524.png" alt="image-20211223155001524"></p><h2 id="一、通过jenkins自动化clone代码："><a href="#一、通过jenkins自动化clone代码：" class="headerlink" title="一、通过jenkins自动化clone代码："></a>一、通过jenkins自动化clone代码：</h2><h3 id="1-1、登录到Jenkins，新建一个任务：我这里用test名称"><a href="#1-1、登录到Jenkins，新建一个任务：我这里用test名称" class="headerlink" title="1.1、登录到Jenkins，新建一个任务：我这里用test名称"></a>1.1、登录到Jenkins，新建一个任务：我这里用test名称</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223112134104.png" alt="image-20211223112134104"></p><h3 id="1-2、源码管理-gt-gt-Git-gt-gt-添加URL-gt-gt-添加凭据"><a href="#1-2、源码管理-gt-gt-Git-gt-gt-添加URL-gt-gt-添加凭据" class="headerlink" title="1.2、源码管理&gt;&gt;Git&gt;&gt;添加URL&gt;&gt;添加凭据"></a>1.2、源码管理&gt;&gt;Git&gt;&gt;添加URL&gt;&gt;添加凭据</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223154138145.png" alt="image-20211223154138145"></p><h3 id="1-3、凭据类型选择-gt-gt-SSH-Username-with-private-key-gt-gt-添加私钥"><a href="#1-3、凭据类型选择-gt-gt-SSH-Username-with-private-key-gt-gt-添加私钥" class="headerlink" title="1.3、凭据类型选择&gt;&gt;SSH Username with private key &gt;&gt;添加私钥"></a>1.3、凭据类型选择&gt;&gt;SSH Username with private key &gt;&gt;添加私钥</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223142334979.png" alt="image-20211223142334979"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223142825593.png" alt="image-20211223142825593"></p><h3 id="1-4、复制私钥："><a href="#1-4、复制私钥：" class="headerlink" title="1.4、复制私钥："></a>1.4、复制私钥：</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/root/</span>.ssh/id_rsa<br></code></pre></td></tr></table></figure><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220512150151024.png" alt="image-20220512150151024"></p><h3 id="1-5、添加私钥以后，选择root。并指定代码拉取的分支"><a href="#1-5、添加私钥以后，选择root。并指定代码拉取的分支" class="headerlink" title="1.5、添加私钥以后，选择root。并指定代码拉取的分支"></a>1.5、添加私钥以后，选择root。并指定代码拉取的分支</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223151906344.png" alt="image-20211223151906344"></p><h3 id="1-6、应用并保存后-gt-gt-点击“立即构建”即可完成"><a href="#1-6、应用并保存后-gt-gt-点击“立即构建”即可完成" class="headerlink" title="1.6、应用并保存后&gt;&gt;点击“立即构建”即可完成"></a>1.6、应用并保存后&gt;&gt;点击“立即构建”即可完成</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223154552810.png" alt="image-20211223154552810"></p><h3 id="1-7、以上步骤即可使用Jenkins系统拉取gitlab代码仓库代码"><a href="#1-7、以上步骤即可使用Jenkins系统拉取gitlab代码仓库代码" class="headerlink" title="1.7、以上步骤即可使用Jenkins系统拉取gitlab代码仓库代码"></a>1.7、以上步骤即可使用Jenkins系统拉取gitlab代码仓库代码</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223160446723.png" alt="image-20211223160446723"></p><h3 id="1-8、构建-gt-gt-选择执行shell-gt-gt-即可添加源shell命令，我添加命令：-ip-add-做测试"><a href="#1-8、构建-gt-gt-选择执行shell-gt-gt-即可添加源shell命令，我添加命令：-ip-add-做测试" class="headerlink" title="1.8、构建&gt;&gt;选择执行shell&gt;&gt;即可添加源shell命令，我添加命令： ip add 做测试"></a>1.8、构建&gt;&gt;选择执行shell&gt;&gt;即可添加源shell命令，我添加命令： ip add 做测试</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223160621391.png" alt="image-20211223160621391"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223162022256.png" alt="image-20211223162022256"></p><h3 id="1-9、点击“立即构建”以后，即可在日志内看到执行的命令，在输出的日志中进入工作空间，能看到代码已经被克隆"><a href="#1-9、点击“立即构建”以后，即可在日志内看到执行的命令，在输出的日志中进入工作空间，能看到代码已经被克隆" class="headerlink" title="1.9、点击“立即构建”以后，即可在日志内看到执行的命令，在输出的日志中进入工作空间，能看到代码已经被克隆"></a>1.9、点击“立即构建”以后，即可在日志内看到执行的命令，在输出的日志中进入工作空间，能看到代码已经被克隆</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220512151250724.png" alt="image-20220512151250724"></p><h2 id="二、通过shell命令clone代码并部署Tomcat项目"><a href="#二、通过shell命令clone代码并部署Tomcat项目" class="headerlink" title="二、通过shell命令clone代码并部署Tomcat项目"></a>二、通过shell命令clone代码并部署Tomcat项目</h2><h3 id="2-1、tomcat服务器信息："><a href="#2-1、tomcat服务器信息：" class="headerlink" title="2.1、tomcat服务器信息："></a>2.1、tomcat服务器信息：</h3><p>服务器ip：192.168.94.155<br>浏览器页面访问：192.168.94.155:8080<br>html放置路径：&#x2F;app&#x2F;html&#x2F;www&#x2F;<br>tomcat安装路径：&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;</p><h3 id="2-2、在jenkins上根据之前的配置完成后，编写执行的代码"><a href="#2-2、在jenkins上根据之前的配置完成后，编写执行的代码" class="headerlink" title="2.2、在jenkins上根据之前的配置完成后，编写执行的代码"></a>2.2、在jenkins上根据之前的配置完成后，编写执行的代码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#将从gitlab克隆的web项目打包</span><br>tar -acvf web.tar.gz ./*<br><span class="hljs-comment">#停止tomcat服务</span><br>ssh root@192.168.94.155 &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">/usr/local/tomcat/bin/shutdown.sh</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment">#将压缩包分发</span><br>scp web.tar.gz 192.168.94.155:/app/html/www<br><span class="hljs-comment">#解压文件,并启动tomcat</span><br>ssh root@192.168.94.155 &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">tar -xnf /app/html/www/web.tar.gz  -C /app/html/www/</span><br><span class="hljs-string">ls -l /app/html/www</span><br><span class="hljs-string">/usr/local/tomcat/bin/startup.sh</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513113508025.png" alt="image-20220513113508025"></p><h3 id="2-3、点击立即构建，查看控制台输出。显示SUCCESS，代表已经部署成功！"><a href="#2-3、点击立即构建，查看控制台输出。显示SUCCESS，代表已经部署成功！" class="headerlink" title="2.3、点击立即构建，查看控制台输出。显示SUCCESS，代表已经部署成功！"></a>2.3、点击立即构建，查看控制台输出。显示SUCCESS，代表已经部署成功！</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513113626357.png" alt="image-20220513113626357"></p><h3 id="2-4、访问tomcat网页，发现项目已经部署！"><a href="#2-4、访问tomcat网页，发现项目已经部署！" class="headerlink" title="2.4、访问tomcat网页，发现项目已经部署！"></a>2.4、访问tomcat网页，发现项目已经部署！</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513114401449.png" alt="image-20220513114401449"></p><h2 id="三、jenkins新增节点"><a href="#三、jenkins新增节点" class="headerlink" title="三、jenkins新增节点"></a>三、jenkins新增节点</h2><p>新节点准备工作：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>、安装特定的jdk版本<br><span class="hljs-number">2</span>、创建与master机器一样的工作目录，一般默认为：<span class="hljs-regexp">/var/</span>lib/jenkins<br>mkdir -p <span class="hljs-regexp">/var/</span>lib/jenkins<br><span class="hljs-number">3</span>、安装git<br>yum install git -y<br></code></pre></td></tr></table></figure><h3 id="3-1、点击系统管理-gt-gt-节点管理-gt-gt-新建节点-gt-gt-输入节点名称，并勾选固定节点-gt-gt-create"><a href="#3-1、点击系统管理-gt-gt-节点管理-gt-gt-新建节点-gt-gt-输入节点名称，并勾选固定节点-gt-gt-create" class="headerlink" title="3.1、点击系统管理&gt;&gt;节点管理&gt;&gt;新建节点&gt;&gt;输入节点名称，并勾选固定节点&gt;&gt;create"></a>3.1、点击系统管理&gt;&gt;节点管理&gt;&gt;新建节点&gt;&gt;输入节点名称，并勾选固定节点&gt;&gt;create</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513151121013.png" alt="image-20220513151121013"></p><h3 id="3-2、填写相关的信息"><a href="#3-2、填写相关的信息" class="headerlink" title="3.2、填写相关的信息"></a>3.2、填写相关的信息</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513152026055.png" alt="image-20220513152026055"></p><p> #备注：选择只运行绑定到这个机器的job：可以实现：根据项目来进行部署，该节点机器设置免密认证等。实现项目管控。</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513160011024.png" alt="image-20220513160011024"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513154954595.png" alt="image-20220513154954595"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513160257439.png" alt="image-20220513160257439"></p><p><strong>备注：节点属性根据用途和实际情况进行添加</strong></p><h3 id="3-3、点击保存后，刷新状态，可以看到jenkins-agent1已经添加成功"><a href="#3-3、点击保存后，刷新状态，可以看到jenkins-agent1已经添加成功" class="headerlink" title="3.3、点击保存后，刷新状态，可以看到jenkins-agent1已经添加成功"></a>3.3、点击保存后，刷新状态，可以看到jenkins-agent1已经添加成功</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513160856924.png" alt="image-20220513160856924"></p><p><strong>备注：如果有报错和故障提示，可以通过查看执行的日志进行问题排查</strong></p><h2 id="四、使用Jenkins-Pipline实现部署Tomcat项目"><a href="#四、使用Jenkins-Pipline实现部署Tomcat项目" class="headerlink" title="四、使用Jenkins Pipline实现部署Tomcat项目"></a>四、使用Jenkins Pipline实现部署Tomcat项目</h2><p>官网：<a href="https://www.jenkins.io/zh/doc/book/pipeline/">https://www.jenkins.io/zh/doc/book/pipeline/</a></p><h3 id="4-1、新建任务-gt-gt-输入任务名称-gt-gt-选择流水线"><a href="#4-1、新建任务-gt-gt-输入任务名称-gt-gt-选择流水线" class="headerlink" title="4.1、新建任务&gt;&gt;输入任务名称&gt;&gt;选择流水线"></a>4.1、新建任务&gt;&gt;输入任务名称&gt;&gt;选择流水线</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513163848298.png" alt="image-20220513163848298"></p><h3 id="4-2、选择流水线"><a href="#4-2、选择流水线" class="headerlink" title="4.2、选择流水线"></a>4.2、选择流水线</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220516163449538.png" alt="image-20220516163449538"></p><h3 id="4-3、写好Pipline语句（Pipline的语法使用，和生成，请阅读《五、流水线语法的使用》）"><a href="#4-3、写好Pipline语句（Pipline的语法使用，和生成，请阅读《五、流水线语法的使用》）" class="headerlink" title="4.3、写好Pipline语句（Pipline的语法使用，和生成，请阅读《五、流水线语法的使用》）"></a>4.3、写好Pipline语句（Pipline的语法使用，和生成，请阅读《五、流水线语法的使用》）</h3><p>以下代码实现，流水线clone代码并部署Tomcat项目（脚本式）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#采用脚本式格式编写：</span><br>node&#123;<br>    stage(<span class="hljs-string">&quot;克隆代码&quot;</span>) &#123;<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;克隆代码&quot;</span><br>sh <span class="hljs-string">&quot;cd /var/lib/jenkins/workspace/test-web &amp;&amp; rm -rf ./*&quot;</span><br>        git branch: <span class="hljs-string">&#x27;main&#x27;</span>, credentialsId: <span class="hljs-string">&#x27;81fe0c81-01bd-4d7e-8e08-a5d22d8fd6a9&#x27;</span>, url: <span class="hljs-string">&#x27;ssh://git@192.168.31.194:2222/root/web.git&#x27;</span><br>      &#125;<br>stage(<span class="hljs-string">&quot;打包项目&quot;</span>) &#123;<br>        sh <span class="hljs-string">&quot;tar -acvf web.tar.gz ./* &quot;</span><br>      &#125;<br>    stage(<span class="hljs-string">&quot;关闭服务&quot;</span>) &#123;<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;关闭服务&quot;</span><br>sh <span class="hljs-string">&#x27;ssh root@192.168.94.155 &quot;/bin/bash /usr/local/tomcat/bin/shutdown.sh &amp;&amp; rm -rf /app/html/www/*&quot;&#x27;</span><br>      &#125;<br>    stage(<span class="hljs-string">&quot;代码部署&quot;</span>) &#123;<br>        sh <span class="hljs-string">&#x27;scp web.tar.gz 192.168.94.155:/app/html/www&#x27;</span><br>    sh <span class="hljs-string">&#x27;ssh root@192.168.94.155 &quot;tar -xnf /app/html/www/web.tar.gz  -C /app/html/www/ &amp;&amp; ls -l /app/html/www&quot;&#x27;</span><br>      &#125;<br>    stage(<span class="hljs-string">&quot;开启服务&quot;</span>) &#123;<br>    sh <span class="hljs-string">&#x27;ssh root@192.168.94.155 &quot;/usr/local/tomcat/bin/startup.sh&quot;&#x27;</span><br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接点击构建即可：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220516163808779.png" alt="image-20220516163808779"></p><h2 id="五、流水线语法的使用："><a href="#五、流水线语法的使用：" class="headerlink" title="五、流水线语法的使用："></a>五、流水线语法的使用：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">pipline语法:<br>Stage:阶段,一个pipline可以划分为若干个stage，每个stage都是一个操作步骤，比如 <span class="hljs-built_in">clone</span>代码、代码编译、代码测试和代码部署，阶段是一个逻辑分组，可以跨多个node执行<br>Node:节点，每个node都是一个jenkins节点，可以是jenkins master也可以是jenkins agent，node是执行step的具体服务器。<br>    Step:步骤，step是jenkins pipline最基本的操作单元，从在服务器创建目录到构建容器镜像，由各类Jenkins 插件提供实现，一个stage中可以有多个step，例如: sh“make<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="5-1、jenkins自带了流水线的语法生成："><a href="#5-1、jenkins自带了流水线的语法生成：" class="headerlink" title="5.1、jenkins自带了流水线的语法生成："></a>5.1、jenkins自带了流水线的语法生成：</h3><p>例如：自动生成git的连接串</p><p>选择流水线语法&gt;&gt;选择示例步骤&gt;&gt;选择git&gt;&gt;填写信息后，生成流水线脚本</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220516163648835.png" alt="image-20220516163648835"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220516170143369.png" alt="image-20220516170143369"></p><h3 id="5-2、pipline脚本式流水线与声明式流水线"><a href="#5-2、pipline脚本式流水线与声明式流水线" class="headerlink" title="5.2、pipline脚本式流水线与声明式流水线"></a>5.2、pipline脚本式流水线与声明式流水线</h3><p>以下为脚本式流水线：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">//node的jenkins-agent1:指在代理jenkins-agent1上执行<br>node(<span class="hljs-string">&quot;jenkins-agent1&quot;</span>)&#123; <br>      stage(<span class="hljs-string">&quot;克隆代码&quot;</span>) &#123;  // 定义 <span class="hljs-string">&quot;克隆代码&quot;</span> 阶段。<br>           <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;克隆代码&quot;</span><br>  sh <span class="hljs-string">&quot;cd /var/lib/jenkins/workspace/test-web &amp;&amp; rm -rf ./*&quot;</span><br>           git branch: <span class="hljs-string">&#x27;main&#x27;</span>, credentialsId: <span class="hljs-string">&#x27;81fe0c81-01bd-4d7e-8e08-a5d22d8fd6a9&#x27;</span>, url: <span class="hljs-string">&#x27;ssh://git@192.168.31.194:2222/root/web.git&#x27;</span><br>        &#125;<br></code></pre></td></tr></table></figure><p>以下为声明式流水线 :</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs sh"> pipeline &#123;<br>    agent any //在任何可用的代理上，执行流水线或它的任何阶段<br>    //agent &#123; node &#123; label <span class="hljs-string">&#x27;jenkins-agent1&#x27;</span>   //在代理jenkins-agent1上执行<br>    //  customWorkspace <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;workspace&#125;</span>&quot;</span> //指定运行的工作目录（不写为默认路径）<br>    //      &#125;    &#125; <br>    options &#123;<br>        timestamps()          //日志会有时间<br>        skipDefaultCheckout() //删除隐式checkout scm语句<br>        disableConcurrentBuilds() //禁止并行<br>        <span class="hljs-built_in">timeout</span>(time: 1, unit: <span class="hljs-string">&#x27;HOURS&#x27;</span> )  //流水线超时设置1h，超时自动结束<br>    &#125;<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Build&#x27;</span>) &#123;  // 定义 <span class="hljs-string">&quot;Build&quot;</span> 阶段。<br>            steps &#123;<br>              //agent &#123; label <span class="hljs-string">&#x27;master1&#x27;</span>&#125;  该步骤在master1上执行<br>              <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;克隆代码&quot;</span><br>              sh <span class="hljs-string">&quot;cd /var/lib/jenkins/workspace/test-web &amp;&amp; rm -rf ./*&quot;</span>  /<br>              //执行与 <span class="hljs-string">&quot;Build&quot;</span> 阶段相关的步骤。<br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Test&#x27;</span>) &#123; <br>            steps &#123;<br>                // <br>            &#125;<br>        &#125;<br>    &#125;<br>    //构建后操作<br>    post &#123;<br>       always &#123;<br>           script&#123;<br>               println(<span class="hljs-string">&quot;always&quot;</span>)<br>           &#125;<br>       &#125;<br>       success &#123; //成功后执行<br>           script&#123;<br>           currentBuild.description = <span class="hljs-string">&quot;\n 构建成功！&quot;</span><br>           &#125;<br>       &#125;<br>       failure &#123; //失败后执行<br>           script&#123;<br>           currentBuild.description = <span class="hljs-string">&quot;\n 构建失败！&quot;</span><br>           &#125;<br>       &#125;<br>       aborted &#123; //取消后执行<br>       script&#123;<br>           currentBuild.description = <span class="hljs-string">&quot;\n 构建取消！&quot;</span>  //全局构建描述<br>           &#125;<br>       &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3、实战："><a href="#5-3、实战：" class="headerlink" title="5.3、实战："></a>5.3、实战：</h3><p>根据《四、使用Jenkins Pipline实现部署Tomcat项目》4.3 中编写流水线</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs sh">pipeline &#123;<br>agent &#123;<br>    label <span class="hljs-string">&#x27;master&#x27;</span><br>&#125;<br>options &#123;<br>    timestamps()<br>    <span class="hljs-built_in">timeout</span>(time: 1, unit: <span class="hljs-string">&#x27;HOURS&#x27;</span> )<br>&#125;<br>stages &#123;<br>stage(<span class="hljs-string">&#x27;克隆代码&#x27;</span>) &#123;<br>steps &#123;<br>sh <span class="hljs-string">&quot;cd /var/lib/jenkins/workspace/test-web &amp;&amp; rm -rf ./*&quot;</span><br>git branch: <span class="hljs-string">&#x27;main&#x27;</span>, credentialsId: <span class="hljs-string">&#x27;81fe0c81-01bd-4d7e-8e08-a5d22d8fd6a9&#x27;</span>, url: <span class="hljs-string">&#x27;ssh://git@192.168.31.194:2222/root/web.git&#x27;</span><br>              &#125;<br>&#125;<br>stage(<span class="hljs-string">&#x27;打包项目&#x27;</span>) &#123;<br>steps &#123;<br>sh <span class="hljs-string">&quot;tar -acvf web.tar.gz ./* &quot;</span><br><br>&#125;<br>&#125;<br>stage(<span class="hljs-string">&#x27;关闭服务&#x27;</span>) &#123;<br>steps &#123;<br>sh <span class="hljs-string">&#x27;ssh root@192.168.94.155 &quot;/bin/bash /usr/local/tomcat/bin/shutdown.sh &amp;&amp; rm -rf /app/html/www/*&quot;&#x27;</span><br>&#125;<br>&#125;<br>stage(<span class="hljs-string">&#x27;代码部署&#x27;</span>) &#123;<br>steps &#123;<br>sh <span class="hljs-string">&#x27;scp web.tar.gz 192.168.94.155:/app/html/www&#x27;</span><br>sh <span class="hljs-string">&#x27;ssh root@192.168.94.155 &quot;tar -xnf /app/html/www/web.tar.gz  -C /app/html/www/ &amp;&amp; ls -l /app/html/www&quot;&#x27;</span><br>&#125;<br>&#125;<br>stage(<span class="hljs-string">&#x27;开启服务&#x27;</span>) &#123;<br>steps &#123;<br>sh <span class="hljs-string">&#x27;ssh root@192.168.94.155 &quot;/usr/local/tomcat/bin/startup.sh&quot;&#x27;</span><br><br>&#125;<br>&#125;<br>&#125;<br>post &#123;<br>failure &#123; //失败后执行<br>script&#123;<br>currentBuild.description = <span class="hljs-string">&quot;\n 构建失败！&quot;</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>构建后，输出结果：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520145838621.png" alt="image-20220520145838621"></p><h3 id="5-4、设置流水线语法的版本控制。"><a href="#5-4、设置流水线语法的版本控制。" class="headerlink" title="5.4、设置流水线语法的版本控制。"></a>5.4、设置流水线语法的版本控制。</h3><p>创建Jenkinsfile存放流水线pipeline语法，并将Jenkinsflie推送到gitlab仓库</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220519100701675.png" alt="image-20220519100701675"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220519100309698.png" alt="image-20220519100309698"></p><p>修改流水线配置</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220519101520819.png" alt="image-20220519101520819"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220519101704757.png" alt="image-20220519101704757"></p><p>##备注：脚本路径为上传到gitlab的仓库路径，我的为主页，所以路径为：Jenkins，如果是在scripts下,就写:scripts&#x2F;Jenkinsfile</p><p>保存后点构建即可！</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520143652198.png" alt="image-20220520143652198"></p><h3 id="5-5、jenkins共享库"><a href="#5-5、jenkins共享库" class="headerlink" title="5.5、jenkins共享库"></a>5.5、jenkins共享库</h3><p>本人github上共享库地址为：<a href="https://github.com/pipiguai0123/JenkinsShareLibrary">https://github.com/pipiguai0123/JenkinsShareLibrary</a></p><h3 id="5-5-1、jenkins设置："><a href="#5-5-1、jenkins设置：" class="headerlink" title="5.5.1、jenkins设置："></a>5.5.1、jenkins设置：</h3><p>系统管理&gt;系统配置&gt;Global Pipeline Libraries</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609165726963.png" alt="image-20220609165726963"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609165811130.png" alt="image-20220609165811130"></p><p>备注：因为我这边使用的是github上的，所以仓库使用的是github上的，公司内部使用gitlab的话，以下为举例，采用gitlab地址：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609165914728.png" alt="image-20220609165914728"></p><p>jenkins共享库的文件结构为：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609160829641.png" alt="image-20220609160829641"></p><h3 id="5-5-2、使用github共享库实现《使用Jenkins-Pipline实现部署Tomcat项目，构建的状态发送邮件》："><a href="#5-5-2、使用github共享库实现《使用Jenkins-Pipline实现部署Tomcat项目，构建的状态发送邮件》：" class="headerlink" title="5.5.2、使用github共享库实现《使用Jenkins Pipline实现部署Tomcat项目，构建的状态发送邮件》："></a>5.5.2、使用github共享库实现《使用Jenkins Pipline实现部署Tomcat项目，构建的状态发送邮件》：</h3><p>需要先将jenkins设置邮件发送，具体可参考《jenkins使用–jenkins设置邮件发送》文档。</p><p>我这边已将Pipline代码上传到了github上的test.jenkinsfiles，以下为test.jenkins详解</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#!groovy</span><br><br>@Library(<span class="hljs-string">&#x27;jenkinslibrary@main&#x27;</span>) _ <br>//表示调用上边配置共享库步骤配置的名字，这里还可以通过跟上不同后缀标识选择不同分支。 默认是 master 分支，这里因为我们用的是 main 分支，所以需要显式指定<br><br>def toemail = new org.devops.toemail()<br>//使用/src/org/devops下的toemail类<br>userEmail = <span class="hljs-string">&quot;1962821461@qq.com&quot;</span><br>//定义发送的邮箱地址<br>pipeline&#123;<br>    agent &#123; label <span class="hljs-string">&#x27;master&#x27;</span> &#125;<br>    <br>    stages&#123;<br>            //<span class="hljs-comment">#省略内容</span><br>        &#125;<br><br>    post &#123;<br>        always&#123;<br>            script&#123;<br>                println(<span class="hljs-string">&quot;always&quot;</span>)<br>            &#125;<br>        &#125;<br>        <br>        success&#123;<br>            script&#123;<br>                println(<span class="hljs-string">&quot;success&quot;</span>)<br>                //对应/src/org/devops下类传递的变量，传递“流水线成功”和“邮箱地址”<br>                toemail.Email(<span class="hljs-string">&quot;流水线成功！&quot;</span>,userEmail)<br>            <br>            &#125;<br>        <br>        &#125;<br><span class="hljs-comment">#....省略....</span><br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>新增流水线，设置流水线配置，采用登录获取设置</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609164938179.png" alt="image-20220609164938179"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609165143255.png" alt="image-20220609165143255"></p><p>#保存后构建：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609170329170.png" alt="image-20220609170329170"></p><p>构建后，将会收到相关邮件通知：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609170426188.png" alt="image-20220609170426188"></p><p>具体更加复杂的可参考文档：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt"><br>学习可参考文档：https://wiki.eryajf.net/pages/2415.html#_1-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E3%80%82<br><br>文档地址：https://github.com/pipiguai0123/Jenkinsdoc<br><br>学习视频：https://www.bilibili.com/video/BV1YJ411G7Yz?spm_id_from=333.337.search-card.all.click<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Devops</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins设置发送邮件通知</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Jenkins设置发送邮件通知"><a href="#Jenkins设置发送邮件通知" class="headerlink" title="Jenkins设置发送邮件通知"></a>Jenkins设置发送邮件通知</h1><p>Jenkins中配置邮件发送有2中形式，一种是在pipline项目中，另一种是在自由风格项目中（此处称为shell模式）</p><p><strong>Jenkins流水线执行完成后发送邮件通知：</strong></p><h2 id="1、Jenkins需要先配置邮件通知、使用QQ邮箱，设置SMTP服务器地址，输入用户名和密码。可以通过发送测试邮件测试是否配置完成！"><a href="#1、Jenkins需要先配置邮件通知、使用QQ邮箱，设置SMTP服务器地址，输入用户名和密码。可以通过发送测试邮件测试是否配置完成！" class="headerlink" title="1、Jenkins需要先配置邮件通知、使用QQ邮箱，设置SMTP服务器地址，输入用户名和密码。可以通过发送测试邮件测试是否配置完成！"></a>1、Jenkins需要先配置邮件通知、使用QQ邮箱，设置SMTP<a href="https://cloud.tencent.com/product/cvm?from=10680">服务器</a>地址，输入用户名和密码。可以通过发送测试邮件测试是否配置完成！</h2><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/image-20220609104228187.png" alt="image-20220609104228187"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/image-20220609104309635.png" alt="image-20220609104309635"></p><h2 id="2、安装插件Email-Extension，然后进入系统管理-gt-系统设置-gt-Extended-E-email-Notification。依旧使用的是QQ邮箱，填写SMTP服务器地址smtp-qq-com-和端口-465注意要开启SSL，密码为授权码。"><a href="#2、安装插件Email-Extension，然后进入系统管理-gt-系统设置-gt-Extended-E-email-Notification。依旧使用的是QQ邮箱，填写SMTP服务器地址smtp-qq-com-和端口-465注意要开启SSL，密码为授权码。" class="headerlink" title="2、安装插件Email Extension，然后进入系统管理-&gt; 系统设置 -&gt;Extended E-email Notification。依旧使用的是QQ邮箱，填写SMTP服务器地址smtp.qq.com 和端口 465注意要开启SSL，密码为授权码。"></a>2、安装插件<code>Email Extension</code>，然后进入系统管理-&gt; <code>系统设置</code> -&gt;<code>Extended E-email Notification</code>。依旧使用的是QQ邮箱，填写SMTP<a href="https://cloud.tencent.com/product/cvm?from=10680">服务器</a>地址<code>smtp.qq.com</code> 和端口 <code>465</code>注意要开启SSL，密码为授权码。</h2><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/image-20220609102329749.png" alt="image-20220609102329749"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/image-20220609102443096.png" alt="image-20220609102443096"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/image-20220609102544398.png" alt="image-20220609102544398"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/image-20220609102730225.png" alt="image-20220609102730225"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/image-20220609102631627.png" alt="image-20220609102631627"></p><p><strong>原低版本Jenkins构建后发送邮件，及配置变量（暂未验证）</strong>：</p><p>在项目中配置变量，此处用到的信息来自git仓库推送触发构建时传过来的信息，所以相对应的取值如图</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58bad5402fe.png" alt="img"></p><p>${JOB_NAME} ${BUILD_STATUS} ${BUILD_DISPLAY_NAME} ${BUILD_URL}属于Jenkins包含的环境变量， 可以不需要额外取值</p><p>${message} ${updatetime} ${account} 是自定义变量，定义方式需要根据推送信息来定</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58badd606ee.png" alt="img"></p><p>${message}变量名最终格式为 $.commits[0].message<br><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58bae6c3aa2.png" alt="img"></p><p>${updatetime} 变量名最终格式为 $.repository.updated_at</p><p>同理，其他变量也是这么设置，最终设置如下</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58baecc996f.png" alt="img"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58baf2e8412.png" alt="img"></p><p>以上这些是共同设置。</p><p>在pipline项目中，要发邮件，需要用如下设置</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58baf81cb7c.png" alt="img"></p><p>上图表示构建成功时发邮件，这只是个示例，通常时失败或者abort的时候才发</p><p>在shell项目中，则要多些设置</p><p>首先到 构建后操作 的部分</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58bb01ab8ed.png" alt="img"></p><p>选择 Editable Email Notification</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58bb0538ec9.png" alt="img"></p><p>填写信息</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58bb099430b.png" alt="img"></p><p>点击高级定义触发方式，如图</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58bb0e6a357.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins自动备份</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Jenkins自动备份"><a href="#Jenkins自动备份" class="headerlink" title="Jenkins自动备份"></a>Jenkins自动备份</h1><h6 id="登录Jenkins，选择左侧菜单的系统管理，然后选择ThinBackup，如下图界面：登录Jenkins，选择左侧菜单的系统管理，然后选择ThinBackup，如下图界面："><a href="#登录Jenkins，选择左侧菜单的系统管理，然后选择ThinBackup，如下图界面：登录Jenkins，选择左侧菜单的系统管理，然后选择ThinBackup，如下图界面：" class="headerlink" title="登录Jenkins，选择左侧菜单的系统管理，然后选择ThinBackup，如下图界面：登录Jenkins，选择左侧菜单的系统管理，然后选择ThinBackup，如下图界面："></a>登录Jenkins，选择左侧菜单的<strong>系统管理</strong>，然后选择<strong>ThinBackup</strong>，如下图界面：登录Jenkins，选择左侧菜单的<strong>系统管理</strong>，然后选择<strong>ThinBackup</strong>，如下图界面：</h6><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/image-20230330104619475.png" alt="image-20230330104619475"></p><hr><p>选择<strong>Settings</strong>，界面如下图:</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/image-20230330104654310.png" alt="image-20230330104654310"></p><ul><li>Backup directory: 设置备份的目录，注意运行 jenkins 的目录要对它有写的权限。</li><li>Backup schedule for full backups: 设置完整定时任务，Example:<br><em>0 12</em> <em>1-5 Executes on 12:00 every weekday (Mo-Fr)</em></li><li>Backup schedule for differential backups 设置增量备份的计划，仅仅存储上一次完整备份的之后的更改部分。 对于增量备份，我们必须要有一个完整备份。</li><li>Max number of backup sets： 备份的最大数量数，默认为 -1.表示无限制。</li><li>Files excluded from backup (regular expression)： 备份需要排除的目录。</li><li>Wait until Jenkins&#x2F;Hudson is idle to perform a backup： 等待 jenkins 进入“Quiet Mode”(安静模式)的时候去进行备份。安静模式期间不处理任何任务。 建议勾选。</li><li>Force Jenkins to quiet mode after specified minutes ： 最长等待进入安静模式的时间，当超过这个时间，就会强制进入 安静模式。</li><li>Backup build results： 备份构建的结果，这个可能会产生大量的数据。占用磁盘会比较大。</li><li>Backup build archive： 只有勾选了 Backup build results 才会出现这个选项。备份存档，</li><li>Backup only builds marked to keep： 如果勾选此项，只备份被标记为 <code>Keep this build forever</code> 的上的构建结果。只有勾选了 Backup build results 才会出现这个选项。</li><li>Backup ‘userContent’ folder： 如果启用该备份，userContent 目录($JENKINS_HOME&#x2F;userContent)将会备份。 如果有软链接部分，不能备份该内容。</li><li>Backup next build number file： 如果启用该项，则 nextBuildNumber 也会进行备份。</li><li>Backup plugins archives： 启用该项的话，会进行备份插件存档。</li><li>Backup additional files： 备份特定的文件，可以通过正则进行匹配。</li><li>Clean up differential backups： 如果启用了该选项的话，在执行完整备份的时候，会删除差异化备份。</li><li>Move old backups to ZIP files： 将老的备份文件进行压缩。</li></ul><hr><p>如果点击<strong>Backup Now</strong>，会立即执行备份，根据需要备份的数据大小，会等待一段时间。</p><hr><p>点击<strong>Restore</strong>会进行备份恢复，界面如下图;</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/image-20230330104712908.png" alt="image-20230330104712908"></p><p>选择想恢复的时间节点然后点击<strong>Restore</strong>，稍等一会儿就恢复了。</p>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置Jenkins用户和权限</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="配置Jenkins用户和权限"><a href="#配置Jenkins用户和权限" class="headerlink" title="配置Jenkins用户和权限"></a>配置Jenkins用户和权限</h1><h2 id="一、新建jenkins用户"><a href="#一、新建jenkins用户" class="headerlink" title="一、新建jenkins用户"></a>一、新建jenkins用户</h2><h3 id="1、系统管理-gt-gt-管理用户"><a href="#1、系统管理-gt-gt-管理用户" class="headerlink" title="1、系统管理&gt;&gt;管理用户"></a>1、系统管理&gt;&gt;管理用户</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20220506164349547.png" alt="image-20220506164349547"></p><h3 id="2、新建用户，填写用户信息"><a href="#2、新建用户，填写用户信息" class="headerlink" title="2、新建用户，填写用户信息"></a>2、新建用户，填写用户信息</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20220506164322659.png" alt="image-20220506164322659"></p><h2 id="二、用户授权"><a href="#二、用户授权" class="headerlink" title="二、用户授权"></a>二、用户授权</h2><h3 id="授权方法一：（适用于用户量少，对用户权限不需要过多的分配）"><a href="#授权方法一：（适用于用户量少，对用户权限不需要过多的分配）" class="headerlink" title="授权方法一：（适用于用户量少，对用户权限不需要过多的分配）"></a>授权方法一：（适用于用户量少，对用户权限不需要过多的分配）</h3><h3 id="1、系统管理-gt-gt-全局安全配置"><a href="#1、系统管理-gt-gt-全局安全配置" class="headerlink" title="1、系统管理&gt;&gt; 全局安全配置"></a>1、系统管理&gt;&gt; 全局安全配置</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20220510113937813.png" alt="image-20220510113937813"></p><h3 id="2、安全域选择《专有用户数据库》，授权策略选择《安全矩阵》"><a href="#2、安全域选择《专有用户数据库》，授权策略选择《安全矩阵》" class="headerlink" title="2、安全域选择《专有用户数据库》，授权策略选择《安全矩阵》"></a>2、安全域选择《专有用户数据库》，授权策略选择《安全矩阵》</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20220510114017088.png" alt="image-20220510114017088"></p><h3 id="3、创建用户矩阵，添加用户"><a href="#3、创建用户矩阵，添加用户" class="headerlink" title="3、创建用户矩阵，添加用户"></a>3、创建用户矩阵，添加用户</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20220510114119758.png" alt="image-20220510114119758"></p><h3 id="4、根据需求设置安全矩阵，任何用户在：全部一栏都需要选择Read，只读"><a href="#4、根据需求设置安全矩阵，任何用户在：全部一栏都需要选择Read，只读" class="headerlink" title="4、根据需求设置安全矩阵，任何用户在：全部一栏都需要选择Read，只读"></a>4、根据需求设置安全矩阵，任何用户在：全部一栏都需要选择Read，只读</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20220510114231574.png" alt="image-20220510114231574"></p><h2 id="授权方法二：（适用于项目多，划分角色和权限多）"><a href="#授权方法二：（适用于项目多，划分角色和权限多）" class="headerlink" title="授权方法二：（适用于项目多，划分角色和权限多）"></a>授权方法二：（适用于项目多，划分角色和权限多）</h2><p>参考文档：<a href="https://www.cnblogs.com/qican/p/15533972.html">https://www.cnblogs.com/qican/p/15533972.html</a></p><h3 id="1、安装插件："><a href="#1、安装插件：" class="headerlink" title="1、安装插件："></a>1、安装插件：</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Role</span>-based <span class="hljs-keyword">Authorization</span> Strategy<br></code></pre></td></tr></table></figure><h3 id="2、系统管理-gt-gt-全局安全配置"><a href="#2、系统管理-gt-gt-全局安全配置" class="headerlink" title="2、系统管理&gt;&gt; 全局安全配置"></a>2、系统管理&gt;&gt; 全局安全配置</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20220510113937813.png" alt="image-20220510113937813"></p><h3 id="3、选择Role-based、并保存应用"><a href="#3、选择Role-based、并保存应用" class="headerlink" title="3、选择Role-based、并保存应用"></a>3、选择Role-based、并保存应用</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/1171635-20211116103911633-2008125869.png" alt="img"></p><h3 id="4、在系统管理页面找到Manage-and-Assign-Roles点击进入页面中"><a href="#4、在系统管理页面找到Manage-and-Assign-Roles点击进入页面中" class="headerlink" title="4、在系统管理页面找到Manage and Assign Roles点击进入页面中"></a>4、在系统管理页面找到Manage and Assign Roles点击进入页面中</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20230406112155920.png" alt="image-20230406112155920"></p><h3 id="5、管理角色内》设置全局角色"><a href="#5、管理角色内》设置全局角色" class="headerlink" title="5、管理角色内》设置全局角色"></a>5、管理角色内》设置全局角色</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20230406114627026.png" alt="image-20230406114627026"></p><h3 id="6、管理角色内》设置匹配角色"><a href="#6、管理角色内》设置匹配角色" class="headerlink" title="6、管理角色内》设置匹配角色"></a>6、管理角色内》设置匹配角色</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20230406113929081.png" alt="image-20230406113929081"></p><p> 备注：**pattern为正则表达式，例如要匹配以test开头和go开头的任务名：<code>test.|go.</code>**举例：如上develop组以test结尾，后面的用户关联了该组的，能开到以test结尾的任务</p><h3 id="7、分配角色内"><a href="#7、分配角色内" class="headerlink" title="7、分配角色内"></a>7、分配角色内</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20230406114502470.png" alt="image-20230406114502470"></p><h3 id="8、当我们登录develop账户时只能看到以test结尾的项目，formal账户时只能看到以formal结尾的项目（这块在设置流水线任务时就得规范构建任务的命名规则）"><a href="#8、当我们登录develop账户时只能看到以test结尾的项目，formal账户时只能看到以formal结尾的项目（这块在设置流水线任务时就得规范构建任务的命名规则）" class="headerlink" title="8、当我们登录develop账户时只能看到以test结尾的项目，formal账户时只能看到以formal结尾的项目（这块在设置流水线任务时就得规范构建任务的命名规则）"></a>8、当我们登录develop账户时只能看到以test结尾的项目，formal账户时只能看到以formal结尾的项目（这块在设置流水线任务时就得规范构建任务的命名规则）</h3><h2 id="问题处理："><a href="#问题处理：" class="headerlink" title="问题处理："></a>问题处理：</h2><h3 id="Jenkins权限配置错误，导致无法登录："><a href="#Jenkins权限配置错误，导致无法登录：" class="headerlink" title="Jenkins权限配置错误，导致无法登录："></a>Jenkins权限配置错误，导致无法登录：</h3><p>1.停止jenkins</p><p>2、配置config.xml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /var/lib/jenkins/config.xml<br>&lt;useSecurity&gt;<span class="hljs-literal">true</span>&lt;/useSecurity&gt; <span class="hljs-comment">#true 修改为:false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins-构建触发器-webhook</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Jenkins-构建触发器-webhook"><a href="#Jenkins-构建触发器-webhook" class="headerlink" title="Jenkins-构建触发器-webhook"></a>Jenkins-构建触发器-webhook</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">参考文档：https://www.cnblogs.com/byhh/p/15624146.html<br></code></pre></td></tr></table></figure><h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><p>我们已经了解到了，Jenkins 本身内置了4种构建触发器，分别是：</p><ul><li><strong>触发远程构建</strong></li><li><strong>其他项目工程构建后触发 Build after other projects are built</strong></li><li><strong>定时构建 Build periodically</strong></li><li><strong>轮循构建 Poll SCM</strong></li></ul><p>这四种构建触发器，基本可以满足我们日常工作的大部分需求，但也有其不足的地方：</p><p>1、触发远程构建：需要额外调用url 通知Jenkins 去触发构建</p><p>2、前置工程构建后触发：可以配合其他构建触发器一起使用，但是没有解决主要工程构建的问题</p><p>3、定时构建：会存在即使，远程仓库代码没有任何变动，也会触发构建，导致资源浪费</p><p>4、轮循构建:相比于定时构建，轮循构建只有在代码变动的情况下，才会触发构建，减少了一部分资源的浪费，但是依赖于轮询，其定时轮询机制本身会消耗Jenkins 服务器的资源，导致一些资源上的浪费。</p><p>综合以上问题：webhook 应运而生 （这里以 gitlab 为例）</p><p>webhook 拦截特定事件（如 push 代码后 ，自动触发远程构建），事件以 http 的方式通知第三方服务，如触发持续集成Jenkins。</p><h2 id="二、gitlab-利用-webhook-实现push-代码后-Jenkins-自动构建"><a href="#二、gitlab-利用-webhook-实现push-代码后-Jenkins-自动构建" class="headerlink" title="二、gitlab 利用 webhook 实现push 代码后 Jenkins 自动构建"></a>二、gitlab 利用 webhook 实现push 代码后 Jenkins 自动构建</h2><h3 id="1、Jenkins-安装-gitlab-相关插件"><a href="#1、Jenkins-安装-gitlab-相关插件" class="headerlink" title="1、Jenkins 安装 gitlab 相关插件"></a>1、Jenkins 安装 gitlab 相关插件</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/2560969-20211130141452458-1117825345.png" alt="img"></p><h3 id="2、插件安装完毕后，项目配置目录下-构建触发器器会新增-一个-触发器选项，选择并设置对应触发构建事件，保存殷勇即可"><a href="#2、插件安装完毕后，项目配置目录下-构建触发器器会新增-一个-触发器选项，选择并设置对应触发构建事件，保存殷勇即可" class="headerlink" title="2、插件安装完毕后，项目配置目录下 构建触发器器会新增 一个 触发器选项，选择并设置对应触发构建事件，保存殷勇即可"></a>2、插件安装完毕后，项目配置目录下 构建触发器器会新增 一个 触发器选项，选择并设置对应触发构建事件，保存殷勇即可</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/2560969-20211130141629398-1998578973.png" alt="img"></p><h3 id="3、gitlab-上设置webhook"><a href="#3、gitlab-上设置webhook" class="headerlink" title="3、gitlab 上设置webhook"></a>3、gitlab 上设置webhook</h3><p>管理员登录 gitlab 远程仓库，进入指定项目，设置入口 点击进入webhook 配置页面</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/2560969-20211130141845535-890314326.png" alt="img"></p><h3 id="4、配置gitlab-webhook，配置完成后点击-add-webhook"><a href="#4、配置gitlab-webhook，配置完成后点击-add-webhook" class="headerlink" title="4、配置gitlab webhook，配置完成后点击 add webhook"></a>4、配置gitlab webhook，配置完成后点击 add webhook</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/2560969-20211130142549536-752996834.png" alt="img"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/2560969-20211130142703276-241677714.png" alt="img"></p><p>经测试webhook 已经生效，接下来可以试试 本地push 代码 检测 是否生效了！</p><h2 id="三、gitea利用-webhook-实现push-代码后-Jenkins-自动构建"><a href="#三、gitea利用-webhook-实现push-代码后-Jenkins-自动构建" class="headerlink" title="三、gitea利用 webhook 实现push 代码后 Jenkins 自动构建"></a>三、gitea利用 webhook 实现push 代码后 Jenkins 自动构建</h2><h3 id="1、jenkins安装插件：Generic-Webhook-Trigger-Plugin"><a href="#1、jenkins安装插件：Generic-Webhook-Trigger-Plugin" class="headerlink" title="1、jenkins安装插件：Generic Webhook Trigger Plugin "></a>1、jenkins安装插件：<code>Generic Webhook Trigger Plugin </code></h3><h3 id="2、在创建好项目之后配置Jenkins如下"><a href="#2、在创建好项目之后配置Jenkins如下" class="headerlink" title="2、在创建好项目之后配置Jenkins如下:"></a>2、在创建好项目之后配置Jenkins如下:</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/image-20230201175748145.png" alt="image-20230201175748145"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/image-20230201175803197.png" alt="image-20230201175803197"></p><p>保存即可，Jenkins配置完成接下来到gitea配置！</p><h3 id="3、gitea创建好代码库-进入代码库如下配置"><a href="#3、gitea创建好代码库-进入代码库如下配置" class="headerlink" title="3、gitea创建好代码库 进入代码库如下配置"></a>3、gitea创建好代码库 进入代码库如下配置</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/20210307002010978.png" alt="img"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/20210307002052516.png" alt="img"></p><p><strong>然后注意目标url只写上jenkins地址和你的自定义token即可</strong></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/image-20230201180003191.png" alt="image-20230201180003191"></p><p><strong>保存后点击链接，测试推送</strong></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/image-20230201180256740.png" alt="image-20230201180256740"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/image-20230201180113450.png" alt="image-20230201180113450"></p>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SonarQube安装部署</title>
    <link href="/2023/03/29/devops/sonarQube/sonarQube%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/03/29/devops/sonarQube/sonarQube%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SonarQube安装部署"><a href="#SonarQube安装部署" class="headerlink" title="SonarQube安装部署"></a>SonarQube安装部署</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">官方文档：https:<span class="hljs-regexp">//</span>docs.sonarqube.org<span class="hljs-regexp">/latest/</span>setup<span class="hljs-regexp">/install-server/</span><br><br>参考文档：https:<span class="hljs-regexp">//</span>cloud.tencent.com<span class="hljs-regexp">/developer/</span>article/<span class="hljs-number">1600167</span><br><br>SonarQube+SonarScanner 最全安装步骤：https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/xiaozi/</span>p/<span class="hljs-number">15503311</span>.html<br><br>k8s安装：https:<span class="hljs-regexp">//</span>wqblogs.com<span class="hljs-regexp">/2021/</span><span class="hljs-number">08</span><span class="hljs-regexp">/09/</span>sonarqube%E9%<span class="hljs-number">83</span>%A8%E7%BD%B2%E5%AE%<span class="hljs-number">89</span>%E8%A3%<span class="hljs-number">85</span>/<br></code></pre></td></tr></table></figure><h2 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h2><p><strong>Sonar (SonarQube)是一个开源平台，用于管理源代码的质量。</strong><br><strong>Sonar 不只是一个质量数据报告工具，更是代码质量管理平台。</strong><br>支持Java, C#, C&#x2F;C++, PL&#x2F;SQL, Cobol, JavaScrip, Groovy 等等二十几种编程语言的代码质量管理与检测。</p><p>Sonar可以从以下七个维度检测代码质量，而作为开发人员至少需要处理前5种代码质量问题。</p><ol><li>不遵循代码标准<br>sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具规范代码编写。</li><li>潜在的缺陷<br>sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具检 测出潜在的缺陷。</li><li>糟糕的复杂度分布<br>文件、类、方法等，如果复杂度过高将难以改变，这会使得开发人员 难以理解它们, 且如果没有自动化的单元测试，对于程序中的任何组件的改变都将可能导致需要全面的回归测试。</li><li>重复<br>显然程序中包含大量复制粘贴的代码是质量低下的，sonar可以展示 源码中重复严重的地方。</li><li>注释不足或者过多<br>没有注释将使代码可读性变差，特别是当不可避免地出现人员变动 时，程序的可读性将大幅下降 而过多的注释又会使得开发人员将精力过多地花费在阅读注释上，亦违背初衷。</li><li>缺乏单元测试<br>sonar可以很方便地统计并展示单元测试覆盖率。</li><li>糟糕的设计<br>通过sonar可以找出循环，展示包与包、类与类之间的相互依赖关系，可以检测自定义的架构规则 通过sonar可以管理第三方的jar包，可以利用LCOM4检测单个任务规则的应用情况， 检测藕合。</li></ol><h2 id="二、安装前准备以及注意事项："><a href="#二、安装前准备以及注意事项：" class="headerlink" title="二、安装前准备以及注意事项："></a>二、安装前准备以及注意事项：</h2><p><strong>安装前准备环境：</strong></p><table><thead><tr><th>环境&#x2F;工具&#x2F;服务器</th><th>版本</th></tr></thead><tbody><tr><td>192.168.94.154</td><td>centos7.9</td></tr><tr><td>jdk</td><td>11.0.14</td></tr><tr><td>sonarqube</td><td>9.6.1</td></tr><tr><td><strong>环境&#x2F;工具&#x2F;服务器</strong></td><td><strong>版本</strong></td></tr><tr><td>192.168.94.155</td><td>centos7.9</td></tr><tr><td>postgres</td><td>docker安装</td></tr></tbody></table><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">下载对应操作系统的安装包，官网下载链接：https://www.sonarqube.org/downloads/<br>sonarqube7.9及以上使用postgres为数据库使用<br>sonarqube7.8版本使用mysql `https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.8.zip`<br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">1.SonarQube安装使用依赖JDK，需提前安装配置好JDK相关信息<br><br>2.为了获得最佳性能，SonarQube 服务器和数据库应该安装在不同的主机上，并且服务器主机应该是专用的。服务器和数据库主机应位于同一网络中。<br><br>3.所有主机必须是时间同步的。<br></code></pre></td></tr></table></figure><h2 id="三、安装过程："><a href="#三、安装过程：" class="headerlink" title="三、安装过程："></a>三、安装过程：</h2><h3 id="1-下载sonarqube安装包"><a href="#1-下载sonarqube安装包" class="headerlink" title="1.下载sonarqube安装包"></a>1.下载sonarqube安装包</h3><p>下载安装包后，上传到&#x2F;app目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">unzip sonarqube-9.6.1.59531.zip<br><span class="hljs-built_in">cd</span> sonarqube-9.6.1.59531/<br></code></pre></td></tr></table></figure><h3 id="2-添加sonar系统用户"><a href="#2-添加sonar系统用户" class="headerlink" title="2.添加sonar系统用户"></a>2.添加sonar系统用户</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">groupadd sonar<br><br><span class="hljs-comment">#创建sonar用户，设置无法登录(无法登录可去掉)</span><br>useradd -g sonar -s /sbin/nologin sonar<br><br><span class="hljs-comment"># 设置权限</span><br><span class="hljs-built_in">chown</span> sonar:sonar -R /app/sonarqube/<br><br>su -s /bin/bash - sonar<br><br>注：SonarQube必须以普通用户运行，不能使用root用户<br></code></pre></td></tr></table></figure><h3 id="3-更改配置文件"><a href="#3-更改配置文件" class="headerlink" title="3.更改配置文件"></a>3.更改配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /app/sonarqube/sonarqube-9.6.1.59531/conf/sonar.properties<br><br><span class="hljs-comment">#已使用docker在192.168.94.155机器上安装postgres，安装postgres可参考文档</span><br>sonar.jdbc.username=postgres<br>sonar.jdbc.password=123456<br>sonar.jdbc.url=jdbc:postgresql://192.168.94.155:5432/sonar<br></code></pre></td></tr></table></figure><h3 id="4-启动SonarQube"><a href="#4-启动SonarQube" class="headerlink" title="4.启动SonarQube"></a>4.启动SonarQube</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">##第一次服务启动时，使用该命令，方便定位问题</span><br>/app/sonarqube/sonarqube-9.6.1.59531/bin/linux-x86-64/sonar.sh console<br><br><span class="hljs-comment">#无问题后</span><br>/app/sonarqube/sonarqube-9.6.1.59531/bin/linux-x86-64/sonar.sh start<br></code></pre></td></tr></table></figure><h4 id="可能会遇到的问题处理："><a href="#可能会遇到的问题处理：" class="headerlink" title="可能会遇到的问题处理："></a>可能会遇到的问题处理：</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs smali">问题：<br>ERROR: [1] bootstrap checks failed. You must address the points described in the following [1] lines before starting Elasticsearch.<br>bootstrap<span class="hljs-built_in"> check </span>failure [1] of [1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]<br><br>处理方法：<br>vim /etc/sysctl.conf<br><br><span class="hljs-comment">#最后一行添加,并保存退出</span><br>vm.max_map_count=262144<br><br><span class="hljs-comment">#加载使其生效</span><br>sysctl -p<br></code></pre></td></tr></table></figure><h3 id="5-登录配置"><a href="#5-登录配置" class="headerlink" title="5.登录配置"></a>5.登录配置</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs txt">启动成功：访问：192.168.94.154:9000<br>（1）默认账户admin/admin，首次登录，强制修改密码<br><br>（2）安装汉化插件：选择 Administration -&gt; Marketplace -&gt; Plugins 中搜索 Chinese pack ，然后Install.<br><br>![image-20220907102018599](sonarQube安装部署/image-20220907102018599.png)<br><br>注意：如遇到Chinese pack 插件不能直接在Marketplace中直接安装，可采用以下方式：<br><br>- 访问插件GitHub项目库：<br>https://github.com/xuhuisheng/sonar-l10n-zh/releases/tag/sonar-l10n-zh-plugin-9.4<br>- 下载Chinese pack jar包<br>- 把jar包放在SonarQube服务文件夹下的extensions/plugins中<br>举例：将jar包放置/app/sonarqube/sonarqube-9.6.1.59531/extensions/plugins<br>- 然后重启即可： ./sonar.sh restart<br></code></pre></td></tr></table></figure><h2 id="SonarScanner扫描"><a href="#SonarScanner扫描" class="headerlink" title="SonarScanner扫描"></a><strong>SonarScanner扫描</strong></h2><h3 id="1、下载地址：https-docs-sonarqube-org-latest-analysis-scan-sonarscanner"><a href="#1、下载地址：https-docs-sonarqube-org-latest-analysis-scan-sonarscanner" class="headerlink" title="1、下载地址：https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/"></a>1、下载地址：<code>https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/</code></h3><p><img src="/2023/03/29/devops/sonarQube/sonarQube%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/image-20220908145251627.png" alt="image-20220908145251627"></p><h3 id="2、解压文件并配置环境变量"><a href="#2、解压文件并配置环境变量" class="headerlink" title="2、解压文件并配置环境变量"></a>2、解压文件并配置环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#解压文件到指定目录</span><br>unzip sonar-scanner-cli-4.7.0.2747-linux.zip -d /opt/Sonar-scanner<br><br><span class="hljs-comment">#配置环境变量</span><br>vim /etc/profile<br><span class="hljs-comment">#按GG到最后一行，添加如下内容</span><br><span class="hljs-comment"># sonar-scanner</span><br><span class="hljs-built_in">export</span> Sonar_Home=/opt/Sonar-scanner<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$Sonar_Home</span>/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment">#使配置生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><p>扫描方式：可参考上面《SonarQube+SonarScanner 最全安装步骤》文献</p><h3 id="3、如果在项目的根目录下无法创建-sonar-project-properties-文件，有几种替代方法："><a href="#3、如果在项目的根目录下无法创建-sonar-project-properties-文件，有几种替代方法：" class="headerlink" title="3、如果在项目的根目录下无法创建 sonar-project.properties 文件，有几种替代方法："></a>3、如果在项目的根目录下无法创建 sonar-project.properties 文件，有几种替代方法：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">可以通过命令行直接指定属性：<br>sonar-scanner -Dsonar.projectKey=myproject -Dsonar.sources=src1<br><br>属性 project.settings 可用于指定项目配置文件的路径（该选项与该sonar.projectBaseDir属性不兼容）：<br>sonar-scanner -Dproject.settings=../myproject.properties<br><br>sonar.projectBaseDir从 SonarScanner 2.4 开始，可以通过属性设置要分析的项目的根文件夹。\<br>sonar-project.properties如果sonar.projectKey未在命令行中指定，此文件夹必须包含文件。可以在此项目配置文件中或通过命令行参数定义其他分析参数。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>SonarQube</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SonarQube</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker运行Nexus搭建Maven私服</title>
    <link href="/2023/03/29/devops/nexus/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8CNexus%E6%90%AD%E5%BB%BAMaven%E7%A7%81%E6%9C%8D/"/>
    <url>/2023/03/29/devops/nexus/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8CNexus%E6%90%AD%E5%BB%BAMaven%E7%A7%81%E6%9C%8D/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker运行Nexus搭建Maven私服"><a href="#使用docker运行Nexus搭建Maven私服" class="headerlink" title="使用docker运行Nexus搭建Maven私服"></a>使用docker运行Nexus搭建Maven私服</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://www.hangge.com/blog/cache/detail_2844.html<br></code></pre></td></tr></table></figure><h2 id="docker方式运行Nexus"><a href="#docker方式运行Nexus" class="headerlink" title="docker方式运行Nexus"></a>docker方式运行Nexus</h2><h3 id="1）拉取Nexus3-镜像："><a href="#1）拉取Nexus3-镜像：" class="headerlink" title="1）拉取Nexus3 镜像："></a>1）拉取Nexus3 镜像：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull sonatype/nexus3<br></code></pre></td></tr></table></figure><h3 id="2）接着执行如下命令，创建宿主机挂载目录："><a href="#2）接着执行如下命令，创建宿主机挂载目录：" class="headerlink" title="2）接着执行如下命令，创建宿主机挂载目录："></a>2）接着执行如下命令，创建宿主机挂载目录：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> –p /app/nexus-data<br><span class="hljs-built_in">chown</span> -R 200 /app/nexus-data<br><span class="hljs-comment">#chmod 777 /app/nexus-data</span><br></code></pre></td></tr></table></figure><h3 id="3）最后执行如下命令运行-Nexus3-容器即可："><a href="#3）最后执行如下命令运行-Nexus3-容器即可：" class="headerlink" title="3）最后执行如下命令运行 Nexus3 容器即可："></a>3）最后执行如下命令运行 Nexus3 容器即可：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d -e TZ=Asia/Shanghai \<br>--restart=always \<br>--name nexus3 \<br>-p 8081:8081 \<br>-v /app/nexus-data:/nexus-data \<br>sonatype/nexus3<br></code></pre></td></tr></table></figure><h2 id="nexus3-docker-数据迁移"><a href="#nexus3-docker-数据迁移" class="headerlink" title="nexus3 docker 数据迁移"></a>nexus3 docker 数据迁移</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">参考文档：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/allenjsl/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">119829495</span><br></code></pre></td></tr></table></figure><p>备注：数据迁移时：复制过去的数据目录需要给权限,有些启动不了的情况也需要赋予权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chown</span> -R 200<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Nexus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nexus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven的使用</title>
    <link href="/2023/03/29/devops/maven/maven%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/29/devops/maven/maven%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Maven的使用"><a href="#Maven的使用" class="headerlink" title="Maven的使用"></a>Maven的使用</h1><p>详细文档：<a href="https://blog.csdn.net/lovequanquqn/article/details/81627807">https://blog.csdn.net/lovequanquqn/article/details/81627807</a></p><h2 id="Maven规定的目录结构"><a href="#Maven规定的目录结构" class="headerlink" title="Maven规定的目录结构"></a>Maven规定的目录结构</h2><p>若要使用Maven，那么项目的目录结构必须符合Maven的规范，其目录结构如下：</p><p><img src="/2023/03/29/devops/maven/maven%E7%9A%84%E4%BD%BF%E7%94%A8/201808131239225" alt="img"></p><h2 id="Maven基本命令"><a href="#Maven基本命令" class="headerlink" title="Maven基本命令"></a>Maven基本命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">-v:查询Maven版本<br>本命令用于检查maven是否安装成功。<br>Maven安装完成之后，在命令行输入mvn -v，若出现maven信息，则说明安装成功。<br><br>compile：编译<br>将java源文件编译成class文件<br><br><span class="hljs-built_in">test</span>:测试项目<br>执行<span class="hljs-built_in">test</span>目录下的测试用例<br><br>package:打包<br>将项目打成jar包<br><br>clean:删除target文件夹<br><br>install:安装<br>将当前项目放到Maven的本地仓库中，供其他项目使用。<br></code></pre></td></tr></table></figure><h2 id="什么是Maven仓库？"><a href="#什么是Maven仓库？" class="headerlink" title="什么是Maven仓库？"></a>什么是Maven仓库？</h2><p>Maven仓库用来存放Maven管理的所有Jar包。分为：本地仓库 和 中央仓库。<br>本地仓库：Maven本地的Jar包仓库。<br>中央仓库： Maven官方提供的远程仓库。<br>当项目编译时，Maven首先从本地仓库中寻找项目所需的Jar包，若本地仓库没有，再到Maven的中央仓库下载所需Jar包。</p><h2 id="什么是“坐标”？"><a href="#什么是“坐标”？" class="headerlink" title="什么是“坐标”？"></a>什么是“坐标”？</h2><p>在Maven中，坐标是Jar包的唯一标识，Maven通过坐标在仓库中找到项目所需的Jar包。</p><p>如下代码中，groupId和artifactId构成了一个Jar包的坐标。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;dependency&gt;<br>   &lt;groupId&gt;cn.missbe.web.search&lt;/groupId&gt;<br>   &lt;artifactId&gt;resource-search&lt;/artifactId&gt;<br>   &lt;packaging&gt;jar&lt;/packaging&gt;<br>   &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><ul><li>groupId：所需Jar包的项目名</li><li>artifactId：所需Jar包的模块名</li><li>version：所需Jar包的版本号</li></ul><h2 id="传递依赖-与-排除依赖"><a href="#传递依赖-与-排除依赖" class="headerlink" title="传递依赖 与 排除依赖"></a>传递依赖 与 排除依赖</h2><p>传递依赖：如果我们的项目引用了一个Jar包，而该Jar包又引用了其他Jar包，那么在默认情况下项目编译时，Maven会把直接引用和间接引用的Jar包都下载到本地。<br>排除依赖：如果我们只想下载直接引用的Jar包，那么需要在pom.xml中做如下配置：(将需要排除的Jar包的坐标写在中)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;exclusions&gt;<br>   &lt;exclusion&gt;<br>      &lt;groupId&gt;cn.missbe.web.search&lt;/groupId&gt;<br>      &lt;artifactId&gt;resource-search&lt;/artifactId&gt;<br>      &lt;packaging&gt;pom&lt;/packaging&gt;<br>      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>   &lt;/exclusion&gt;<br>&lt;/exclusions&gt;<br></code></pre></td></tr></table></figure><h2 id="依赖范围scope"><a href="#依赖范围scope" class="headerlink" title="依赖范围scope"></a>依赖范围scope</h2><p>在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。        </p><ul><li>compile ：默认范围，用于编译      </li><li>provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath      </li><li>runtime: 在执行时需要使用      </li><li>test:    用于test任务时使用      </li><li>system: 需要外在提供相应的元素。通过systemPath来取得      </li><li>systemPath: 仅用于范围为system。提供相应的路径      </li><li>optional:   当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用</li></ul><h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><p>若项目中多个Jar同时引用了相同的Jar时，会产生依赖冲突，但Maven采用了两种避免冲突的策略，因此在Maven中是不存在依赖冲突的。</p><h3 id="1-短路优先"><a href="#1-短路优先" class="headerlink" title="1.短路优先"></a>1.短路优先</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">本项目——&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>jar——&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B</span>.</span></span>jar——&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">X</span>.</span></span>jar<br>本项目——&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">C</span>.</span></span>jar——&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">X</span>.</span></span>jar<br></code></pre></td></tr></table></figure><p>若本项目引用了A.jar，A.jar又引用了B.jar，B.jar又引用了X.jar，并且C.jar也引用了X.jar。<br>在此时，Maven只会引用引用路径最短的Jar。</p><h3 id="2-声明优先"><a href="#2-声明优先" class="headerlink" title="2.声明优先"></a>2.声明优先</h3><p>若引用路径长度相同时，在pom.xml中谁先被声明，就使用谁。</p><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><h3 id="1-什么是聚合？"><a href="#1-什么是聚合？" class="headerlink" title="1.什么是聚合？"></a>1.什么是聚合？</h3><p>将多个项目同时运行就称为聚合。</p><h3 id="2-如何实现聚合？"><a href="#2-如何实现聚合？" class="headerlink" title="2.如何实现聚合？"></a>2.如何实现聚合？</h3><p>只需在pom中作如下配置即可实现聚合：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;modules&gt;<br>    &lt;module&gt;web-connection-pool&lt;/module&gt;<br>    &lt;module&gt;web-java-crawler&lt;/module&gt;<br>&lt;/modules&gt;<br></code></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="1-什么是继承？"><a href="#1-什么是继承？" class="headerlink" title="1.什么是继承？"></a>1.什么是继承？</h3><p>在聚合多个项目时，如果这些被聚合的项目中需要引入相同的Jar，那么可以将这些Jar写入父pom中，各个子项目继承该pom即可。</p><h3 id="2-如何实现继承？"><a href="#2-如何实现继承？" class="headerlink" title="2.如何实现继承？"></a>2.如何实现继承？</h3><p>父pom配置：将需要继承的Jar包的坐标放入标签即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;dependencyManagement&gt;<br>    &lt;dependencies&gt;<br>          &lt;dependency&gt;<br>            &lt;groupId&gt;cn.missbe.web.search&lt;/groupId&gt;<br>            &lt;artifactId&gt;resource-search&lt;/artifactId&gt;<br>            &lt;packaging&gt;pom&lt;/packaging&gt;<br>            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>          &lt;/dependency&gt; <br>    &lt;/dependencies&gt;<br>&lt;/dependencyManagement&gt;<br></code></pre></td></tr></table></figure><p>子pom配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;parent&gt;<br>      &lt;groupId&gt;父pom所在项目的groupId&lt;/groupId&gt;<br>      &lt;artifactId&gt;父pom所在项目的artifactId&lt;/artifactId&gt;<br>      &lt;version&gt;父pom所在项目的版本号&lt;/version&gt;<br>&lt;/parent&gt;<br> &lt;parent&gt;<br>      &lt;artifactId&gt;resource-search&lt;/artifactId&gt;<br>      &lt;groupId&gt;cn.missbe.web.search&lt;/groupId&gt;<br>      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>&lt;/parent&gt;<br></code></pre></td></tr></table></figure><h2 id="使用Maven构建Web项目"><a href="#使用Maven构建Web项目" class="headerlink" title="使用Maven构建Web项目"></a>使用Maven构建Web项目</h2><h3 id="1-New-Maven项目：选择WebApp"><a href="#1-New-Maven项目：选择WebApp" class="headerlink" title="1.New Maven项目：选择WebApp"></a>1.New Maven项目：选择WebApp</h3><h3 id="2-若使用JSP，需添加Servlet依赖"><a href="#2-若使用JSP，需添加Servlet依赖" class="headerlink" title="2.若使用JSP，需添加Servlet依赖"></a>2.若使用JSP，需添加Servlet依赖</h3><p>注：Servlet依赖只在编译和测试时使用！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;dependency&gt;<br>    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;<br>    &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;<br>    &lt;version&gt;3.0.1&lt;/version&gt;<br>    &lt;!-- 只在编译和测试时运行 --&gt;<br>    &lt;scope&gt;provided&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>1.在Bulid Path中设置resource输出目录<br>2.勾选：Dynamic Web Module<br>3.删掉测试目录<br>4.在pom中加入jetty的插件，并设置JDK版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;plugins&gt; <br>  &lt;plugin&gt; <br>    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  <br>    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;  <br>    &lt;configuration&gt; <br>      &lt;<span class="hljs-built_in">source</span>&gt;1.8&lt;/source&gt;  <br>      &lt;target&gt;1.8&lt;/target&gt; <br>    &lt;/configuration&gt; <br>  &lt;/plugin&gt;  <br>  &lt;plugin&gt; <br>    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;  <br>    &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;  <br>    &lt;version&gt;9.3.10.v20160621&lt;/version&gt;  <br>    &lt;executions&gt; <br>      &lt;execution&gt; <br>        &lt;phase&gt;package&lt;/phase&gt; <br>      &lt;/execution&gt; <br>    &lt;/executions&gt; <br>  &lt;/plugin&gt; <br>&lt;/plugins&gt;<br></code></pre></td></tr></table></figure><p>运行项目：</p><p>输入：jetty:run</p><p>访问127.0.0.1:8080</p><p>若出现如下界面，表示成功！</p><h2 id="pom-xml详解"><a href="#pom-xml详解" class="headerlink" title="pom.xml详解"></a>pom.xml详解</h2><p>pom.xml是Maven的核心，你的项目需要什么Jar包就在pom.xml里面配置。当编译项目时Maven读取该文件，并从仓库中下载相应的Jar包。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;<br> <br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;  <br>  &lt;!--父项目的坐标。如果项目中没有规定某个元素的值，<br>那么父项目中的对应值即为项目的默认值。 <br>坐标包括group ID，artifact ID和 version。--&gt;  <br>  &lt;parent&gt; <br>    &lt;!--被继承的父项目的构件标识符--&gt;  <br>    &lt;artifactId/&gt;  <br>    &lt;!--被继承的父项目的全球唯一标识符--&gt;  <br>    &lt;groupId/&gt;  <br>    &lt;!--被继承的父项目的版本--&gt;  <br>    &lt;version/&gt; <br>  &lt;/parent&gt;  <br>  &lt;!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，<br>但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，<br>确保稳定性。--&gt;  <br>  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  <br>  &lt;!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。<br>并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：<br>/com/mycompany/app--&gt;  <br>  &lt;groupId&gt;cn.missbe.web&lt;/groupId&gt;  <br>  &lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，<br>你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 <br>特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，<br>Maven为项目产生的构件包括：JARs，源码，二进制发布和WARs等。--&gt;  <br>  &lt;artifactId&gt;search-resources&lt;/artifactId&gt;  <br>  &lt;!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建<br>他们自己的构件类型，所以前面列的不是全部构件类型--&gt;  <br>  &lt;packaging&gt;war&lt;/packaging&gt;  <br>  &lt;!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号--&gt;  <br>  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;  <br>  &lt;!--项目的名称, Maven产生的文档用--&gt;  <br>  &lt;name&gt;search-resources&lt;/name&gt;  <br>  &lt;!--项目主页的URL, Maven产生的文档用--&gt;  <br>  &lt;url&gt;http://www.missbe.cn&lt;/url&gt;  <br>  &lt;!-- 项目的详细描述, Maven 产生的文档用。  当这个元素能够用HTML格式描述时<br>（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 签）， <br>不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，<br>你应该修改你自己的索引页文件，而不是调整这里的文档。--&gt;  <br>  &lt;description&gt;A maven project to study maven.&lt;/description&gt;  <br>  &lt;!--描述了这个项目构建环境中的前提条件。--&gt;  <br>  &lt;prerequisites&gt; <br>    &lt;!--构建该项目或使用该插件所需要的Maven的最低版本--&gt;  <br>    &lt;maven/&gt; <br>  &lt;/prerequisites&gt;  <br>  &lt;!--构建项目需要的信息--&gt;  <br>  &lt;build&gt; <br>    &lt;!--该元素设置了项目源码目录，当构建项目的时候，<br>构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;  <br>    &lt;sourceDirectory/&gt;  <br>    &lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：<br>绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。--&gt;  <br>    &lt;scriptSourceDirectory/&gt;  <br>    &lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，<br>构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;  <br>    &lt;testSourceDirectory/&gt;  <br>    &lt;!--被编译过的应用程序class文件存放的目录。--&gt;  <br>    &lt;outputDirectory/&gt;  <br>    &lt;!--被编译过的测试class文件存放的目录。--&gt;  <br>    &lt;testOutputDirectory/&gt;  <br>    &lt;!--使用来自该项目的一系列构建扩展--&gt;  <br>    &lt;extensions&gt; <br>      &lt;!--描述使用到的构建扩展。--&gt;  <br>      &lt;extension&gt; <br>        &lt;!--构建扩展的groupId--&gt;  <br>        &lt;groupId/&gt;  <br>        &lt;!--构建扩展的artifactId--&gt;  <br>        &lt;artifactId/&gt;  <br>        &lt;!--构建扩展的版本--&gt;  <br>        &lt;version/&gt; <br>      &lt;/extension&gt; <br>    &lt;/extensions&gt;  <br>    &lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，<br>这些资源被包含在最终的打包文件里。--&gt;  <br>    &lt;resources&gt; <br>      &lt;!--这个元素描述了项目相关或测试相关的所有资源路径--&gt;  <br>      &lt;resource&gt; <br>        &lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如<span class="hljs-variable">$&#123;project.build.outputDirectory&#125;</span>）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。<br>然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。--&gt;  <br>        &lt;targetPath/&gt;  <br>        &lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，<br>文件在filters元素里列出。--&gt;  <br>        &lt;filtering/&gt;  <br>        &lt;!--描述存放资源的目录，该路径相对POM路径--&gt;  <br>        &lt;directory/&gt;  <br>        &lt;!--包含的模式列表，例如**/*.xml.--&gt;  <br>        &lt;includes/&gt;  <br>        &lt;!--排除的模式列表，例如**/*.xml--&gt;  <br>        &lt;excludes/&gt; <br>      &lt;/resource&gt; <br>    &lt;/resources&gt;  <br>    &lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。--&gt;  <br>    &lt;testResources&gt; <br>      &lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明--&gt;  <br>      &lt;testResource&gt; <br>        &lt;targetPath/&gt;<br>        &lt;filtering/&gt;<br>        &lt;directory/&gt;<br>        &lt;includes/&gt;<br>        &lt;excludes/&gt; <br>      &lt;/testResource&gt; <br>    &lt;/testResources&gt;  <br>    &lt;!--构建产生的所有文件存放的目录--&gt;  <br>    &lt;directory/&gt;  <br>    &lt;!--产生的构件的文件名，默认值是<span class="hljs-variable">$&#123;artifactId&#125;</span>-<span class="hljs-variable">$&#123;version&#125;</span>。--&gt;  <br>    &lt;finalName/&gt;  <br>    &lt;!--当filtering开关打开时，使用到的过滤器属性文件列表--&gt;  <br>    &lt;filters/&gt;  <br>    &lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。<br>给定插件的任何本地配置都会覆盖这里的配置--&gt;  <br>    &lt;pluginManagement&gt; <br>      &lt;!--使用的插件列表 。--&gt;  <br>      &lt;plugins&gt; <br>        &lt;!--plugin元素包含描述插件所需要的信息。--&gt;  <br>        &lt;plugin&gt; <br>          &lt;!--插件在仓库里的group ID--&gt;  <br>          &lt;groupId/&gt;  <br>          &lt;!--插件在仓库里的artifact ID--&gt;  <br>          &lt;artifactId/&gt;  <br>          &lt;!--被使用的插件的版本（或版本范围）--&gt;  <br>          &lt;version/&gt;  <br>          &lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，<br>只有在真需要下载时，该元素才被设置成enabled。--&gt;  <br>          &lt;extensions/&gt;  <br>          &lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。--&gt;  <br>          &lt;executions&gt; <br>            &lt;!--execution元素包含了插件执行需要的信息--&gt;  <br>            &lt;execution&gt; <br>              &lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标--&gt;  <br>              &lt;<span class="hljs-built_in">id</span>/&gt;  <br>              &lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段--&gt;  <br>              &lt;phase/&gt;  <br>              &lt;!--配置的执行目标--&gt;  <br>              &lt;goals/&gt;  <br>              &lt;!--配置是否被传播到子POM--&gt;  <br>              &lt;inherited/&gt;  <br>              &lt;!--作为DOM对象的配置--&gt;  <br>              &lt;configuration/&gt; <br>            &lt;/execution&gt; <br>          &lt;/executions&gt;  <br>          &lt;!--项目引入插件所需要的额外依赖--&gt;  <br>          &lt;dependencies&gt; <br>            &lt;!--参见dependencies/dependency元素--&gt;  <br>            &lt;dependency&gt;......&lt;/dependency&gt; <br>          &lt;/dependencies&gt;  <br>          &lt;!--任何配置是否被传播到子项目--&gt;  <br>          &lt;inherited/&gt;  <br>          &lt;!--作为DOM对象的配置--&gt;  <br>          &lt;configuration/&gt; <br>        &lt;/plugin&gt; <br>      &lt;/plugins&gt; <br>    &lt;/pluginManagement&gt;  <br>    &lt;!--使用的插件列表--&gt;  <br>    &lt;plugins&gt; <br>      &lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;  <br>      &lt;plugin&gt; <br>        &lt;groupId/&gt;<br>        &lt;artifactId/&gt;<br>        &lt;version/&gt;<br>        &lt;extensions/&gt;  <br>        &lt;executions&gt; <br>          &lt;execution&gt; <br>            &lt;<span class="hljs-built_in">id</span>/&gt;<br>            &lt;phase/&gt;<br>            &lt;goals/&gt;<br>            &lt;inherited/&gt;<br>            &lt;configuration/&gt; <br>          &lt;/execution&gt; <br>        &lt;/executions&gt;  <br>        &lt;dependencies&gt; <br>          &lt;!--参见dependencies/dependency元素--&gt;  <br>          &lt;dependency&gt;......&lt;/dependency&gt; <br>        &lt;/dependencies&gt;  <br>        &lt;goals/&gt;<br>        &lt;inherited/&gt;<br>        &lt;configuration/&gt; <br>      &lt;/plugin&gt; <br>    &lt;/plugins&gt; <br>  &lt;/build&gt;  <br>  &lt;!--模块（有时称作子项目） 被构建成项目的一部分。<br>列出的每个模块元素是指向该模块的目录的相对路径--&gt;  <br>  &lt;modules/&gt;  <br>  &lt;!--发现依赖和扩展的远程仓库列表。--&gt;  <br>  &lt;repositories&gt; <br>    &lt;!--包含需要连接到远程仓库的信息--&gt;  <br>    &lt;repository&gt; <br>      &lt;!--如何处理远程仓库里发布版本的下载--&gt;  <br>      &lt;releases&gt; <br>        &lt;!--<span class="hljs-literal">true</span>或者<span class="hljs-literal">false</span>表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;  <br>        &lt;enabled/&gt;  <br>        &lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。--&gt;  <br>        &lt;updatePolicy/&gt;  <br>        &lt;!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。--&gt;  <br>        &lt;checksumPolicy/&gt; <br>      &lt;/releases&gt;  <br>      &lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，<br>POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 策略。<br>例如，可能有人会决定只为开发目的开启对快照版本下载的支持。<br>参见repositories/repository/releases元素 --&gt;  <br>      &lt;snapshots&gt; <br>        &lt;enabled/&gt;<br>        &lt;updatePolicy/&gt;<br>        &lt;checksumPolicy/&gt; <br>      &lt;/snapshots&gt;  <br>      &lt;!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库--&gt;  <br>      &lt;<span class="hljs-built_in">id</span>&gt;banseon-repository-proxy&lt;/id&gt;  <br>      &lt;!--远程仓库名称--&gt;  <br>      &lt;name&gt;banseon-repository-proxy&lt;/name&gt;  <br>      &lt;!--远程仓库URL，按protocol://hostname/path形式--&gt;  <br>      &lt;url&gt;http://192.168.1.169:9999/repository/&lt;/url&gt;  <br>      &lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。--&gt;  <br>      &lt;layout&gt;default&lt;/layout&gt; <br>    &lt;/repository&gt; <br>  &lt;/repositories&gt;  <br>  &lt;!--发现插件的远程仓库列表，这些插件用于构建和报表--&gt;  <br>  &lt;pluginRepositories&gt; <br>    &lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素--&gt;  <br>    &lt;pluginRepository&gt;......&lt;/pluginRepository&gt; <br>  &lt;/pluginRepositories&gt;  <br>  &lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。<br>它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。--&gt;  <br>  &lt;dependencies&gt; <br>    &lt;dependency&gt; <br>      &lt;!--依赖的group ID--&gt;  <br>      &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;  <br>      &lt;!--依赖的artifact ID--&gt;  <br>      &lt;artifactId&gt;maven-artifact&lt;/artifactId&gt;  <br>      &lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。--&gt;  <br>      &lt;version&gt;3.8.1&lt;/version&gt;  <br>      &lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外<br>。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应，<br> 尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。<br>如果设置extensions为 <span class="hljs-literal">true</span>，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。--&gt;  <br>      &lt;<span class="hljs-built_in">type</span>&gt;jar&lt;/type&gt;  <br>      &lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。<br>分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 JAR，<br>一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。--&gt;  <br>      &lt;classifier/&gt;  <br>      &lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。    <br>                - compile ：默认范围，用于编译      <br>                - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath      <br>                - runtime: 在执行时需要使用      <br>                - <span class="hljs-built_in">test</span>:    用于<span class="hljs-built_in">test</span>任务时使用      <br>                - system: 需要外在提供相应的元素。通过systemPath来取得      <br>                - systemPath: 仅用于范围为system。提供相应的路径      <br>                - optional:   当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用--&gt;  <br>      &lt;scope&gt;<span class="hljs-built_in">test</span>&lt;/scope&gt;  <br>      &lt;!--仅供system范围使用。注意，不鼓励使用这个元素，<br>并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。<br>需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如<span class="hljs-variable">$&#123;java.home&#125;</span>。--&gt;  <br>      &lt;systemPath/&gt;  <br>      &lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。<br>即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题--&gt;  <br>      &lt;exclusions&gt; <br>        &lt;exclusion&gt; <br>          &lt;artifactId&gt;spring-core&lt;/artifactId&gt;  <br>          &lt;groupId&gt;org.springframework&lt;/groupId&gt; <br>        &lt;/exclusion&gt; <br>      &lt;/exclusions&gt;  <br>      &lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。--&gt;  <br>      &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt; <br>    &lt;/dependency&gt; <br>  &lt;/dependencies&gt;  <br>  &lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,<br>而是当子项目声明一个依赖（必须描述group ID和 artifact ID信息），<br>如果group ID和artifact ID以外的一些信息没有描述，<br>则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。--&gt;  <br>  &lt;dependencyManagement&gt; <br>    &lt;dependencies&gt; <br>      &lt;!--参见dependencies/dependency元素--&gt;  <br>      &lt;dependency&gt;......&lt;/dependency&gt; <br>    &lt;/dependencies&gt; <br>  &lt;/dependencyManagement&gt;  <br>  &lt;!--项目分发信息，在执行mvn deploy后表示要发布的位置。<br>有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。--&gt;  <br>  &lt;distributionManagement&gt; <br>    &lt;!--部署项目产生的构件到远程仓库需要的信息--&gt;  <br>    &lt;repository&gt; <br>      &lt;!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？<br>还是每次都使用相同的版本号？参见repositories/repository元素--&gt;  <br>      &lt;uniqueVersion/&gt;  <br>      &lt;<span class="hljs-built_in">id</span>&gt;banseon-maven2&lt;/id&gt;  <br>      &lt;name&gt;banseon maven2&lt;/name&gt;  <br>      &lt;url&gt;file://<span class="hljs-variable">$&#123;basedir&#125;</span>/target/deploy&lt;/url&gt;  <br>      &lt;layout/&gt; <br>    &lt;/repository&gt;  <br>    &lt;!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，<br>参见distributionManagement/repository元素--&gt;  <br>    &lt;snapshotRepository&gt; <br>      &lt;uniqueVersion/&gt;  <br>      &lt;<span class="hljs-built_in">id</span>&gt;banseon-maven2&lt;/id&gt;  <br>      &lt;name&gt;Banseon-maven2 Snapshot Repository&lt;/name&gt;  <br>      &lt;url&gt;scp://svn.baidu.com/banseon:/usr/local/maven-snapshot&lt;/url&gt;  <br>      &lt;layout/&gt; <br>    &lt;/snapshotRepository&gt;  <br>    &lt;!--部署项目的网站需要的信息--&gt;  <br>    &lt;site&gt; <br>      &lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置--&gt;  <br>      &lt;<span class="hljs-built_in">id</span>&gt;banseon-site&lt;/id&gt;  <br>      &lt;!--部署位置的名称--&gt;  <br>      &lt;name&gt;business api website&lt;/name&gt;  <br>      &lt;!--部署位置的URL，按protocol://hostname/path形式--&gt;  <br>      &lt;url&gt;scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web&lt;/url&gt; <br>    &lt;/site&gt;  <br>    &lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页。<br>使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。--&gt;  <br>    &lt;downloadUrl/&gt;  <br>    &lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，<br>因为这是工具自动更新的。有效的值有：none（默认），<br>converted（仓库管理员从 Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。--&gt;  <br>    &lt;status/&gt; <br>  &lt;/distributionManagement&gt;  <br>  &lt;!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。--&gt;  <br>  &lt;properties/&gt; <br>&lt;/project&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven安装部署</title>
    <link href="/2023/03/29/devops/maven/maven%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/03/29/devops/maven/maven%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="maven安装部署"><a href="#maven安装部署" class="headerlink" title="maven安装部署"></a>maven安装部署</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://www.cnblogs.com/leoshi/p/16493867.html<br>https://blog.csdn.net/m0_69287945/article/details/124560052<br></code></pre></td></tr></table></figure><p>Maven是一个JAVA源码的编译打包工具，JAVA开发人员编写好源代码以后，要在JVM虚拟机上运行必须先编译和打包，然后再把打包好的WAR包或者JAR包放到Tomcat上运行，那么从源代码到WAR或JAR包的过程就是Maven做的事。</p><p>什么是Maven？<br>如今我们构建一个项目需要用到很多第三方的类库，如写一个使用Spring的Web项目就需要引入大量的jar包。一个项目Jar包的数量之多往往让我们瞠目结舌，并且Jar包之间的关系错综复杂，一个Jar包往往又会引用其他Jar包，缺少任何一个Jar包都会导致项目编译失败。</p><p>以往开发项目时，程序员往往需要花较多的精力在引用Jar包搭建项目环境上，而这一项工作尤为艰难，少一个Jar包、多一个Jar包往往会报一些让人摸不着头脑的异常。</p><p>而Maven就是一款帮助程序员构建项目的工具，我们只需要告诉Maven需要哪些Jar 包，它会帮助我们下载所有的Jar，极大提升开发效率。</p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>maven需要依赖java环境，系统必须要安装JAVA</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="1-下载maven"><a href="#1-下载maven" class="headerlink" title="1. 下载maven"></a>1. 下载maven</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -O https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.zip<br></code></pre></td></tr></table></figure><h3 id="2-解压压缩包"><a href="#2-解压压缩包" class="headerlink" title="2. 解压压缩包"></a>2. 解压压缩包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">unzip apache-maven-3.8.6-bin.zip<br></code></pre></td></tr></table></figure><h3 id="3-移动目录"><a href="#3-移动目录" class="headerlink" title="3. 移动目录"></a>3. 移动目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> apache-maven-3.8.6 /usr/local/bin/<br></code></pre></td></tr></table></figure><h3 id="4-创建软链接"><a href="#4-创建软链接" class="headerlink" title="4. 创建软链接"></a>4. 创建软链接</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ln</span> -sv /usr/local/bin/apache-maven-3.8.6/bin/mvn /bin/<br></code></pre></td></tr></table></figure><h3 id="5-创建环境变量"><a href="#5-创建环境变量" class="headerlink" title="5. 创建环境变量"></a>5. 创建环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/profile &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span><br><span class="hljs-comment"># Maven 3.6.3</span><br><span class="hljs-built_in">export</span> M2_HOME=/usr/local/bin/apache-maven-3.8.6<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$M2_HOME</span>/bin<br>EOF<br></code></pre></td></tr></table></figure><h3 id="6-配置生效"><a href="#6-配置生效" class="headerlink" title="6. 配置生效"></a>6. 配置生效</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="7-验证maven"><a href="#7-验证maven" class="headerlink" title="7. 验证maven"></a>7. 验证maven</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@localhost app]<span class="hljs-comment"># mvn -v</span><br>Apache Maven 3.8.6 (84538c9988a25aec085021c365c560670ad80f63)<br>Maven home: /usr/local/bin/apache-maven-3.8.6<br>Java version: 1.8.0_202, vendor: Oracle Corporation, runtime: /usr/java/jdk1.8.0_202-amd64/jre<br>Default locale: en_US, platform encoding: UTF-8<br>OS name: <span class="hljs-string">&quot;linux&quot;</span>, version: <span class="hljs-string">&quot;3.10.0-693.el7.x86_64&quot;</span>, <span class="hljs-built_in">arch</span>: <span class="hljs-string">&quot;amd64&quot;</span>, family: <span class="hljs-string">&quot;unix&quot;</span><br></code></pre></td></tr></table></figure><h3 id="8-修改maven源"><a href="#8-修改maven源" class="headerlink" title="8. 修改maven源"></a>8. 修改maven源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app/maven/repo<br><br>vim /usr/local/bin/apache-maven-3.8.6/conf/settings.xml<br><span class="hljs-comment">#插件本地缓存路径</span><br>&lt;localRepository&gt;/app/maven/repo&lt;/localRepository&gt;<br><span class="hljs-comment">#...</span><br>&lt;mirrors&gt;<br>    &lt;mirror&gt;<br>      &lt;<span class="hljs-built_in">id</span>&gt;alimaven&lt;/id&gt;<br>      &lt;name&gt;aliyun maven&lt;/name&gt;<br>      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;<br>      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        <br>    &lt;/mirror&gt;<br>&lt;/mirrors&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用k8s搭建jenkins</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E6%90%AD%E5%BB%BA/%E4%BD%BF%E7%94%A8k8s%E6%90%AD%E5%BB%BAjenkins/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E6%90%AD%E5%BB%BA/%E4%BD%BF%E7%94%A8k8s%E6%90%AD%E5%BB%BAjenkins/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用k8s搭建jenkins"><a href="#使用k8s搭建jenkins" class="headerlink" title="使用k8s搭建jenkins"></a>使用k8s搭建jenkins</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">#官方文档：https://www.jenkins.io/doc/book/installing/kubernetes/<br>#参考文档：https://www.jianshu.com/p/2c20efbd5855<br></code></pre></td></tr></table></figure><h2 id="一、准备环境："><a href="#一、准备环境：" class="headerlink" title="一、准备环境："></a>一、准备环境：</h2><p>搭建k8s已略过，防火墙已经关闭</p><table><thead><tr><th>IP地址</th><th>备注</th></tr></thead><tbody><tr><td>192.168.5.111</td><td>master节点 #安装nfs，创建持久卷</td></tr><tr><td>192.168.5.112</td><td>node节点</td></tr></tbody></table><h2 id="二、创建持久卷："><a href="#二、创建持久卷：" class="headerlink" title="二、创建持久卷："></a>二、创建持久卷：</h2><p>安装Jenkins时需要把Jenkins的配置目录挂载出来，多节点 Kubernetes 集群中，需要一些像 NFS 这样的解决方案来使挂载目录在整个集群中可用。防止我们在重新启动k8s时丢失 Jenkins 控制器的整个配置和工作。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#所有节点安装nfs：</span><br>yum -y install rpcbind nfs-utils<br><br><span class="hljs-comment">#安装nfs节点上操作：</span><br><span class="hljs-comment">#创建共享目录，并设置权限。</span><br><span class="hljs-built_in">mkdir</span> -p /data/k8s/<br><span class="hljs-built_in">chmod</span> 777 -R /data/k8s/<br><br><span class="hljs-comment">#配置NFS </span><br><span class="hljs-comment">#nfs的配置文件是 /etc/exports ，在配置文件中加入一行：</span><br>/data/k8s *(rw,<span class="hljs-built_in">sync</span>,no_root_squash,no_subtree_check)<br><br><span class="hljs-comment">#各节点启动服务并加入开机启动</span><br>systemctl start rpcbind<br>systemctl start nfs<br>systemctl <span class="hljs-built_in">enable</span> rpcbind <br>systemctl <span class="hljs-built_in">enable</span> nfs<br><br><span class="hljs-comment">#使用 showmount 命令来查看是否可连接：</span><br>showmount -e localhost<br></code></pre></td></tr></table></figure><h2 id="三、部署Jenkins（通过yaml文件方式）"><a href="#三、部署Jenkins（通过yaml文件方式）" class="headerlink" title="三、部署Jenkins（通过yaml文件方式）"></a>三、部署Jenkins（通过yaml文件方式）</h2><h3 id="1-创建命名空间"><a href="#1-创建命名空间" class="headerlink" title="1.创建命名空间"></a>1.创建命名空间</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">#不同的命名空间提供了额外的隔离层和对持续集成环境的更多控制。通过在终端上键入以下命令，为 Jenkins 部署创建命名空间：<br>kubectl create <span class="hljs-keyword">namespace</span> <span class="hljs-symbol">jenkins</span><br><span class="hljs-symbol">kubectl</span> <span class="hljs-symbol">get</span> <span class="hljs-symbol">namespaces</span><br></code></pre></td></tr></table></figure><h3 id="2-创建持久卷"><a href="#2-创建持久卷" class="headerlink" title="2.创建持久卷"></a>2.创建持久卷</h3><p>创建一个由物理存储支持的PV，PV相对集群而言，不与任何pod相关联。创建的PVC会自动绑定到合适的PV。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> jenkins-volume.yaml<br><br>apiVersion: v1<br>kind: PersistentVolume<br>metadata:<br>  name: jenkins-pv<br>spec:<br>  storageClassName: nfs-jenkins-pv<br>  accessModes:<br>  - ReadWriteMany<br>  capacity:<br>    storage: 50Gi<br>  persistentVolumeReclaimPolicy: Retain<br>  nfs:<br>    server: 192.168.5.111<br>    path: /data/k8s/<br><br>---<br>kind: PersistentVolumeClaim<br>apiVersion: v1<br>metadata:<br>  name: jenkins-pvc<br>  namespace: jenkins<br>spec:<br>  storageClassName: nfs-jenkins-pv<br>  accessModes:<br>    - ReadWriteMany<br>  resources:<br>    requests:<br>      storage: 50Gi<br><br><span class="hljs-comment">#部署volume</span><br>kubectl apply -f jenkins-volume.yaml<br></code></pre></td></tr></table></figure><h3 id="3-创建service-account"><a href="#3-创建service-account" class="headerlink" title="3.创建service account"></a>3.创建service account</h3><p>创建pod时，如果不指定服务账户，则会自动为其分配一个名为default的同一namespace中的服务账户。但是通常应用程序时存在权限不足的情况，所以需要我们自己创建一个服务账户。</p><p>打开网址：<a href="https://raw.githubusercontent.com/jenkins-infra/jenkins.io/master/content/doc/tutorials/kubernetes/installing-jenkins-on-kubernetes/jenkins-sa.yaml">https://raw.githubusercontent.com/jenkins-infra/jenkins.io/master/content/doc/tutorials/kubernetes/installing-jenkins-on-kubernetes/jenkins-sa.yaml</a></p><p>将内容粘贴到为 jenkins-sa.yaml，以下为该网址的内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> jenkins-sa.yaml<br>---<br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: jenkins<br>  namespace: jenkins<br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRole<br>metadata:<br>  annotations:<br>    rbac.authorization.kubernetes.io/autoupdate: <span class="hljs-string">&quot;true&quot;</span><br>  labels:<br>    kubernetes.io/bootstrapping: rbac-defaults<br>  name: jenkins<br>rules:<br>- apiGroups:<br>  - <span class="hljs-string">&#x27;*&#x27;</span><br>  resources:<br>  - statefulsets<br>  - services<br>  - replicationcontrollers<br>  - replicasets<br>  - podtemplates<br>  - podsecuritypolicies<br>  - pods<br>  - pods/log<br>  - pods/exec<br>  - podpreset<br>  - poddisruptionbudget<br>  - persistentvolumes<br>  - persistentvolumeclaims<br>  - <span class="hljs-built_in">jobs</span><br>  - endpoints<br>  - deployments<br>  - deployments/scale<br>  - daemonsets<br>  - cronjobs<br>  - configmaps<br>  - namespaces<br>  - events<br>  - secrets<br>  verbs:<br>  - create<br>  - get<br>  - watch<br>  - delete<br>  - list<br>  - patch<br>  - update<br>- apiGroups:<br>  - <span class="hljs-string">&quot;&quot;</span><br>  resources:<br>  - nodes<br>  verbs:<br>  - get<br>  - list<br>  - watch<br>  - update<br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRoleBinding<br>metadata:<br>  annotations:<br>    rbac.authorization.kubernetes.io/autoupdate: <span class="hljs-string">&quot;true&quot;</span><br>  labels:<br>    kubernetes.io/bootstrapping: rbac-defaults<br>  name: jenkins<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: jenkins<br>subjects:<br>- apiGroup: rbac.authorization.k8s.io<br>  kind: Group<br>  name: system:serviceaccounts:jenkins<br><br><span class="hljs-comment">#部署jenkins-sa.yaml</span><br>kubectl apply -f jenkins-sa.yaml<br></code></pre></td></tr></table></figure><h3 id="4-安装Jenkins"><a href="#4-安装Jenkins" class="headerlink" title="4.安装Jenkins"></a>4.安装Jenkins</h3><p>创建jenkins-deployment-service.yaml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> jenkins-deployment-service.yaml<br><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: jenkins<br>  namespace: jenkins<br>  labels:<br>    release: <span class="hljs-string">&quot;jenkins&quot;</span><br>    component: <span class="hljs-string">&quot;jenkins-master&quot;</span><br>spec:<br>  replicas: 1<br>  selector:<br>    matchLabels:<br>      app: jenkins<br>  template:<br>    metadata:<br>      labels:<br>        app: jenkins<br>    spec:<br>      securityContext:<br>        runAsUser: 0<br>      serviceAccountName: jenkins  <span class="hljs-comment">#指定我们前面创建的服务账号</span><br>      containers:<br>      - name: jenkins<br>        image: jenkins/jenkins:lts<br>        ports:<br>        - containerPort: 8080<br>        - containerPort: 50000<br>        volumeMounts:<br>        - name: jenkins-home<br>          mountPath: /var/jenkins_home<br>      volumes:<br>      - name: jenkins-home<br>        persistentVolumeClaim:<br>          claimName: jenkins-pvc  <span class="hljs-comment">#指定前面创建的PVC</span><br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: jenkins<br>  namespace: jenkins<br>spec:<br>  <span class="hljs-built_in">type</span>: NodePort<br>  ports:<br>  - name: http<br>    port: 8080<br>    targetPort: 8080<br>    nodePort: 31400  <span class="hljs-comment">#将31400定义为8080的映射端口</span><br>  - name: agent<br>    port: 50000<br>    targetPort: 50000<br>    nodePort: 31401<br>  selector:<br>    app: jenkins<br></code></pre></td></tr></table></figure><h3 id="5-登录jenkins"><a href="#5-登录jenkins" class="headerlink" title="5.登录jenkins"></a>5.登录jenkins</h3><p>打开浏览器访问192.168.5.111:31400&#x2F;</p><h4 id="5-1-获取初始化的密码"><a href="#5-1-获取初始化的密码" class="headerlink" title="5.1 获取初始化的密码"></a>5.1 获取初始化的密码</h4><p>查看日志内信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl -n jenkins logs jenkins-xxx <br></code></pre></td></tr></table></figure><p>找到信息：Please use the following password<br><strong>复制密码到登录页面即可</strong></p>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建Jenkins</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAJenkins/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAJenkins/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="搭建Jenkins"><a href="#搭建Jenkins" class="headerlink" title="搭建Jenkins"></a>搭建Jenkins</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">使用请参考学习文档：https://www.kancloud.cn/louis1986/jenkins/492045<br></code></pre></td></tr></table></figure><h2 id="一、使用二进制rpm包方式安装"><a href="#一、使用二进制rpm包方式安装" class="headerlink" title="一、使用二进制rpm包方式安装"></a>一、使用二进制rpm包方式安装</h2><p>操作系统：linux</p><h3 id="1、安装jdk"><a href="#1、安装jdk" class="headerlink" title="1、安装jdk"></a>1、安装jdk</h3><p><strong>由于Jenkins是基于Java开发的，安装前确认操作系统已经安装了jdk</strong></p><h4 id="1-1、yum-直接安装jdk"><a href="#1-1、yum-直接安装jdk" class="headerlink" title="1.1、yum 直接安装jdk"></a>1.1、yum 直接安装jdk</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install fontconfig java-11-openjdk -y<br></code></pre></td></tr></table></figure><h4 id="1-2、二进制安装jdk（无网的情况下）"><a href="#1-2、二进制安装jdk（无网的情况下）" class="headerlink" title="1.2、二进制安装jdk（无网的情况下）"></a>1.2、二进制安装jdk（无网的情况下）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#https://www.oracle.com/java/technologies/downloads/#java8</span><br><span class="hljs-comment">#安装jdk：</span><br>wget --no-check-certificate --no-cookies --header <span class="hljs-string">&quot;Cookie: oraclelicense=accept-securebackup-cookie&quot;</span> http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz<br><br><span class="hljs-comment">#解压到/usr/local目录下</span><br>tar zxvf jdk-7u51-linux-x64.tar.gz -C /usr/local/<br><br><span class="hljs-built_in">ls</span> /usr/local  <span class="hljs-comment">#查看目录下的jdk文件是多少，注意：需要确保与下面的所用到的路径需一致！！！</span><br><br><br><span class="hljs-comment"># 配置环境变量的配置文件 ##vim /etc/profile</span><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/profile &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">JAVA_HOME=/usr/local/jdk1.8.0 #文件名（记删除注释）</span><br><span class="hljs-string">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="hljs-string">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="hljs-string">export JAVA_HOME PATH CLASSPATH</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment">#使设置生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br><span class="hljs-comment">#查看安装版本</span><br>java  -version<br></code></pre></td></tr></table></figure><h3 id="2、如果你的系统没有自带git，那么也需要安装一个"><a href="#2、如果你的系统没有自带git，那么也需要安装一个" class="headerlink" title="2、如果你的系统没有自带git，那么也需要安装一个"></a>2、如果你的系统没有自带git，那么也需要安装一个</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install git -y<br></code></pre></td></tr></table></figure><h3 id="3、rpm包离线安装"><a href="#3、rpm包离线安装" class="headerlink" title="3、rpm包离线安装"></a>3、rpm包离线安装</h3><p>清华源rpm包下载：<code>https://mirrors.tuna.tsinghua.edu.cn/jenkins/redhat/</code></p><h4 id="3-1、将rpm包上传至centos中"><a href="#3-1、将rpm包上传至centos中" class="headerlink" title="3.1、将rpm包上传至centos中:"></a>3.1、将rpm包上传至centos中:</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/redhat/jenkins-2.380-1.1.noarch.rpm --no-check-certificate</span><br>rpm -ivh jenkins-2.380-1.1.noarch.rpm<br><span class="hljs-comment">#备注：有些版本安装时报错，需要安装依赖。yum install -y daemonize</span><br></code></pre></td></tr></table></figure><h4 id="3-2、修改jenkins配置"><a href="#3-2、修改jenkins配置" class="headerlink" title="3.2、修改jenkins配置:"></a>3.2、修改jenkins配置:</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/sysconfig/jenkins<br><br><span class="hljs-comment">#监听端口</span><br>JENKINS_PORT=<span class="hljs-string">&quot;8080&quot;</span><br><span class="hljs-comment">#为了不因为权限出现各种问题，这里直接使用root、修改用户为root</span><br><span class="hljs-comment">#修改配置</span><br>JENKINS_USER=<span class="hljs-string">&quot;root&quot;</span><br><br><span class="hljs-comment">#或者使用替换的方式进行配置：</span><br>sed -i <span class="hljs-string">&#x27;s#JENKINS_PORT.*#JENKINS_PORT=&quot;8080&quot;#g&#x27;</span> /etc/sysconfig/jenkins<br>sed -i <span class="hljs-string">&#x27;s#JENKINS_USER.*#JENKINS_USER=&quot;root&quot;#g&#x27;</span> /etc/sysconfig/jenkins<br></code></pre></td></tr></table></figure><h4 id="3-3、配置jdk路径"><a href="#3-3、配置jdk路径" class="headerlink" title="3.3、配置jdk路径"></a>3.3、配置jdk路径</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>vim /etc/init.d/jenkins<br><span class="hljs-comment">#在 candidates 后追加jdk 安装路径</span><br>/usr/local/jdk1.8.0/bin/java <span class="hljs-comment">#（一直到jdk安装路径下的bin/java  可以通过whereis java查看）</span><br><br>systemctl daemon-reload <br>systemctl start jenkins<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#在浏览器访问ip:port 即可（在此之前需开放端口，如果是学习之用可关闭防火墙），如果此时提示 Please wait while Jenkins is getting ready to work，长时间没反应则\</span><br>vim /var/lib/jenkins/hudson.model.UpdateCenter.xml<br><span class="hljs-comment">#将 https://updates.jenkins.io/update-center.json&quot; 修改为 &quot;http://mirror.xmission.com/jenkins/updates/update-center.json&quot;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#并重启服务</span><br>systemctl daemon-reload <br>systemctl restart jenkins<br></code></pre></td></tr></table></figure><h3 id="4、登录Jenkins"><a href="#4、登录Jenkins" class="headerlink" title="4、登录Jenkins"></a>4、登录Jenkins</h3><p>ip+设置的端口    #根据提示获取密码登录。</p><p>我这边设置的账号为：root 密码：12345678</p><p><strong>设置中文汉化：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">下载并启用中文汉化版插件：localization-zh-cn<br><span class="hljs-comment">#在jenkins的插件管理页面，在可用插件搜索：localization 。就可以安装这个插件，然后重启jenkins服务</span><br></code></pre></td></tr></table></figure><h3 id="5、rpm安装方式卸载jenkins方法："><a href="#5、rpm安装方式卸载jenkins方法：" class="headerlink" title="5、rpm安装方式卸载jenkins方法："></a>5、rpm安装方式卸载jenkins方法：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">rpm -e --nodeps jenkins     <span class="hljs-comment">#卸载</span><br>rpm -ql jenkins     <span class="hljs-comment">#检查是否卸载成功 </span><br>find / -iname jenkins | xargs -n 1000 <span class="hljs-built_in">rm</span> -rf  <span class="hljs-comment">#彻底删除残留文件</span><br></code></pre></td></tr></table></figure><h2 id="二、使用docker方式安装jenkins"><a href="#二、使用docker方式安装jenkins" class="headerlink" title="二、使用docker方式安装jenkins"></a>二、使用docker方式安装jenkins</h2><p>操作系统：linux</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">官方文档：https:<span class="hljs-regexp">//</span>www.jenkins.io<span class="hljs-regexp">/zh/</span>doc<span class="hljs-regexp">/book/i</span>nstalling/<br></code></pre></td></tr></table></figure><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><p>docker环境<br>JDK环境</p><h3 id="1、docker拉取镜像"><a href="#1、docker拉取镜像" class="headerlink" title="1、docker拉取镜像"></a>1、docker拉取镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull jenkinsci/blueocean<br><span class="hljs-comment">#docker pull jenkinszh/jenkins-zh</span><br></code></pre></td></tr></table></figure><h3 id="2、创建Jenkins挂载目录并授权权限"><a href="#2、创建Jenkins挂载目录并授权权限" class="headerlink" title="2、创建Jenkins挂载目录并授权权限"></a>2、创建Jenkins挂载目录并授权权限</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app/jenkins<br><span class="hljs-built_in">chmod</span> 777 /app/jenkins<br></code></pre></td></tr></table></figure><h3 id="3、创建并启动Jenkins容器"><a href="#3、创建并启动Jenkins容器" class="headerlink" title="3、创建并启动Jenkins容器"></a>3、创建并启动Jenkins容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d \<br>-p 8080:8080 \<br>-p 50000:50000 \<br>-v /app/jenkins:/var/jenkins_home \<br><span class="hljs-comment">#-v  /root/apache-maven-3.6.3:/usr/local/maven \</span><br>-v /etc/localtime:/etc/localtime \<br>--name jenkins \<br>jenkinsci/blueocean<br><br><span class="hljs-comment">#命令详细解释</span><br><span class="hljs-comment">#-v /var/jenkins_mount:/var/jenkins_mount 意义： /var/jenkins_home目录为容器jenkins工作目录，</span><br><span class="hljs-comment">#-v /etc/localtime:/etc/localtime 意义：让容器使用和服务器同样的时间设置。</span><br><span class="hljs-comment">#-v /root/apache-maven-3.6.3:/usr/local/maven 意义：挂载本地maven，前面是服务器上的，后面是挂载到容器上的目录</span><br></code></pre></td></tr></table></figure><h3 id="4、配置镜像加速"><a href="#4、配置镜像加速" class="headerlink" title="4、配置镜像加速"></a>4、配置镜像加速</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/app/</span>jenkins/hudson.model.UpdateCenter.xml<br><span class="hljs-comment">#将 url 修改为清华大学官方镜像：</span><br>https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/jenkins/u</span>pdates/update-center.json<br><br></code></pre></td></tr></table></figure><h3 id="5、登录Jenkins"><a href="#5、登录Jenkins" class="headerlink" title="5、登录Jenkins"></a>5、登录Jenkins</h3><p>访问:ip+设置的端口，提示将本机的密码复制并粘贴</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#因为我们的路径是已经映射出来了，所以直接可以通过cat命令查看宿主机的</span><br><span class="hljs-built_in">cat</span> /app/jenkins/secrets/initialAdminPassword<br></code></pre></td></tr></table></figure><h2 id="三、jenkins安装插件提速："><a href="#三、jenkins安装插件提速：" class="headerlink" title="三、jenkins安装插件提速："></a>三、jenkins安装插件提速：</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">可参考文档：https://www.cnblogs.com/hellxz/p/jenkins_install_plugins_faster.html<br></code></pre></td></tr></table></figure><p>将Jenkins使用的国外地址下载插件解析到清华大学镜像站的插件地址:<br>本来的访问地址为：<a href="https://updates.jenkins.org/download/plugins/">https://updates.jenkins.org/download/plugins/</a>……<br>现在替换的访问地址为：<a href="http://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/">http://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/</a>……</p><h3 id="1-先在该机器上安装nginx"><a href="#1-先在该机器上安装nginx" class="headerlink" title="1.先在该机器上安装nginx"></a>1.先在该机器上安装nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm<br><span class="hljs-comment">#通过yum search nginx看看是否已经添加源成功。如果成功则执行下列命令安装Nginx。</span><br>sudo yum install -y nginx<br><span class="hljs-comment">#启动Nginx并设置开机自动运行</span><br>sudo systemctl start nginx.service<br>sudo systemctl <span class="hljs-built_in">enable</span> nginx.service<br></code></pre></td></tr></table></figure><h3 id="2-将该国外地址的域名解析到本机："><a href="#2-将该国外地址的域名解析到本机：" class="headerlink" title="2.将该国外地址的域名解析到本机："></a>2.将该国外地址的域名解析到本机：</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">cat &gt;&gt; /etc/hosts &lt;&lt;EOF<br><span class="hljs-number">127.0.0.1</span> updates.jenkins.org<br>EOF<br></code></pre></td></tr></table></figure><h3 id="3-修改nginx的conf文件"><a href="#3-修改nginx的conf文件" class="headerlink" title="3.修改nginx的conf文件"></a>3.修改nginx的conf文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/nginx/conf.d/default.conf<br><span class="hljs-comment">#...</span><br> server_name  updates.jenkins.org;<br><span class="hljs-comment">#...</span><br>    location /download/plugins &#123;<br>        proxy_set_header Host mirrors.tuna.tsinghua.edu.cn; <br>        proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;   <span class="hljs-comment">#$remote_addr变量的值是客户端的IP</span><br>        proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>; <span class="hljs-comment">#X-Forwarded-For头域是为了说明请求经过了哪些服务器。</span><br>        rewrite /download/plugins(.*) /jenkins/plugins/<span class="hljs-variable">$1</span> <span class="hljs-built_in">break</span>;  <span class="hljs-comment">#重写访问的地址</span><br>        proxy_pass http://mirrors.tuna.tsinghua.edu.cn;  <span class="hljs-comment">#将请求转发到清华大学镜像站地址</span><br>    &#125;<br><span class="hljs-comment">#...</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用jenkins持续集成；编译，打包部署微服务</title>
    <link href="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用jenkins持续集成；编译，打包部署微服务"><a href="#使用jenkins持续集成；编译，打包部署微服务" class="headerlink" title="使用jenkins持续集成；编译，打包部署微服务"></a>使用jenkins持续集成；编译，打包部署微服务</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><h3 id="部署服务机器："><a href="#部署服务机器：" class="headerlink" title="部署服务机器："></a>部署服务机器：</h3><table><thead><tr><th align="center">部署平台</th><th align="center">IP地址：端口</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">gitlab平台</td><td align="center">192.168.5.111:8188</td><td align="center">代码仓库地址</td></tr><tr><td align="center">harbor平台</td><td align="center">192.168.5.133:8080</td><td align="center">用来存放打包的镜像</td></tr><tr><td align="center">jenkins平台</td><td align="center">192.168.94.154:8080</td><td align="center">jenkins流水线</td></tr><tr><td align="center">maven</td><td align="center">192.168.94.154</td><td align="center">编译jar包</td></tr><tr><td align="center">sonarqube</td><td align="center">192.168.94.154:9000</td><td align="center">代码质量扫描</td></tr><tr><td align="center">postgresql</td><td align="center">192.168.94.155:5432</td><td align="center">数据库，使用docker运行，具体安装查看安装手册</td></tr><tr><td align="center">sonar-scanner</td><td align="center">192.168.94.154</td><td align="center">路径为&#x2F;opt&#x2F;sonar-scanner&#x2F;bin&#x2F;sonar-scanner</td></tr></tbody></table><h3 id="相关服务截图："><a href="#相关服务截图：" class="headerlink" title="相关服务截图："></a>相关服务截图：</h3><h4 id="1、使用gitlab的项目库：192-168-5-111-8188-x2F-root-x2F-java-fuwu"><a href="#1、使用gitlab的项目库：192-168-5-111-8188-x2F-root-x2F-java-fuwu" class="headerlink" title="1、使用gitlab的项目库：192.168.5.111:8188&#x2F;root&#x2F;java-fuwu"></a>1、使用gitlab的项目库：192.168.5.111:8188&#x2F;root&#x2F;java-fuwu</h4><p>该demo包从github上拉取并上传到本地gitlab上：<a href="https://github.com/pipiguai0123/simple-java-maven-app">https://github.com/pipiguai0123/simple-java-maven-app</a></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220905150648167.png" alt="image-20220905150648167"></p><h4 id="2、使用的harbor仓库地址：192-168-5-133-8080-x2F-harbor-x2F-projects"><a href="#2、使用的harbor仓库地址：192-168-5-133-8080-x2F-harbor-x2F-projects" class="headerlink" title="2、使用的harbor仓库地址：192.168.5.133:8080&#x2F;harbor&#x2F;projects"></a>2、使用的harbor仓库地址：192.168.5.133:8080&#x2F;harbor&#x2F;projects</h4><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220905150825471.png" alt="image-20220905150825471"></p><h4 id="3、使用的jenkins地址：192-168-94-154-8080-x2F-view-x2F-weifuwu-x2F"><a href="#3、使用的jenkins地址：192-168-94-154-8080-x2F-view-x2F-weifuwu-x2F" class="headerlink" title="3、使用的jenkins地址：192.168.94.154:8080&#x2F;view&#x2F;weifuwu&#x2F;"></a>3、使用的jenkins地址：192.168.94.154:8080&#x2F;view&#x2F;weifuwu&#x2F;</h4><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220905150955622.png" alt="image-20220905150955622"></p><h4 id="4、SonarQube管理页面：192-168-94-154-9000"><a href="#4、SonarQube管理页面：192-168-94-154-9000" class="headerlink" title="4、SonarQube管理页面：192.168.94.154:9000"></a>4、SonarQube管理页面：192.168.94.154:9000</h4><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220907170244292.png" alt="image-20220907170244292"></p><h2 id="一、使用jenkins-maven编译"><a href="#一、使用jenkins-maven编译" class="headerlink" title="一、使用jenkins+maven编译"></a>一、使用jenkins+maven编译</h2><h3 id="1、直接新增项目-流水线，然后设置从gitlab代码仓库内拿到编写的jenkinsfile"><a href="#1、直接新增项目-流水线，然后设置从gitlab代码仓库内拿到编写的jenkinsfile" class="headerlink" title="1、直接新增项目-流水线，然后设置从gitlab代码仓库内拿到编写的jenkinsfile"></a>1、直接新增项目-流水线，然后设置从gitlab代码仓库内拿到编写的jenkinsfile</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220907171507295.png" alt="image-20220907171507295"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220907171746577.png" alt="image-20220907171746577"></p><h3 id="2、应用保存后输出如下："><a href="#2、应用保存后输出如下：" class="headerlink" title="2、应用保存后输出如下："></a>2、应用保存后输出如下：</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220907171821055.png" alt="image-20220907171821055"></p><h2 id="二、使用jenkins-sonarqube质量扫描"><a href="#二、使用jenkins-sonarqube质量扫描" class="headerlink" title="二、使用jenkins+sonarqube质量扫描"></a>二、使用jenkins+sonarqube质量扫描</h2><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220907173032352.png" alt="image-20220907173032352"></p><h3 id="1、访问sonarqube页面：192-168-94-154-9000，登录后，需要创建一个sonarqube的token，拥有-Token-就得到了-Token-持有人的身份及几乎所有权限"><a href="#1、访问sonarqube页面：192-168-94-154-9000，登录后，需要创建一个sonarqube的token，拥有-Token-就得到了-Token-持有人的身份及几乎所有权限" class="headerlink" title="1、访问sonarqube页面：192.168.94.154:9000，登录后，需要创建一个sonarqube的token，拥有 Token 就得到了 Token 持有人的身份及几乎所有权限"></a>1、访问sonarqube页面：192.168.94.154:9000，登录后，需要创建一个sonarqube的token，拥有 Token 就得到了 Token 持有人的身份及几乎所有权限</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220907172154561.png" alt="image-20220907172154561"></p><h3 id="2、输入令牌名称，然后选择令牌的过期时间，（我这边选择的是永久）然后生成token，切记复制token到本地"><a href="#2、输入令牌名称，然后选择令牌的过期时间，（我这边选择的是永久）然后生成token，切记复制token到本地" class="headerlink" title="2、输入令牌名称，然后选择令牌的过期时间，（我这边选择的是永久）然后生成token，切记复制token到本地"></a>2、输入令牌名称，然后选择令牌的过期时间，（我这边选择的是永久）然后生成token，切记复制token到本地</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220907172333440.png" alt="image-20220907172333440"></p><p>注意：本人后面使用的是sonarqube-jenkins-pinju名称的token，上述的test名称的token未使用</p><p><code>sonarqube-jenkins-pinju的token为：squ_47a6a36a2b62fb57ac27317c7805df4003026434</code></p><p><strong>未打开SCM的需要打开：</strong></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908111059008.png" alt="image-20220908111059008"></p><h3 id="3、jenkins安装SonarQube-Scanner插件"><a href="#3、jenkins安装SonarQube-Scanner插件" class="headerlink" title="3、jenkins安装SonarQube Scanner插件"></a>3、jenkins安装SonarQube Scanner插件</h3><p>Manage <a href="https://so.csdn.net/so/search?q=Jenkins&spm=1001.2101.3001.7020">Jenkins</a>（设置）–&gt;Manage Plugins（插件管理）–&gt;filter（筛选）</p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908094235641.png" alt="image-20220908094235641"></p><h3 id="4、添加-server-authentication-token"><a href="#4、添加-server-authentication-token" class="headerlink" title="4、添加 server authentication token"></a>4、添加 server authentication token</h3><p>凭据–&gt;添加凭据–&gt;填写sonarqube生成的token -&gt;保存</p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908094931973.png" alt="image-20220908094931973"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908094956432.png" alt="image-20220908094956432"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908110330350.png" alt="image-20220908110330350"></p><h3 id="5、Manage-Jenkins（系统管理）–-gt-Configure-System（系统配置）"><a href="#5、Manage-Jenkins（系统管理）–-gt-Configure-System（系统配置）" class="headerlink" title="5、Manage Jenkins（系统管理）–&gt;Configure System（系统配置）"></a>5、Manage Jenkins（系统管理）–&gt;Configure System（系统配置）</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908113017696.png" alt="image-20220908113017696"></p><p>参考文档：<a href="https://blog.csdn.net/jiatong151/article/details/111995890">https://blog.csdn.net/jiatong151/article/details/111995890</a></p><h3 id="6、编写sonar-project-properties文件，文件路径直接在项目下"><a href="#6、编写sonar-project-properties文件，文件路径直接在项目下" class="headerlink" title="6、编写sonar-project.properties文件，文件路径直接在项目下"></a>6、编写<strong>sonar-project.properties</strong>文件，文件路径直接在项目下</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908144624891.png" alt="image-20220908144624891"></p><p>sonar-project.properties文件详解：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 项目的key唯一不重复即可 </span><br>sonar.<span class="hljs-attribute">projectKey</span>=java-demo<br><span class="hljs-comment"># 项目的名字</span><br>sonar.<span class="hljs-attribute">projectName</span>=java-demo<br><span class="hljs-comment"># 项目的版本</span><br>sonar.<span class="hljs-attribute">projectVersion</span>=1.0<br><span class="hljs-comment"># 需要分析的源码的目录，多个目录用英文逗号隔开</span><br>sonar.<span class="hljs-attribute">sources</span>=.<br><span class="hljs-comment"># sonarQube扫描的对象</span><br>sonar.java.<span class="hljs-attribute">binaries</span>=.<br><span class="hljs-comment"># 编码格式 </span><br>sonar.<span class="hljs-attribute">sourceEncoding</span>=UTF-8<br><span class="hljs-comment"># 具有项目执行分析权限的 SonarQube 用户的身份验证令牌或登录名</span><br>sonar.<span class="hljs-attribute">login</span>=squ_47a6a36a2b62fb57ac27317c7805df4003026434<br><span class="hljs-comment"># 如果使用身份验证令牌，请设置为空。如果使用的是登录名，则填写用户名的密码。</span><br>sonar.password=<br></code></pre></td></tr></table></figure><p>如何配置sonar-project.properties文件：<a href="https://blog.csdn.net/weixin_44410537/article/details/113770515">https://blog.csdn.net/weixin_44410537/article/details/113770515</a></p><h3 id="7、jenkins新增流水线，设置流水线pipiline"><a href="#7、jenkins新增流水线，设置流水线pipiline" class="headerlink" title="7、jenkins新增流水线，设置流水线pipiline"></a>7、jenkins新增流水线，设置流水线pipiline</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs stylus">pipeline &#123;<br>    agent any<br>     options &#123;<br>        <span class="hljs-built_in">timestamps</span>()          <span class="hljs-comment">//日志会有时间</span><br>        <span class="hljs-built_in">skipDefaultCheckout</span>() <span class="hljs-comment">//删除隐式checkout scm语句</span><br>        <span class="hljs-built_in">timeout</span>(<span class="hljs-selector-tag">time</span>: <span class="hljs-number">1</span>, unit: <span class="hljs-string">&#x27;HOURS&#x27;</span> ) <span class="hljs-comment">//超时时间终止</span><br>    &#125;<br>    stages &#123;<br>        <span class="hljs-built_in">stage</span>(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>            steps &#123;<br>                git branch: <span class="hljs-string">&#x27;main&#x27;</span>, credentialsId: <span class="hljs-string">&#x27;gitlab-root-http&#x27;</span>, url: <span class="hljs-string">&#x27;http://192.168.5.111:8188/root/java-fuwu.git&#x27;</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">stage</span>(<span class="hljs-string">&#x27;质量扫描&#x27;</span>) &#123;<br>        steps &#123;<br>            echo <span class="hljs-string">&#x27;SonarQube analysis 开始&#x27;</span><br>                 sh <span class="hljs-string">&quot;/opt/Sonar-scanner/bin/sonar-scanner&quot;</span> <span class="hljs-comment">//Sonar-scanner路径</span><br>     echo <span class="hljs-string">&#x27;SonarQube analysis 结束&#x27;</span><br><br>      &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>构建成功后，访问sonarqube，可以查看到项目代码质量以及详情：</strong></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908161956686.png" alt="image-20220908161956686"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908164206483.png" alt="image-20220908164206483"></p><h2 id="三、jenkins-maven-sonarqube-harbor-部署运行"><a href="#三、jenkins-maven-sonarqube-harbor-部署运行" class="headerlink" title="三、jenkins+maven+sonarqube+harbor+部署运行"></a>三、jenkins+maven+sonarqube+harbor+部署运行</h2><h3 id="1、登录jenkins，并安装插件：Git-Parameter"><a href="#1、登录jenkins，并安装插件：Git-Parameter" class="headerlink" title="1、登录jenkins，并安装插件：Git Parameter"></a>1、登录jenkins，并安装插件：Git Parameter</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220913220001586.png" alt="image-20220913220001586"></p><h3 id="2、在gitlab仓库内上新增docker文件夹，并编写dockerfile文件"><a href="#2、在gitlab仓库内上新增docker文件夹，并编写dockerfile文件" class="headerlink" title="2、在gitlab仓库内上新增docker文件夹，并编写dockerfile文件"></a>2、在gitlab仓库内上新增docker文件夹，并编写dockerfile文件</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220913215743288.png" alt="image-20220913215743288"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM openjdk:8-jdk-alpine <span class="hljs-comment">##依赖镜像</span><br>VOLUME /tmp<br>ADD my-app-1.0-SNAPSHOT.jar my-app.jar<br>EXPOSE 9350  <span class="hljs-comment">#定义服务使用的端口</span><br>RUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone<br>ENTRYPOINT [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;/my-app.jar&quot;</span>]<br></code></pre></td></tr></table></figure><h3 id="3、在jenkins服务器上修改docker的daemon-json文件，添加harbor镜像地址：http-192-168-5-133-8080，并登录habor仓库"><a href="#3、在jenkins服务器上修改docker的daemon-json文件，添加harbor镜像地址：http-192-168-5-133-8080，并登录habor仓库" class="headerlink" title="3、在jenkins服务器上修改docker的daemon.json文件，添加harbor镜像地址：http://192.168.5.133:8080，并登录habor仓库"></a>3、在jenkins服务器上修改docker的daemon.json文件，添加harbor镜像地址：<a href="http://192.168.5.133:8080，并登录habor仓库">http://192.168.5.133:8080，并登录habor仓库</a></h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220913220157333.png" alt="image-20220913220157333"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker login 192.168.5.133:8080<br><span class="hljs-comment">#输入账号密码，显示成功即可</span><br></code></pre></td></tr></table></figure><h3 id="4、部署准备（预计将服务部署在192-168-94-155服务器上，按照步骤3（修改daemon-json并登录harbor仓库）"><a href="#4、部署准备（预计将服务部署在192-168-94-155服务器上，按照步骤3（修改daemon-json并登录harbor仓库）" class="headerlink" title="4、部署准备（预计将服务部署在192.168.94.155服务器上，按照步骤3（修改daemon.json并登录harbor仓库）"></a>4、部署准备（预计将服务部署在192.168.94.155服务器上，按照步骤3（修改daemon.json并登录harbor仓库）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">编写运行该容器的脚本：因为流水线部署时执行了<br><span class="hljs-built_in">cat</span> /srv/dockerrun/java-maven-sonarqube-docker.sh<br><span class="hljs-comment">#!/bin/bash</span><br>docker <span class="hljs-built_in">rm</span> -f java-demo<br><span class="hljs-comment">##只保留三个版本的镜像在本地</span><br>docker images | grep <span class="hljs-string">&quot;java-demo&quot;</span>  | awk <span class="hljs-string">&#x27;(NR&gt;3)&#123;print&#125;&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs docker rmi<br><span class="hljs-comment">##运行镜像</span><br>docker run -d -p 9350:9350  --restart=always  --name java-demo \<br>-e TZ=<span class="hljs-string">&quot;Asia/Shanghai&quot;</span> \<br>-e JAVA_OPTS=<span class="hljs-string">&#x27;-server -Xms512m -Xmx512m&#x27;</span> \<br>-m 2048m --cpus 1 \<br>192.168.5.133:8080/weifuwu/java-damo <span class="hljs-comment">#使用编译的镜像，初始如果没有的情况下，可定义192.168.5.133:8080/weifuwu/java-damo</span><br></code></pre></td></tr></table></figure><p>从jenkins服务器上设置免密认证到192.168.94.155上和并使用node1命名解析：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /etc/hosts<br>192.168.94.155 node1<br></code></pre></td></tr></table></figure><h3 id="5、新增流水线"><a href="#5、新增流水线" class="headerlink" title="5、新增流水线"></a>5、新增流水线</h3><p>将所有操作整合，只需将以下流水线语法粘贴到jenkins流水线内并构建即可！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs sh">pipeline &#123;<br>  agent any<br>  options &#123;<br>        timestamps()          //日志会有时间<br>        skipDefaultCheckout() //删除隐式checkout scm语句<br>        <span class="hljs-built_in">timeout</span>(time: 1, unit: <span class="hljs-string">&#x27;HOURS&#x27;</span> )<br>  &#125;<br>  parameters &#123;<br>    //jenkins选择分支构建，默认为main<br>    gitParameter branchFilter: <span class="hljs-string">&#x27;origin/(.*)&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;main&#x27;</span>, name: <span class="hljs-string">&#x27;BRANCH&#x27;</span>, <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;PT_BRANCH&#x27;</span><br>  &#125;<br>  environment&#123;<br>        //定义推送的镜像名称<br>        image_tag=<span class="hljs-string">&quot;192.168.5.133:8080/weifuwu/java-damo:<span class="hljs-variable">$&#123;BUILD_ID&#125;</span>&quot;</span><br>        //镜像存放路径<br>        dest_dir=<span class="hljs-string">&quot;/srv/dockerrun&quot;</span><br>  &#125;<br>  stages &#123;<br>    stage(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>      steps &#123;<br>        git branch: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;params.BRANCH&#125;</span>&quot;</span>, credentialsId: <span class="hljs-string">&#x27;gitlab-root-http&#x27;</span>, url: <span class="hljs-string">&#x27;http://192.168.5.111:8188/root/java-fuwu.git&#x27;</span><br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;质量扫描&#x27;</span>) &#123;<br>        steps &#123;<br>            <span class="hljs-built_in">timeout</span>(time:10, unit:<span class="hljs-string">&#x27;MINUTES&#x27;</span>) &#123; //指定步骤的超时时间<br>             script &#123; // 指定运行的脚本<br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;SonarQube analysis 开始&#x27;</span><br>                sh <span class="hljs-string">&quot;/opt/sonar-scanner/bin/sonar-scanner&quot;</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;SonarQube analysis 结束&#x27;</span><br>            &#125;<br>          &#125;<br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;maven编译&#x27;</span>) &#123;<br>        steps &#123;<br>             sh <span class="hljs-string">&#x27;mvn -B -DskipTests clean package&#x27;</span><br>        &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;编译镜像&#x27;</span>) &#123;<br>        steps &#123;<br>              //进到存放dockerfile文件的目录下，将编译后的jar包复制过来<br>             sh <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">                cd docker/ &amp;&amp; cp ../target/my-app*.jar ./</span><br><span class="hljs-string">                docker build -t $&#123;image_tag&#125; .</span><br><span class="hljs-string">                &#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br>                //推送镜像<br>              sh <span class="hljs-string">&#x27;docker push $&#123;image_tag&#125;&#x27;</span><br>               // input message: <span class="hljs-string">&#x27;Finished using the web site? (Click &quot;Proceed&quot; to continue)&#x27;</span>, ok: <span class="hljs-string">&#x27;发布镜像&#x27;</span><br>               &#125;<br>        &#125;<br>    stage(<span class="hljs-string">&#x27;部署服务&#x27;</span>) &#123;<br>        steps &#123;<br>              //<span class="hljs-variable">$JOB_NAME</span>：任务的名称，也就是流水线创建的名称<br>              //<span class="hljs-variable">$dest_dir</span>:部署服务所在路径<br>              //替换脚本内的镜像，并执行脚本<br>              sh <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">                echo &quot;sed -i &#x27;</span>s<span class="hljs-comment">#192.168.5.133:8080.*#$&#123;image_tag&#125;#g&#x27; $&#123;dest_dir&#125;/$&#123;JOB_NAME&#125;.sh &amp;&amp; bash $&#123;dest_dir&#125;/$&#123;JOB_NAME&#125;.sh&quot; |ssh node1</span><br>                <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="6、添加构建成功后发送邮件功能！（脚本如下）"><a href="#6、添加构建成功后发送邮件功能！（脚本如下）" class="headerlink" title="6、添加构建成功后发送邮件功能！（脚本如下）"></a>6、添加构建成功后发送邮件功能！（脚本如下）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs sh">pipeline &#123;<br>  agent any<br>  options &#123;<br>        timestamps()          //日志会有时间<br>        skipDefaultCheckout() //删除隐式checkout scm语句<br>        <span class="hljs-built_in">timeout</span>(time: 1, unit: <span class="hljs-string">&#x27;HOURS&#x27;</span> )<br>  &#125;<br>  parameters &#123;<br>    //jenkins选择分支构建，默认为main<br>    gitParameter branchFilter: <span class="hljs-string">&#x27;origin/(.*)&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;main&#x27;</span>, name: <span class="hljs-string">&#x27;BRANCH&#x27;</span>, <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;PT_BRANCH&#x27;</span><br>  &#125;<br>  environment&#123;<br>        //定义推送的镜像名称<br>        image_tag=<span class="hljs-string">&quot;192.168.5.133:8080/weifuwu/java-damo:<span class="hljs-variable">$&#123;BUILD_ID&#125;</span>&quot;</span><br>        //镜像存放路径<br>        dest_dir=<span class="hljs-string">&quot;/srv/dockerrun&quot;</span><br>        //邮件接收人<br>        emailUser=<span class="hljs-string">&quot;1962821461@qq.com&quot;</span><br>        //构建状态<br>        BUILD_STATUS=<span class="hljs-string">&quot;成功！&quot;</span><br><br>  &#125;<br>  stages &#123;<br>    stage(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>      steps &#123;<br>        git branch: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;params.BRANCH&#125;</span>&quot;</span>, credentialsId: <span class="hljs-string">&#x27;gitlab-root-http&#x27;</span>, url: <span class="hljs-string">&#x27;http://192.168.5.111:8188/root/java-fuwu.git&#x27;</span><br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;质量扫描&#x27;</span>) &#123;<br>        steps &#123;<br>            <span class="hljs-built_in">timeout</span>(time:10, unit:<span class="hljs-string">&#x27;MINUTES&#x27;</span>) &#123; //指定步骤的超时时间<br>             script &#123; // 指定运行的脚本<br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;SonarQube analysis 开始&#x27;</span><br>                sh <span class="hljs-string">&quot;/opt/sonar-scanner/bin/sonar-scanner&quot;</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;SonarQube analysis 结束&#x27;</span><br>            &#125;<br>          &#125;<br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;maven编译&#x27;</span>) &#123;<br>        steps &#123;<br>             sh <span class="hljs-string">&#x27;mvn -B -DskipTests clean package&#x27;</span><br>        &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;编译镜像&#x27;</span>) &#123;<br>        steps &#123;<br>              //进到存放dockerfile文件的目录下，将编译后的jar包复制过来<br>             sh <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">                cd docker/ &amp;&amp; cp ../target/my-app*.jar ./</span><br><span class="hljs-string">                docker build -t $&#123;image_tag&#125; .</span><br><span class="hljs-string">                &#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br>                //推送镜像<br>              sh <span class="hljs-string">&#x27;docker push $&#123;image_tag&#125;&#x27;</span><br>               // input message: <span class="hljs-string">&#x27;Finished using the web site? (Click &quot;Proceed&quot; to continue)&#x27;</span>, ok: <span class="hljs-string">&#x27;发布镜像&#x27;</span><br>               &#125;<br>        &#125;<br>    stage(<span class="hljs-string">&#x27;部署服务&#x27;</span>) &#123;<br>        steps &#123;<br>              //<span class="hljs-variable">$JOB_NAME</span><br>              sh <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">                echo &quot;sed -i &#x27;</span>s<span class="hljs-comment">#192.168.5.133/.*#$&#123;image_tag&#125;#g&#x27; $&#123;dest_dir&#125;/$&#123;JOB_NAME&#125;.sh &amp;&amp; bash $&#123;dest_dir&#125;/$&#123;JOB_NAME&#125;.sh&quot; |ssh node1</span><br>                <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    post &#123;</span><br><span class="hljs-string">    //failure:失败后执行，为了测试正常，我已经改成为成功后发送</span><br><span class="hljs-string">    //    failure &#123; </span><br><span class="hljs-string">        success &#123;</span><br><span class="hljs-string">           script &#123;</span><br><span class="hljs-string">               emailext body: &quot;&quot;&quot;</span><br><span class="hljs-string">            &lt;!DOCTYPE html&gt; </span><br><span class="hljs-string">            &lt;html&gt; </span><br><span class="hljs-string">            &lt;head&gt; </span><br><span class="hljs-string">            &lt;meta charset=&quot;UTF-8&quot;&gt; </span><br><span class="hljs-string">            &lt;/head&gt; </span><br><span class="hljs-string">            &lt;body leftmargin=&quot;8&quot; marginwidth=&quot;0&quot; topmargin=&quot;8&quot; marginheight=&quot;4&quot; offset=&quot;0&quot;&gt; </span><br><span class="hljs-string">                &lt;img src=&quot;https://raw.githubusercontent.com/pipiguai0123/JenkinsShareLibrary/main/docs/Jenkins%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E9%9B%86%E6%88%90.png&quot;&gt;</span><br><span class="hljs-string">                &lt;table width=&quot;95%&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; style=&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;&gt;   </span><br><span class="hljs-string">                    &lt;tr&gt; </span><br><span class="hljs-string">                        &lt;td&gt;&lt;br /&gt; </span><br><span class="hljs-string">                            &lt;b&gt;&lt;font color=&quot;#0B610B&quot;&gt;构建信息&lt;/font&gt;&lt;/b&gt; </span><br><span class="hljs-string">                        &lt;/td&gt; </span><br><span class="hljs-string">                    &lt;/tr&gt; </span><br><span class="hljs-string">                    &lt;tr&gt; </span><br><span class="hljs-string">                        &lt;td&gt; </span><br><span class="hljs-string">                            &lt;ul&gt; </span><br><span class="hljs-string">                                &lt;li&gt;项目名称：$&#123;JOB_NAME&#125;&lt;/li&gt;         </span><br><span class="hljs-string">                                &lt;li&gt;构建编号：$&#123;BUILD_ID&#125;&lt;/li&gt; </span><br><span class="hljs-string">                                &lt;li&gt;构建结果：&lt;span style=&quot;color:red&quot;&gt; $&#123;BUILD_STATUS&#125;&lt;/span&gt; &lt;/li&gt;                 </span><br><span class="hljs-string">                                &lt;li&gt;项目地址：&lt;a href=&quot;$&#123;BUILD_URL&#125;&quot;&gt;$&#123;BUILD_URL&#125;&lt;/a&gt;&lt;/li&gt;    </span><br><span class="hljs-string">                                &lt;li&gt;构建日志：&lt;a href=&quot;$&#123;BUILD_URL&#125;console&quot;&gt;$&#123;BUILD_URL&#125;console&lt;/a&gt;&lt;/li&gt; </span><br><span class="hljs-string">                            &lt;/ul&gt; </span><br><span class="hljs-string">                        &lt;/td&gt; </span><br><span class="hljs-string">                    &lt;/tr&gt; </span><br><span class="hljs-string">                    &lt;tr&gt;  </span><br><span class="hljs-string">                &lt;/table&gt; </span><br><span class="hljs-string">            &lt;/body&gt; </span><br><span class="hljs-string">            &lt;/html&gt;  &quot;&quot;&quot;,</span><br><span class="hljs-string">            subject: &quot;Jenkins-$&#123;JOB_NAME&#125;项目构建信息 &quot;,</span><br><span class="hljs-string">            to: &quot;$emailUser&quot;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="7、完成后截图："><a href="#7、完成后截图：" class="headerlink" title="7、完成后截图："></a>7、完成后截图：</h3><p>写入流水线语法</p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914160659411.png" alt="image-20220914160659411"></p><p>gitlab上新增了test分支，jenkins贴入语法后，jenkins构建时可以选择分支：</p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914160848816.png" alt="image-20220914160848816"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914161113131.png" alt="image-20220914161113131"></p><p>选择分支构建后，编译完成，harbor仓库推送镜像，并会发送邮件：</p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914170126609.png" alt="image-20220914170126609"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914161149196.png" alt="image-20220914161149196"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914161644205.png" alt="image-20220914161644205"></p><p>编译部署完成后，在192.168.94.155服务器上可以看到该docker镜像已运行，但因为是demo，会一直重启，日志可以看到信息</p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914161444375.png" alt="image-20220914161444375"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914161539752.png" alt="image-20220914161539752"></p>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Devops</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB全量备份和增量备份</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E5%85%A8%E9%87%8F%E5%A4%87%E4%BB%BD%E5%92%8C%E5%A2%9E%E9%87%8F%E5%A4%87%E4%BB%BD/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E5%85%A8%E9%87%8F%E5%A4%87%E4%BB%BD%E5%92%8C%E5%A2%9E%E9%87%8F%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MongoDB全量备份和增量备份"><a href="#MongoDB全量备份和增量备份" class="headerlink" title="MongoDB全量备份和增量备份"></a>MongoDB全量备份和增量备份</h1><h2 id="一、准备工作：构建mongodb-副本集测试环境"><a href="#一、准备工作：构建mongodb-副本集测试环境" class="headerlink" title="一、准备工作：构建mongodb 副本集测试环境"></a>一、准备工作：构建mongodb 副本集测试环境</h2><p><strong>以下为机器ip：</strong></p><table><thead><tr><th>机器名</th><th>IP地址</th></tr></thead><tbody><tr><td>node0</td><td>192.168.94.154 <PRIMARY></PRIMARY></td></tr><tr><td>node1</td><td>192.168.94.155</td></tr><tr><td>node2</td><td>192.168.94.156</td></tr></tbody></table><h3 id="副本集："><a href="#副本集：" class="headerlink" title="副本集："></a>副本集：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">node0&gt;:rs.isMaster();<br>&#123;<br>    <span class="hljs-string">&quot;hosts&quot;</span> : [<br>        <span class="hljs-string">&quot;192.168.94.154:9009&quot;</span>,<br>        <span class="hljs-string">&quot;192.168.94.155:9009&quot;</span>,<br>        <span class="hljs-string">&quot;192.168.94.156:9009&quot;</span><br>    ]<br>&#125;<br>...<br></code></pre></td></tr></table></figure><h3 id="接下来往集群里写入测试数据："><a href="#接下来往集群里写入测试数据：" class="headerlink" title="接下来往集群里写入测试数据："></a>接下来往集群里写入测试数据：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">node0:PRIMARY&gt; <span class="hljs-keyword">for</span>(var i=1;i&lt;=10000;i++) db.users.insert(&#123;<span class="hljs-built_in">id</span>:i, name:<span class="hljs-string">&quot;hello，world~&quot;</span>,city:<span class="hljs-string">&quot;bei&#x27;jing&quot;</span>&#125;);<br>WriteResult(&#123; <span class="hljs-string">&quot;nInserted&quot;</span> : 1 &#125;)<br><br>node0:PRIMARY&gt; show dbs;<br>admin   0.000GB<br>config  0.000GB<br><span class="hljs-built_in">local</span>   0.000GB<br><span class="hljs-built_in">test</span>    0.000GB<br><br>node0:PRIMARY&gt; use <span class="hljs-built_in">test</span><br>switched to db <span class="hljs-built_in">test</span><br><br>node0:PRIMARY&gt; db.users.count();<br>10000<br></code></pre></td></tr></table></figure><p><em><strong>以上就是准备工作！</strong></em></p><h2 id="二、mongodb-全量备份及恢复"><a href="#二、mongodb-全量备份及恢复" class="headerlink" title="二、mongodb 全量备份及恢复"></a>二、mongodb 全量备份及恢复</h2><h3 id="1、全备脚本-mongodb-back-all-sh-如下："><a href="#1、全备脚本-mongodb-back-all-sh-如下：" class="headerlink" title="1、全备脚本 [ mongodb_back_all.sh ] 如下："></a>1、全备脚本 [ mongodb_back_all.sh ] 如下：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># 主节点ip、端口</span><br>host=<span class="hljs-string">&#x27;192.168.94.154&#x27;</span><br>port=<span class="hljs-string">&#x27;9009&#x27;</span><br><br><span class="hljs-comment">#启动文件所在目录</span><br>sourcepath=<span class="hljs-string">&#x27;/app/mongodb/mongodb/bin&#x27;</span><br><span class="hljs-comment">#备份文件存放路径</span><br>targetpath=<span class="hljs-string">&#x27;/app/mongodb/backup&#x27;</span><br><span class="hljs-comment">#时间</span><br>nowtime=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y%m%d&quot;</span>)<br> <br> <br><span class="hljs-function"><span class="hljs-title">start</span></span>()&#123;<br>    <span class="hljs-variable">$sourcepath</span>/mongodump --host <span class="hljs-variable">$host</span> --port <span class="hljs-variable">$port</span> --oplog --gzip --out <span class="hljs-variable">$&#123;targetpath&#125;</span>/<span class="hljs-variable">$&#123;nowtime&#125;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;mongodump is ok&quot;</span><br>&#125;<br> <br><span class="hljs-function"><span class="hljs-title">execute</span></span>()&#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=========================<span class="hljs-subst">$(date)</span> backup all mongodb back start  <span class="hljs-variable">$&#123;nowtime&#125;</span>=========&quot;</span><br>start<br><span class="hljs-comment">#if [ $? -eq 0 ]代表如果上一条命令结束状态是0的话就执行then后面的语句。成功就是0，失败为1</span><br><span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The MongoDB BackUp Successfully!&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The MongoDB BackUp Failure&quot;</span><br><span class="hljs-keyword">fi</span><br>&#125;<br><span class="hljs-comment">#如果没有这文件，就创建</span><br><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;targetpath&#125;</span>/<span class="hljs-variable">$&#123;nowtime&#125;</span>&quot;</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;targetpath&#125;</span>/<span class="hljs-variable">$&#123;nowtime&#125;</span>&quot;</span><br><span class="hljs-keyword">fi</span><br> <br>execute<br><br><span class="hljs-comment">#删除7天前的备份</span><br>backtime=$(<span class="hljs-built_in">date</span> -d <span class="hljs-string">&#x27;-7 days&#x27;</span> <span class="hljs-string">&quot;+%Y%m%d&quot;</span>)<br><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;targetpath&#125;</span>/<span class="hljs-variable">$&#123;backtime&#125;</span>/&quot;</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">rm</span> -rf <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;targetpath&#125;</span>/<span class="hljs-variable">$&#123;backtime&#125;</span>/&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=======<span class="hljs-variable">$&#123;targetpath&#125;</span>/<span class="hljs-variable">$&#123;backtime&#125;</span>/===删除完毕==&quot;</span><br><span class="hljs-keyword">fi</span><br> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;========================= <span class="hljs-subst">$(date)</span> backup all mongodb back end <span class="hljs-variable">$&#123;nowtime&#125;</span>=========&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2、全库还原脚本-mongodb-restore-all-sh-如下："><a href="#2、全库还原脚本-mongodb-restore-all-sh-如下：" class="headerlink" title="2、全库还原脚本 [ mongodb_restore_all.sh ] 如下："></a>2、全库还原脚本 [ mongodb_restore_all.sh ] 如下：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m*****[ Mongodb ] 全库恢复脚本*****\033[0m&quot;</span><br><span class="hljs-comment">#定义恢复节点的ip、端口</span><br>host=192.168.94.154<br>port=<span class="hljs-string">&#x27;9009&#x27;</span><br><span class="hljs-comment">#启动文件所在目录</span><br>mongo_bin=/app/mongodb/mongodb/bin<br><span class="hljs-comment">#备份的文件所在目录</span><br>backpath=<span class="hljs-string">&#x27;/app/mongodb/backup&#x27;</span><br> <br><span class="hljs-comment">#获取备份文件夹备份的文件名</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32;1m[ 选择要恢复全库的日期 ] \033[0m&quot;</span><br><span class="hljs-keyword">for</span> backfile <span class="hljs-keyword">in</span> `<span class="hljs-built_in">ls</span> <span class="hljs-variable">$backpath</span>`; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$backfile</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment">#获取输入的全库日期</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span> date_bak<br><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$date_bak</span> == <span class="hljs-string">&quot;&quot;</span> ]] || [[ <span class="hljs-variable">$date_bak</span> == <span class="hljs-string">&#x27;.&#x27;</span> ]] || [[ <span class="hljs-variable">$date_bak</span> == <span class="hljs-string">&#x27;..&#x27;</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m输入不能为特殊字符.\033[0m&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-variable">$backpath</span>/<span class="hljs-variable">$date_bak</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请确认是否恢复全库备份[y/n]:&quot;</span> choice<br> <br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$choice</span>&quot;</span> == <span class="hljs-string">&quot;y&quot;</span> ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32;1m正在恢复全库备份，请稍后...\033[0m&quot;</span><br>        <span class="hljs-variable">$mongo_bin</span>/mongorestore --host <span class="hljs-variable">$host</span> --port <span class="hljs-variable">$port</span> --oplogReplay --gzip <span class="hljs-variable">$backpath</span>/<span class="hljs-variable">$date_bak</span>/<br>        <span class="hljs-comment">#if [ $? -eq 0 ]代表如果上一条命令结束状态是0的话就执行then后面的语句。成功就是0，失败为1</span><br>        <span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32;1m--------全库恢复成功.--------\033[0m&quot;</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m恢复失败,请手动检查!\033[0m&quot;</span><br>            <span class="hljs-built_in">exit</span> 3<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">exit</span> 2<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m输入信息错误。\033[0m&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="测试全库备份以及恢复脚本："><a href="#测试全库备份以及恢复脚本：" class="headerlink" title="测试全库备份以及恢复脚本："></a>测试全库备份以及恢复脚本：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#首先执行全库备份脚本</span><br>sh mongodb_back_all.sh<br><br><span class="hljs-comment">#然后进入主的mongod节点机器，删除之前的一万行数据</span><br>node0:PRIMARY&gt; use <span class="hljs-built_in">test</span>;<br>switched to db <span class="hljs-built_in">test</span><br>node0:PRIMARY&gt; db.users.count();<br>10000<br>node0:PRIMARY&gt; db.dropDatabase();<br>node0:PRIMARY&gt; show dbs<br>admin   0.000GB<br>config  0.000GB<br><span class="hljs-built_in">local</span>   0.001GB<br><br><span class="hljs-comment">#再执行全库恢复脚本</span><br>sh mongodb_restore_all.sh<br><br></code></pre></td></tr></table></figure><h2 id="三、mongodb-增量备份及恢复"><a href="#三、mongodb-增量备份及恢复" class="headerlink" title="三、mongodb 增量备份及恢复"></a>三、mongodb 增量备份及恢复</h2><p><strong>增量备份的思路是通过 oplog 来实现的，Oplog 是用于存储 MongoDB 数据库所有数据的操作记录的(实际只记录增删改和一些系统命令操作，查是不会记录的)，有点类似于 mysql 的 binlog 日志。</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">#了解Oplog可以参考：https://www.cnblogs.com/operationhome/p/10688798.html<br>#增量备份详解：https://www.cnblogs.com/xuliuzai/p/9917137.html<br></code></pre></td></tr></table></figure><h3 id="1、增量备份-mongodb-backup-incremental-sh-脚本"><a href="#1、增量备份-mongodb-backup-incremental-sh-脚本" class="headerlink" title="1、增量备份 [ mongodb_backup_incremental.sh ] 脚本"></a>1、增量备份 [ mongodb_backup_incremental.sh ] 脚本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#定义mongdb执行命令路径</span><br>command_linebin=<span class="hljs-string">&#x27;/app/mongodb/mongodb/bin/mongo&#x27;</span><br><span class="hljs-comment">#定义启动文件路径</span><br>sourcepath=<span class="hljs-string">&#x27;/app/mongodb/mongodb/bin&#x27;</span><br><span class="hljs-comment">#定义存放back的存放路径</span><br>peichern=<span class="hljs-string">&#x27;/app/mongodb/backup/mongodbOplog_bak&#x27;</span><br><span class="hljs-comment">#定义端口和ip</span><br>host=192.168.94.154<br>port=9009<br><br><span class="hljs-comment">#新建文件存放路径</span><br><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$peichern</span>/mongo-<span class="hljs-variable">$port</span>&quot;</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$peichern</span>/mongo-<span class="hljs-variable">$port</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$peichern</span>/log-<span class="hljs-variable">$port</span>&quot;</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$peichern</span>/log-<span class="hljs-variable">$port</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment">#备份文件存放的路径</span><br>bkdatapath=<span class="hljs-variable">$peichern</span>/mongo-<span class="hljs-variable">$port</span><br><span class="hljs-comment">#备份记录的log日志</span><br>bklogpath=<span class="hljs-variable">$peichern</span>/log-<span class="hljs-variable">$port</span><br><span class="hljs-comment">#执行过程的log日志名称</span><br>logfilename=$(<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%Y%m%d&quot;</span>)<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===MongoDB 端口为&quot;</span> <span class="hljs-variable">$port</span> <span class="hljs-string">&quot;的差异备份开始，开始时间为：&quot;</span> $(<span class="hljs-built_in">date</span> -d today +<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>) &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment">#定义导出备份文件oplog中参数的结束时间</span><br>paramBakEndDate=$(<span class="hljs-built_in">date</span> +%s)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===本次备份时间参数中的结束时间为：&quot;</span> <span class="hljs-variable">$paramBakEndDate</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment">#设置备份的间隔时间</span><br>diffTime=$(<span class="hljs-built_in">expr</span> 65 \* 60)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===备份设置的间隔时间为：&quot;</span> <span class="hljs-variable">$diffTime</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment">#定义导出的备份文件oplog中参数的开始时间</span><br>paramBakStartDate=$(<span class="hljs-built_in">expr</span> <span class="hljs-variable">$paramBakEndDate</span> - <span class="hljs-variable">$diffTime</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===本次备份时间参数中的开始时间为：&quot;</span> <span class="hljs-variable">$paramBakStartDate</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment">#定义mongo命令路径</span><br>command_linebin=<span class="hljs-variable">$sourcepath</span>/mongo <br><span class="hljs-comment">#定义连接mongdb参数</span><br>command_line=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;command_linebin&#125;</span> <span class="hljs-variable">$host</span>:<span class="hljs-variable">$port</span>&quot;</span><br><span class="hljs-comment">#command_line=&quot;$sourcepath/mongo $host:$port&quot;</span><br><br><span class="hljs-comment">#获取mongodb内db.printReplicationInfo()的信息</span><br>opmes=$(/bin/echo <span class="hljs-string">&quot;db.printReplicationInfo()&quot;</span> | <span class="hljs-variable">$command_line</span> --quiet)<br><span class="hljs-comment">#将获取的信息输出到tmp内</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$opmes</span> &gt; /tmp/opdoctime<span class="hljs-variable">$port</span>.tmplog<br>opbktmplogfile=/tmp/opdoctime<span class="hljs-variable">$port</span>.tmplog<br><span class="hljs-comment">#获取文件夹内的：oplog first event time</span><br>opstartmes=$(grep <span class="hljs-string">&quot;oplog first event time&quot;</span> <span class="hljs-variable">$opbktmplogfile</span> | awk -F <span class="hljs-string">&#x27;CST&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | awk -F <span class="hljs-string">&#x27;oplog first event time: &#x27;</span>  <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F <span class="hljs-string">&#x27; GMT&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>  )<br><span class="hljs-comment">#将获取的时间转换为秒</span><br>oplogRecordFirst=$(<span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;<span class="hljs-variable">$opstartmes</span>&quot;</span>  +%s)<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===oplog集合记录的开始时间为[格式化]：&quot;</span> <span class="hljs-variable">$oplogRecordFirst</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment">#如果获取的时间小于或等于备份开始的时间（目的是为了记录突然往mongodb内写入了大量的数据，oplog的size如果太小了，写入oplog里面导致之前的时间被覆盖，做一个判断）</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$oplogRecordFirst</span> -le <span class="hljs-variable">$paramBakStartDate</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Message --检查设置备份时间合理。备份参数的开始时间在oplog记录的时间范围内。&quot;</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Fatal Error --检查设置的备份时间不合理合理。备份参数的开始时间不在oplog记录的时间范围内。请调整oplog size或调整备份频率。本次备份可以持续进行，但还原时数据完整性丢失。&quot;</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment">#定义备份文件名称</span><br>bkfilename=$(<span class="hljs-built_in">date</span> -d today +<span class="hljs-string">&quot;%Y%m%d%H%M%S&quot;</span>)<br><span class="hljs-comment">#获取设定的时间区间的oplog文件数据，并进行备份</span><br><span class="hljs-variable">$sourcepath</span>/mongodump -h <span class="hljs-variable">$host</span> --port <span class="hljs-variable">$port</span>  -d <span class="hljs-built_in">local</span> -c oplog.rs  --query <span class="hljs-string">&#x27;&#123;&quot;ts&quot;:&#123;&quot;$gt&quot;: &#123;&quot;$timestamp&quot;:&#123;&quot;t&quot;:&#x27;</span><span class="hljs-variable">$paramBakStartDate</span><span class="hljs-string">&#x27;, &quot;i&quot;:1&#125;&#125;,&quot;$lte&quot;:&#123;&quot;$timestamp&quot;:&#123;&quot;t&quot;:&#x27;</span><span class="hljs-variable">$paramBakEndDate</span><span class="hljs-string">&#x27;, &quot;i&quot;:9999&#125;&#125;&#125;&#125;&#x27;</span> -o <span class="hljs-variable">$bkdatapath</span>/mongodboplog<span class="hljs-variable">$bkfilename</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-comment">#/mongodb/bin/mongodump -h $host --port $port  -d local -c oplog.rs  --query &#x27;&#123;ts:&#123;$gte:Timestamp(&#x27;$paramBakStartDate&#x27;,1),$lte:Timestamp(&#x27;$paramBakEndDate&#x27;,9999)&#125;&#125;&#x27; -o $bkdatapath/mongodboplog$bkfilename</span><br><br><span class="hljs-comment">##再次检查，防止导出oplog数据过程耗时过长，因oplog是固定集合，如果操作期间有大量的操作，则oplog中新的数据会覆盖掉旧的数据，就可能导致导出的数据不完整，无法保证增量文件间的时间连续性。因此备份后再次检查</span><br>opmes=$(/bin/echo <span class="hljs-string">&quot;db.printReplicationInfo()&quot;</span> | <span class="hljs-variable">$command_line</span> --quiet)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$opmes</span> &gt; /tmp/opdoctime<span class="hljs-variable">$port</span>.tmplog<br>opbktmplogfile=/tmp/opdoctime<span class="hljs-variable">$port</span>.tmplog<br>opstartmes=$(grep <span class="hljs-string">&quot;oplog first event time&quot;</span> <span class="hljs-variable">$opbktmplogfile</span> | awk -F <span class="hljs-string">&#x27;CST&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | awk -F <span class="hljs-string">&#x27;oplog first event time: &#x27;</span>  <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F <span class="hljs-string">&#x27; GMT&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>  )<br>oplogRecordFirst=$(<span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;<span class="hljs-variable">$opstartmes</span>&quot;</span>  +%s)<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===执行备份后,oplog集合记录的开始时间为[时间格式化]:&quot;</span> <span class="hljs-variable">$oplogRecordFirst</span> <br><br><br><span class="hljs-comment">#为了避免数据增长过快，覆盖了还未备份的数据的，比较的依据是 mongodb内db.printReplicationInfo(); 的 oplog first event time 时间。下面设定的是61分钟</span><br>diffTime=$(<span class="hljs-built_in">expr</span> 61 \* 60)<br>paramAfterBakRequestStartDate=$(<span class="hljs-built_in">expr</span> <span class="hljs-variable">$paramBakEndDate</span> - <span class="hljs-variable">$diffTime</span>)<br><span class="hljs-comment">#转义成时间</span><br>zhuanhuandate=$( <span class="hljs-built_in">date</span> -d <span class="hljs-variable">$paramAfterBakRequestStartDate</span> +<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span> )<br><span class="hljs-comment">#echo &quot;===为保证备份的连续性,本次备份后,oplog中的开始时间需小于：&quot; $paramAfterBakRequestStartDate</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===为保证备份的连续性,本次备份后,oplog中的开始时间需小于：&quot;</span> <span class="hljs-variable">$zhuanhuandate</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><br><br><span class="hljs-comment">#如果db.printReplicationInfo()的oplog first event time小于或等于设定的间隔时间</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$oplogRecordFirst</span> -le <span class="hljs-variable">$paramAfterBakRequestStartDate</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Message --备份后，检查oplog集合中数据的开始时间，即集合中最早的一笔数据，时间不小于61分钟的时间（即参数 paramAfterBakRequestStartDate）。这样可以保证每个增量备份含有最近一个小时的全部op操作，满足文件的持续完整性，逐个还原无丢失数据风险。&quot;</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Fatal Error --备份后，检查oplog集合的涵盖的时间范围过小（小于61min）。设置的备份时间不合理合理，备份后的文件不能完全涵盖最近60分钟的数据。请调整oplog size或调整备份频率。本次备份可以持续进行，但还原时数据完整性丢失。&quot;</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-keyword">fi</span><br><br><br><span class="hljs-comment">#判断是否备份了这个文件</span><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$bkdatapath</span>/mongodboplog<span class="hljs-variable">$bkfilename</span>&quot;</span> ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Message --检查此次备份文件已经产生.文件信息为:&quot;</span> <span class="hljs-variable">$bkdatapath</span>/mongodboplog<span class="hljs-variable">$bkfilename</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Fatal Error --备份过程已执行，但是未检测到备份产生的文件，请检查！&quot;</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment">#删除三天前的数据</span><br>keepbaktime=$(<span class="hljs-built_in">date</span> -d <span class="hljs-string">&#x27;-3 days&#x27;</span> <span class="hljs-string">&quot;+%Y%m%d%H&quot;</span>)*<br><span class="hljs-keyword">if</span> [ -d <span class="hljs-variable">$bkdatapath</span>/mongodboplog<span class="hljs-variable">$keepbaktime</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$bkdatapath</span>/mongodboplog<span class="hljs-variable">$keepbaktime</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Message -- <span class="hljs-variable">$bkdatapath</span>/mongodboplog<span class="hljs-variable">$keepbaktime</span> 删除完毕&quot;</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-keyword">fi</span><br> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===MongoDB 端口为&quot;</span> <span class="hljs-variable">$port</span> <span class="hljs-string">&quot;的差异备份结束，结束时间为：&quot;</span> $(<span class="hljs-built_in">date</span> -d today +<span class="hljs-string">&quot;%Y%m%d%H%M%S&quot;</span>) &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h2 id="2-增量备份还原-mongodb-backup-incremental-sh-脚本"><a href="#2-增量备份还原-mongodb-backup-incremental-sh-脚本" class="headerlink" title="2.增量备份还原 [ mongodb_backup_incremental.sh ] 脚本"></a>2.增量备份还原 [ mongodb_backup_incremental.sh ] 脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br>host=192.168.94.154<br>port=9009<br><span class="hljs-comment">#启动文件所在路径</span><br>mongo_bin=/app/mongodb/mongodb/bin/<br><span class="hljs-comment">#备份存放脚本</span><br>backpath=<span class="hljs-string">&#x27;/app/mongodb/backup/mongodbOplog_bak/mongo-$port&#x27;</span><br> <br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m*****[ Mongodb ] 增量恢复脚本*****\033[0m&quot;</span><br> <br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32;1m[ 选择要恢复增量的日期(格式：年月日时分秒) ] \033[0m&quot;</span><br><span class="hljs-keyword">for</span> time_file <span class="hljs-keyword">in</span> `<span class="hljs-built_in">ls</span> <span class="hljs-variable">$backpath</span>`; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$time_file</span><br><span class="hljs-keyword">done</span><br> <br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span> date_bak<br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$date_bak</span> == <span class="hljs-string">&quot;&quot;</span> ]] || [[ <span class="hljs-variable">$date_bak</span> == <span class="hljs-string">&#x27;.&#x27;</span> ]] || [[ <span class="hljs-variable">$date_bak</span> == <span class="hljs-string">&#x27;..&#x27;</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m输入不能为特殊字符.\033[0m&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-variable">$backpath</span>/<span class="hljs-variable">$date_bak</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请确认是否恢复[<span class="hljs-variable">$date_bak</span>]增量备份[y/n]:&quot;</span> choice<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$choice</span>&quot;</span> == <span class="hljs-string">&quot;y&quot;</span> ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">mkdir</span> -p /tmp/mongodb/ &amp;&amp; <span class="hljs-built_in">cp</span> -a <span class="hljs-variable">$backpath</span>/<span class="hljs-variable">$date_bak</span>/local/oplog.rs.bson /tmp/mongodb/oplog.bson<br>        <span class="hljs-variable">$mongo_bin</span>/mongorestore --host <span class="hljs-variable">$host</span> --port <span class="hljs-variable">$port</span> --oplogReplay /tmp/mongodb/ &amp;&amp; <span class="hljs-built_in">rm</span> -rf /tmp/mongodb/<br>        <span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32;1m--------[<span class="hljs-variable">$date_bak</span>]增量恢复成功.--------\033[0m&quot;</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m恢复失败,请手动检查!\033[0m&quot;</span><br>            <span class="hljs-built_in">exit</span> 3<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">exit</span> 2<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m输入信息错误.\033[0m&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment">#增量备份的使用方法可以为：每天执行一次全量备份，再每小时执行一次增量备份脚本</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB全量备份和增量备份</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E5%89%AF%E6%9C%AC%E9%9B%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%B5%8B%E8%AF%95/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E5%89%AF%E6%9C%AC%E9%9B%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MongoDB副本集搭建及测试"><a href="#MongoDB副本集搭建及测试" class="headerlink" title="MongoDB副本集搭建及测试"></a>MongoDB副本集搭建及测试</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文件：https://www.cnblogs.com/hukey/p/5769548.html<br></code></pre></td></tr></table></figure><h2 id="一、搭建环境"><a href="#一、搭建环境" class="headerlink" title="一、搭建环境"></a>一、搭建环境</h2><p>选择三台机器进行搭建</p><p><strong>以下为机器ip：</strong></p><table><thead><tr><th>机器名</th><th>IP地址</th></tr></thead><tbody><tr><td>node0</td><td>192.168.94.154</td></tr><tr><td>node1</td><td>192.168.94.155</td></tr><tr><td>node2</td><td>192.168.94.156</td></tr></tbody></table><h2 id="二、安装mongod-并启动，如下是node0机器mongdb的conf文件："><a href="#二、安装mongod-并启动，如下是node0机器mongdb的conf文件：" class="headerlink" title="二、安装mongod,并启动，如下是node0机器mongdb的conf文件："></a>二、安装mongod,并启动，如下是node0机器mongdb的conf文件：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> mongodb.conf<br><span class="hljs-comment">#----</span><br>systemLog:<br>   destination: file<br>   path: <span class="hljs-string">&quot;/app/mongodb/mongodb/log/mongod.log&quot;</span><br>   logAppend: <span class="hljs-literal">true</span><br>processManagement:<br>   fork: <span class="hljs-literal">true</span><br>   pidFilePath: /app/mongodb/mongodb/mongod.pid<br>storage:<br>   journal:<br>      enabled: <span class="hljs-literal">true</span><br>   dbPath: <span class="hljs-string">&quot;/app/mongodb/mongodb/data&quot;</span><br>   directoryPerDB: <span class="hljs-literal">true</span><br>   engine: wiredTiger<br>   wiredTiger:<br>      engineConfig:<br>         cacheSizeGB: 1<br>         directoryForIndexes: <span class="hljs-literal">true</span><br>      collectionConfig:<br>         blockCompressor: zlib<br>      indexConfig:<br>         prefixCompression: <span class="hljs-literal">true</span><br>net:   <br>   port: 9009<br>   bindIp: 192.168.94.154<br>replication:<br>   oplogSizeMB: 2048<br>   replSetName: mongo-node0 <br><span class="hljs-comment">#security:</span><br><span class="hljs-comment">#   authorization: enabled</span><br><br></code></pre></td></tr></table></figure><h2 id="二、连接mongo-初始化副本集，添加node1和node2到node0"><a href="#二、连接mongo-初始化副本集，添加node1和node2到node0" class="headerlink" title="二、连接mongo,初始化副本集，添加node1和node2到node0"></a>二、连接mongo,初始化副本集，添加node1和node2到node0</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#连接node0机器的mongdb库，并在node0上进行配置</span><br>mongo --host 192.168.94.154 --port 9009 --authenticationDatabase admin<br><br><span class="hljs-comment">#查看状态</span><br>rs.status()<br><br><span class="hljs-comment">#初始化副本集</span><br>rs.initiate()<br><br><span class="hljs-comment">#添加node1、node2成员</span><br>node0:PRIMARY&gt; rs.add(<span class="hljs-string">&#x27;192.168.94.155:9009&#x27;</span>)<br><span class="hljs-comment">#输出&#123;&quot;OK&quot; : 1 &#125;</span><br><br>node0:PRIMARY&gt; rs.add(<span class="hljs-string">&#x27;192.168.94.156:9009&#x27;</span>)<br><span class="hljs-comment">#输出&#123;&quot;OK&quot; : 1 &#125;</span><br><br><span class="hljs-comment">#查看是否加入成功</span><br>rs.status()<br><br>rs.isMaster()  <span class="hljs-comment">#输出的内容，primary：后面是指主要的节点是192.168.94.154； me : 后面指当前所在的节点是</span><br></code></pre></td></tr></table></figure><h3 id="三、测试是否实现MongoDB副本集的高可用"><a href="#三、测试是否实现MongoDB副本集的高可用" class="headerlink" title="三、测试是否实现MongoDB副本集的高可用"></a>三、测试是否实现MongoDB副本集的高可用</h3><h4 id="1、通过对primary节点添加1万条数据，看其他两个SECONDARY节点是否同步"><a href="#1、通过对primary节点添加1万条数据，看其他两个SECONDARY节点是否同步" class="headerlink" title="1、通过对primary节点添加1万条数据，看其他两个SECONDARY节点是否同步"></a>1、通过对primary节点添加1万条数据，看其他两个SECONDARY节点是否同步</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#连接primary节点mongdb数据库</span><br>mongo --host 192.168.94.154 --port 9009 --authenticationDatabase admin<br><br><span class="hljs-comment">#插入测试数据</span><br><span class="hljs-keyword">for</span>(var i=1;i&lt;=10000;i++) db.users.insert(&#123;<span class="hljs-built_in">id</span>:i,addr_1:<span class="hljs-string">&quot;Beijing&quot;</span>,addr_2:<span class="hljs-string">&quot;Shanghai&quot;</span>&#125;);<br><span class="hljs-comment">#输出：WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><br>show dbs<br><span class="hljs-comment">#输出：===============</span><br><span class="hljs-built_in">local</span>  0.001GB<br><span class="hljs-built_in">test</span>   0.000GB<br><br><span class="hljs-comment">#使用test库</span><br>use <span class="hljs-built_in">test</span><br><span class="hljs-comment">#查看表</span><br>show collections<br><br><span class="hljs-comment">#查看表数据</span><br>db.users.find()<br></code></pre></td></tr></table></figure><h3 id="2、查看SECONDARY-节点"><a href="#2、查看SECONDARY-节点" class="headerlink" title="2、查看SECONDARY 节点"></a>2、查看SECONDARY 节点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#连接SECONDARY 节点mongdb数据库</span><br>mongo --host 192.168.94.155 --port 9009 --authenticationDatabase admin<br><br>show dbs<br><span class="hljs-comment">#将会输出以下内容：</span><br>2021-10-20T14:59:13.896+0800 E  QUERY    [js] uncaught exception: Error: listDatabases failed:&#123;<br>......省略了部分错误详情......<br>shellHelper@src/mongo/shell/utils.js:790:15<br>@(shellhelp2):1:1<br><span class="hljs-comment">#================================================</span><br>以上错误信息是因为首次在SECONDARY访问集合的时候是不允许的<br><br><span class="hljs-comment"># 首次访问集合需要执行rs.slaveOk()</span><br>rs.slaveOk()     <br><br><span class="hljs-comment">#查看数据库</span><br>show dbs<br><span class="hljs-comment">#输出：===============</span><br><span class="hljs-built_in">local</span>  0.001GB<br><span class="hljs-built_in">test</span>   0.000GB<br><br><span class="hljs-comment">#使用test库</span><br>use <span class="hljs-built_in">test</span><br><br><span class="hljs-comment">#查看表</span><br>show collections<br><br><span class="hljs-comment">#查看表数据</span><br>db.users.find()<br><br></code></pre></td></tr></table></figure><p><em><strong>输出结果与primary节点一致时，说明已经同步成功！</strong></em></p><p>*<strong>Down掉primary节点，测试是否调度primary</strong></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB主-从-仲裁节点搭建</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E4%B8%BB-%E4%BB%8E-%E4%BB%B2%E8%A3%81%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E4%B8%BB-%E4%BB%8E-%E4%BB%B2%E8%A3%81%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MongoDB主-从-仲裁节点搭建（部署带认证模式）"><a href="#MongoDB主-从-仲裁节点搭建（部署带认证模式）" class="headerlink" title="MongoDB主-从-仲裁节点搭建（部署带认证模式）"></a>MongoDB主-从-仲裁节点搭建（部署带认证模式）</h1><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境:"></a>准备环境:</h2><table><thead><tr><th>IP地址</th><th>角色</th></tr></thead><tbody><tr><td>192.168.94.179:9009</td><td>主</td></tr><tr><td>192.168.94.178:9009</td><td>从</td></tr><tr><td>192.168.94.178:9019</td><td>仲裁节点</td></tr></tbody></table><h2 id="一、前言："><a href="#一、前言：" class="headerlink" title="一、前言："></a>一、前言：</h2><p><em><strong>先安装主节点mongoDB，采用二进制安装的mongo,可使用mongodb安装脚本进行二进制安装，启动后设置完成admin密码</strong></em></p><p><em><strong>请注意：下为mongodb集群正常启动后的conf文件，非启动时的mongodb.conf文件，按照正常mongo安装脚本内的mongodb.conf文件启动后，再对比修改</strong></em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /app/mongodb/conf/mongo.conf<br><br>systemLog:<br>   destination: file<br>   path: <span class="hljs-string">&quot;/app/mongodb/log/mongod.log&quot;</span><br>   logAppend: <span class="hljs-literal">true</span><br>processManagement:<br>   fork: <span class="hljs-literal">true</span><br>   pidFilePath: /app/mongodb/mongod.pid<br>storage:<br>   journal:<br>      enabled: <span class="hljs-literal">true</span><br>   dbPath: <span class="hljs-string">&quot;/app/mongodb/data&quot;</span><br>   directoryPerDB: <span class="hljs-literal">true</span><br>   <span class="hljs-comment">#engine: wiredTiger</span><br>   wiredTiger:<br>      engineConfig:<br>         cacheSizeGB: 10 <br>         directoryForIndexes: <span class="hljs-literal">true</span><br>      collectionConfig:<br>         blockCompressor: zlib<br>      indexConfig:<br>         prefixCompression: <span class="hljs-literal">true</span><br>net:   <br>   port: 9009<br>   bindIp: 192.168.94.179   <span class="hljs-comment">#修改机器ip</span><br><br>replication:<br>   oplogSizeMB: 20480<br>   replSetName: mongo-cluster  <span class="hljs-comment">#名称可以自定义，但是必须保证主节点、从节点、仲裁节点统一复制代</span><br><br>security: <span class="hljs-comment">#刚启动时请先注释下面内容</span><br>   keyFile: /app/mongodb/conf/mongo_keyfile  <span class="hljs-comment">#第一次启动时先注释</span><br>   authorization: enabled <br>   javascriptEnabled: <span class="hljs-literal">false</span><br><br><span class="hljs-comment">## /app/mongodb/conf ##认证文件目录</span><br></code></pre></td></tr></table></figure><h2 id="二、生成秘钥，并赋权"><a href="#二、生成秘钥，并赋权" class="headerlink" title="二、生成秘钥，并赋权"></a>二、生成秘钥，并赋权</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl rand -<span class="hljs-built_in">base64</span> 741 &gt;&gt; /app/mongodb/conf/mongo_keyfile<br><span class="hljs-built_in">chmod</span> 700 /app/mongodb/conf/mongo_keyfile<br></code></pre></td></tr></table></figure><p><strong>生成keyfile文件后，根据上面的conf文件修改mongo.conf，将文件内的security的注释取消，再重新启动mongo</strong></p><h2 id="三、连接mongo-192-168-94-179-9009主库"><a href="#三、连接mongo-192-168-94-179-9009主库" class="headerlink" title="三、连接mongo 192.168.94.179:9009主库"></a>三、连接mongo 192.168.94.179:9009主库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; use admin<br>&gt; config=&#123;_id:<span class="hljs-string">&#x27;mongo-cluster&#x27;</span>,members:[&#123;_id:0,host:<span class="hljs-string">&#x27;192.168.94.179:9009&#x27;</span>,priority:2&#125;,&#123;_id:1,host:<span class="hljs-string">&#x27;192.168.94.178:9009&#x27;</span>,priority:1&#125;,&#123;_id:2,host:<span class="hljs-string">&#x27;192.168.94.178:9019&#x27;</span>, arbiterOnly:<span class="hljs-literal">true</span>&#125;]&#125;<br><br><span class="hljs-comment">#mongo-cluster：该名称取自mongo的conf文件内replSetName</span><br><span class="hljs-comment">#priority的值越高，初始化完后，该节点就会成为主节点</span><br><span class="hljs-comment">#arbiterOnly:true 代表该节点为仲裁节点。</span><br><br><br><br><span class="hljs-comment">#使用配置文件config初始化副本集</span><br>&gt; rs.initiate(config)<br><br>&gt; rs.isMaster()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker启动MongoDB</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/docker%E5%90%AF%E5%8A%A8mongodb%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/docker%E5%90%AF%E5%8A%A8mongodb%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker启动MongoDB"><a href="#使用docker启动MongoDB" class="headerlink" title="使用docker启动MongoDB"></a>使用docker启动MongoDB</h1><h2 id="容器启动mongodb命令："><a href="#容器启动mongodb命令：" class="headerlink" title="容器启动mongodb命令："></a>容器启动mongodb命令：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name mongodb_docker\<br> -v /root/mongodb_docker/db:/data/db \<br> -p 27017:27017  \<br> -e MONGO_INITDB_ROOT_USERNAME=admin \<br> -e MONGO_INITDB_ROOT_PASSWORD=admin \<br> mongo --auth<br><span class="hljs-comment">#--auth：需要密码才能访问容器服务</span><br></code></pre></td></tr></table></figure><h2 id="容器连接mongodb命令："><a href="#容器连接mongodb命令：" class="headerlink" title="容器连接mongodb命令："></a>容器连接mongodb命令：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -it --<span class="hljs-built_in">rm</span> --<span class="hljs-built_in">link</span> mongodb_docker:mongo \<br>mongo mongo --host mongo -u admin -p admin --authenticationDatabase admin<br><span class="hljs-comment">#--link 后面接的是要连接的容器与现有的容器通信，mongodb_docker（容器名）：mongod（容器别名）</span><br></code></pre></td></tr></table></figure><h2 id="mongo部分使用的命令"><a href="#mongo部分使用的命令" class="headerlink" title="mongo部分使用的命令"></a>mongo部分使用的命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">创建数据库 ：<br>&gt;use weasel；<br><br>创建用户 ：<br>&gt; db.createUser(&#123;user: <span class="hljs-string">&quot;weasel&quot;</span>,<span class="hljs-built_in">pwd</span>: <span class="hljs-string">&quot;123456&quot;</span>,roles: [ &#123; role: <span class="hljs-string">&quot;readWrite&quot;</span>, db: <span class="hljs-string">&quot;weasel&quot;</span> &#125; ]&#125;)<br><br>使用新用户连接：　<br>docker run -it --<span class="hljs-built_in">rm</span> --<span class="hljs-built_in">link</span> mongodb_docker:mongo mongo mongo --host mongo -u weasel -p 123456 --authenticationDatabase weasel　<br><br>使用：<br>use weasel;<br><br>&gt; db.test2.insert(&#123;<span class="hljs-string">&quot;cc&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;das&quot;</span>:<span class="hljs-string">&#x27;123444444&#x27;</span>&#125;);<br>WriteResult(&#123; <span class="hljs-string">&quot;nInserted&quot;</span> : 1 &#125;)<br><br>&gt; db.test2.count()<br>1<br> <br>&gt; db.test2<br>db.test2<br><br>&gt; db.test2.find(&#123;<span class="hljs-string">&quot;cc&quot;</span>:<span class="hljs-string">&#x27;123&#x27;</span>&#125;);<br>&#123; <span class="hljs-string">&quot;_id&quot;</span> : ObjectId(<span class="hljs-string">&quot;5b4c3b24099d1b0ef30cc0fb&quot;</span>), <span class="hljs-string">&quot;cc&quot;</span> : <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;das&quot;</span> : <span class="hljs-string">&quot;123444444&quot;</span> &#125;<br><br></code></pre></td></tr></table></figure><h2 id="只安装客户端进行数据库连接，可使用源文件方式安装mongodb-client"><a href="#只安装客户端进行数据库连接，可使用源文件方式安装mongodb-client" class="headerlink" title="只安装客户端进行数据库连接，可使用源文件方式安装mongodb client"></a>只安装客户端进行数据库连接，可使用源文件方式安装mongodb client</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>系统为 CentOS 7，架构为 x86_64 ，就可以去 `https://repo.mongodb.org/yum/redhat/7/mongodb-org/ `路径下寻找对应的包<br>rpm -i mongodb-org-shell-4.4.4-1.el7.x86_64.rpm<br><br>如果系统为 Ubuntu 或者 Debain 则可以去 `https://repo.mongodb.org/apt/ `路径下寻找对应的包<br><span class="hljs-comment">#https://repo.mongodb.org/apt/ubuntu/dists/bionic/mongodb-org/5.0/multiverse/binary-amd64/</span><br>dpkg -i mongodb-org-shell_5.0.0_amd64.deb<br></code></pre></td></tr></table></figure><h2 id="mongoshell快速下载安装"><a href="#mongoshell快速下载安装" class="headerlink" title="mongoshell快速下载安装"></a>mongoshell快速下载安装</h2><p>下载地址: <a href="https://www.csdn.net/tags/OtTacg2sOTY4OS1ibG9n.html">https://www.csdn.net/tags/OtTacg2sOTY4OS1ibG9n.html</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">centos:<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;[mongodb-org-3.6] \nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/3.6/x86_64/\ngpgcheck=1 \nenabled=1 \ngpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/yum.repos.d/mongodb-org-3.6.repo<br>sudo yum install -y mongodb-org-shell<br><br>ubuntu :<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/mongodb-org-3.4.list<br>apt-get install -y mongodb-org-shell --allow-unauthenticated<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB二进制安装</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MongoDB二进制安装"><a href="#MongoDB二进制安装" class="headerlink" title="MongoDB二进制安装"></a>MongoDB二进制安装</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mongo各个版本下载地址:https:<span class="hljs-regexp">//</span>www.mongodb.org<span class="hljs-regexp">/dl/</span>linux<br></code></pre></td></tr></table></figure><h2 id="1-上传安装包，并解压"><a href="#1-上传安装包，并解压" class="headerlink" title="1.上传安装包，并解压"></a>1.上传安装包，并解压</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /app<br><span class="hljs-built_in">cd</span> /app<br>tar -zxnf mongodb-4.2.11<br></code></pre></td></tr></table></figure><h2 id="2-设置软链接"><a href="#2-设置软链接" class="headerlink" title="2.设置软链接"></a>2.设置软链接</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ln</span> -s /app/mongodb-4.2.11 /app/mongodb<br></code></pre></td></tr></table></figure><h2 id="3-新建mongodb用户组"><a href="#3-新建mongodb用户组" class="headerlink" title="3.新建mongodb用户组"></a>3.新建mongodb用户组</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">useradd -u 1201 -s /bin/false mongod<br><br><span class="hljs-built_in">mkdir</span> -p /app/mongodb/&#123;data,conf,<span class="hljs-built_in">log</span>&#125;<br><br><span class="hljs-built_in">chown</span> -R mongod:mongod /app/mongodb<br></code></pre></td></tr></table></figure><h2 id="4-编辑rc-local文件"><a href="#4-编辑rc-local文件" class="headerlink" title="4.编辑rc.local文件"></a>4.编辑rc.local文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;&gt;/etc/rc.local&lt;&lt;-<span class="hljs-string">EOF</span><br><span class="hljs-string">if test -f /sys/kernel/mm/transparent_hugepage/enabled; then</span><br><span class="hljs-string">    echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test -f /sys/kernel/mm/transparent_hugepage/defrag; then</span><br><span class="hljs-string">    echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">ulimit -u 65535</span><br><span class="hljs-string">/app/mongodb/bin/mongod -f /app/mongodb/conf/mongodb.conf</span><br><span class="hljs-string">EOF</span><br><br><br><span class="hljs-built_in">chmod</span> +x /etc/rc.d/rc.local<br></code></pre></td></tr></table></figure><h2 id="5-编辑limits-conf文件"><a href="#5-编辑limits-conf文件" class="headerlink" title="5.编辑limits.conf文件"></a>5.编辑limits.conf文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/security/limits.conf<br><span class="hljs-comment">#---</span><br>    * soft nofile 65535<br>    * hard nofile 65535<br>    * soft <span class="hljs-built_in">nproc</span> 32000<br>    * hard <span class="hljs-built_in">nproc</span> 32000<br><span class="hljs-comment">#---</span><br></code></pre></td></tr></table></figure><h2 id="6-编辑MongoDB-conf-文件"><a href="#6-编辑MongoDB-conf-文件" class="headerlink" title="6.编辑MongoDB.conf 文件"></a>6.编辑MongoDB.conf 文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;/app/mongodb/conf/mongodb.conf&lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>systemLog:<br>   destination: file<br>   path: <span class="hljs-string">&quot;/app/mongodb/log/mongod.log&quot;</span><br>   logAppend: <span class="hljs-literal">true</span><br>processManagement:<br>   fork: <span class="hljs-literal">true</span><br>   pidFilePath: /app/mongodb/mongod.pid<br>storage:<br>   journal:<br>      enabled: <span class="hljs-literal">true</span><br>   dbPath: <span class="hljs-string">&quot;/app/mongodb/data&quot;</span><br>   directoryPerDB: <span class="hljs-literal">true</span><br>   <span class="hljs-comment">#engine: wiredTiger</span><br>   wiredTiger:<br>      engineConfig:<br>         cacheSizeGB: 1<br>         directoryForIndexes: <span class="hljs-literal">true</span><br>      collectionConfig:<br>         blockCompressor: zlib<br>      indexConfig:<br>         prefixCompression: <span class="hljs-literal">true</span><br>net:   <br>   port: 9009<br><span class="hljs-comment">#security:</span><br><span class="hljs-comment">#   authorization: enabled    </span><br>EOF<br></code></pre></td></tr></table></figure><p>配置文件详解：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;/app/mongodb/conf/mongodb.conf&lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>systemLog:<br>   destination: file<br>   path: <span class="hljs-string">&quot;/app/mongodb/log/mongod.log&quot;</span> <span class="hljs-comment">##日志存储位置</span><br>   logAppend: <span class="hljs-literal">true</span><br>processManagement:<br>   fork: <span class="hljs-literal">true</span><br>   pidFilePath: /app/mongodb/mongod.pid<br>storage:<br>   journal: <span class="hljs-comment">##journal配置</span><br>      enabled: <span class="hljs-literal">true</span><br>   dbPath: <span class="hljs-string">&quot;/app/mongodb/data&quot;</span> <span class="hljs-comment">##数据文件存储位置</span><br>   directoryPerDB: <span class="hljs-literal">true</span>   <span class="hljs-comment">##是否一个库一个文件夹</span><br>   <span class="hljs-comment">#engine: wiredTiger ##数据引擎</span><br>   wiredTiger: <span class="hljs-comment">##WT引擎配置</span><br>      engineConfig:<br>         cacheSizeGB: 1 <span class="hljs-comment">##WT最大使用cache（根据服务器实际情况调节）</span><br>         directoryForIndexes: <span class="hljs-literal">true</span> <span class="hljs-comment">##是否将索引也按数据库名单独存储</span><br>      collectionConfig: <span class="hljs-comment">##表压缩配置</span><br>         blockCompressor: zlib<br>      indexConfig: <span class="hljs-comment">##索引配置</span><br>         prefixCompression: <span class="hljs-literal">true</span><br>net:   <br>   port: 9009<br>   bindIp: 192.168.94.205  <span class="hljs-comment">#mongodb所在机器地址</span><br><span class="hljs-comment">#replication:   #配置副本集重要参数</span><br><span class="hljs-comment">#   oplogSizeMB: 2048  #oplog的大小单位MB</span><br><span class="hljs-comment">#   replSetName: mongo-cluster  #副本集名称，同一个副本集，名称必须一致 </span><br>security:  <span class="hljs-comment">#配置安全选项</span><br>   keyFile: /app/mongodb/conf/KeyFile.file <span class="hljs-comment">##集群需要加keyfile</span><br>   authorization: enabled    <span class="hljs-comment">#开启注释为启动安全选项，建议启动mongodb时先注释，设置完用户名和密码后再取消注释</span><br>EOF<br></code></pre></td></tr></table></figure><h2 id="7-添加环境变量"><a href="#7-添加环境变量" class="headerlink" title="7.添加环境变量"></a>7.添加环境变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /etc/profile.d/mongod.sh&lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br><span class="hljs-built_in">export</span> PATH=/app/mongodb/bin/:<span class="hljs-variable">$PATH</span><br>EOF<br><br><span class="hljs-built_in">source</span> /etc/profile.d/mongod.sh<br></code></pre></td></tr></table></figure><h2 id="8-启动MongoDB"><a href="#8-启动MongoDB" class="headerlink" title="8.启动MongoDB"></a>8.启动MongoDB</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#root账户时执行：</span><br>/app/mongodb/bin/mongod -f /app/mongodb/conf/mongodb.conf<br><br><span class="hljs-comment">#非root用户执行：</span><br><span class="hljs-comment">#su - mongod -c &quot;/app/mongodb/bin/mongod -f /app/mongodb/conf/mongodb.conf&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="9-连接MongoDB"><a href="#9-连接MongoDB" class="headerlink" title="9.连接MongoDB"></a>9.连接MongoDB</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mongo --host 192.168.94.205  --port 9009<br></code></pre></td></tr></table></figure><h2 id="10-连接mongodb-创建user"><a href="#10-连接mongodb-创建user" class="headerlink" title="10.连接mongodb 创建user"></a>10.连接mongodb 创建user</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; use admin<br>&gt; db.createUser( &#123;user: <span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-built_in">pwd</span>: <span class="hljs-string">&quot;123456&quot;</span>,roles: [ &#123; role: <span class="hljs-string">&quot;root&quot;</span>, db: <span class="hljs-string">&quot;admin&quot;</span> &#125; ]&#125;)<br><br><span class="hljs-comment">#创建pipiguai数据库登录用户root，并配置密码</span><br><span class="hljs-comment">#&gt;use pipiguai</span><br><span class="hljs-comment">#&gt;db.createUser(&#123;user: &quot;root&quot;,pwd: &quot;123456&quot;,roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;pipiguai&quot; &#125; ]&#125;)</span><br></code></pre></td></tr></table></figure><h2 id="11-关闭mong"><a href="#11-关闭mong" class="headerlink" title="11.关闭mong"></a>11.关闭mong</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">/app/mongodb/bin/mongod --shutdown  -f /app/mongodb/conf/mongodb.conf<br>或者连接mongod的时候:<br>&gt; db.shutdownServer()<br></code></pre></td></tr></table></figure><h2 id="12-开启数据库认证登录"><a href="#12-开启数据库认证登录" class="headerlink" title="12.开启数据库认证登录"></a>12.开启数据库认证登录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /app/mongodb/conf/mongodb.conf<br><span class="hljs-comment">#取消如下两行注释</span><br>security:<br>   authorization: enabled<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#连接数据库</span><br>mongo --host 192.168.94.205  --port 9009 -u admin  <span class="hljs-comment">#//mongodb.conf设置了bindip的话加host测试连接</span><br><br></code></pre></td></tr></table></figure><p>mongodb启动参数说明：<a href="https://www.jb51.net/article/95310.htm">https://www.jb51.net/article/95310.htm</a></p><h2 id="13-安装客户端连接"><a href="#13-安装客户端连接" class="headerlink" title="13.安装客户端连接"></a>13.安装客户端连接</h2><h3 id="只安装客户端进行数据库连接，可使用源文件方式安装mongodb-client"><a href="#只安装客户端进行数据库连接，可使用源文件方式安装mongodb-client" class="headerlink" title="只安装客户端进行数据库连接，可使用源文件方式安装mongodb client"></a>只安装客户端进行数据库连接，可使用源文件方式安装mongodb client</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">系统为 CentOS 7，架构为 x86_64 ，就可以去 `https://repo.mongodb.org/yum/redhat/7/mongodb-org/`路径下寻找对应的包<br>rpm -i mongodb-org-shell-4.4.4-1.el7.x86_64.rpm<br><br>如果系统为 Ubuntu 或者 Debain 则可以去 `https://repo.mongodb.org/apt/` 路径下寻找对应的包<br><span class="hljs-comment">#https://repo.mongodb.org/apt/ubuntu/dists/bionic/mongodb-org/5.0/multiverse/binary-amd64/</span><br>dpkg -i mongodb-org-shell_5.0.0_amd64.deb<br><br></code></pre></td></tr></table></figure><h3 id="mongoshell快速下载安装-https-www-csdn-net-tags-OtTacg2sOTY4OS1ibG9n-html"><a href="#mongoshell快速下载安装-https-www-csdn-net-tags-OtTacg2sOTY4OS1ibG9n-html" class="headerlink" title="mongoshell快速下载安装:https://www.csdn.net/tags/OtTacg2sOTY4OS1ibG9n.html"></a>mongoshell快速下载安装:<a href="https://www.csdn.net/tags/OtTacg2sOTY4OS1ibG9n.html">https://www.csdn.net/tags/OtTacg2sOTY4OS1ibG9n.html</a></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>centos:<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;[mongodb-org-3.6] \nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/3.6/x86_64/\ngpgcheck=1 \nenabled=1 \ngpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/yum.repos.d/mongodb-org-3.6.repo<br>sudo yum install -y mongodb-org-shell<br><br>ubuntu :<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/mongodb-org-3.4.list<br>apt-get install -y mongodb-org-shell --allow-unauthenticated<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用keepalive实现postgresql高可用主从切换</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/%E4%BD%BF%E7%94%A8keepalive%E5%AE%9E%E7%8E%B0PostgreSQL%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/%E4%BD%BF%E7%94%A8keepalive%E5%AE%9E%E7%8E%B0PostgreSQL%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用keepalive实现postgresql高可用主从切换"><a href="#使用keepalive实现postgresql高可用主从切换" class="headerlink" title="使用keepalive实现postgresql高可用主从切换"></a>使用keepalive实现postgresql高可用主从切换</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://cloud.tencent.com/developer/article/1894340<br></code></pre></td></tr></table></figure><h2 id="一、机器规划、环境准备"><a href="#一、机器规划、环境准备" class="headerlink" title="一、机器规划、环境准备"></a>一、机器规划、环境准备</h2><p>基于keepalived实现postgresql高可用，这里用两台服务器作一主一从示例</p><table><thead><tr><th>主机名</th><th>IP</th><th>备注</th></tr></thead><tbody><tr><td>pgsql-1</td><td>192.168.62.129</td><td>主库</td></tr><tr><td>pgsql-2</td><td>192.168.62.130</td><td>从库</td></tr><tr><td>VIP</td><td>192.168.62.123</td><td>VIP（虚拟ip）</td></tr></tbody></table><p>备注：机器均时间同步、关闭了防火墙和selinux</p><h2 id="二、整体架构"><a href="#二、整体架构" class="headerlink" title="二、整体架构"></a>二、整体架构</h2><p><img src="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/%E4%BD%BF%E7%94%A8keepalive%E5%AE%9E%E7%8E%B0PostgreSQL%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2/image-20230329110234099.png" alt="image-20230329110234099"></p><h2 id="三、安装Keepalived"><a href="#三、安装Keepalived" class="headerlink" title="三、安装Keepalived"></a>三、安装Keepalived</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#安装依赖</span><br>yum install gcc openssl openssl‐devel libnl libnl‐devel ipvsadm -y<br><br><span class="hljs-comment">#在线安装</span><br>yum install -y keepalived<br></code></pre></td></tr></table></figure><h2 id="四、安装postgresql"><a href="#四、安装postgresql" class="headerlink" title="四、安装postgresql"></a>四、安装postgresql</h2><h3 id="安装postgresql-14"><a href="#安装postgresql-14" class="headerlink" title="安装postgresql-14"></a>安装postgresql-14</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm<br><br><span class="hljs-comment"># 安装 PostgreSQL：</span><br>sudo yum install -y postgresql14-server<br><br><span class="hljs-comment"># 安装核心数据库服务器</span><br>yum install postgresql14-server postgresql14-contrib -y<br><br><span class="hljs-comment"># 可选择初始化数据库并启用自动启动：</span><br>sudo /usr/pgsql-14/bin/postgresql-14-setup initdb<br>sudo systemctl <span class="hljs-built_in">enable</span> postgresql-14<br>sudo systemctl start postgresql-14<br><br><span class="hljs-comment">#postgresql相关路径</span><br>/var/lib/pgsql/14/data/  <span class="hljs-comment">#conf文件路径</span><br>/usr/pgsql-14/bin/      <span class="hljs-comment">#pg相关工具路径</span><br><br><span class="hljs-comment">#测试是否能正常连接</span><br>su - postgres<br>psql<br></code></pre></td></tr></table></figure><h2 id="五、搭建主从环境"><a href="#五、搭建主从环境" class="headerlink" title="五、搭建主从环境"></a>五、搭建主从环境</h2><h3 id="5-1、主节点配置"><a href="#5-1、主节点配置" class="headerlink" title="5.1、主节点配置"></a>5.1、主节点配置</h3><h4 id="5-1-1）创建用于主从访问的用户，-修改postgres用户的密码，用于远程登录。-切换到postgres用户操作"><a href="#5-1-1）创建用于主从访问的用户，-修改postgres用户的密码，用于远程登录。-切换到postgres用户操作" class="headerlink" title="5.1.1）创建用于主从访问的用户， 修改postgres用户的密码，用于远程登录。(切换到postgres用户操作)"></a>5.1.1）创建用于主从访问的用户， 修改postgres用户的密码，用于远程登录。(切换到postgres用户操作)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#切换到postgres用户操作</span><br>su - postgres<br>psql<br><br><span class="hljs-comment">#创建用于主从访问的用户</span><br><span class="hljs-comment">#创建数据库账号replica并设置密码及登录权限和备份权限</span><br>create role replica login replication encrypted password <span class="hljs-string">&#x27;replica123&#x27;</span>;<br><br><span class="hljs-comment">#修改postgres用户的密码，用于远程登录</span><br>alter USER postgres with password <span class="hljs-string">&#x27;postgres&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="5-1-2）修改pg-hba-conf和postgresql-conf配置："><a href="#5-1-2）修改pg-hba-conf和postgresql-conf配置：" class="headerlink" title="5.1.2）修改pg_hba.conf和postgresql.conf配置："></a>5.1.2）修改pg_hba.conf和postgresql.conf配置：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#运行以下命令，打开pg_hba.conf文件，设置replica用户白名单</span><br>vim /var/lib/pgsql/14/data/pg_hba.conf<br><span class="hljs-comment">##添加以下数据：</span><br><br><span class="hljs-comment">#------------------------注释原有的，替换如下的----------------------</span><br><br><span class="hljs-built_in">local</span>   all             all                                     trust<br><span class="hljs-comment">#允许任意ip地址的用户使用md5加密方式认证连接</span><br>host    all             all            0.0.0.0/0                md5<br>host    all             all             ::1/128                 md5<br><span class="hljs-comment">#允许所有用户使用local方式连接replication</span><br><span class="hljs-built_in">local</span>   replication     all                                     trust<br><span class="hljs-comment">#允许所有的用户使用md5加密方式连接replication数据库</span><br>host    replication     all             0.0.0.0/0               md5<br>host    replication     all             ::1/128                 md5<br><br>备注：pg_hba.conf参照如下格式设置：<br><span class="hljs-comment">#详解文档：https://blog.csdn.net/hmxz2nn/article/details/83717663</span><br>连接方式  连接的数据库  连接的用户 连接的主机IP 认证方式<br>例如：<br><span class="hljs-comment">#允许固定ip地址的replica用户从replication数据库进行数据同步</span><br>host replication replica 192.168.62.129/24 trust<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#运行以下命令，打开postgresql.conf文件</span><br>vim /var/lib/pgsql/14/data/postgresql.conf<br><br>listen_addresses = <span class="hljs-string">&#x27;*&#x27;</span>     <span class="hljs-comment">#监听的IP地址</span><br>max_connections = 1000      <span class="hljs-comment">#最大连接数，从库的max_connections必须要大于主库的</span><br>archive_mode = on      <span class="hljs-comment"># 允许归档</span><br>archive_command = <span class="hljs-string">&#x27;cp %p /var/lib/pgsql/14/data/pg_archive/%f&#x27;</span> <span class="hljs-comment">## 通过命令指定归档路径/  路径需要存在，不存在日志将报错</span><br>wal_level = replica    <span class="hljs-comment">#写入WAL的级别(minimal:不能通过基础备份和wal日志恢复数据库; replica: 支持wal归档和复制; logical: 在replica级别添加了逻辑解码所需的信息)</span><br>wal_log_hints = on <br>max_wal_senders = 32       <span class="hljs-comment"># 允许最多的流复制连接发送数量， 根据从节点数量来设定</span><br>hot_standby = on           <span class="hljs-comment">#热备模式</span><br>archive_timeout = 3600  <span class="hljs-comment">#在此之后强制进行日志文件段切换</span><br><br><span class="hljs-comment">#synchronous_commit = on    #开启同步复制</span><br><span class="hljs-comment">#wal_sender_timeout = 60s   #流复制主机发送数据的超时时间</span><br><span class="hljs-comment">#如果postgresql.conf中的hot_standby参数设置为on（默认值），并且数据目录中存在Standby.signal文件，则replication slave将在“热备”模式下运行。</span><br></code></pre></td></tr></table></figure><h4 id="5-1-3）重启主节点服务"><a href="#5-1-3）重启主节点服务" class="headerlink" title="5.1.3）重启主节点服务"></a>5.1.3）重启主节点服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart postgresql-14.service<br></code></pre></td></tr></table></figure><h3 id="5-2、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）"><a href="#5-2、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）" class="headerlink" title="5.2、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）"></a>5.2、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）</h3><h4 id="5-2-1）切换postgres用户"><a href="#5-2-1）切换postgres用户" class="headerlink" title="5.2.1）切换postgres用户"></a>5.2.1）切换postgres用户</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br></code></pre></td></tr></table></figure><h4 id="5-2-2-将主节点的数据进行备份到从节点"><a href="#5-2-2-将主节点的数据进行备份到从节点" class="headerlink" title="5.2.2) 将主节点的数据进行备份到从节点"></a>5.2.2) 将主节点的数据进行备份到从节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">rm</span> -rf /var/lib/pgsql/14/data/*<br><br><span class="hljs-comment">#复制后从节点的配置文件会和主节点的一样，并且一并复制的还有数据库文件，里面的数据也一样，意味着主节点有什么用户数据从节点也有</span><br>pg_basebackup -h 192.168.62.129 -D /var/lib/pgsql/14/data -U replica -P -v  -R -X stream -C -S pgstandby1 <br><br>passwd&gt;replica123<br>参数详解：<br>-h –指定作为主服务器的主机。<br>-D –指定数据目录。<br>-U –指定连接用户。<br>-P –启用进度报告。<br>-v –启用详细模式。<br>-R –启用恢复配置的创建：创建一个standby.signal文件，并将连接设置附加到数据目录下的postgresql.auto.conf。<br>-X –用于在备份中包括所需的预写日志文件（WAL文件）。流的值表示在创建备份时流式传输WAL。<br>-C –在开始备份之前，允许创建由-S选项命名的复制插槽。<br>-S –指定复制插槽名称。<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#备份过程完成后，会在data目录下创建了一个standby.signal，并将primary_conninfo写入postgresql.auto.conf</span><br><span class="hljs-built_in">cat</span> /var/lib/pgsql/14/data/postgresql.auto.conf <br><span class="hljs-comment">#输出信息：</span><br><span class="hljs-comment"># Do not edit this file manually!</span><br><span class="hljs-comment"># It will be overwritten by the ALTER SYSTEM command.</span><br>primary_conninfo = <span class="hljs-string">&#x27;user=replica passfile=&#x27;</span><span class="hljs-string">&#x27;/var/lib/pgsql/.pgpass&#x27;</span><span class="hljs-string">&#x27; channel_binding=prefer host=192.168.62.129 port=5432 sslmode=prefer sslcompression=0 sslsni=1 ssl_min_protocol_version=TLSv1.2 gssencmode=prefer krbsrvname=postgres target_session_attrs=any&#x27;</span><br>primary_slot_name = <span class="hljs-string">&#x27;pgstandby1&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-3）启动从节点"><a href="#5-2-3）启动从节点" class="headerlink" title="5.2.3）启动从节点"></a>5.2.3）启动从节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start postgresql-14<br></code></pre></td></tr></table></figure><h3 id="5-3、查看主从信息"><a href="#5-3、查看主从信息" class="headerlink" title="5.3、查看主从信息"></a>5.3、查看主从信息</h3><h4 id="5-3-1）查看主节点复制插槽-主节点执行"><a href="#5-3-1）查看主节点复制插槽-主节点执行" class="headerlink" title="5.3.1）查看主节点复制插槽(主节点执行)"></a>5.3.1）查看主节点复制插槽(主节点执行)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br>psql -c <span class="hljs-string">&quot;SELECT * FROM pg_replication_slots;&quot;</span><br>psql -c <span class="hljs-string">&#x27;select client_addr,sync_state from pg_stat_replication;&#x27;</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h4 id="5-3-2）查看从节点接收状态：-此信息只有从节点才会有"><a href="#5-3-2）查看从节点接收状态：-此信息只有从节点才会有" class="headerlink" title="5.3.2）查看从节点接收状态：(#此信息只有从节点才会有)"></a>5.3.2）查看从节点接收状态：(#此信息只有从节点才会有)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br>psql -c <span class="hljs-string">&quot;\x&quot;</span> -c <span class="hljs-string">&quot;SELECT * FROM pg_stat_wal_receiver;&quot;</span><br><br></code></pre></td></tr></table></figure><h4 id="5-3-3）查看主节点发送状态：-此信息只有主节点才会有"><a href="#5-3-3）查看主节点发送状态：-此信息只有主节点才会有" class="headerlink" title="5.3.3）查看主节点发送状态：(此信息只有主节点才会有)"></a>5.3.3）查看主节点发送状态：(此信息只有主节点才会有)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br>psql -c <span class="hljs-string">&quot;\x&quot;</span> -c <span class="hljs-string">&quot;SELECT * FROM pg_stat_replication;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-4、读写测试"><a href="#5-4、读写测试" class="headerlink" title="5.4、读写测试"></a>5.4、读写测试</h3><h4 id="5-4-1）在主节点写数据，从节点读数据。"><a href="#5-4-1）在主节点写数据，从节点读数据。" class="headerlink" title="5.4.1）在主节点写数据，从节点读数据。"></a>5.4.1）在主节点写数据，从节点读数据。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">create database <span class="hljs-built_in">test</span>;<br>\l<br></code></pre></td></tr></table></figure><h4 id="5-4-2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。"><a href="#5-4-2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。" class="headerlink" title="5.4.2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。"></a>5.4.2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">\l<br></code></pre></td></tr></table></figure><h2 id="六、创建数据库Keepalived"><a href="#六、创建数据库Keepalived" class="headerlink" title="六、创建数据库Keepalived"></a>六、创建数据库Keepalived</h2><p><strong>创建数据库Keepalived，并且创建表探测表sr_delay，后续Keepalived探测，刷新sr_delay表的last_alive字段为当前探测时间。这张表用来判断主备延迟情况，数据库故障切换时会用到这张表。</strong></p><h3 id="6-1、创建keepalived数据库、表、账号密码。（主节点上操作，会同步）"><a href="#6-1、创建keepalived数据库、表、账号密码。（主节点上操作，会同步）" class="headerlink" title="6.1、创建keepalived数据库、表、账号密码。（主节点上操作，会同步）"></a>6.1、创建keepalived数据库、表、账号密码。（主节点上操作，会同步）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建用户并设置密码</span><br>create user keepalived password <span class="hljs-string">&#x27;123qwert&#x27;</span> CONNECTION LIMIT 4 ;<br><br><span class="hljs-comment">#创建数据库</span><br>create database keepalived owner keepalived;<br><br><span class="hljs-comment">#连接到keepalived数据库</span><br>\c keepalived keepalived<br><br><span class="hljs-comment">#创建探测表sr_delay</span><br>create table sr_delay(<span class="hljs-built_in">id</span> int4, last_alive timestamp(0) without time zone);<br></code></pre></td></tr></table></figure><h3 id="6-2、设置sr-delay表"><a href="#6-2、设置sr-delay表" class="headerlink" title="6.2、设置sr_delay表"></a>6.2、设置sr_delay表</h3><p><strong>只允许写入一条记录并且不允许删除此表数据，通过触发器实现。创建触发器函数</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#设置规则</span><br>CREATE FUNCTION cannt_delete () <br>RETURNS trigger <br>LANGUAGE plpgsql AS $$ <br>BEGIN <br>RAISE EXCEPTION <span class="hljs-string">&#x27;Table sr_delay can not delete !&#x27;</span>;<br>END; <br>$$;<br><br><span class="hljs-comment">#创建触发器函数</span><br>CREATE TRIGGER trigger_sr_delay_del <br>BEFORE DELETE ON sr_delay <br>FOR EACH ROW EXECUTE PROCEDURE cannt_delete() ; <br>CREATE TRIGGER trigger_sr_delay_tru BEFORE TRUNCATE ON sr_delay FOR STATEMENT EXECUTE PROCEDURE cannt_delete() ;<br><br>插入数据<br>INSERT INTO sr_delay VALUES(1,now()) ;<br><br></code></pre></td></tr></table></figure><h2 id="七、配置Keepalived"><a href="#七、配置Keepalived" class="headerlink" title="七、配置Keepalived"></a>七、配置Keepalived</h2><p>创建所会用到的目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#keepalive所用的的脚本存放路径</span><br><span class="hljs-built_in">mkdir</span> -p /etc/keepalived/scripts<br><br><span class="hljs-comment">#后文执行脚本过程中记录的日志文件存放路径</span><br><span class="hljs-built_in">mkdir</span> -p /etc/keepalived/log<br><br><span class="hljs-comment">#创建归档文件夹</span><br><span class="hljs-built_in">mkdir</span> -p /var/lib/pgsql/14/data/pg_archive<br><span class="hljs-built_in">chown</span> postgres:postgres /var/lib/pgsql/14/data/pg_archive<br></code></pre></td></tr></table></figure><h3 id="7-1、配置keepalive-conf文件"><a href="#7-1、配置keepalive-conf文件" class="headerlink" title="7.1、配置keepalive.conf文件"></a>7.1、配置keepalive.conf文件</h3><p>以下是Keepalived主节点的配置</p><p>备注：Keepalived备节点只需要priority参数为99，router_id改成主机名（pg-2)其余参数配置一样。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/keepalived/keepalived.conf<br><br>! Configuration File <span class="hljs-keyword">for</span> keepalived<br>global_defs &#123;<br><span class="hljs-comment">## 邮件通知信息</span><br><span class="hljs-comment">#  notification_email &#123;</span><br><span class="hljs-comment">#    # 定义收件人</span><br><span class="hljs-comment">#    1962821461@qq.com</span><br><span class="hljs-comment">#  &#125;</span><br><span class="hljs-comment">#  # SMTP服务器地址</span><br><span class="hljs-comment">#  smtp_server 192.168.62.129</span><br><span class="hljs-comment">#  smtp_connect_timeout 30</span><br>    <span class="hljs-comment">#路由器标识，一般不用改，也可以写成每个主机自己的主机名</span><br>   router_id pg-1<br>&#125;<br><br><span class="hljs-comment"># 定义用于实例执行的脚本内容，比如可以在线降低优先级，用于强制切换</span><br>vrrp_script check_pg_alived &#123;<br>        script <span class="hljs-string">&quot;/etc/keepalived/scripts/check_pg.sh&quot;</span><br>        interval 5<br>        fall 3 <span class="hljs-comment"># require 3 failures for KO</span><br>&#125;<br><br><span class="hljs-comment">#virtual_server 192.168.62.123 5432 &#123;</span><br><span class="hljs-comment">#    delay_loop 6 # 每个6秒查询Realserver状态</span><br><span class="hljs-comment">#    lb_algo rr   # lvs算法</span><br><span class="hljs-comment">#    lb_kind DR   # Direct Route</span><br><span class="hljs-comment">#    persistence_timeout 0 # 同一IP链接60秒内被分配到同一台realserver</span><br><span class="hljs-comment">#    protocol TCP            #用tcp协议检查realserver状态</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#    real_server 192.168.62.129 5432&#123;</span><br><span class="hljs-comment">#        weight 100</span><br><span class="hljs-comment">#        TCP_CHECK &#123;</span><br><span class="hljs-comment">#            connect_timeout 5 #10秒钟无响应超时</span><br><span class="hljs-comment">#            nb_get_retry 3</span><br><span class="hljs-comment">#            delay_before_retry 3</span><br><span class="hljs-comment">#            connect_port 5432</span><br><span class="hljs-comment">#        &#125;</span><br><span class="hljs-comment">#    &#125;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#    real_server 192.168.62.130 5432&#123;</span><br><span class="hljs-comment">#        weight 100</span><br><span class="hljs-comment">#        TCP_CHECK &#123;</span><br><span class="hljs-comment">#            connect_timeout 5 #10秒钟无响应超时</span><br><span class="hljs-comment">#            nb_get_retry 3</span><br><span class="hljs-comment">#            delay_before_retry 3</span><br><span class="hljs-comment">#            connect_port 5432</span><br><span class="hljs-comment">#        &#125;</span><br><span class="hljs-comment">#    &#125;</span><br><span class="hljs-comment">#&#125;</span><br><br><span class="hljs-comment"># 一个vrrp_instance就是定义一个虚拟路由器的，实例名称</span><br>vrrp_instance VI_1 &#123;<br>  <span class="hljs-comment"># 定义初始状态</span><br>    state BACKUP<br>    <span class="hljs-comment">#非抢占模式</span><br>    nopreempt<br>    <span class="hljs-comment"># 工作接口（网卡名），通告选举使用哪个接口进行</span><br>    interface ens33<br>    <span class="hljs-comment"># 虚拟路由ID，如果是一组虚拟路由就定义一个ID，如果是多组就要定义多个，而且这个虚拟</span><br>    <span class="hljs-comment"># ID还是虚拟MAC最后一段地址的信息，取值范围0-255</span><br>    virtual_router_id 51<br>    <span class="hljs-comment">#权重 备库的priority小于主库的，同时大于主库priority + weight 的值</span><br>    priority 100<br>    <span class="hljs-comment"># 通信认证机制，这里是明文认证还有一种是加密认证</span><br>    advert_int 1<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass abcdefgh<br>    &#125;<br>    <span class="hljs-comment"># 追踪脚本，通常用于去执行上面的vrrp_script定义的脚本内容</span><br>    track_script &#123;<br>        check_pg_alived<br>    &#125;<br>  <span class="hljs-comment"># 设置虚拟VIP地址</span><br>    virtual_ipaddress &#123;<br>        192.168.62.123<br>    &#125;<br>   smtp_alert<br>   <span class="hljs-comment"># 如果主机状态变成Master|Backup|Fault之后会去执行的通知脚本，脚本要自己写</span><br>      notify_master <span class="hljs-string">&quot;/etc/keepalived/scripts/failover.sh&quot;</span><br>      notify_fault <span class="hljs-string">&quot;/etc/keepalived/scripts/fault.sh&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2、-数据库监控脚本（check-pg-sh）"><a href="#7-2、-数据库监控脚本（check-pg-sh）" class="headerlink" title="7.2、 数据库监控脚本（check_pg.sh）"></a>7.2、 数据库监控脚本（check_pg.sh）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/keepalived/scripts/check_pg.sh<br><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment">#数据库、端口、用户名、数据库密码、日志文件路径</span><br><span class="hljs-built_in">export</span> PGDATABASE=keepalived<br><span class="hljs-built_in">export</span> PGPORT=5432<br><span class="hljs-built_in">export</span> PGUSER=keepalived<br><span class="hljs-built_in">export</span> PGHOME=/usr/pgsql-14/bin<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$PGHOME</span><br>pgpwd=<span class="hljs-string">&#x27;123qwert&#x27;</span><br><span class="hljs-built_in">export</span> PGPASSWORD=<span class="hljs-variable">$pgpwd</span><br><span class="hljs-built_in">export</span> PGMIP=127.0.0.1<br>LOGFILE=/etc/keepalived/log/pg_status.log<br>keeplognums=30000<br><br>SQL1=<span class="hljs-string">&#x27;SELECT pg_is_in_recovery from pg_is_in_recovery();&#x27;</span><br><span class="hljs-comment">#SQL2=&#x27;update sr_delay set sr_date = now() where id =1;&#x27;</span><br>SQL2=<span class="hljs-string">&#x27;UPDATE sr_delay SET last_alive= now();&#x27;</span><br>SQL3=<span class="hljs-string">&#x27;SELECT 1;&#x27;</span><br><br><span class="hljs-comment">#pg_port_status=`lsof -i :$PGPORT | grep LISTEN | wc -l`</span><br><span class="hljs-comment">#pg_port_status=`ps -ef | grep LISTEN | wc -l`</span><br><span class="hljs-comment">#if [ $pg_port_status -lt 1 ];then</span><br><span class="hljs-comment">#    echo -e `date +&quot;%F %T&quot;` &quot;ERROR：postgreSQL 没有运行，请检查 postgreSQL 服务器状态！&quot; &gt;&gt; $LOGFILE</span><br><span class="hljs-comment">#    exit 1</span><br><span class="hljs-comment">#fi</span><br><br><span class="hljs-comment"># 备库不检查存活,主库更新状态</span><br>db_role=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$SQL1</span>  | <span class="hljs-variable">$PGHOME</span>/psql  -d <span class="hljs-variable">$PGDATABASE</span> -U <span class="hljs-variable">$PGUSER</span> -At -w`<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$db_role</span> == <span class="hljs-string">&#x27;t&#x27;</span> ];<span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;注意：当前数据库为standby DB！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span><br>   <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment">#判断主库是否可用</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SQL3</span> | psql -p <span class="hljs-variable">$PGPORT</span> -d <span class="hljs-variable">$PGDATABASE</span> -U <span class="hljs-variable">$PGUSER</span> -At -w<br><span class="hljs-keyword">if</span> [ $? -eq 0 ] ;<span class="hljs-keyword">then</span><br>   <span class="hljs-comment">#当主库可用时，主库更新sr_delay 表</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-variable">$SQL2</span> | psql -p <span class="hljs-variable">$PGPORT</span> -d <span class="hljs-variable">$PGDATABASE</span> -U <span class="hljs-variable">$PGUSER</span> -At -w<br>   <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;Success：更新master sr_delay成功！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span><br>   <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;Error:服务是否正在运行？&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span><br>   <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment">#日志保留 keeplognums 行</span><br><span class="hljs-keyword">if</span> [ ! -f <span class="hljs-variable">$&#123;MONITOR_LOG&#125;</span> ] ;<span class="hljs-keyword">then</span> <span class="hljs-built_in">touch</span> <span class="hljs-variable">$&#123;MONITOR_LOG&#125;</span>;<span class="hljs-keyword">fi</span> <br>lognums=`<span class="hljs-built_in">cat</span> <span class="hljs-variable">$&#123;MONITOR_LOG&#125;</span> |<span class="hljs-built_in">wc</span> -l`<br>catnum=$((<span class="hljs-variable">$&#123;lognums&#125;</span> -<span class="hljs-variable">$&#123;keeplognums&#125;</span>))<br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$lognums</span> -gt <span class="hljs-variable">$&#123;keeplognums&#125;</span> ]] ; <span class="hljs-keyword">then</span> sed -i <span class="hljs-string">&quot;1,<span class="hljs-variable">$&#123;catnum&#125;</span>d&quot;</span> <span class="hljs-variable">$&#123;MONITOR_LOG&#125;</span>; <span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="7-3、当主库挂掉后，切换脚本-failover-sh"><a href="#7-3、当主库挂掉后，切换脚本-failover-sh" class="headerlink" title="7.3、当主库挂掉后，切换脚本 failover.sh"></a>7.3、当主库挂掉后，切换脚本 failover.sh</h3><p>此脚本每隔10秒执行一次，执行频率由keepalived.conf配置文件中interval参数设置， 脚本主要作用为：检测主库是否存活、更新sr_delay表last_alive字段为当前探测时间。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/keepalived/scripts/failover.sh<br><br><span class="hljs-comment">#!/bin/bash </span><br><span class="hljs-built_in">export</span> PGPORT=5432 <br><span class="hljs-built_in">export</span> PGUSER=keepalived <br><span class="hljs-built_in">export</span> PG_OS_USER=postgres <br><span class="hljs-built_in">export</span> PGDBNAME=keepalived <br><span class="hljs-built_in">export</span> LANG=en_US.UTF-8<br><span class="hljs-built_in">export</span> PGPATH=/usr/pgsql-14/bin/ <br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$PGPATH</span> <br><span class="hljs-built_in">export</span> PGMIP=127.0.0.1 <br>LOGFILE=<span class="hljs-string">&#x27;/etc/keepalived/log/failover.log&#x27;</span><br><span class="hljs-comment"># 主备数据库同步时延，单位为秒 </span><br>sr_allowed_delay_time=100<br><br>SQL1=<span class="hljs-string">&#x27;select pg_is_in_recovery from pg_is_in_recovery();&#x27;</span> <br>SQL2=<span class="hljs-string">&quot;select count(1) as delay_time from sr_delay where now()&lt;(last_alive + interval &#x27;<span class="hljs-variable">$&#123;sr_allowed_delay_time&#125;</span> seconds&#x27;);&quot;</span><br><span class="hljs-comment">#SQL2=&quot;select count(1) as delay_time from sr_delay where now()&lt;(last_alive + interval &#x27;100 seconds&#x27;);&quot; </span><br><span class="hljs-built_in">sleep</span> <span class="hljs-variable">$sr_allowed_delay_time</span><br>db_role=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$SQL1</span> | psql -At -p <span class="hljs-variable">$PGPORT</span> -U <span class="hljs-variable">$PGUSER</span> -d <span class="hljs-variable">$PGDBNAME</span> -w` <br>db_sr_delaytime=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$SQL2</span> | psql -p <span class="hljs-variable">$PGPORT</span> -d <span class="hljs-variable">$PGDBNAME</span> -U <span class="hljs-variable">$PGUSER</span> -At -w` <br><span class="hljs-comment">#执行命令 pg_ctl promote 激活备库</span><br>SWITCH_COMMAND=<span class="hljs-string">&#x27;/usr/pgsql-14/bin/pg_ctl promote -D /var/lib/pgsql/14/data/&#x27;</span> <br><span class="hljs-comment"># 如果为备库，且延迟大于指定时间则切换为主库</span><br>f 表示为主库<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;db_role&#125;</span> == <span class="hljs-string">&#x27;f&#x27;</span> ];<br><span class="hljs-keyword">then</span> <br>  <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;注意：当前postgreSQL DB为master数据库，不能切换！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span> <br>  <span class="hljs-built_in">exit</span> 0 <br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$db_sr_delaytime</span> -gt 0 ];<br><span class="hljs-keyword">then</span> <br>  <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;注意：当前主数据库健康，备用数据库不能切换！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span> <br>  <span class="hljs-built_in">exit</span> 0 <br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ !<span class="hljs-variable">$db_sr_delaytime</span> ];<br><span class="hljs-keyword">then</span> <br>  <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;注意：当前数据库为statndby，准备切换master数据库！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span> <br>  su - <span class="hljs-variable">$PG_OS_USER</span> -c <span class="hljs-string">&quot;<span class="hljs-variable">$SWITCH_COMMAND</span>&quot;</span> <br><span class="hljs-keyword">elif</span> [ $? -eq 0 ];<br><span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;success：当前备库切换主PG库成功！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span> <br>  <span class="hljs-built_in">exit</span> 0 <br><span class="hljs-keyword">else</span> <br>  <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;error：备库切换主PG库失败！，请查收！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span> <br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><h3 id="7-4、keepalived-进入错误状态时执行的脚本-fault-sh"><a href="#7-4、keepalived-进入错误状态时执行的脚本-fault-sh" class="headerlink" title="7.4、keepalived 进入错误状态时执行的脚本 fault.sh"></a>7.4、keepalived 进入错误状态时执行的脚本 fault.sh</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/keepalived/scripts/fault.sh<br><br><span class="hljs-comment">#!/bin/bash</span><br>LOGGFILE=/etc/keepalived/log/pg_db_fault.log<br>PGPORT=5432<br>PGMIP=192.168.62.129<br><span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;错误：由于主数据库发生了一些未知问题，所以关闭PostgreSQL数据库！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span><br><br><span class="hljs-comment">#PGCOUNT=`ps -ef|grep &#x27;/usr/pgsql-14/bin/postgres -D /var/lib/pgsql/14/data&#x27; |wc -l`</span><br><br><span class="hljs-comment">#if [ $PGCOUNT -gt 1 ];then</span><br><span class="hljs-comment">#  PGPID=&quot;`netstat -anp|grep $PGPORT |awk &#x27;&#123;printf $7&#125;&#x27;|cut -d/ -f1`&quot;</span><br><span class="hljs-comment">#  kill -9 $PGPID</span><br><span class="hljs-comment">#  echo -e `date +&quot;%F %T&quot;` &quot;ERROR：由于主数据库发生了一些未知问题，所以关闭PostgreSQL数据库！&quot; &gt;&gt; $LOGFILE</span><br><span class="hljs-comment">#  exit 1</span><br><span class="hljs-comment">#fi</span><br><br>PGPID=<span class="hljs-string">&quot;`netstat -anp|grep <span class="hljs-variable">$PGPORT</span> |awk &#x27;&#123;printf <span class="hljs-variable">$7</span>&#125;&#x27;|cut -d/ -f1`&quot;</span><br>systemctl stop keepalived<br><br><span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$PGPID</span><br><span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;ERROR：由于主数据库发生了一些未知问题，所以关闭PostgreSQL数据库！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span><br>  systemctl stop keepalived <br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="7-5、配置权限并分发到备节点"><a href="#7-5、配置权限并分发到备节点" class="headerlink" title="7.5、配置权限并分发到备节点"></a>7.5、配置权限并分发到备节点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> 755 /etc/keepalived/scripts/*<br><br>scp /etc/keepalived/scripts/* root@192.168.62.130:/etc/keepalived/scripts/<br></code></pre></td></tr></table></figure><h3 id="7-6、启动keepalived"><a href="#7-6、启动keepalived" class="headerlink" title="7.6、启动keepalived"></a>7.6、启动keepalived</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start keepalived<br>systemctl <span class="hljs-built_in">enable</span> keepalived<br>systemctl status keepalived<br></code></pre></td></tr></table></figure><h2 id="八、测试主备是否切换"><a href="#八、测试主备是否切换" class="headerlink" title="八、测试主备是否切换"></a>八、测试主备是否切换</h2><p><strong>测试down掉主机后，查看备库是否能够写入数据</strong></p><h3 id="8-1、在192-168-62-129上停掉数据库"><a href="#8-1、在192-168-62-129上停掉数据库" class="headerlink" title="8.1、在192.168.62.129上停掉数据库"></a>8.1、在192.168.62.129上停掉数据库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl stop postgresql-14<br></code></pre></td></tr></table></figure><h3 id="8-2、测试备库是否能够写入数据"><a href="#8-2、测试备库是否能够写入数据" class="headerlink" title="8.2、测试备库是否能够写入数据"></a>8.2、测试备库是否能够写入数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看ip是否切换</span><br>ip add | grep 192.128.62.123<br><br><span class="hljs-comment">#如果有Navicat连接工具可直接测试是否能够连接并写入数据，没有的话按照下述步骤测试是否能写入数据！（因为执行切换时需要时间，所以请在down机后三分钟测试是否能写入数据）</span><br><span class="hljs-comment">#可通过查看/etc/keepalived/log/failover.log日志判断是否切换成功！</span><br><br><span class="hljs-comment">#无工具测试：</span><br><span class="hljs-comment">##切换完成后在130机器上，连接数据库</span><br><span class="hljs-comment">##创建测试表</span><br>CREATE TABLE <span class="hljs-built_in">test</span>(ID VARCHAR(20));<br><span class="hljs-comment">##插入测试数据</span><br>INSERT INTO <span class="hljs-built_in">test</span>(ID) VALUES (<span class="hljs-string">&#x27;1234554321&#x27;</span>);<br><span class="hljs-comment">##查询数据是否写入</span><br>SELECT * from <span class="hljs-built_in">test</span>;<br><span class="hljs-comment">##删除测试表</span><br>DROP TABLE IF EXISTS <span class="hljs-built_in">test</span>;<br><br></code></pre></td></tr></table></figure><h3 id="8-3、修复192-168-62-129"><a href="#8-3、修复192-168-62-129" class="headerlink" title="8.3、修复192.168.62.129"></a>8.3、修复192.168.62.129</h3><p>使用pg_rewind 同步新主库的数据到原主库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br><br>/usr/pgsql-14/bin/pg_rewind -R --target-pgdata <span class="hljs-string">&#x27;/var/lib/pgsql/14/data/&#x27;</span> --source-server <span class="hljs-string">&#x27;host=192.168.62.130 port=5432 user=postgres password=postgres dbname=postgres&#x27;</span><br><br></code></pre></td></tr></table></figure><p>如果这个地方咱们的wal日志已经被覆盖了了很多，那么就需要将我们的归档备份日志&#x2F;pg_archive&#x2F;给scp过来<br>注意：需要注意新主和备上面TimeLineID的差异</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">scp postgres@192.168.62.130:/var/lib/pgsql/14/data/pg_archive/00000002*  /var/lib/pgsql/14/data/pg_archive/<br></code></pre></td></tr></table></figure><p>启动数据库，然后检查主备是否正常</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start postgresql-14<br><br><span class="hljs-comment">#检查主备wal sender和receiver是否正常</span><br>ps axu |grep walreceiver<br><br>检查数据是否正常：根据5.3步骤来进行查看<br></code></pre></td></tr></table></figure><p>启动Keepalived，查看Keepalived状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl  start keepalived<br>systemctl status keepalived<br></code></pre></td></tr></table></figure><p><em><strong>再次切换测试数据是否正常</strong></em></p><h3 id="8-4、再次切换测试"><a href="#8-4、再次切换测试" class="headerlink" title="8.4、再次切换测试"></a>8.4、再次切换测试</h3><p>在做切换前，先要检查192.168.62.129和192.168.62.130上面的Keepalived正常以及vip和主从正常，在192.168.62.130上停掉数据库:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">192.168.62.130上停掉数据库:<br><br>systemctl stop postgresql-14<br></code></pre></td></tr></table></figure><h3 id="8-5、查看是否切换成功，测试是否能够写入数据"><a href="#8-5、查看是否切换成功，测试是否能够写入数据" class="headerlink" title="8.5、查看是否切换成功，测试是否能够写入数据"></a>8.5、查看是否切换成功，测试是否能够写入数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看ip是否切换</span><br>ip add | grep 192.128.62.123<br><br><span class="hljs-comment">#如果有Navicat连接工具可直接测试是否能够连接并写入数据，没有的话按照下述步骤测试是否能写入数据！（因为执行切换时需要时间，所以请在down机后三分钟测试是否能写入数据）</span><br><span class="hljs-comment">#可通过查看/etc/keepalived/log/failover.log日志判断是否切换成功！</span><br><br><span class="hljs-comment">#无工具测试：</span><br><span class="hljs-comment">##切换完成后在129机器上，连接数据库</span><br><span class="hljs-comment">##创建测试表</span><br>CREATE TABLE <span class="hljs-built_in">test</span>(ID VARCHAR(20));<br><span class="hljs-comment">##插入测试数据</span><br>INSERT INTO <span class="hljs-built_in">test</span>(ID) VALUES (<span class="hljs-string">&#x27;1234554321&#x27;</span>);<br><span class="hljs-comment">##查询数据是否写入</span><br>SELECT * from <span class="hljs-built_in">test</span>;<br><span class="hljs-comment">##删除测试表</span><br>DROP TABLE IF EXISTS <span class="hljs-built_in">test</span>;<br><br></code></pre></td></tr></table></figure><h3 id="8-6、修复192-168-62-130"><a href="#8-6、修复192-168-62-130" class="headerlink" title="8.6、修复192.168.62.130"></a>8.6、修复192.168.62.130</h3><p>使用pg_rewind 同步新主库的数据到原主库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br><br>/usr/pgsql-14/bin/pg_rewind -R --target-pgdata <span class="hljs-string">&#x27;/var/lib/pgsql/14/data/&#x27;</span> --source-server <span class="hljs-string">&#x27;host=192.168.62.129 port=5432 user=postgres password=postgres dbname=postgres&#x27;</span><br><br></code></pre></td></tr></table></figure><p>如果这个地方咱们的wal日志已经被覆盖了了很多，那么就需要将我们的归档备份日志&#x2F;pg_archive&#x2F;给scp过来<br>注意：需要注意新主和备上面TimeLineID的差异</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">scp postgres@192.168.62.129:/var/lib/pgsql/14/data/pg_archive/00000002*  /var/lib/pgsql/14/data/pg_archive/<br></code></pre></td></tr></table></figure><p>启动数据库，然后检查主备是否正常</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start postgresql-14<br><br><span class="hljs-comment">#检查主备wal sender和receiver是否正常</span><br>ps axu |grep walreceiver<br><br>检查数据是否正常：根据5.3步骤来进行查看<br></code></pre></td></tr></table></figure><p>启动Keepalived，查看Keepalived状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl  start keepalived<br>systemctl status keepalived<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>PostgreSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL单节点搭建</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/PostgreSQL%E5%8D%95%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/PostgreSQL%E5%8D%95%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PostgreSQL单节点搭建"><a href="#PostgreSQL单节点搭建" class="headerlink" title="PostgreSQL单节点搭建"></a>PostgreSQL单节点搭建</h1><p>PostgreSQL是一种特性非常齐全的自由软件的对象-关系型数据库管理系统(ORDBMS)，稳定性比MySQL要强，高并发情况下读写性能好。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">官网地址：https://www.postgresql.org/<br></code></pre></td></tr></table></figure><h2 id="一、在线安装"><a href="#一、在线安装" class="headerlink" title="一、在线安装"></a>一、在线安装</h2><p>在线安装地址：<a href="https://www.postgresql.org/download/linux/redhat/">https://www.postgresql.org/download/linux/redhat/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装存储库 RPM：</span><br>sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm<br><br><span class="hljs-comment"># 安装 PostgreSQL：</span><br>sudo yum install -y postgresql14-server<br><br><span class="hljs-comment"># 可选择初始化数据库并启用自动启动：</span><br>sudo /usr/pgsql-14/bin/postgresql-14-setup initdb<br>sudo systemctl <span class="hljs-built_in">enable</span> postgresql-14<br>sudo systemctl start postgresql-14<br><br><span class="hljs-comment"># 安装核心数据库服务器</span><br>yum install postgresql14-server postgresql14-contrib -y<br><br><span class="hljs-comment">#postgresql相关路径</span><br>/var/lib/pgsql/14/data/  <span class="hljs-comment">#conf文件路径</span><br><br><span class="hljs-comment">#测试是否能正常连接</span><br>su - postgres<br>psql<br></code></pre></td></tr></table></figure><h2 id="二、离线安装（下载安装包方式安装）"><a href="#二、离线安装（下载安装包方式安装）" class="headerlink" title="二、离线安装（下载安装包方式安装）"></a>二、离线安装（下载安装包方式安装）</h2><p>参考博主文档：<a href="https://blog.csdn.net/weixin_47980221/article/details/121124658">https://blog.csdn.net/weixin_47980221/article/details/121124658</a><br>离线安装包下载地址：<a href="https://ftp.postgresql.org/pub/source/">https://ftp.postgresql.org/pub/source/</a></p><h3 id="1、下载并解压安装包"><a href="#1、下载并解压安装包" class="headerlink" title="1、下载并解压安装包"></a>1、下载并解压安装包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app &amp;&amp; <span class="hljs-built_in">cd</span> /app<br><br>wget https://ftp.postgresql.org/pub/source/v14.5/postgresql-14.5.tar.gz --no-check-certificate<br><br>tar -xnf postgresql-14.5.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> postgresql-14.5<br><br><span class="hljs-comment">#添加软链接</span><br><span class="hljs-built_in">ln</span> -s /app/postgresql-14.5/ /usr/local/pgsql/<br></code></pre></td></tr></table></figure><h3 id="2、创建postgresql用户，并设置密码"><a href="#2、创建postgresql用户，并设置密码" class="headerlink" title="2、创建postgresql用户，并设置密码"></a>2、创建postgresql用户，并设置密码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">useradd postgres<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;123123&quot;</span> |passwd<br><br></code></pre></td></tr></table></figure><h3 id="3、编译安装"><a href="#3、编译安装" class="headerlink" title="3、编译安装"></a>3、编译安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#安装必要依赖</span><br>yum install -y bison flex readline-devel zlib-devel<br>yum install docbook-dtds docbook-style-xsl fop libxslt -y<br>yum install -y gcc<br><br><span class="hljs-comment">#创建数据目录</span><br><span class="hljs-built_in">mkdir</span>  -p /usr/local/pgsql/data<br><br><span class="hljs-comment">#设置用户组</span><br><span class="hljs-built_in">chown</span> -R postgres.postgres /usr/local/pgsql/<br><br><span class="hljs-comment">#配置编译</span><br><span class="hljs-built_in">cd</span> /usr/local/pgsql/<br>./configure<br>make &amp;&amp; make install<br><br></code></pre></td></tr></table></figure><h3 id="4、初始化数据库"><a href="#4、初始化数据库" class="headerlink" title="4、初始化数据库"></a>4、初始化数据库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#切换为postgres用户</span><br>su - postgres<br><br><span class="hljs-comment">#初始化数据库</span><br>/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data/　　<br></code></pre></td></tr></table></figure><h3 id="5、启动数据库"><a href="#5、启动数据库" class="headerlink" title="5、启动数据库"></a>5、启动数据库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#启动数据库</span><br>/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data/ -l ./logfile start<br><span class="hljs-comment">#-l：指定日志文件位置，直接输出当前目录下的logfile，可以自己指定</span><br><span class="hljs-comment">#-D：指定数据目录，默认如果不加数据目录报错会找不到</span><br><br>停止数据库<br>/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data/ stop<br><br>重启数据库<br>/usr/local/pgsql/bin/pg_ctl restart -D /usr/local/pgsql/data/ -m fast<br></code></pre></td></tr></table></figure><h3 id="6、环境变量修改"><a href="#6、环境变量修改" class="headerlink" title="6、环境变量修改"></a>6、环境变量修改</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi ~/.bash_profile<br><span class="hljs-comment">#增加</span><br><span class="hljs-built_in">export</span> PGHOME=/usr/local/pgsql<br><span class="hljs-built_in">export</span> PGDATA=/usr/local/pgsql/data<br>PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HOME</span>/bin:<span class="hljs-variable">$PGHOME</span>/bin<br><br><span class="hljs-comment">#生效 </span><br><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure><h3 id="7、配置文件修改"><a href="#7、配置文件修改" class="headerlink" title="7、配置文件修改"></a>7、配置文件修改</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/local/pgsql/data<br><br><span class="hljs-comment">#备份文件</span><br><span class="hljs-built_in">cp</span> postgresql.conf&#123;,.bak&#125;<br><br><span class="hljs-comment">#修改配置文件</span><br>vim postgresql.conf<br><br>listen_addresses  <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-comment">#默认本机</span><br>max_connections   1000 <span class="hljs-comment">#默认100</span><br><br><span class="hljs-comment">##其他相关内存参数优化这里不做过多配置</span><br><br><span class="hljs-comment">#添加IP网段授权（可选）</span><br>vim /usr/local/pgsql/data/pg_hba.conf<br><span class="hljs-comment">#...</span><br>host    all             all             192.168.62.0/24         trust　　　　指定网段可连接<br>host    all             all             0.0.0.0/0               trust　　　　所有网段可连接<br></code></pre></td></tr></table></figure><h3 id="8、简单操作"><a href="#8、简单操作" class="headerlink" title="8、简单操作"></a>8、简单操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#连接数据库</span><br>psql -h 127.0.0.1 -U postgres -p 5432<br><span class="hljs-comment">## -d指定连接后选中的数据库，默认是postgres</span><br><br><span class="hljs-comment">##命令提示符前面为当前数据库，使用 \l (反斜杠+l)查看当前数据库列表</span><br><br><span class="hljs-comment">#为用户postgres设置密码，增强安全性:</span><br>ALTER USER postgres WITH PASSWORD <span class="hljs-string">&#x27;YourPassWord&#x27;</span>;<br><br><span class="hljs-comment">#查询账号</span><br>SELECT usename from pg_user;<br><br>CREATE DATABASE <span class="hljs-built_in">test</span> WITH OWNER=postgres ENCODING=<span class="hljs-string">&#x27;UTF-8&#x27;</span>; <span class="hljs-comment">#创建新的数据库 </span><br>create table 表名(字段 属性(),.....)  创建表 <br>\c <span class="hljs-built_in">test</span>   <span class="hljs-comment">#切换当前数据库为test</span><br>\d        <span class="hljs-comment">#查看当前数据库下所有表</span><br>\d 表名   <span class="hljs-comment">#查看表结构详细信息</span><br>\q　　    <span class="hljs-comment">#退出交互界面</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>PostgreSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>postgresql主从搭建</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/PostgreSQL%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/PostgreSQL%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PostgreSQL主从搭建"><a href="#PostgreSQL主从搭建" class="headerlink" title="PostgreSQL主从搭建"></a>PostgreSQL主从搭建</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://www.cnblogs.com/guapitomjoy/p/15330079.html<br>参考文档：https://www.cnblogs.com/ezgod/p/15843221.html<br></code></pre></td></tr></table></figure><h2 id="一、机器规划"><a href="#一、机器规划" class="headerlink" title="一、机器规划"></a>一、机器规划</h2><p>基于pgpool中间件实现postgresql一主多从集群部署，这里用两台服务器作一主一从示例</p><table><thead><tr><th>主机名</th><th>IP</th><th>主从划分</th></tr></thead><tbody><tr><td>pgsql-1</td><td>192.168.62.129</td><td>主库</td></tr><tr><td>pgsql-2</td><td>192.168.62.130</td><td>从库</td></tr></tbody></table><h2 id="二、整体架构"><a href="#二、整体架构" class="headerlink" title="二、整体架构"></a>二、整体架构</h2><p><img src="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/PostgreSQL%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA/image-20221028174953304.png" alt="image-20221028174953304"></p><h2 id="三、安装postgresql"><a href="#三、安装postgresql" class="headerlink" title="三、安装postgresql"></a>三、安装postgresql</h2><h3 id="3-1、安装postgresql-14"><a href="#3-1、安装postgresql-14" class="headerlink" title="3.1、安装postgresql-14"></a>3.1、安装postgresql-14</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm<br><br><span class="hljs-comment"># 安装 PostgreSQL：</span><br>sudo yum install -y postgresql14-server<br><br><span class="hljs-comment"># 可选择初始化数据库并启用自动启动：</span><br>sudo /usr/pgsql-14/bin/postgresql-14-setup initdb<br>sudo systemctl <span class="hljs-built_in">enable</span> postgresql-14<br>sudo systemctl start postgresql-14<br><br><span class="hljs-comment"># 安装核心数据库服务器</span><br>yum install postgresql14-server postgresql14-contrib -y<br><br><span class="hljs-comment">#postgresql相关路径</span><br>/var/lib/pgsql/14/data/  <span class="hljs-comment">#conf文件路径</span><br><br><span class="hljs-comment">#测试是否能正常连接</span><br>su - postgres<br>psql<br></code></pre></td></tr></table></figure><h3 id="3-2、主节点配置"><a href="#3-2、主节点配置" class="headerlink" title="3.2、主节点配置"></a>3.2、主节点配置</h3><h4 id="3-2-1）创建用于主从访问的用户，-修改postgres用户的密码，用于远程登录。-切换到postgres用户操作"><a href="#3-2-1）创建用于主从访问的用户，-修改postgres用户的密码，用于远程登录。-切换到postgres用户操作" class="headerlink" title="3.2.1）创建用于主从访问的用户， 修改postgres用户的密码，用于远程登录。(切换到postgres用户操作)"></a>3.2.1）创建用于主从访问的用户， 修改postgres用户的密码，用于远程登录。(切换到postgres用户操作)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#切换到postgres用户操作</span><br>su - postgres<br>psql<br><br><span class="hljs-comment">#创建用于主从访问的用户</span><br><span class="hljs-comment">#创建数据库账号replica并设置密码及登录权限和备份权限</span><br>create role replica login replication encrypted password <span class="hljs-string">&#x27;replica123&#x27;</span>;<br><br><span class="hljs-comment">#修改postgres用户的密码，用于远程登录</span><br>alter USER postgres with password <span class="hljs-string">&#x27;postgres&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="3-2-2）修改pg-hba-conf和postgresql-conf配置："><a href="#3-2-2）修改pg-hba-conf和postgresql-conf配置：" class="headerlink" title="3.2.2）修改pg_hba.conf和postgresql.conf配置："></a>3.2.2）修改pg_hba.conf和postgresql.conf配置：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#运行以下命令，打开pg_hba.conf文件，设置replica用户白名单</span><br>vim /var/lib/pgsql/14/data/pg_hba.conf<br><br><span class="hljs-comment">##添加以下数据</span><br><span class="hljs-comment">##允许replica用户从replication数据库进行数据同步</span><br>host replication replica 192.168.62.129/24 trust<br>host replication replica 192.168.62.130/24 trust<br><span class="hljs-comment">#允许VPC网段中md5密码认证连接</span><br>host    all    all    192.168.0.0/24    md5<br>host    all    all     0.0.0.0/0 md5<br><br><br><span class="hljs-comment">#运行以下命令，打开postgresql.conf文件</span><br>vim /var/lib/pgsql/14/data/postgresql.conf<br><br>listen_addresses = <span class="hljs-string">&#x27;*&#x27;</span>     <span class="hljs-comment">#监听的IP地址</span><br>max_connections = 100      <span class="hljs-comment">#最大连接数，从库的max_connections必须要大于主库的</span><br><span class="hljs-comment">#archive_mode = on  # 允许归档</span><br><span class="hljs-comment">#archive_command = &#x27;cp %p /opt/pgsql/pg_archive/%f&#x27; ## 通过命令指定归档路径/</span><br>wal_level = logical    <span class="hljs-comment">#写入WAL的级别(minimal:不能通过基础备份和wal日志恢复数据库; replica: 支持wal归档和复制; logical: 在replica级别添加了逻辑解码所需的信息)</span><br>synchronous_commit = on    <span class="hljs-comment">#开启同步复制</span><br>max_wal_senders = 32       <span class="hljs-comment"># 允许最多的流复制连接发送数量， 根据从节点数量来设定</span><br>wal_sender_timeout = 60s   <span class="hljs-comment">#流复制主机发送数据的超时时间</span><br><br><br><span class="hljs-comment">#如果postgresql.conf中的hot_standby参数设置为on（默认值），并且数据目录中存在Standby.signal文件，则replication slave将在“热备”模式下运行。</span><br></code></pre></td></tr></table></figure><h4 id="3-2-3）重启主节点服务"><a href="#3-2-3）重启主节点服务" class="headerlink" title="3.2.3）重启主节点服务"></a>3.2.3）重启主节点服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart postgresql-14.service<br></code></pre></td></tr></table></figure><h3 id="3-3、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）"><a href="#3-3、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）" class="headerlink" title="3.3、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）"></a>3.3、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）</h3><h4 id="3-3-1）切换postgres用户"><a href="#3-3-1）切换postgres用户" class="headerlink" title="3.3.1）切换postgres用户"></a>3.3.1）切换postgres用户</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br></code></pre></td></tr></table></figure><h4 id="3-3-2-将主节点的数据进行备份到从节点"><a href="#3-3-2-将主节点的数据进行备份到从节点" class="headerlink" title="3.3.2) 将主节点的数据进行备份到从节点"></a>3.3.2) 将主节点的数据进行备份到从节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">rm</span> -rf /var/lib/pgsql/14/data/*<br><br><span class="hljs-comment">#复制后从节点的配置文件会和主节点的一样，并且一并复制的还有数据库文件，里面的数据也一样，意味着主节点有什么用户数据从节点也有</span><br>pg_basebackup -h 192.168.62.129 -D /var/lib/pgsql/14/data -U replica -P -v  -R -X stream -C -S pgstandby1 <br><br>参数详解：<br>-h –指定作为主服务器的主机。<br>-D –指定数据目录。<br>-U –指定连接用户。<br>-P –启用进度报告。<br>-v –启用详细模式。<br>-R–启用恢复配置的创建：创建一个standby.signal文件，并将连接设置附加到数据目录下的postgresql.auto.conf。<br>-X–用于在备份中包括所需的预写日志文件（WAL文件）。流的值表示在创建备份时流式传输WAL。<br>-C –在开始备份之前，允许创建由-S选项命名的复制插槽。<br>-S –指定复制插槽名称。<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#备份过程完成后，会在data目录下创建了一个standby.signal，并将primary_conninfo写入postgresql.auto.conf</span><br><span class="hljs-built_in">cat</span> /var/lib/pgsql/14/data/postgresql.auto.conf <br><span class="hljs-comment">#输出信息：</span><br><span class="hljs-comment"># Do not edit this file manually!</span><br><span class="hljs-comment"># It will be overwritten by the ALTER SYSTEM command.</span><br>primary_conninfo = <span class="hljs-string">&#x27;user=replica passfile=&#x27;</span><span class="hljs-string">&#x27;/var/lib/pgsql/.pgpass&#x27;</span><span class="hljs-string">&#x27; channel_binding=prefer host=192.168.62.129 port=5432 sslmode=prefer sslcompression=0 sslsni=1 ssl_min_protocol_version=TLSv1.2 gssencmode=prefer krbsrvname=postgres target_session_attrs=any&#x27;</span><br>primary_slot_name = <span class="hljs-string">&#x27;pgstandby1&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-3）启动从节点"><a href="#3-3-3）启动从节点" class="headerlink" title="3.3.3）启动从节点"></a>3.3.3）启动从节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start postgresql-14<br></code></pre></td></tr></table></figure><h2 id="四、验证主从，读写测试"><a href="#四、验证主从，读写测试" class="headerlink" title="四、验证主从，读写测试"></a>四、验证主从，读写测试</h2><h3 id="4-1、验证主从信息"><a href="#4-1、验证主从信息" class="headerlink" title="4.1、验证主从信息"></a>4.1、验证主从信息</h3><h4 id="4-1-1）查看主节点复制插槽-主节点执行"><a href="#4-1-1）查看主节点复制插槽-主节点执行" class="headerlink" title="4.1.1）查看主节点复制插槽(主节点执行)"></a>4.1.1）查看主节点复制插槽(主节点执行)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br>psql -c <span class="hljs-string">&quot;SELECT * FROM pg_replication_slots;&quot;</span><br>psql -c <span class="hljs-string">&#x27;select client_addr,sync_state from pg_stat_replication;&#x27;</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h4 id="4-1-2）查看从节点接收状态：-此信息只有从节点才会有"><a href="#4-1-2）查看从节点接收状态：-此信息只有从节点才会有" class="headerlink" title="4.1.2）查看从节点接收状态：(#此信息只有从节点才会有)"></a>4.1.2）查看从节点接收状态：(#此信息只有从节点才会有)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br>psql -c <span class="hljs-string">&quot;\x&quot;</span> -c <span class="hljs-string">&quot;SELECT * FROM pg_stat_wal_receiver;&quot;</span><br><br></code></pre></td></tr></table></figure><h4 id="4-1-3）查看主节点发送状态：-此信息只有主节点才会有"><a href="#4-1-3）查看主节点发送状态：-此信息只有主节点才会有" class="headerlink" title="4.1.3）查看主节点发送状态：(#此信息只有主节点才会有)"></a>4.1.3）查看主节点发送状态：(#此信息只有主节点才会有)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br>psql -c <span class="hljs-string">&quot;\x&quot;</span> -c <span class="hljs-string">&quot;SELECT * FROM pg_stat_replication;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-2、读写测试"><a href="#4-2、读写测试" class="headerlink" title="4.2、读写测试"></a>4.2、读写测试</h3><h4 id="4-2-1）在主节点写数据，从节点读数据。"><a href="#4-2-1）在主节点写数据，从节点读数据。" class="headerlink" title="4.2.1）在主节点写数据，从节点读数据。"></a>4.2.1）在主节点写数据，从节点读数据。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">create database <span class="hljs-built_in">test</span>;<br>\l<br></code></pre></td></tr></table></figure><h4 id="4-2-2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。"><a href="#4-2-2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。" class="headerlink" title="4.2.2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。"></a>4.2.2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">\l<br></code></pre></td></tr></table></figure><hr><hr><h2 id="五、postgres用户间免密登录"><a href="#五、postgres用户间免密登录" class="headerlink" title="五、postgres用户间免密登录"></a>五、postgres用户间免密登录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#给postgres用户更改密码</span><br>passwd postgres<br><br><span class="hljs-comment">#生成并同步密钥</span><br>su postgres<br>ssh-keygen<br>ssh-copy-id 192.168.62.130<br><br><span class="hljs-comment">#测试免密</span><br>ssh  192.168.62.130<br>ip addr<br></code></pre></td></tr></table></figure><h2 id="六、安装pgpool"><a href="#六、安装pgpool" class="headerlink" title="六、安装pgpool"></a>六、安装pgpool</h2><p>pgpool介绍：<a href="https://blog.csdn.net/qq_35241223/article/details/105453826">https://blog.csdn.net/qq_35241223/article/details/105453826</a><br>简介：可以实现自动故障转移、负载均衡、在线恢复、连接池、复制、限制超出连接、看门狗、内存查询缓存</p><h3 id="6-1、安装-两台机器都需要安装"><a href="#6-1、安装-两台机器都需要安装" class="headerlink" title="6.1、安装(两台机器都需要安装)"></a>6.1、安装(两台机器都需要安装)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#Pgpool-II安装</span><br>vim /etc/yum.repos.d/pgdg-redhat-all.repo<br><span class="hljs-comment">#在pgdg后面添加exclude=pgpool*</span><br>[pgdg-common]<br>...<br>exclude=pgpool*<br>[pgdg14]<br>...<br>exclude=pgpool*<br>[pgdg13]<br>...<br>exclude=pgpool*<br>[pgdg12]<br>...<br>exclude=pgpool*<br>[pgdg11]<br><span class="hljs-comment">#...</span><br>exclude=pgpool*<br><br>[pgdg10]<br><span class="hljs-comment">#...</span><br>exclude=pgpool*<br>[pgdg9]<br>...<br>exclude=pgpool*<br><br><span class="hljs-comment"># 添加源</span><br>yum install -y https://www.pgpool.net/yum/rpms/4.3/redhat/rhel-7-x86_64/pgpool-II-release-4.3-1.noarch.rpm<br><span class="hljs-comment"># 安装</span><br>yum install -y pgpool-II-pg14-*<br><br><span class="hljs-comment">## 安装完之后pgpool的配置文件在/etc/pgpool-II/下</span><br></code></pre></td></tr></table></figure><h3 id="6-2、修改配置（两台机器都需要配置）"><a href="#6-2、修改配置（两台机器都需要配置）" class="headerlink" title="6.2、修改配置（两台机器都需要配置）"></a>6.2、修改配置（两台机器都需要配置）</h3><p>pool_hba.conf和之前配置的PostgreSQL中的配置时一样的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/pgpool-II/pool_hba.conf<br>host    replication replica     192.168.62.129/24    trust<br>host    replication replica     192.168.62.130/24    trust<br>host    all          all        192.168.0.0/24       md5<br>host    all          all        0.0.0.0/0      md5<br></code></pre></td></tr></table></figure><h3 id="6-3、对postgres的密码进行加密。将postgres的密码设置为和用户名相同"><a href="#6-3、对postgres的密码进行加密。将postgres的密码设置为和用户名相同" class="headerlink" title="6.3、对postgres的密码进行加密。将postgres的密码设置为和用户名相同"></a>6.3、对postgres的密码进行加密。将postgres的密码设置为和用户名相同</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#密码加密</span><br>pg_md5 postgres<br>&gt;&gt;e8a48653851e28c69d0506508fb27fc5<br><br><span class="hljs-comment">#将加密结果复制，并粘贴到pcp.conf中相应的位置，取消掉该行的注释</span><br>vim /etc/pgpool-II/pcp.conf<br>postgres:e8a48653851e28c69d0506508fb27fc5<br></code></pre></td></tr></table></figure><h3 id="6-4、执行命令-先切换到postgres用户再执行然后输入密码"><a href="#6-4、执行命令-先切换到postgres用户再执行然后输入密码" class="headerlink" title="6.4、执行命令(先切换到postgres用户再执行然后输入密码):"></a>6.4、执行命令(先切换到postgres用户再执行然后输入密码):</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pg_md5 -m -p -u postgres pool_passwd<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>PostgreSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装PostgreSQL</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/Docker%E5%AE%89%E8%A3%85PostgreSQL/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/Docker%E5%AE%89%E8%A3%85PostgreSQL/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker安装PostgreSQL"><a href="#Docker安装PostgreSQL" class="headerlink" title="Docker安装PostgreSQL"></a>Docker安装PostgreSQL</h1><h2 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1.拉取镜像"></a>1.拉取镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull postgres<br></code></pre></td></tr></table></figure><h2 id="2-启动镜像"><a href="#2-启动镜像" class="headerlink" title="2.启动镜像"></a>2.启动镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name mypostgres -d -p 5432:5432 -e POSTGRES_PASSWORD=123456 postgres<br><br>参数解释：<br>–name，指定创建的容器的名字<br>-e POSTGRES_PASSWORD=123456，设置环境变量，指定数据库的登录口令为password；<br>-p 54321:5432，端口映射将容器的5432端口映射到外部机器的54321端口；<br>-d 指定使用postgres:9.4作为镜像；<br>-e ALLOW_IP_RANGE=0.0.0.0/0 允许任何主机访问；<br></code></pre></td></tr></table></figure><h2 id="3-直接进入容器，连接"><a href="#3-直接进入容器，连接" class="headerlink" title="3.直接进入容器，连接"></a>3.直接进入容器，连接</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it mypostgres psql -U postgres -d postgres<br></code></pre></td></tr></table></figure><h2 id="4-使用终端命令连接"><a href="#4-使用终端命令连接" class="headerlink" title="4.使用终端命令连接"></a>4.使用终端命令连接</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">psql -U postgres -h ipaddress -d dbname<br></code></pre></td></tr></table></figure><h2 id="5-查看数据库所有表"><a href="#5-查看数据库所有表" class="headerlink" title="5.查看数据库所有表"></a>5.查看数据库所有表</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">select * from pg_tables;<br></code></pre></td></tr></table></figure><h2 id="6-创建数据库"><a href="#6-创建数据库" class="headerlink" title="6.创建数据库"></a>6.创建数据库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#进入容器</span><br>docker <span class="hljs-built_in">exec</span> -it mypostgres bash<br><br><span class="hljs-comment"># 切换postgres用户</span><br>su postgres<br><br><span class="hljs-comment"># 进入数据库</span><br>psql<br><br><span class="hljs-comment"># 创建sonar数据库</span><br>&gt; CREATE DATABASE sonar;<br><br><span class="hljs-comment"># 退出数据库</span><br>\q<br><br><span class="hljs-comment"># 退出postgres用户</span><br><span class="hljs-built_in">exit</span><br><br><span class="hljs-comment"># 退出容器</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建sonar用户</span><br>&gt; create user sonar with password <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-comment">#创建sonarqube数据库</span><br>&gt; create database sonarqube owner sonar;<br></code></pre></td></tr></table></figure><h2 id="7-其他安装参考："><a href="#7-其他安装参考：" class="headerlink" title="7.其他安装参考："></a>7.其他安装参考：</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">PostgreSql安装：<br>参考：https://blog.csdn.net/weixin_42450728/article/details/121904389<br>PostgreSql常见的错误处理<br>https://blog.csdn.net/zhu_xun/article/details/21234663<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>PostgreSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker搭建minio</title>
    <link href="/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/minio/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAminio/"/>
    <url>/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/minio/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAminio/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker搭建minio"><a href="#使用docker搭建minio" class="headerlink" title="使用docker搭建minio"></a>使用docker搭建minio</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://blog.csdn.net/networken/article/details/111500745<br></code></pre></td></tr></table></figure><h2 id="一、docker部署minio集群"><a href="#一、docker部署minio集群" class="headerlink" title="一、docker部署minio集群"></a>一、docker部署minio集群</h2><p><strong>前置条件：</strong></p><ul><li>准备3个节点，每个节点创建2个挂载点，由于集群模式下不能使用根磁盘，这里使用docker卷作为挂载点。</li><li>3节点的集群，故障一个节点时不影响对集群的读写操作。</li><li>所有节点均安装docker，时间同步，关闭防火墙以及selinux</li></ul><table><thead><tr><th>服务器ip</th><th>搭建服务</th></tr></thead><tbody><tr><td>192.168.92.10</td><td>minio-1、nginx、keepalive</td></tr><tr><td>192.168.92.11</td><td>minio-2、nginx、keepalive</td></tr><tr><td>192.168.92.12</td><td>minio-3、nginx、keepalive</td></tr><tr><td>192.168.92.50</td><td>虚拟ip</td></tr></tbody></table><h3 id="1、所有节点配置主机名解析："><a href="#1、所有节点配置主机名解析：" class="headerlink" title="1、所有节点配置主机名解析："></a>1、所有节点配置主机名解析：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">192.168.92.10 minio-1</span><br><span class="hljs-string">192.168.92.11 minio-2</span><br><span class="hljs-string">192.168.92.12 minio-3</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="2、部署minio集群，3个节点每个节点挂载2个目录"><a href="#2、部署minio集群，3个节点每个节点挂载2个目录" class="headerlink" title="2、部署minio集群，3个节点每个节点挂载2个目录"></a>2、部署minio集群，3个节点每个节点挂载2个目录</h3><p>注意：docker部署集群模式时必须指定–net&#x3D;host参数，使用主机网络，使用端口映射无法创建集群。</p><p><strong>minio-1节点执行:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name minio \<br>  --restart=always --net=host \<br>  -e MINIO_ACCESS_KEY=minio \<br>  -e MINIO_SECRET_KEY=minio123 \<br>  -v minio-data1:/data1 \<br>  -v minio-data2:/data2 \<br>  minio/minio server \<br>  --address 192.168.92.10:9000 \<br>  http://minio-&#123;1...3&#125;/data&#123;1...2&#125;<br></code></pre></td></tr></table></figure><p><strong>minio-2节点执行:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name minio \<br>  --restart=always --net=host \<br>  -e MINIO_ACCESS_KEY=minio \<br>  -e MINIO_SECRET_KEY=minio123 \<br>  -v minio-data1:/data1 \<br>  -v minio-data2:/data2 \<br>  minio/minio server \<br>  --address 192.168.92.11:9000 \<br>  http://minio-&#123;1...3&#125;/data&#123;1...2&#125;<br></code></pre></td></tr></table></figure><p><strong>minio-3节点执行:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name minio \<br>  --restart=always --net=host \<br>  -e MINIO_ACCESS_KEY=minio \<br>  -e MINIO_SECRET_KEY=minio123 \<br>  -v minio-data1:/data1 \<br>  -v minio-data2:/data2 \<br>  minio/minio server \<br>  --address 192.168.92.12:9000 \<br>  http://minio-&#123;1...3&#125;/data&#123;1...2&#125;<br></code></pre></td></tr></table></figure><h3 id="3、查看minio状态"><a href="#3、查看minio状态" class="headerlink" title="3、查看minio状态"></a>3、查看minio状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">mc config host add minio http://minio-1:9000 minio minio12<br><br>mc admin info minio<br><br><span class="hljs-comment">#3个节点及每个节点上的Drivers全部在线</span><br></code></pre></td></tr></table></figure><h3 id="4、使用nginx-keepalive实现负载均衡"><a href="#4、使用nginx-keepalive实现负载均衡" class="headerlink" title="4、使用nginx+keepalive实现负载均衡"></a>4、使用nginx+keepalive实现负载均衡</h3><h4 id="4-1、创建nginx配置文件-2个节点执行"><a href="#4-1、创建nginx配置文件-2个节点执行" class="headerlink" title="4.1、创建nginx配置文件,2个节点执行"></a>4.1、创建nginx配置文件,2个节点执行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /etc/nginx/conf.d<br><br><span class="hljs-built_in">cat</span> &gt; /etc/nginx/conf.d/minio-lb.conf &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span><br>upstream minio_server &#123;<br>    server 192.168.92.10:9000;<br>    server 192.168.92.11:9000;<br>    server 192.168.92.12:9000;<br>    &#125;<br><br>server &#123;<br>    listen 9001;<br>    server_name  localhost;<br>    ignore_invalid_headers off;<br>    client_max_body_size 0;<br>    proxy_buffering off;<br>    location / &#123;<br>        proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        proxy_set_header X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>        proxy_set_header Host <span class="hljs-variable">$http_host</span>;<br>        proxy_connect_timeout 300;<br>        proxy_http_version 1.1;<br>        proxy_set_header Connection <span class="hljs-string">&quot;&quot;</span>;<br>        chunked_transfer_encoding off;<br>        proxy_pass http://minio_server;<br>    &#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h4 id="4-2、部署nginx容器-2个节点执行"><a href="#4-2、部署nginx容器-2个节点执行" class="headerlink" title="4.2、部署nginx容器,2个节点执行"></a>4.2、部署nginx容器,2个节点执行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name nginx \<br>  --restart always -p 9001:9001 \<br>  -v /etc/nginx/conf.d:/etc/nginx/conf.d \<br>  nginx<br><br></code></pre></td></tr></table></figure><h4 id="4-3、准备keepalived配置文件-2个节点执行"><a href="#4-3、准备keepalived配置文件-2个节点执行" class="headerlink" title="4.3、准备keepalived配置文件,2个节点执行"></a>4.3、准备keepalived配置文件,2个节点执行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br><span class="hljs-built_in">mkdir</span> /etc/keepalived<br><br><span class="hljs-comment">#注意修改interface(机器网卡)及virtual_ipaddress(虚拟IP地址)参数</span><br><span class="hljs-built_in">cat</span> &gt; /etc/keepalived/keepalived.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">! Configuration File for keepalived</span><br><span class="hljs-string"></span><br><span class="hljs-string">global_defs &#123;</span><br><span class="hljs-string">   router_id minio</span><br><span class="hljs-string">   vrrp_version 2</span><br><span class="hljs-string">   vrrp_garp_master_delay 1</span><br><span class="hljs-string">   script_user root</span><br><span class="hljs-string">   enable_script_security   </span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">vrrp_script chk_nginx &#123;</span><br><span class="hljs-string">    script       &quot;/bin/sh -c &#x27;curl -I http://127.0.0.1:9001 &amp;&gt; /dev/null&#x27;&quot;</span><br><span class="hljs-string">    timeout 3</span><br><span class="hljs-string">    interval 1   # check every 1 second</span><br><span class="hljs-string">    fall 2       # require 2 failures for KO</span><br><span class="hljs-string">    rise 2       # require 2 successes for OK</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">vrrp_instance lb-minio &#123;</span><br><span class="hljs-string">    state BACKUP</span><br><span class="hljs-string">    interface ens33</span><br><span class="hljs-string">    virtual_router_id 51</span><br><span class="hljs-string">    priority 100</span><br><span class="hljs-string">    virtual_ipaddress &#123;</span><br><span class="hljs-string">        192.168.92.50  #虚拟ip地址</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    track_script &#123;</span><br><span class="hljs-string">        chk_nginx</span><br><span class="hljs-string">    &#125; </span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure><h4 id="4-4、部署keepalived容器，2个节点执行"><a href="#4-4、部署keepalived容器，2个节点执行" class="headerlink" title="4.4、部署keepalived容器，2个节点执行"></a>4.4、部署keepalived容器，2个节点执行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name keepalived \<br>  --restart always \<br>  --cap-add=NET_ADMIN \<br>  --net=host \<br>  -v /etc/keepalived/keepalived.conf:/container/service/keepalived/assets/keepalived.conf \<br>  --detach osixia/keepalived --copy-service<br></code></pre></td></tr></table></figure><p><strong>浏览器访问minio UI，使用vip地址和9001端口</strong></p><h2 id="二、docker-compose部署minio"><a href="#二、docker-compose部署minio" class="headerlink" title="二、docker-compose部署minio"></a>二、docker-compose部署minio</h2><h3 id="1、docker-compose-部署单机模式："><a href="#1、docker-compose-部署单机模式：" class="headerlink" title="1、docker-compose 部署单机模式："></a>1、docker-compose 部署单机模式：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">minio:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">minio/minio</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">&quot;minio&quot;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">9000</span><span class="hljs-string">:9000</span> <span class="hljs-comment"># api 端口</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">9001</span><span class="hljs-string">:9001</span> <span class="hljs-comment"># 控制台端口</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MINIO_ACCESS_KEY:</span> <span class="hljs-string">admin</span>    <span class="hljs-comment">#管理后台用户名</span><br>      <span class="hljs-attr">MINIO_SECRET_KEY:</span> <span class="hljs-string">admin123</span> <span class="hljs-comment">#管理后台密码，最小8个字符</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker/minio/data:/data</span>               <span class="hljs-comment">#映射当前目录下的data目录至容器内/data目录</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker/minio/config:/root/.minio/</span>     <span class="hljs-comment">#映射配置目录</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">server</span> <span class="hljs-string">--console-address</span> <span class="hljs-string">&#x27;:9001&#x27;</span> <span class="hljs-string">/data</span>  <span class="hljs-comment">#指定容器中的目录 /data</span><br>    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br></code></pre></td></tr></table></figure><h3 id="2、docker-compose-部署多分布式实例："><a href="#2、docker-compose-部署多分布式实例：" class="headerlink" title="2、docker-compose 部署多分布式实例："></a>2、docker-compose 部署多分布式实例：</h3><p>注意：docker-compose只能在单主机部署多个分布式MinIO实例，分布式MinIO实例将部署在同一主机上的多个容器中:<br>安装docker-compose后：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /date/minio<br><span class="hljs-built_in">cd</span> /date/minio<br><br>wget https://raw.githubusercontent.com/minio/minio/master/docs/orchestration/docker-compose/docker-compose.yaml<br>wget https://raw.githubusercontent.com/minio/minio/master/docs/orchestration/docker-compose/nginx.conf<br><br>docker-compose up -d<br><br></code></pre></td></tr></table></figure><p><strong>docker-compose.yaml:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.7&#x27;</span><br><br><span class="hljs-comment"># Settings and configurations that are common for all containers</span><br><span class="hljs-attr">x-minio-common:</span> <span class="hljs-string">&amp;minio-common</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">quay.io/minio/minio:RELEASE.2022-09-17T00-09-45Z</span><br>  <span class="hljs-attr">command:</span> <span class="hljs-string">server</span> <span class="hljs-string">--console-address</span> <span class="hljs-string">&quot;:9001&quot;</span> <span class="hljs-string">http://minio&#123;1...4&#125;/data&#123;1...2&#125;</span><br>  <span class="hljs-attr">expose:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9000&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9001&quot;</span><br>  <span class="hljs-comment"># environment:  账号密码，登录需要取消注释</span><br>    <span class="hljs-comment"># MINIO_ROOT_USER: minioadmin</span><br>    <span class="hljs-comment"># MINIO_ROOT_PASSWORD: minioadmin</span><br>  <span class="hljs-attr">healthcheck:</span><br>    <span class="hljs-attr">test:</span> [<span class="hljs-string">&quot;CMD&quot;</span>, <span class="hljs-string">&quot;curl&quot;</span>, <span class="hljs-string">&quot;-f&quot;</span>, <span class="hljs-string">&quot;http://localhost:9000/minio/health/live&quot;</span>]<br>    <span class="hljs-attr">interval:</span> <span class="hljs-string">30s</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-string">20s</span><br>    <span class="hljs-attr">retries:</span> <span class="hljs-number">3</span><br><br><span class="hljs-comment"># starts 4 docker containers running minio server instances.</span><br><span class="hljs-comment"># using nginx reverse proxy, load balancing, you can access</span><br><span class="hljs-comment"># it through port 9000.</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">minio1:</span><br>    <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-string">*minio-common</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">minio1</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data1-1:/data1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data1-2:/data2</span><br><br>  <span class="hljs-attr">minio2:</span><br>    <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-string">*minio-common</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">minio2</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data2-1:/data1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data2-2:/data2</span><br><br>  <span class="hljs-attr">minio3:</span><br>    <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-string">*minio-common</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">minio3</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data3-1:/data1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data3-2:/data2</span><br><br>  <span class="hljs-attr">minio4:</span><br>    <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-string">*minio-common</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">minio4</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data4-1:/data1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data4-2:/data2</span><br><br>  <span class="hljs-attr">nginx:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.19.2-alpine</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./nginx.conf:/etc/nginx/nginx.conf:ro</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9000:9000&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9001:9001&quot;</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">minio1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">minio2</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">minio3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">minio4</span><br><br><span class="hljs-comment">## By default this config uses default local driver,</span><br><span class="hljs-comment">## For custom volumes replace with volume driver configuration.</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">data1-1:</span><br>  <span class="hljs-attr">data1-2:</span><br>  <span class="hljs-attr">data2-1:</span><br>  <span class="hljs-attr">data2-2:</span><br>  <span class="hljs-attr">data3-1:</span><br>  <span class="hljs-attr">data3-2:</span><br>  <span class="hljs-attr">data4-1:</span><br>  <span class="hljs-attr">data4-2:</span><br></code></pre></td></tr></table></figure><p><strong>nginx.conf:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs conf">user  nginx;<br>worker_processes  auto;<br><br>error_log  /var/log/nginx/error.log warn;<br>pid        /var/run/nginx.pid;<br><br>events &#123;<br>    worker_connections  4096;<br>&#125;<br><br>http &#123;<br>    include       /etc/nginx/mime.types;<br>    default_type  application/octet-stream;<br><br>    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;<br>                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;<br>                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;<br><br>    access_log  /var/log/nginx/access.log  main;<br>    sendfile        on;<br>    keepalive_timeout  65;<br><br>    # include /etc/nginx/conf.d/*.conf;<br><br>    upstream minio &#123;<br>        server minio1:9000;<br>        server minio2:9000;<br>        server minio3:9000;<br>        server minio4:9000;<br>    &#125;<br><br>    upstream console &#123;<br>        ip_hash;<br>        server minio1:9001;<br>        server minio2:9001;<br>        server minio3:9001;<br>        server minio4:9001;<br>    &#125;<br><br>    server &#123;<br>        listen       9000;<br>        listen  [::]:9000;<br>        server_name  localhost;<br><br>        # To allow special characters in headers<br>        ignore_invalid_headers off;<br>        # Allow any size file to be uploaded.<br>        # Set to a value such as 1000m; to restrict file size to a specific value<br>        client_max_body_size 0;<br>        # To disable buffering<br>        proxy_buffering off;<br>        proxy_request_buffering off;<br><br>        location / &#123;<br>            proxy_set_header Host $http_host;<br>            proxy_set_header X-Real-IP $remote_addr;<br>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>            proxy_set_header X-Forwarded-Proto $scheme;<br><br>            proxy_connect_timeout 300;<br>            # Default is HTTP/1, keepalive is only enabled in HTTP/1.1<br>            proxy_http_version 1.1;<br>            proxy_set_header Connection &quot;&quot;;<br>            chunked_transfer_encoding off;<br><br>            proxy_pass http://minio;<br>        &#125;<br>    &#125;<br><br>    server &#123;<br>        listen       9001;<br>        listen  [::]:9001;<br>        server_name  localhost;<br><br>        # To allow special characters in headers<br>        ignore_invalid_headers off;<br>        # Allow any size file to be uploaded.<br>        # Set to a value such as 1000m; to restrict file size to a specific value<br>        client_max_body_size 0;<br>        # To disable buffering<br>        proxy_buffering off;<br>        proxy_request_buffering off;<br><br>        location / &#123;<br>            proxy_set_header Host $http_host;<br>            proxy_set_header X-Real-IP $remote_addr;<br>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>            proxy_set_header X-Forwarded-Proto $scheme;<br>            proxy_set_header X-NginX-Proxy true;<br><br>            # This is necessary to pass the correct IP to be hashed<br>            real_ip_header X-Real-IP;<br><br>            proxy_connect_timeout 300;<br>            <br>            # To support websocket<br>            proxy_http_version 1.1;<br>            proxy_set_header Upgrade $http_upgrade;<br>            proxy_set_header Connection &quot;upgrade&quot;;<br>            <br>            chunked_transfer_encoding off;<br><br>            proxy_pass http://console;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用nginx进行了负载均衡，浏览器访问http:localhost:9000，登录的账号密码需要将docker-compose中environment<code>取消注释</code>,<br>默认情况下会创建4个minio实例</strong></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>Minio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建分布式存储服务minio</title>
    <link href="/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/minio/%E6%90%AD%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1minio%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/"/>
    <url>/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/minio/%E6%90%AD%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1minio%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="搭建分布式存储服务minio详细过程"><a href="#搭建分布式存储服务minio详细过程" class="headerlink" title="搭建分布式存储服务minio详细过程"></a>搭建分布式存储服务minio详细过程</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://blog.csdn.net/yhj_911/article/details/122607159<br>参考文档：https://www.cnblogs.com/hahaha111122222/p/15990604.html<br>参考文档：https://blog.csdn.net/qq_43437874/article/details/109608069<br>minio分布式解决方案：https://blog.csdn.net/yujia_666/article/details/121637775<br></code></pre></td></tr></table></figure><p><strong>搭建环境：</strong></p><table><thead><tr><th>服务器ip</th><th>服务器配置</th></tr></thead><tbody><tr><td>192.168.62.128</td><td>4G+4CPU+40G</td></tr><tr><td>192.168.62.129</td><td>4G+4CPU+40G</td></tr></tbody></table><h2 id="1、创建目录"><a href="#1、创建目录" class="headerlink" title="1、创建目录"></a>1、创建目录</h2><p>本集群由2台服务器构成（官方推荐集群最小4台服务器），每个服务器上挂载四个磁盘目录，四个目录的原因：模拟由一台服务器扩容到两台服务器。</p><p>注意：在一台主机上创建4个不同的路径模拟4个不同的磁盘来进行。这种方式行不通!</p><p><img src="/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/minio/%E6%90%AD%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1minio%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/image-20220921161607211.png" alt="192.168.62.128机器"></p><p><img src="/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/minio/%E6%90%AD%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1minio%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/image-20220921160920315.png" alt="192.168.62.129机器"></p><p>数据存储目录（两台服务器）</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir -p /home/minio/data1<br>mkdir -p /home/minio/data2<br>mkdir -p /home/minio/data3<br>mkdir -p /home/minio/data4<br></code></pre></td></tr></table></figure><p>启动脚本目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/opt/mi</span>nio<br></code></pre></td></tr></table></figure><p>配置域名，在&#x2F;etc&#x2F;hosts中，追加如下内容（两台服务器）</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">cat &gt;&gt; /etc/hosts &lt;&lt; EOF<br><span class="hljs-number">192.168.62.128</span>  minio-<span class="hljs-number">1</span><br><span class="hljs-number">192.168.62.129</span>  minio-<span class="hljs-number">2</span><br>EOF<br></code></pre></td></tr></table></figure><h2 id="2、编写集群启动脚本（两台服务器）"><a href="#2、编写集群启动脚本（两台服务器）" class="headerlink" title="2、编写集群启动脚本（两台服务器）"></a>2、编写集群启动脚本（两台服务器）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /opt/minio/run.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>export MINIO_ACCESS_KEY=Minio<br>export MINIO_SECRET_KEY=Test123456<br> <br>/opt/minio/minio server --config-dir /etc/minio \<br>http://minio-&#123;1...2&#125;/home/minio/data&#123;1...4&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">http://minio-&#123;1...1&#125;/home/minio/data&#123;1...4&#125; http://minio-&#123;2...2&#125;/home/minio/data&#123;1...4&#125;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果以后想扩容，必须用这种方式&#123;&#125;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果只有一台服务器只执行http://minio-&#123;1...1&#125;/home/minio/data&#123;1...4&#125;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果两台服务器http://minio-&#123;1...2&#125;/home/minio/data&#123;1...4&#125;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">扩容时追加http://minio-&#123;2...2&#125;/home/minio/data&#123;1...4&#125;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">经过验证，一个文件要么存储到源存储中，要么存储到扩容后的存储中</span><br></code></pre></td></tr></table></figure><h2 id="3、编写服务脚本（两台服务器）"><a href="#3、编写服务脚本（两台服务器）" class="headerlink" title="3、编写服务脚本（两台服务器）"></a>3、编写服务脚本（两台服务器）</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vim /usr/lib/systemd/system/minio.service<br> <br>[Unit]<br><span class="hljs-attribute">Description</span>=Minio<span class="hljs-built_in"> service</span><br><span class="hljs-built_in"></span><span class="hljs-attribute">Documentation</span>=https://docs.minio.io/<br> <br>[Service]<br><span class="hljs-attribute">WorkingDirectory</span>=/opt/minio/<br><span class="hljs-attribute">ExecStart</span>=/opt/minio/run.sh<br> <br><span class="hljs-attribute">Restart</span>=on-failure<br><span class="hljs-attribute">RestartSec</span>=5<br> <br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h2 id="4、追加权限（两台服务器）"><a href="#4、追加权限（两台服务器）" class="headerlink" title="4、追加权限（两台服务器）"></a>4、追加权限（两台服务器）</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">chmod +x <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/minio.service<br><span class="hljs-comment">#刷新服务</span><br>systemctl daemon-reload<br><br>wget https:<span class="hljs-regexp">//</span>dl.minio.io<span class="hljs-regexp">/server/mi</span>nio<span class="hljs-regexp">/release/</span>linux-amd64<span class="hljs-regexp">/minio -P /</span>opt/minio<br><span class="hljs-comment">#-p 下载minio到/opt/minio中</span><br>chmod +x minio<br>chmod +x <span class="hljs-regexp">/opt/mi</span>nio/run.sh<br></code></pre></td></tr></table></figure><h2 id="5、启动（两台服务器）"><a href="#5、启动（两台服务器）" class="headerlink" title="5、启动（两台服务器）"></a>5、启动（两台服务器）</h2><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start minio<br><span class="hljs-params">system</span>ctl enable minio<br><span class="hljs-params">system</span>ctl stop minio<br></code></pre></td></tr></table></figure><h2 id="6、登录、测试（两个地址都可以看，部分主次）"><a href="#6、登录、测试（两个地址都可以看，部分主次）" class="headerlink" title="6、登录、测试（两个地址都可以看，部分主次）"></a>6、登录、测试（两个地址都可以看，部分主次）</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">62.128</span>:<span class="hljs-number">9000</span>  (输入账号密码即可，run.sh脚本内的MINIO_ACCESS_KEY、MINIO_SECRET_KEY就是账号和密码)<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">62.129</span>:<span class="hljs-number">9000</span><br></code></pre></td></tr></table></figure><h2 id="7、使用nginx实现负载均衡"><a href="#7、使用nginx实现负载均衡" class="headerlink" title="7、使用nginx实现负载均衡"></a>7、使用nginx实现负载均衡</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> minio&#123;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.62.128:9000</span>;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.62.129:9000</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">19000</span>;<br>        <span class="hljs-comment">#server_name minio;</span><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$http_host</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$remote_addr</span>;<br>            <span class="hljs-attribute">client_body_buffer_size</span> <span class="hljs-number">10M</span>;<br>            <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">10G</span>;<br>            <span class="hljs-attribute">proxy_buffers</span> <span class="hljs-number">1024</span> <span class="hljs-number">4k</span>;<br>            <span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">300</span>;<br>            <span class="hljs-attribute">proxy_next_upstream</span> <span class="hljs-literal">error</span> timeout http_404;<br>            <span class="hljs-attribute">proxy_pass</span> http://minio;<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>Minio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL使用binlog恢复数据</title>
    <link href="/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL%E4%BD%BF%E7%94%A8binlog%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE/"/>
    <url>/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL%E4%BD%BF%E7%94%A8binlog%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL使用binlog恢复数据"><a href="#MySQL使用binlog恢复数据" class="headerlink" title="MySQL使用binlog恢复数据"></a>MySQL使用binlog恢复数据</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://blog.csdn.net/p2073123/article/details/126487588?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-126487588-blog-108519295.pc_relevant_default&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4<br>参考文档2：https://www.cnblogs.com/michael9/p/11923483.html<br></code></pre></td></tr></table></figure><p><strong>binlog的三种模式</strong></p><p>statement：记录每一条修改数据的sql<br>row：保存哪条记录被修改<br>mixed：兼顾前两者的优点。</p><h2 id="恢复数据到某个时间点"><a href="#恢复数据到某个时间点" class="headerlink" title="恢复数据到某个时间点"></a>恢复数据到某个时间点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看binlog有没有开启</span><br>SHOW VARIABLES LIKE <span class="hljs-string">&#x27;log_bin%&#x27;</span>;<br><span class="hljs-comment"># 查看当前binlog的模式</span><br>SHOW VARIABLES LIKE <span class="hljs-string">&#x27;binlog%&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看日志信息</span><br>mysqlbinlog --no-defaults --database=<span class="hljs-built_in">test</span> --base64-output=decode-rows --skip-gtids --stop-datetime=<span class="hljs-string">&#x27;2023-3-7 10:40:00&#x27;</span> /data/mysql-bin.000007 | less <br>:G <span class="hljs-comment">#可查看最后一行</span><br><br><br>注意：加上`--base64-output=decode-rows`参数导出的，我们可以用来分析，决定恢复哪些时间段内的，或者哪些 事务区间段内的。这样就能找到 第二步的 开始时间 结束时间 或者事务区间 的开始事务节点，结束事务节点。而导出恢复数据.sql文件时、一定不能在命令中加 --base64-output=decode-rows<br><br><br>找到相关信息后：<br><span class="hljs-comment">#使用binlog，基于时间点导出数据</span><br>mysqlbinlog --no-defaults --database=coinpay  --skip-gtids --stop-datetime=<span class="hljs-string">&#x27;2023-3-7 10:40:00&#x27;</span> /data/mysql-bin.000007 &gt; /opt/binlog.sql<br><br><br><span class="hljs-comment">#在 MySQL 客户端命令行进入</span><br><span class="hljs-comment">#命令行登录mysql执行</span><br>&gt; use <span class="hljs-built_in">test</span>、<br>&gt; <span class="hljs-built_in">source</span> /opt/binlog.sql<br></code></pre></td></tr></table></figure><h2 id="恢复数据可采用方式"><a href="#恢复数据可采用方式" class="headerlink" title="恢复数据可采用方式"></a>恢复数据可采用方式</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">基于时间点:<br><span class="hljs-comment"># 起始时间</span><br>mysqlbinlog --start-datetime=<span class="hljs-string">&#x27;2016-01-04 15:11:00&#x27;</span><br><span class="hljs-comment"># 结束时间</span><br>mysqlbinlog --stop-datetime=<span class="hljs-string">&#x27;2016-01-04 15:11:00&#x27;</span> <br><br>基于定位符:<br><span class="hljs-comment"># 起始定位符</span><br>mysqlbinlog --start-position=249 binlog.000006<br><span class="hljs-comment"># 结束定位符</span><br>mysqlbinlog --stop-position=249 binlog.000006<br> <br><span class="hljs-comment">#指定表</span><br><span class="hljs-comment">#使用 grep 命令抽取二进制日志：</span><br>grep -B3 -w tb_name db_name.sql &gt; tb_name.sql<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL5.7升级到最新版</title>
    <link href="/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL5.7%E5%8D%87%E7%BA%A7%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88/"/>
    <url>/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL5.7%E5%8D%87%E7%BA%A7%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL5-7升级到最新版"><a href="#MySQL5-7升级到最新版" class="headerlink" title="MySQL5.7升级到最新版"></a>MySQL5.7升级到最新版</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://blog.csdn.net/qq_41788609/article/details/118147232<br></code></pre></td></tr></table></figure><h2 id="一、用mysqldump备份，再安装新版本，恢复sql文件（用于数据量小的升级）"><a href="#一、用mysqldump备份，再安装新版本，恢复sql文件（用于数据量小的升级）" class="headerlink" title="一、用mysqldump备份，再安装新版本，恢复sql文件（用于数据量小的升级）"></a>一、用mysqldump备份，再安装新版本，恢复sql文件（用于数据量小的升级）</h2><p>mysqldump -uroot -p’123456’ –single-transaction –master-data&#x3D;1 –all-databases &gt; all.sql</p><h2 id="二、以下通过mysql-upgrade升级："><a href="#二、以下通过mysql-upgrade升级：" class="headerlink" title="二、以下通过mysql_upgrade升级："></a>二、以下通过mysql_upgrade升级：</h2><p>说明：<br>mysql_upgrade是官方提供的MySQL升级工具，支持跨大版本升级，如5.0升级到5.7。但为了数据安全，在升级前务必做好备份。<br>如果是主从架构，按照先升级从库–&gt;再升级主库的步骤实现升级。主库版本不能高于从库，避免新特性在从库上不支持。<br>mysql_upgrade检查所有数据库中与mysql服务器当前版本不兼容的所有表.。<br>mysql_upgrade也会升级系统表，以便你能使用新添加的权限或功能。<br>如果mysql_upgrade发现一张表可能不兼容，将该表进行检查，如果发现问题，则试图对其进行修复。如果不能修复，则需要人工进行表和索引重建或修复。<br>每次升级mysql，都需要运行mysql_upgrade。</p><p><strong>mysql安装路径为&#x2F;app&#x2F;mysql下，使用文档：《二进制安装mysql》</strong></p><h3 id="1-停服"><a href="#1-停服" class="headerlink" title="1. 停服"></a>1. 停服</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">service mysqld stop<br></code></pre></td></tr></table></figure><h3 id="2-备份："><a href="#2-备份：" class="headerlink" title="2. 备份："></a>2. 备份：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#进入二进制安装路径</span><br><span class="hljs-built_in">cd</span> /app/mysql/<br><br><span class="hljs-comment">#备份数据目录</span><br><span class="hljs-built_in">cp</span> -a data/ /root/data<br><br><span class="hljs-comment">#备份整个安装包文件</span><br><span class="hljs-built_in">mv</span> mysql-5.7.32 mysql-5.7.32-bak<br><br><span class="hljs-comment">#备份my.cnf</span><br><span class="hljs-built_in">mv</span> /etc/my.cnf /etc/my.cnfbak<br><br><span class="hljs-comment">#备份mysqld</span><br><span class="hljs-built_in">mv</span> /etc/init.d/mysqld /etc/init.d/mysqldbak<br></code></pre></td></tr></table></figure><h3 id="3-安装新版本："><a href="#3-安装新版本：" class="headerlink" title="3. 安装新版本："></a>3. 安装新版本：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#解压上传的新版本文件</span><br>tar -xnf mysql-5.7.38-el7-x86_64.tar.gz<br><br><span class="hljs-comment">#更名</span><br><span class="hljs-built_in">mv</span> mysql-5.7.38-el7-x86_64 mysql-5.7.38<br><br><span class="hljs-comment">#删除旧的软链接，设置新的软链接（如果之前版本未设置软链接，则跳过该步骤）</span><br><span class="hljs-built_in">rm</span> -r /app/mysql <br><span class="hljs-built_in">ln</span> -sv /app/mysql-5.7.38 /app/mysql<br><span class="hljs-built_in">chown</span> -R mysql.mysql /app/mysql<br><br><span class="hljs-comment">#恢复my.cnf</span><br><span class="hljs-built_in">cp</span> /etc/my.cnfbak /etc/my.cnf<br><br><span class="hljs-comment">#初始化 mysqld</span><br>/app/mysql/bin/mysqld --initialize --user=mysql --basedir=/app/mysql --datadir=/app/mysql/data<br><br><span class="hljs-comment">#将启动脚本放到开机初始化目录内</span><br><span class="hljs-built_in">cp</span> /app/mysql/support-files/mysql.server /etc/init.d/mysqld <br>sed -i <span class="hljs-string">&#x27;s#/usr/local#/app#g&#x27;</span> /app/mysql/bin/mysqld_safe /etc/init.d/mysqld<br>sed -i  <span class="hljs-string">&quot;47a basedir=/app/mysql\ndatadir=/app/mysql/data&quot;</span> /etc/init.d/mysqld <br></code></pre></td></tr></table></figure><h3 id="4-备份新版本数据目录data"><a href="#4-备份新版本数据目录data" class="headerlink" title="4. 备份新版本数据目录data"></a>4. 备份新版本数据目录data</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> data/ databak<br></code></pre></td></tr></table></figure><h3 id="5-还原旧版本数据目录data"><a href="#5-还原旧版本数据目录data" class="headerlink" title="5. 还原旧版本数据目录data"></a>5. 还原旧版本数据目录data</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> /root/data /app/mysql<br></code></pre></td></tr></table></figure><h3 id="6-启动"><a href="#6-启动" class="headerlink" title="6. 启动"></a>6. 启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">service mysqld start<br></code></pre></td></tr></table></figure><h3 id="7-执行mysql-upgrade升级"><a href="#7-执行mysql-upgrade升级" class="headerlink" title="7. 执行mysql_upgrade升级"></a>7. 执行mysql_upgrade升级</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#作用：检查所有表是否与当前版本兼容，并更新系统库</span><br><br>/app/mysql/bin/mysql_upgrade -uroot -p123456 <span class="hljs-comment">#原密码</span><br></code></pre></td></tr></table></figure><h3 id="8-查看版本"><a href="#8-查看版本" class="headerlink" title="8. 查看版本"></a>8. 查看版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql -V<br></code></pre></td></tr></table></figure><h3 id="9-登录检查"><a href="#9-登录检查" class="headerlink" title="9. 登录检查"></a>9. 登录检查</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql -uroot -p123456<br>&gt;show databases;<br></code></pre></td></tr></table></figure><h3 id="10-注意的问题"><a href="#10-注意的问题" class="headerlink" title="10. 注意的问题"></a>10. 注意的问题</h3><p>1、原来是rpm安装的话先卸载，rpm -qa | grep mysql<br>2、如果目录不是&#x2F;app&#x2F;mysql&#x2F;注意修改&#x2F;etc&#x2F;init.d&#x2F;mysqld的数据目录和pid文件路径<br>3、连接数据库的时候报错cant connect to mysql server through socket ‘&#x2F;tmp&#x2F;mysql.sock’，修改修改my.cnf的socket路径<br>4、mysql_upgrade报错找不到sock，可以用-S指定sock</p><h2 id="三、主从架构数据库升级实例："><a href="#三、主从架构数据库升级实例：" class="headerlink" title="三、主从架构数据库升级实例："></a>三、主从架构数据库升级实例：</h2><p>1.一主一从升级：<br>    先停掉主库mysql，再停掉从库mysql，然后操作从库机器进行升级，从库升级后，再升级主库。<br>2.双主+一从升级：<br>    先停掉VIP（先停VIP没在的一方）systemctl stop keeplived<br>    再停掉VIP没在的主库数据库，然后停掉主库数据库，再停掉从库数据库。<br>    再依次升级从库&gt;主库(vip未在）&gt;主库（vip在)的数据库<br>    最后启动VIP，然后先启动主库(vip在的) &gt;主库（vip未在)&gt;从库的数据库    </p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql主从复制</title>
    <link href="/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <url>/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mysql主从复制"><a href="#mysql主从复制" class="headerlink" title="mysql主从复制"></a>mysql主从复制</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">一主二从参考文档：https://blog.csdn.net/qq_38711927/article/details/107013588<br>mysql双主参考文档：https://www.cnblogs.com/jpfss/p/11577924.html<br></code></pre></td></tr></table></figure><p><strong>需：版本一致、初始化表，并在后台启动mysql、修改root的密码</strong></p><h2 id="一、mysql一主一从配置"><a href="#一、mysql一主一从配置" class="headerlink" title="一、mysql一主一从配置"></a>一、mysql一主一从配置</h2><h3 id="1-修改主服务器master"><a href="#1-修改主服务器master" class="headerlink" title="1.修改主服务器master"></a>1.修改主服务器master</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/my.cnf<br><span class="hljs-comment">#-----------------------------------</span><br>[mysqld]<br><br>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES<br><br>server-id=129   <span class="hljs-comment">#//[必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br>log-bin=mysql-bin <span class="hljs-comment">#//[必须]启用二进制日志</span><br>binlog_format=row  <span class="hljs-comment">#mysql复制主要有三种方式：基于SQL语句的复制(statement-based replication, SBR)，基于行的复制(row-based replication, RBR)，混合模式复制(mixed-based replication, MBR)。对应的，binlog的格式也有三种：STATEMENT，ROW，MIXED。https://www.cnblogs.com/langtianya/p/5504774.html</span><br>expire_logs_days=7<br><br>slow_query_log=ON  <span class="hljs-comment">#//开启binlog日志</span><br>slow_query_log_file=/app/data/slow.log<br>long_query_time=2<br>character-set-server=utf8mb4<br><span class="hljs-comment">#/开启gtid</span><br>gtid-mode = on  <br>enforce-gtid-consistency = <span class="hljs-literal">true</span><br><br>max_connections=2000<br>lower_case_table_names=1<br><span class="hljs-comment">#---------------------------------------</span><br><br>备注：关于binlog日志，当 row_format 为mixed或者statement格式时，binlog 的大小发生改变，不管是否真的更新数据，MySQL都记录执行的sql 到binlog。基于row模式时，server层匹配到要更新的记录，发现新值和旧值一致，不做更新，就直接返回，也不记录binlog。<br></code></pre></td></tr></table></figure><h3 id="2-修改从服务器slave"><a href="#2-修改从服务器slave" class="headerlink" title="2.修改从服务器slave"></a>2.修改从服务器slave</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/my.cnf<br><span class="hljs-comment">#-----------------------------------------------------</span><br>[mysqld]<br>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES<br><br>server-id=226      <span class="hljs-comment">#//[必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br>log-bin=mysql-bin  <span class="hljs-comment">#//[不是必须]启用二进制日志</span><br><br>basedir = /app/mysql<br>datadir = /app/mysql/data<br>port = 3306<br>socket = /tmp/mysql.sock<br>character-set-server=utf8<br><br>log-error = /app/mysql/mysql/data/mysqld.log<br>pid-file = /app/mysql/mysql/data/mysqld.pid<br><br><br><span class="hljs-comment">#//开启gtid</span><br>gtid-mode = on    <br>log_slave_updates = 1<br>slave-skip-errors = all<br>enforce-gtid-consistency = <span class="hljs-literal">true</span><br><span class="hljs-comment">#----------------------------------------------------------</span><br></code></pre></td></tr></table></figure><h3 id="3-重启两台服务器的mysql"><a href="#3-重启两台服务器的mysql" class="headerlink" title="3.重启两台服务器的mysql"></a>3.重启两台服务器的mysql</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">/etc/init.d/mysqld restart<br><span class="hljs-comment">#service mysqld restart</span><br></code></pre></td></tr></table></figure><h3 id="4-在主服务器上建立帐户并授权slave-连接mysql"><a href="#4-在主服务器上建立帐户并授权slave-连接mysql" class="headerlink" title="4.在主服务器上建立帐户并授权slave,连接mysql"></a>4.在主服务器上建立帐户并授权slave,连接mysql</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt;GRANT REPLICATION SLAVE ON *.* to <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>; <br><span class="hljs-comment">#一般不用root帐号，%表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.145.226，加强安全。</span><br></code></pre></td></tr></table></figure><h3 id="5-登录主服务器的mysql，查询master的状态"><a href="#5-登录主服务器的mysql，查询master的状态" class="headerlink" title="5.登录主服务器的mysql，查询master的状态"></a>5.登录主服务器的mysql，查询master的状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt;show master status;<br><span class="hljs-comment">#注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化</span><br></code></pre></td></tr></table></figure><h3 id="6-配置从服务器Slave"><a href="#6-配置从服务器Slave" class="headerlink" title="6.配置从服务器Slave"></a>6.配置从服务器Slave</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt;change master to master_host=<span class="hljs-string">&#x27;192.168.94.129&#x27;</span>,master_user=<span class="hljs-string">&#x27;repl&#x27;</span>,master_password=<span class="hljs-string">&#x27;123456&#x27;</span>,master_port=3306,MASTER_AUTO_POSITION=1;<br><br><span class="hljs-comment">#指定复制点</span><br>change master to master_host=<span class="hljs-string">&#x27;192.168.94.129&#x27;</span>,master_user=<span class="hljs-string">&#x27;repl&#x27;</span>,master_password=<span class="hljs-string">&#x27;123456&#x27;</span>,master_port=3306,MASTER_AUTO_POSITION=1,master_log_file=<span class="hljs-string">&#x27;mysql-bin.000006&#x27;</span>,master_log_pos=2192;<br><br>参数详解：<br>master_host :主服务器地址<br>master_port :端口地址<br>MASTER_AUTO_POSITION=1  :1是开启，0是关闭,开启gtid复制<br>master_log_file  :主master上show master status\G  获取的 File 一栏的信息<br>master_log_pos=2192; :主master上show master status\G 获取的Position 的信息;<br><br>       <br>Mysql&gt;start slave;    <span class="hljs-comment">#启动从服务器复制功能</span><br></code></pre></td></tr></table></figure><h3 id="7-检查从服务器复制功能状态"><a href="#7-检查从服务器复制功能状态" class="headerlink" title="7.检查从服务器复制功能状态"></a>7.检查从服务器复制功能状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">show slave status\G<br><br>Slave_IO_State: Waiting <span class="hljs-keyword">for</span> master to send event<br>              Master_Host: 192.168.2.222  //主服务器地址<br>              Master_User: mysync   //授权帐户名，尽量避免使用root<br>              Master_Port: 3306    //数据库端口，部分版本没有此行<br>              Connect_Retry: 60<br>              Master_Log_File: mysql-bin.000004<br>              Read_Master_Log_Pos: 600     //<span class="hljs-comment">#同步读取二进制日志的位置，大于等于Exec_Master_Log_Pos</span><br>              Relay_Log_File: ddte-relay-bin.000003<br>              Relay_Log_Pos: 251<br>              Relay_Master_Log_File: mysql-bin.000004<br>              Slave_IO_Running: Yes    //此状态必须YES<br>              Slave_SQL_Running: Yes     //此状态必须YES<br></code></pre></td></tr></table></figure><h3 id="8-一主多从注意bin-log日志"><a href="#8-一主多从注意bin-log日志" class="headerlink" title="8.一主多从注意bin_log日志"></a>8.一主多从注意bin_log日志</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看bin_log日志，同步需要使用bin_log日志</span><br>show binary logs;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker运行MySQL单节点和主从节点</title>
    <link href="/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/docker%E8%BF%90%E8%A1%8Cmysql%E5%8D%95%E8%8A%82%E7%82%B9%E5%92%8C%E4%B8%BB%E4%BB%8E%E8%8A%82%E7%82%B9/"/>
    <url>/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/docker%E8%BF%90%E8%A1%8Cmysql%E5%8D%95%E8%8A%82%E7%82%B9%E5%92%8C%E4%B8%BB%E4%BB%8E%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker运行mysql"><a href="#docker运行mysql" class="headerlink" title="docker运行mysql"></a>docker运行mysql</h1><h2 id="一、使用docker运行mysql单节点（对mysql性能有要求的，不建议使用docker运行mysql）"><a href="#一、使用docker运行mysql单节点（对mysql性能有要求的，不建议使用docker运行mysql）" class="headerlink" title="一、使用docker运行mysql单节点（对mysql性能有要求的，不建议使用docker运行mysql）"></a>一、使用docker运行mysql单节点（对mysql性能有要求的，不建议使用docker运行mysql）</h2><h3 id="持久化数据，创建配置文件、日志、以及数据目录"><a href="#持久化数据，创建配置文件、日志、以及数据目录" class="headerlink" title="持久化数据，创建配置文件、日志、以及数据目录"></a>持久化数据，创建配置文件、日志、以及数据目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /app/mysql/&#123;conf,<span class="hljs-built_in">log</span>,data&#125;<br><br><br><span class="hljs-comment">#修改挂载到本地的日志目录的权限。有些时候会因为权限问题导致无法映射到本地</span><br><span class="hljs-built_in">chown</span> -R 999:999 /app/mysql/log<br><br><span class="hljs-comment">#/app/mysql/conf/文件目录中需要有相应的my.cnf，否则直接执行以下命令时会无法启动</span><br><span class="hljs-built_in">cat</span> &gt;mysqld.cnf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[mysqld]</span><br><span class="hljs-string">skip-host-cache</span><br><span class="hljs-string">skip-name-resolve</span><br><span class="hljs-string"></span><br><span class="hljs-string">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES </span><br><span class="hljs-string"></span><br><span class="hljs-string">server-id=1</span><br><span class="hljs-string">log-bin=mysql-bin</span><br><span class="hljs-string">binlog_format=row</span><br><span class="hljs-string">expire_logs_days=7</span><br><span class="hljs-string"></span><br><span class="hljs-string">slow_query_log=ON</span><br><span class="hljs-string">slow_query_log_file=/var/log/mysql/slow.log</span><br><span class="hljs-string">long_query_time=2</span><br><span class="hljs-string"></span><br><span class="hljs-string">gtid-mode=on</span><br><span class="hljs-string">enforce-gtid-consistency=true</span><br><span class="hljs-string"></span><br><span class="hljs-string">max_connections=1000</span><br><span class="hljs-string"></span><br><span class="hljs-string">lower_case_table_names=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-built_in">chmod</span> 655 mysqld.cnf<br></code></pre></td></tr></table></figure><h3 id="docker运行mysql（单节点）"><a href="#docker运行mysql（单节点）" class="headerlink" title="docker运行mysql（单节点）"></a>docker运行mysql（单节点）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -p 3306:3306 \<br>--name mysql -e TZ=Asia/Shanghai \<br>--restart=always \<br>-v /app/mysql/conf:/etc/mysql/conf.d \<br>-v /app/mysql/log:/logs \<br>-v /app/mysql/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-e MYSQL_DATABASE=<span class="hljs-built_in">test</span> \<br>-d mysql:5.7<br><br><br>备注：<br>-v 将本地数据映射到容器内<br>-e 设置的环境变量，MYSQL_ROOT_PASSWORD为数据库密码，MYSQL_DATABASE为数据库名<br></code></pre></td></tr></table></figure><h3 id="使用过程中，测试、生产环境中，有时并不需要在本地安装一个mysql-server服务，只需要安装一个登录mysql-server-的mysql的客户端client，可使用如下方式："><a href="#使用过程中，测试、生产环境中，有时并不需要在本地安装一个mysql-server服务，只需要安装一个登录mysql-server-的mysql的客户端client，可使用如下方式：" class="headerlink" title="使用过程中，测试、生产环境中，有时并不需要在本地安装一个mysql server服务，只需要安装一个登录mysql server 的mysql的客户端client，可使用如下方式："></a>使用过程中，测试、生产环境中，有时并不需要在本地安装一个mysql server服务，只需要安装一个登录mysql server 的mysql的客户端client，可使用如下方式：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#centos6系统上安装mysql-client的方式：</span><br>yum install mysql-clent mysql-devel -y<br><span class="hljs-comment">#centos7的系统上安装mysql client的方式：</span><br>yum install -y mariadb.x86_64 mariadb-libs.x86_64<br></code></pre></td></tr></table></figure><h2 id="二、使用docker运行（mysql-主从）master和slave节点"><a href="#二、使用docker运行（mysql-主从）master和slave节点" class="headerlink" title="二、使用docker运行（mysql-主从）master和slave节点"></a>二、使用docker运行（mysql-主从）master和slave节点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建network</span><br>docker network create --subnet=172.18.0.0/16 mysqlnetwork<br><br><span class="hljs-comment">#主节点：</span><br>docker run -p 12347:3306 \<br>--restart=always \<br>--name mysql-master1 \<br>--net mysqlnetwork \<br>--ip 172.18.0.2 \<br>-v /app/mysql-master/conf:/etc/mysql/conf.d \<br>-v /app/mysql-master/logs:/var/log/mysql \<br>-v /app/mysql-master/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-d mysql:5.7 \<br>--character-set-server=utf8mb4 \<br>--collation-server=utf8mb4_unicode_ci<br><br><span class="hljs-comment">#连接master数据库执行</span><br>&gt;GRANT REPLICATION SLAVE ON *.* to <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>; <br>&gt;show master status;<br><br><span class="hljs-comment">#从节点：</span><br>docker run -p 12348:3306 \<br>--restart=always \<br>--name mysql-slave1 \<br>--net mysqlnetwork \<br>--ip 172.18.0.3 \<br>-v /home/coinpay/middlerware/mysql/slave1/conf:/etc/mysql/conf.d \<br>-v /home/coinpay/middlerware/mysql/slave1/logs:/var/log/mysql \<br>-v /home/coinpay/middlerware/mysql/slave1/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-d mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci<br><br><span class="hljs-comment">#连接slave数据库执行</span><br>&gt;change master to master_host=<span class="hljs-string">&#x27;172.18.0.2&#x27;</span>,master_user=<span class="hljs-string">&#x27;repl&#x27;</span>,master_password=<span class="hljs-string">&#x27;123456&#x27;</span>,master_port=3306,MASTER_AUTO_POSITION=1;<br>&gt;start slave;<br>&gt;show slave status\G<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制安装mysql</title>
    <link href="/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85mysql/"/>
    <url>/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85mysql/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二进制安装MySQL"><a href="#二进制安装MySQL" class="headerlink" title="二进制安装MySQL"></a>二进制安装MySQL</h1><h2 id="1-安装前检查"><a href="#1-安装前检查" class="headerlink" title="1.安装前检查"></a>1.安装前检查</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#检查系统是否自带安装 MySQL，如果有的话&#x27;rpm -e&#x27;普通删除&#x27;rpm -e --nodeps&#x27;强制删除</span><br>rpm -qa | grep mysql<br><br><span class="hljs-comment">#检查系统是否自带安装 mariadb，如果有的话&#x27;rpm -e --nodeps&#x27;强制删除</span><br>rpm -qa | grep mariadb<br><br><span class="hljs-comment">#安装依赖包</span><br>yum install libaio* -y<br></code></pre></td></tr></table></figure><h2 id="2-安装mysql"><a href="#2-安装mysql" class="headerlink" title="2.安装mysql"></a>2.安装mysql</h2><p>前言:mysql安装在&#x2F;app中</p><h3 id="2-1-官网下载相关的mysql包"><a href="#2-1-官网下载相关的mysql包" class="headerlink" title="2.1 官网下载相关的mysql包"></a>2.1 官网下载相关的mysql包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.39-linux-glibc2.12-x86_64.tar.gz</span><br><span class="hljs-comment">#wget https://cdn.mysql.com/archives/mysql-5.7/mysql-5.7.39-linux-glibc2.12-x86_64.tar.gz</span><br><br>tar -xnf mysql-5.7.32.tar.gz   <span class="hljs-comment">#解压</span><br><span class="hljs-built_in">mv</span> mysql-5.7.32-linux-glibc2.12-x86_64 mysql-5.7.32  <span class="hljs-comment">#重命名 或者添加ln -s软链接</span><br></code></pre></td></tr></table></figure><h3 id="2-2-添加系统mysql组和mysql用户"><a href="#2-2-添加系统mysql组和mysql用户" class="headerlink" title="2.2 添加系统mysql组和mysql用户"></a>2.2 添加系统mysql组和mysql用户</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#检查是否含有mysql组，没有的话需要新建</span><br><span class="hljs-built_in">cat</span> /etc/group | grep mysql <br><span class="hljs-comment">#新建mysql组</span><br>groupadd mysql<br>useradd -r -g mysql mysql <span class="hljs-comment">#useradd -r参数表示mysql用户是系统用户，不可用于登录系统</span><br></code></pre></td></tr></table></figure><h3 id="2-3-创建data目录"><a href="#2-3-创建data目录" class="headerlink" title="2.3 创建data目录"></a>2.3 创建data目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/mysql-5.7.32<br><span class="hljs-built_in">mkdir</span> data<br></code></pre></td></tr></table></figure><h3 id="2-4-将mysql文件的所有者及所属组改为mysql"><a href="#2-4-将mysql文件的所有者及所属组改为mysql" class="headerlink" title="2.4 将mysql文件的所有者及所属组改为mysql"></a>2.4 将mysql文件的所有者及所属组改为mysql</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/<br><span class="hljs-built_in">chown</span> -R mysql.mysql /app/mysql-5.7.32   <span class="hljs-comment">#修改所属组 如果添加软链接的话，两个都要修改</span><br></code></pre></td></tr></table></figure><h3 id="2-5-设置my-cnf文件"><a href="#2-5-设置my-cnf文件" class="headerlink" title="2.5 设置my.cnf文件"></a>2.5 设置my.cnf文件</h3><p><strong>方法一</strong></p><p>在&#x2F;app&#x2F;mysql-5.7.32&#x2F;support-files目录下创建my_default.cnf</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /app/mysql-5.7.32/support-files/my_default.cnf<br><br>[mysqld]<br>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES <br> <br>basedir = /app/mysql-5.7.32/<br>datadir = /app/mysql-5.7.32/data<br>port = 3306<br>socket = /tmp/mysql.sock<br>character-set-server=utf8<br> <br>log-error = /app/mysql-5.7.32/data/mysqld.log<br>pid-file = /app/mysql-5.7.32/data/mysqld.pid<br></code></pre></td></tr></table></figure><p><strong>方法二</strong></p><p>将该文件拷贝覆盖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> support-files/my_default.cnf /etc/my.cnf<br></code></pre></td></tr></table></figure><p>直接建立&#x2F;etc&#x2F;my.cnf</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/my.cnf<br><br>[mysqld]<br>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES <br><br>server-id=59<br><br>basedir = /app/mysql/<br>datadir = /app/mysql/data<br><br><span class="hljs-comment">##pid-file = /app/mysql/data/mysqld.pid</span><br>log-bin = mysql-bin<br>binlog-format = row<br>slow_query_log = ON<br>slow_query_log_file = /app/mysql/data/slow.log<br>long_query_time = 1<br>gtid-mode = on<br>log_slave_updates = 1<br>slave-skip-errors = all<br>enforce-gtid-consistency = <span class="hljs-literal">true</span><br>log_timestamps = SYSTEM<br><br></code></pre></td></tr></table></figure><h3 id="2-6-初始化-mysqld"><a href="#2-6-初始化-mysqld" class="headerlink" title="2.6  初始化 mysqld"></a>2.6  初始化 mysqld</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/mysql-5.7.32<br>./bin/mysqld --initialize --user=mysql --basedir=/app/mysql-5.7.32 --datadir=/app/mysql-5.7.32/data/ <br><span class="hljs-comment">#初始化，生成日志，日志内有临时mysql密码</span><br><span class="hljs-comment">#查看日志</span><br><span class="hljs-built_in">cat</span> /app/mysql/data/mysqld.log<br></code></pre></td></tr></table></figure><h3 id="2-7-将脚本放到开机初始化目录内"><a href="#2-7-将脚本放到开机初始化目录内" class="headerlink" title="2.7  将脚本放到开机初始化目录内"></a>2.7  将脚本放到开机初始化目录内</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> support-files/mysql.server /etc/init.d/mysql<br></code></pre></td></tr></table></figure><h3 id="2-8-启动mysql服务"><a href="#2-8-启动mysql服务" class="headerlink" title="2.8 启动mysql服务"></a>2.8 启动mysql服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">service mysql start<br></code></pre></td></tr></table></figure><h3 id="2-9-添加环境变量"><a href="#2-9-添加环境变量" class="headerlink" title="2.9 添加环境变量"></a>2.9 添加环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#在环境变量的目录内新建一个mysql.sh脚本</span><br>vim /etc/profile.d/mysql.sh<br><br><span class="hljs-built_in">export</span> PATH=/app/mysql-5.7.32/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment">#使脚本生效</span><br><span class="hljs-built_in">source</span> ./mysql.sh  <br></code></pre></td></tr></table></figure><h3 id="2-10-连接数据库"><a href="#2-10-连接数据库" class="headerlink" title="2.10 连接数据库"></a>2.10 连接数据库</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -uroot -<span class="hljs-selector-tag">p</span>临时密码<br></code></pre></td></tr></table></figure><h4 id="2-10-1-如果初始化密码忘了或者没有保存："><a href="#2-10-1-如果初始化密码忘了或者没有保存：" class="headerlink" title="2.10.1  如果初始化密码忘了或者没有保存："></a>2.10.1  如果初始化密码忘了或者没有保存：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#注意：mysql如果已经开启了，请先关闭mysql</span><br>service mysqld stop<br><br><span class="hljs-comment">#在my.conf内[mysqld]后面任意一行添加“skip-grant-tables”   </span><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/my.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">skip-grant-tables</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">#启动mysql</span><br>service mysqld start<br><br><span class="hljs-comment">#连接mysql，直接输入mysql即可</span><br>mysql<br><br>mysql&gt; use mysql; <br><span class="hljs-comment">#修改密码</span><br>mysql&gt; update user <span class="hljs-built_in">set</span> authentication_string=passworD(<span class="hljs-string">&quot;你的新密码&quot;</span>) <span class="hljs-built_in">where</span> user=<span class="hljs-string">&#x27;root&#x27;</span>;<br>mysql&gt; flush privileges;<br><span class="hljs-comment">######或者########     </span><br>mysql&gt; update user <span class="hljs-built_in">set</span> password=password(<span class="hljs-string">&quot;你的新密码&quot;</span>) <span class="hljs-built_in">where</span> user=<span class="hljs-string">&quot;root&quot;</span>;<br>mysql&gt; flush privileges;<br><br><span class="hljs-comment">#修改密码后，注释/etc/my.cnf中skip-grant-tables并重启</span><br>service mysqld restart<br><br><span class="hljs-comment">#登录时提示：</span><br><span class="hljs-comment">#ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.则需要修改初始密码</span><br></code></pre></td></tr></table></figure><h3 id="2-11-修改初始密码"><a href="#2-11-修改初始密码" class="headerlink" title="2.11 修改初始密码"></a>2.11 修改初始密码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; <span class="hljs-built_in">set</span> password=password(<span class="hljs-string">&#x27;123456&#x27;</span>);<br>mysql&gt; grant all privileges on *.* to root@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>mysql&gt; flush privileges;<br></code></pre></td></tr></table></figure><h3 id="2-12-添加远程访问权限"><a href="#2-12-添加远程访问权限" class="headerlink" title="2.12 添加远程访问权限"></a>2.12 添加远程访问权限</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; use mysql;<br>mysql&gt; update user <span class="hljs-built_in">set</span> host=<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-built_in">where</span> user = <span class="hljs-string">&#x27;root&#x27;</span>;<br>mysql&gt; flush privileges;<br></code></pre></td></tr></table></figure><h3 id="2-13-测试（可忽略）"><a href="#2-13-测试（可忽略）" class="headerlink" title="2.13 测试（可忽略）"></a>2.13 测试（可忽略）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#插入上万行测试数据：</span><br>create database <span class="hljs-built_in">test</span>;<br><br>CREATE TABLE `t_user` (<br>  `<span class="hljs-built_in">id</span>` bigint(20) NOT NULL AUTO_INCREMENT,<br>  `name` varchar(255) DEFAULT NULL,<br>  `age` tinyint(4) DEFAULT NULL,<br>  `create_time` datetime DEFAULT NULL,<br>  `update_time` datetime DEFAULT NULL,<br>  PRIMARY KEY (`<span class="hljs-built_in">id</span>`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br><br><span class="hljs-comment">#下面的存储过程来插入100000条数据</span><br>delimiter //<br>DROP PROCEDURE IF EXISTS proc_batch_insert;<br>CREATE PROCEDURE proc_batch_insert()<br>BEGIN<br>DECLARE pre_name BIGINT;<br>DECLARE ageVal INT;<br>DECLARE i INT;<br>SET pre_name=187635267;<br>SET ageVal=100;<br>SET i=1;<br>WHILE i &lt;= 10000 DO<br>        INSERT INTO t_user(`name`,age,create_time,update_time) VALUES(CONCAT(pre_name,<span class="hljs-string">&#x27;@qq.com&#x27;</span>),(ageVal+1)%30,NOW(),NOW());<br>SET pre_name=pre_name+100;<br>SET i=i+1;<br>END WHILE;<br>END //<br> <br>delimiter ;<br>call proc_batch_insert();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx负载均衡实现策略</title>
    <link href="/2023/03/27/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0%E7%AD%96%E7%95%A5/"/>
    <url>/2023/03/27/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><table><thead><tr><th>轮询</th><th>默认方式</th></tr></thead><tbody><tr><td>weight</td><td>权重方式</td></tr><tr><td>ip_hash</td><td>依据ip分配方式</td></tr><tr><td>least_conn</td><td>最少连接方式</td></tr><tr><td>fair（第三方）</td><td>响应时间方式</td></tr><tr><td>url_hash（第三方）</td><td>依据URL分配方式</td></tr></tbody></table><h3 id="Nginx使用的配置详解"><a href="#Nginx使用的配置详解" class="headerlink" title="Nginx使用的配置详解:"></a>Nginx使用的配置详解:</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">(<span class="hljs-number">1</span>). down： 表示当前的server暂时不参与负载。<br>(<span class="hljs-number">2</span>). weight：  默认为<span class="hljs-number">1</span><span class="hljs-selector-class">.weight</span>越大，负载的权重就越大。<br>(<span class="hljs-number">3</span>). max_fails： 允许请求失败的次数默认为<span class="hljs-number">1</span>.当超过最大次数时，返回proxy_next_upstream 模块定义的错误<br>(<span class="hljs-number">4</span>). fail_timeout： max_fails 次失败后，暂停的时间。<br>(<span class="hljs-number">5</span>). backup： 其它所有的非backup机器down或者忙的时候，请求backup机器，所以这台机器压力会最轻。<br></code></pre></td></tr></table></figure><h2 id="轮询"><a href="#轮询" class="headerlink" title="轮询:"></a>轮询:</h2><p>每个请求按时间顺序逐一分配到不同的应用服务器，如果应用服务器down掉，自动剔除，剩下的继续轮询。它是upstream模块默认的负载均衡默认策略。每个请求会按时间顺序逐一分配到不同的后端服务器。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">upstream dynamic_name &#123;<br>        server localhost:8081;<br>        server localhost:8082;<br>        server localhost:8083;<br>&#125;<br>server &#123;<br><span class="hljs-comment">#...省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="weight-权重"><a href="#weight-权重" class="headerlink" title="weight(权重):"></a>weight(权重):</h2><p>权重方式，在轮询策略的基础上指定轮询的几率。权重和访问比率成正比，用于应用服务器性能不均的情况。使用weight&#x3D;x，来配置权重</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">upstream dynamic_name &#123;<br>        server localhost:8081 weight=9; <span class="hljs-comment">#设置为9，代表该服务器性能强，能够处理更多的请求</span><br>        server localhost:8082;<br>        server localhost:8083 max_fails=3 fail_timeout=20s;<br>&#125; <br>server &#123;<br><span class="hljs-comment">#...省略...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ip-hash："><a href="#ip-hash：" class="headerlink" title="ip_hash："></a>ip_hash：</h2><p>指定负载均衡器按照基于客户端IP的分配方式，这个方法确保了相同的客户端的请求一直发送到相同的服务器，以保证session会话。这样每个访客都固定访问一个后端服务器，可以解决session不能跨服务器的问题。<br>​</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">upstream dynamic_name &#123;<br>        ip_hash;    <span class="hljs-comment">#保证每个访客固定访问一个后端服务器</span><br>        server localhost:8081 weight=9;<br>        server localhost:8082; <br>        server localhost:8083   max_fails=3 fail_timeout=20s;<br>&#125;              <br>server &#123;<br><span class="hljs-comment">#...省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="least-conn："><a href="#least-conn：" class="headerlink" title="least_conn："></a>least_conn：</h2><p>把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同；但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least_conn这种方式就可以达到更好的负载均衡效果。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">upstream dynamic_name &#123;<br>        least_conn;    <span class="hljs-comment">#把请求转发给连接数较少的后端服务器</span><br>        server localhost:8081;<br>        server localhost:8082 backup;<br>        server localhost:8083   max_fails=3 fail_timeout=20s;<br>&#125; <br>server &#123;<br><span class="hljs-comment">#...省略...</span><br>&#125;           <br></code></pre></td></tr></table></figure><h2 id="第三方策略："><a href="#第三方策略：" class="headerlink" title="第三方策略："></a>第三方策略：</h2><p>第三方的负载均衡策略的实现需要安装第三方插件。</p><h3 id="fair："><a href="#fair：" class="headerlink" title="fair："></a>fair：</h3><p>按照服务器端的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">upstream dynamic_name &#123;<br>        server localhost:8081;<br>        server localhost:8082;<br>        server localhost:8083;<br>        fair;    <span class="hljs-comment">#实现响应时间短的优先分配</span><br>&#125;              <br>server &#123;<br><span class="hljs-comment">#...省略...</span><br>&#125;            <br></code></pre></td></tr></table></figure><h3 id="url-hash："><a href="#url-hash：" class="headerlink" title="url_hash："></a>url_hash：</h3><p>　按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，要配合缓存命中来使用。同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费。而使用url_hash，可以使得同一个url（也就是同一个资源请求）会到达同一台服务器，一旦缓存住了资源，再此收到请求，就可以从缓存中读取。　</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">upstream dynamic_name &#123;<br>        <span class="hljs-built_in">hash</span> <span class="hljs-variable">$request_uri</span>;    <span class="hljs-comment">#实现每个url定向到同一个后端服务器</span><br>        server localhost:8081;<br>        server localhost:8082;<br>        server localhost:8083;<br>&#125;<br>server &#123;<br><span class="hljs-comment">#...省略...</span><br>&#125;   <br></code></pre></td></tr></table></figure><p><strong>总结</strong></p><p>　　以上便是6种负载均衡策略的实现方式，其中除了轮询和轮询权重外，都是Nginx根据不同的算法实现的。在实际运用中，需要根据不同的场景选择性运用，大都是多种策略结合使用以达到实际需求。</p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx安装</title>
    <link href="/2023/03/27/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%AE%89%E8%A3%85/"/>
    <url>/2023/03/27/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h1><h2 id="一、二进制安装"><a href="#一、二进制安装" class="headerlink" title="一、二进制安装"></a>一、二进制安装</h2><h3 id="1-去nginx官网拉取源文件"><a href="#1-去nginx官网拉取源文件" class="headerlink" title="1.去nginx官网拉取源文件"></a>1.去nginx官网拉取源文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget http://nginx.org/download/nginx-1.18.0.tar.gz<br><span class="hljs-comment">#或者下载源文件到本地，建议放到/home/目录下</span><br></code></pre></td></tr></table></figure><h3 id="2-安装依赖环境"><a href="#2-安装依赖环境" class="headerlink" title="2.安装依赖环境"></a>2.安装依赖环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install gcc openssl-devel pcre pcre-devel zlib zlib-devel -y<br>或者<br>yum install -y gcc-c++ zlib zlib-devel openssl openssl--devel pcre pcre-devel <br></code></pre></td></tr></table></figure><h3 id="3-解压nginx源文件压缩包"><a href="#3-解压nginx源文件压缩包" class="headerlink" title="3.解压nginx源文件压缩包"></a>3.解压nginx源文件压缩包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -xf nginx-1.18.0.tar.gz<br></code></pre></td></tr></table></figure><h3 id="4-解压后进入nginx文件内"><a href="#4-解压后进入nginx文件内" class="headerlink" title="4.解压后进入nginx文件内"></a>4.解压后进入nginx文件内</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> nginx-1.18.0<br></code></pre></td></tr></table></figure><h3 id="5-配置nginx的安装路径"><a href="#5-配置nginx的安装路径" class="headerlink" title="5.配置nginx的安装路径"></a>5.配置nginx的安装路径</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">./configure --prefix=/usr/local/nginx<br><br><span class="hljs-comment">#如果--prefix安装的路径不是在环境变量PATH内，则需要添加软链接</span><br><span class="hljs-built_in">ln</span> -s ./nginx/sbin/nginx /usr/bin/nginx<br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="6-进行编译"><a href="#6-进行编译" class="headerlink" title="6.进行编译"></a>6.进行编译</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">make <br>make install<br></code></pre></td></tr></table></figure><h3 id="7-启动"><a href="#7-启动" class="headerlink" title="7.启动"></a>7.启动</h3><h4 id="7-1、普通启动"><a href="#7-1、普通启动" class="headerlink" title="7.1、普通启动"></a>7.1、普通启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/local/nginx/sbin<br><br>./nginx<br><br><span class="hljs-comment">#如果启动不了，查看一下是否启动了相关的进程，端口是否冲突，冲突的话使用kill +端口号，防火墙是否关闭</span><br><br><span class="hljs-comment">#查看启动的进程  master 和 worker两个进程</span><br>ps -ef |grep nginx <br><br><span class="hljs-comment">#查看防火墙状态 </span><br>systemctl status firewalld <br><br><span class="hljs-comment">#关闭防火墙</span><br>systemctl stop firewalld<br>systemctl <span class="hljs-built_in">disable</span> firewalld<br></code></pre></td></tr></table></figure><h4 id="7-2、配置文件启动，前面的是启动文件sbin地址，后面是nginx配置文件"><a href="#7-2、配置文件启动，前面的是启动文件sbin地址，后面是nginx配置文件" class="headerlink" title="7.2、配置文件启动，前面的是启动文件sbin地址，后面是nginx配置文件"></a>7.2、配置文件启动，前面的是启动文件sbin地址，后面是nginx配置文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">/usr/local/nginx/sbin/nginx  -c /usr/local/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure><h3 id="8-关闭nginx"><a href="#8-关闭nginx" class="headerlink" title="8.关闭nginx"></a>8.关闭nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看nginx的进程</span><br>ps  -ef|grep nginx<br><span class="hljs-comment">#处理请求后再关闭 进程</span><br><span class="hljs-built_in">kill</span> -QUIT 主pid<br><span class="hljs-comment">#直接关闭进程，不管请求是否处理完成</span><br><span class="hljs-built_in">kill</span> -TERM 主pid<br></code></pre></td></tr></table></figure><h3 id="9-重启nginx"><a href="#9-重启nginx" class="headerlink" title="9.重启nginx"></a>9.重启nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./nginx -s reload<br></code></pre></td></tr></table></figure><h3 id="10-配置检查"><a href="#10-配置检查" class="headerlink" title="10.配置检查"></a>10.配置检查</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#前面的是启动文件sbin地址，后面是nginx配置文件</span><br>/usr/local/nginx/sbin/nginx  -c /usr/local/nginx/conf/nginx.conf -t<br>或者<br>nginx -t<br></code></pre></td></tr></table></figure><h3 id="11-查看配置信息"><a href="#11-查看配置信息" class="headerlink" title="11.查看配置信息"></a>11.查看配置信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">./nginx -v    查看nginx的版本<br>./nginx -v    查看nginx的版本<br></code></pre></td></tr></table></figure><h2 id="二、rpm包安装nginx"><a href="#二、rpm包安装nginx" class="headerlink" title="二、rpm包安装nginx"></a>二、rpm包安装nginx</h2><h3 id="1-下载rpm包"><a href="#1-下载rpm包" class="headerlink" title="1.下载rpm包"></a>1.下载rpm包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.16.1-1.el7.ngx.x86_64.rpm<br></code></pre></td></tr></table></figure><h3 id="2-yum安装nginx"><a href="#2-yum安装nginx" class="headerlink" title="2.yum安装nginx"></a>2.yum安装nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install nginx-1.16.1-1.e17<br></code></pre></td></tr></table></figure><h3 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start nginx<br>systemctl <span class="hljs-built_in">enable</span> nginx  //设置开机自启<br></code></pre></td></tr></table></figure><h2 id="三、yum安装"><a href="#三、yum安装" class="headerlink" title="三、yum安装"></a>三、yum安装</h2><h3 id="1、添加源"><a href="#1、添加源" class="headerlink" title="1、添加源"></a>1、添加源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#默认情况Centos7中无Nginx的源，最近发现Nginx官网提供了Centos的源地址。因此可以如下执行命令添加源：</span><br>rpm -Uvh  http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm<br></code></pre></td></tr></table></figure><h3 id="2、安装Nginx"><a href="#2、安装Nginx" class="headerlink" title="2、安装Nginx"></a>2、安装Nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#通过yum search nginx看看是否已经添加源成功。如果成功则执行下列命令安装Nginx。</span><br>sudo yum install -y nginx<br></code></pre></td></tr></table></figure><h3 id="3、启动Nginx"><a href="#3、启动Nginx" class="headerlink" title="3、启动Nginx"></a>3、启动Nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#两种方式：</span><br>nginx -c /etc/nginx/nginx.conf<br><br>nginx -s reload<br><br><span class="hljs-comment">#设置开机自动运行</span><br>sudo systemctl start nginx.service<br>sudo systemctl <span class="hljs-built_in">enable</span> nginx.service<br></code></pre></td></tr></table></figure><h2 id="四、docker安装nginx"><a href="#四、docker安装nginx" class="headerlink" title="四、docker安装nginx"></a>四、docker安装nginx</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull nginx:latest<br><br>docker run --name nginx-docker -p 8080:80 -d nginx<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dockerfile详解</title>
    <link href="/2023/03/24/docker/dockerfile/dockerfile%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/03/24/docker/dockerfile/dockerfile%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Dockerfile-文件全面详解"><a href="#Dockerfile-文件全面详解" class="headerlink" title="Dockerfile 文件全面详解"></a>Dockerfile 文件全面详解</h1><p>Docker 可以通过读取 Dockerfile 中的指令自动构建镜像。Dockerfile 是一个文本文档，其中包含了用户创建镜像的所有命令和说明。</p><p><strong>一、 变量</strong></p><p>变量用 $variable_name 或者 ${variable_name} 表示。</p><ul><li>${variable:-word} 表示如果 variable 设置，则结果将是该值。如果 variable 未设置，word 则将是结果。</li><li>${variable:+word} 表示如果 variable 设置则为 word 结果，否则为空字符串。</li></ul><p>变量前加 \ 可以转义成普通字符串：$foo or ${foo}，表示转换为 $foo 和 ${foo} 文字。</p><p><strong>二、FROM</strong></p><p>初始化一个新的构建阶段，并设置基础镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM [--platform=&lt;platform&gt;] &lt;image&gt; [AS &lt;name&gt;]<br>FROM [--platform=&lt;platform&gt;] &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]<br>FROM [--platform=&lt;platform&gt;] &lt;image&gt;[@&lt;digest&gt;] [AS &lt;name&gt;]<br></code></pre></td></tr></table></figure><ul><li>单个 Dockfile 可以多次出现 FROM，以使用之前的构建阶段作为另一个构建阶段的依赖项</li><li>AS name 表示为构建阶段命名，在后续 FROM 和 COPY –from&#x3D;<name> 说明中可以使用这个名词，引用此阶段构建的映像</name></li><li>digest 其实就是就是根据镜像内容产生的一个 ID，只要镜像的内容不变 digest 也不会变</li><li>tag 或 digest 值是可选的。如果您省略其中任何一个，构建器默认使用一个 latest 标签。如果找不到该 tag 值，构建器将返回错误。</li><li>–platform 标志可用于在 FROM 引用多平台镜像的情况下指定平台。例如，linux&#x2F;amd64、linux&#x2F;arm64、 或 windows&#x2F;amd64。</li></ul><p><strong>三、RUN</strong></p><p>将在当前镜像之上的新层中执行命令，在 docker build时运行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">RUN /bin/bash -c <span class="hljs-string">&#x27;source $HOME/.bashrc; \</span><br><span class="hljs-string">echo $HOME&#x27;</span><br></code></pre></td></tr></table></figure><p>RUN 有两种形式：</p><ul><li>RUN<command>（shell 形式，命令在 shell 中运行，默认 &#x2F;bin&#x2F;sh -c 在 Linux 或 cmd &#x2F;S &#x2F;CWindows 上）</li><li>RUN [“executable”, “param1”, “param2”]（执行形式）</li></ul><p>说明：</p><ul><li>可以使用 \（反斜杠）将单个 RUN 指令延续到下一行</li><li>RUN 在下一次构建期间，指令缓存不会自动失效。可以使用 –no-cache 标志使指令缓存无效</li><li>Dockerfile 的指令每执行一次都会在 Docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大，可以使用 &amp;&amp; 符号连接命令，这样执行后，只会创建 1 层镜像</li></ul><p><strong>四、CMD</strong></p><p>运行程序，在 docker run 时运行，但是和 run 命令不同，RUN 是在 docker build 时运行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM ubuntu<br>CMD [<span class="hljs-string">&quot;/usr/bin/wc&quot;</span>,<span class="hljs-string">&quot;--help&quot;</span>]<br></code></pre></td></tr></table></figure><p>支持三种格式：</p><ul><li>CMD [“executable”,”param1”,”param2”] 使用 exec 执行，推荐方式；</li><li>CMD command param1 param2 在 &#x2F;bin&#x2F;sh 中执行，提供给需要交互的应用；</li><li>CMD [“param1”,”param2”] 提供给 ENTRYPOINT 的默认参数。</li></ul><p>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。</p><p>如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。</p><p><strong>五、LABEL</strong></p><p>添加元数据：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">LABEL multi.label1=<span class="hljs-string">&quot;value1&quot;</span> \<br>      multi.label2=<span class="hljs-string">&quot;value2&quot;</span> \<br>      other=<span class="hljs-string">&quot;value3&quot;</span><br></code></pre></td></tr></table></figure><p><strong>六、EXPOSE</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]<br></code></pre></td></tr></table></figure><p>Docker 容器在运行时侦听指定的网络端口。可以指定端口是监听TCP还是UDP，如果不指定协议，默认为TCP。</p><p>该 EXPOSE 指令实际上并未发布端口。要在运行容器时实际发布端口，docker run -P 来发布和映射一个或多个端口。</p><p>默认情况下，EXPOSE 假定 TCP。您还可以指定 UDP：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">EXPOSE 80/udp<br></code></pre></td></tr></table></figure><p><strong>七、ENV</strong></p><p>设置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ENV &lt;key&gt;=&lt;value&gt; ...<br></code></pre></td></tr></table></figure><p>设置的环境变量将持续存在，您可以使用 docker inspect 来查看。使用 docker run –env <key>&#x3D;<value> 来更改环境变量的值。</value></key></p><p>如果环境变量只在构建期间需要，请考虑为单个命令设置一个值：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">RUN DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y ...<br></code></pre></td></tr></table></figure><p>或者使用 ARG，它不会保留在最终镜像中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">ARG DEBIAN_FRONTEND=noninteractive<br>RUN apt-get update &amp;&amp; apt-get install -y ...<br></code></pre></td></tr></table></figure><p><strong>八、ADD</strong></p><p>复制新文件、目录或远程文件 URL <src> ，并将它们添加到 <dest> 中。</dest></src></p><p><src> 可以指定多个资源，但如果它们是文件或目录，则它们的路径被解释为相对于构建上下文的源，也就是 WORKDIR。</src></p><p>每个都 <src> 可能包含通配符，匹配将使用 Go 的 filepath.Match 规则。例如：</src></p><p>添加所有以“hom”开头的文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ADD hom* /mydir/<br></code></pre></td></tr></table></figure><p>在下面的示例中，? 被替换为任何单个字符，例如“home.txt”。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ADD hom?.txt /mydir/<br></code></pre></td></tr></table></figure><p><dest> 是一个绝对路径，或相对 WORKDIR 的相对路径。</dest></p><p><strong>九、COPY</strong></p><p>语法同ADD一致，复制拷贝文件。</p><p>COPY 指令和 ADD 指令的唯一区别在于：是否支持从远程URL获取资源。COPY 指令只能从执行 docker build 所在的主机上读取资源并复制到镜像中。而 ADD 指令还支持通过 URL 从远程服务器读取资源并复制到镜像中。</p><p>相同需求时，推荐使用 COPY 指令。ADD 指令更擅长读取本地tar文件并解压缩。</p><p><strong>十、ENTRYPOINT</strong></p><p>ENTRYPOINT 和 CMD 一样，都是在指定容器启动程序及参数，不过它不会被 docker run 的命令行参数指定的指令所覆盖。如果要覆盖的话，需要通过 docker run –entrypoint 来指定。</p><p>它有2种格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">ENTRYPOINT [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>]<br>ENTRYPOINT <span class="hljs-built_in">command</span> param1 param2<br></code></pre></td></tr></table></figure><p>指定了 ENTRYPOINT 后， CMD 的内容作为参数传给 ENTRYPOINT 指令，实际执行时，将变为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;ENTRYPOINT&gt; &lt;CMD&gt;<br></code></pre></td></tr></table></figure><p><strong>十一、VOLUME</strong></p><p>创建一个具有指定名称的挂载数据卷。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">VOLUME [<span class="hljs-string">&quot;/var/log/&quot;</span>]<br>VOLUME /var/log<br></code></pre></td></tr></table></figure><p>它的主要作用是：</p><ul><li>避免重要的数据，因容器重启而丢失</li><li>避免容器不断变大</li></ul><p><strong>十二、ARG</strong></p><p>定义变量，与 ENV 作用相同，不过 ARG 变量不会像 ENV 变量那样持久化到构建好的镜像中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ARG &lt;name&gt;[=&lt;default value&gt;]<br></code></pre></td></tr></table></figure><p>Docker 有一组预定义的 ARG 变量，您可以在 Dockerfile 中没有相应指令的情况下使用这些变量。</p><ul><li>HTTP_PROXY</li><li>http_proxy</li><li>HTTPS_PROXY</li><li>https_proxy</li><li>FTP_PROXY</li><li>ftp_proxy</li><li>NO_PROXY</li><li>no_proxy</li></ul><p>要使用这些，请使用 –build-arg 标志在命令行上传递它们，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker build --build-arg HTTPS_PROXY=https://my-proxy.example.com .<br></code></pre></td></tr></table></figure><p><strong>十三、ONBUILD</strong></p><p>将一个触发指令添加到镜像中，以便稍后在该镜像用作另一个构建的基础时执行。也就是另外一个 dockerfile FROM 了这个镜像的时候执行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">ONBUILD ADD . /app/src<br>ONBUILD RUN /usr/local/bin/python-build --<span class="hljs-built_in">dir</span> /app/src<br></code></pre></td></tr></table></figure><p><strong>十四、STOPSIGNAL</strong></p><p>设置将发送到容器退出的系统调用信号。该信号可以是与内核系统调用表中的位置匹配的有效无符号数，例如 9，或格式为 SIGNAME 的信号名称，例如 SIGKILL。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">STOPSIGNAL signal<br></code></pre></td></tr></table></figure><p>默认的 stop-signal 是 SIGTERM，在 docker stop 的时候会给容器内 PID 为 1 的进程发送这个 signal，通过 –stop-signal 可以设置自己需要的 signal，主要目的是为了让容器内的应用程序在接收到 signal 之后可以先处理一些事物，实现容器的平滑退出，如果不做任何处理，容器将在一段时间之后强制退出，会造成业务的强制中断，默认时间是 10s。</p><p><strong>十五、HEALTHCHECK</strong></p><p>用于指定某个程序或者指令来监控 Docker 容器服务的运行状态。该 HEALTHCHECK 指令有两种形式：</p><ul><li>HEALTHCHECK [OPTIONS] CMD command（通过在容器内运行命令来检查容器健康状况）</li><li>HEALTHCHECK NONE（禁用从基础镜像继承的任何健康检查）</li></ul><p><strong>十六、SHELL</strong></p><p>覆盖用于命令的 shell 形式的默认 shell。Linux 上的默认 shell 是 [“&#x2F;bin&#x2F;sh”, “-c”]，Windows 上是 [“cmd”, “&#x2F;S”, “&#x2F;C”]。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">SHELL [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;parameters&quot;</span>]<br></code></pre></td></tr></table></figure><p>该 SHELL 指令在 Windows 上特别有用，因为 Windows 有两种常用且截然不同的本机 SHELL：cmd 和 powershell，以及可用的备用 shell，包括 sh。该 SHELL 指令可以出现多次。每条 SHELL 指令都会覆盖所有先前的 SHELL 指令，并影响所有后续指令。</p><p><strong>十七、WORKDIR</strong></p><p>工作目录，如果 WORKDIR 不存在，即使它没有在后续 Dockerfile 指令中使用，它也会被创建。</p><p>docker build 构建镜像过程中，每一个 RUN 命令都会新建一层。只有通过 WORKDIR 创建的目录才会一直存在。</p><p>可以设置多个 WORKDIR，如果提供了相对路径，它将相对于前一条 WORKDIR 指令的路径。例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">WORKDIR /a<br>WORKDIR b<br>WORKDIR c<br>RUN <span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p>最终 pwd 命令的输出是 &#x2F;a&#x2F;b&#x2F;c。</p><p>该 WORKDIR 指令可以解析先前使用 ENV，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">ENV DIRPATH=/path<br>WORKDIR <span class="hljs-variable">$DIRPATH</span>/<span class="hljs-variable">$DIRNAME</span><br>RUN <span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p>最终 pwd 命令的输出是 &#x2F;path&#x2F;$DIRNAME。</p><p><strong>十八、USER</strong></p><p>设置用户名（或 UID）和可选的用户组（或 GID）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">USER &lt;user&gt;[:&lt;group&gt;]<br>USER &lt;UID&gt;[:&lt;GID&gt;]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>dockerfile</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dockerfile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker-compose安装</title>
    <link href="/2023/03/24/docker/docker-compose/docker-compose%E5%AE%89%E8%A3%85/"/>
    <url>/2023/03/24/docker/docker-compose/docker-compose%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker-compose的使用和安装"><a href="#docker-compose的使用和安装" class="headerlink" title="docker-compose的使用和安装:"></a>docker-compose的使用和安装:</h1><p>通过一个yaml文件  来启动和管理多个容器</p><h2 id="一、docker-compose的安装："><a href="#一、docker-compose的安装：" class="headerlink" title="一、docker-compose的安装："></a>一、docker-compose的安装：</h2><p>Linux 上我们可以从 Github 上下载它的二进制包来使用，最新发行的版本地址：<a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">下载二进制包:<br><span class="hljs-comment">##1.24.1版本的：下载路径https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</span><br><br>curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<br><span class="hljs-comment">#要安装其他版本的 Compose，可直接替换version：1.24.1。</span><br><br><br>将可执行权限应用于二进制文件：<br>sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br><br>创建软链：<br>sudo <span class="hljs-built_in">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose<br><br></code></pre></td></tr></table></figure><h2 id="二、docker-compose的使用："><a href="#二、docker-compose的使用：" class="headerlink" title="二、docker-compose的使用："></a>二、docker-compose的使用：</h2><h3 id="1-编写docker-compose-yml文件"><a href="#1-编写docker-compose-yml文件" class="headerlink" title="1.编写docker-compose.yml文件"></a>1.编写docker-compose.yml文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#例如：Docker-Compose管理MySQL和Tomcat容器，yml文件以key: value方式来指定配置信息，多个配置信息以换行+缩进的方式来区分</span><br><span class="hljs-comment">#在docker-compose.yml文件中，不要使用制表符</span><br> <br>version: <span class="hljs-string">&#x27;3.1&#x27;</span><br>services:<br>  mysql:           <span class="hljs-comment"># 服务的名称</span><br>    restart: always   <span class="hljs-comment"># 代表只要docker启动，那么这个容器就跟着一起启动</span><br>    image: daocloud.io/library/mysql:5.7.4  <span class="hljs-comment"># 指定镜像路径</span><br>    container_name: mysql  <span class="hljs-comment"># 指定容器名称</span><br>    ports:<br>      - 3306:3306   <span class="hljs-comment">#  指定端口号的映射</span><br>    environment:<br>      MYSQL_ROOT_PASSWORD: root   <span class="hljs-comment"># 指定MySQL的ROOT用户登录密码</span><br>      TZ: Asia/Shanghai        <span class="hljs-comment"># 指定时区</span><br>    volumes:<br>     - /opt/docker_mysql_tomcat/mysql_data:/var/lib/mysql   <span class="hljs-comment"># 映射数据卷</span><br>  tomcat:<br>    restart: always<br>    image: daocloud.io/library/tomcat:8.5.15-jre8<br>    container_name: tomcat<br>    ports:<br>      - 8080:8080<br>    environment:<br>      TZ: Asia/Shanghai<br>    volumes:<br>      - /opt/docker_mysql_tomcat/tomcat_webapps:/usr/local/tomcat/webapps<br>      - /opt/docker_mysql_tomcat/tomcat_logs:/usr/local/tomcat/logs<br><br></code></pre></td></tr></table></figure><h3 id="2-docker-compose相关命令"><a href="#2-docker-compose相关命令" class="headerlink" title="2.docker-compose相关命令"></a>2.docker-compose相关命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#使用docker-compose命令时，默认会在当前目录下寻找docker-compose.yml文件</span><br><br>docker-compose up -d<span class="hljs-comment">#启动管理的容器</span><br><br>docker-compose down <span class="hljs-comment">#关闭并删除容器</span><br><br>docker-compose start|restart|stop    <span class="hljs-comment">#开启|重启||关闭已经存在的由docker-compose维护的容器</span><br><br>docker-compose ps<span class="hljs-comment">#查看由docker-compose管理的容器</span><br><br>docker-compose logs -f<span class="hljs-comment">#查看日志</span><br><br>docker-compose -f consul-compose.yaml up -d  <span class="hljs-comment">#执行yaml文件启动</span><br><br>docker-compose -f consul-compose.yaml config <span class="hljs-comment">#检查yaml文件的错误</span><br></code></pre></td></tr></table></figure><h3 id="3-docker-compose配合Dockerfile使用"><a href="#3-docker-compose配合Dockerfile使用" class="headerlink" title="3.docker-compose配合Dockerfile使用"></a>3.docker-compose配合Dockerfile使用</h3><p>使用docker-compose.yml文件以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sh">例如：<br>docker-compose.yml文件：<br><br>version: <span class="hljs-string">&#x27;3.1&#x27;</span><br>services:                   <br>  ssm:                          <span class="hljs-comment">#服务的名称</span><br>    restart: always             <span class="hljs-comment">#代表docker启动，服务就启动</span><br>    build:                      <span class="hljs-comment">#构建自定义镜像</span><br>      context: ../              <span class="hljs-comment">#指定自定义的dockerfile文件所在的路径</span><br>      dockerfile: ssmfile       <span class="hljs-comment">#指定自定义的dockerfile文件的名称</span><br>    image: ssm:1.0.1            <span class="hljs-comment">#指定自定义的dockerfile想叫什么名称，不需要去中央仓库上取</span><br>    container_name: ssm       <br>    ports: <br>      8081:8081<br>    environment:<br>      TZ: Asia/Shanghai<br>      <br>dockerfile文件:<br><br>from daocloud.io/library/tomcat:7.0.56 <span class="hljs-comment">#依赖的Tomcat镜像地址</span><br>copy ssm.war /usr/local/tomcat/webapps <span class="hljs-comment">#将web文件ssm.war拷贝到Tomcat工作目录内</span><br><br><span class="hljs-comment">#将ssm.var  dockerfile docker-compose.yml 按照对应格式存放</span><br><br>然后进入到docker-compose目录下,可以直接启动基于docker-compose.yml以及dockerfile文件构建的自定义镜像<br>docker-compose up -d<br><span class="hljs-comment">#如果自定义镜像不存在，会帮助我们构建出自定义镜像，如果自定义镜像已经存在，会直接运行这个自定义镜像</span><br><br><br><span class="hljs-comment">#重新构建自定义镜像</span><br>docker-compose build <br><br><span class="hljs-comment">#运行当前内容，并重新构建</span><br>docker-compose up -d --build<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>docker-compose</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker-compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker-compose.yml 配置文件编写详解</title>
    <link href="/2023/03/24/docker/docker-compose/docker-compose_yaml%E6%96%87%E4%BB%B6/"/>
    <url>/2023/03/24/docker/docker-compose/docker-compose_yaml%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker-compose-yml-配置文件编写详解"><a href="#docker-compose-yml-配置文件编写详解" class="headerlink" title="docker-compose.yml 配置文件编写详解"></a>docker-compose.yml 配置文件编写详解</h1><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h2><p>关于 docker compose 技术可以查看官方文档 Docker Compose<br>撰写规范：<a href="https://github.com/compose-spec/compose-spec/blob/master/spec.md">https://github.com/compose-spec/compose-spec/blob/master/spec.md</a></p><p>以下的内容是确立在已经下载好 Docker 以及 Docker Compose，可参看 Docker Compose 的官方安装教程 Install Docker Compose</p><p>原文参考： [<a href="https://blog.csdn.net/qq_36148847/article/details/79427878]">https://blog.csdn.net/qq_36148847/article/details/79427878]</a><br>( <a href="https://blog.csdn.net/Aria_Miazzy/article/details/89326829">https://blog.csdn.net/Aria_Miazzy/article/details/89326829</a>)<br>( <a href="https://blog.csdn.net/qq_36148847/article/details/79427878">https://blog.csdn.net/qq_36148847/article/details/79427878</a>)</p><h2 id="二-Docker-Compose-配置文件的构建参数说明"><a href="#二-Docker-Compose-配置文件的构建参数说明" class="headerlink" title="二. Docker Compose 配置文件的构建参数说明"></a>二. Docker Compose 配置文件的构建参数说明</h2><p>首先，官方提供了一个 yaml Docker Compose 配置文件的标准例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:alpine</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6379&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">frontend</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">update_config:</span><br>        <span class="hljs-attr">parallelism:</span> <span class="hljs-number">2</span><br>        <span class="hljs-attr">delay:</span> <span class="hljs-string">10s</span><br>      <span class="hljs-attr">restart_policy:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span><br><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:9.4</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db-data:/var/lib/postgresql/data</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">placement:</span><br>        <span class="hljs-attr">constraints:</span> [<span class="hljs-string">node.role</span> <span class="hljs-string">==</span> <span class="hljs-string">manager</span>]<br><br>  <span class="hljs-attr">vote:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/examplevotingapp_vote:before</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">5000</span><span class="hljs-string">:80</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">frontend</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">update_config:</span><br>        <span class="hljs-attr">parallelism:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">restart_policy:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span><br><br>  <span class="hljs-attr">result:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/examplevotingapp_result:before</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">5001</span><span class="hljs-string">:80</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">update_config:</span><br>        <span class="hljs-attr">parallelism:</span> <span class="hljs-number">2</span><br>        <span class="hljs-attr">delay:</span> <span class="hljs-string">10s</span><br>      <span class="hljs-attr">restart_policy:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span><br><br>  <span class="hljs-attr">worker:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/examplevotingapp_worker</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">frontend</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">replicated</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">labels:</span> [<span class="hljs-string">APP=VOTING</span>]<br>      <span class="hljs-attr">restart_policy:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span><br>        <span class="hljs-attr">delay:</span> <span class="hljs-string">10s</span><br>        <span class="hljs-attr">max_attempts:</span> <span class="hljs-number">3</span><br>        <span class="hljs-attr">window:</span> <span class="hljs-string">120s</span><br>      <span class="hljs-attr">placement:</span><br>        <span class="hljs-attr">constraints:</span> [<span class="hljs-string">node.role</span> <span class="hljs-string">==</span> <span class="hljs-string">manager</span>]<br><br>  <span class="hljs-attr">visualizer:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/visualizer:stable</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8080:8080&quot;</span><br>    <span class="hljs-attr">stop_grace_period:</span> <span class="hljs-string">1m30s</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">placement:</span><br>        <span class="hljs-attr">constraints:</span> [<span class="hljs-string">node.role</span> <span class="hljs-string">==</span> <span class="hljs-string">manager</span>]<br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">frontend:</span><br>  <span class="hljs-attr">backend:</span><br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">db-data:</span><br><br></code></pre></td></tr></table></figure><p>此文件配置了多个服务，关于此配置文件的各个语句含义就需要弄懂配置选项的含义了</p><h3 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h3><p>compose 文件是一个定义服务、 网络和卷的 YAML 文件 。Compose 文件的默认路径是 .&#x2F;docker-compose.yml</p><blockquote><p>提示：可以是用 .yml 或 .yaml 作为文件扩展名</p></blockquote><p>服务定义包含应用于为该服务启动的每个容器的配置，就像传递命令行参数一样 <strong>docker container create</strong>。同样，网络和卷的定义类似于 docker network create 和 docker volume create。</p><p>正如 docker container create 在 Dockerfile 指定选项，如 CMD、 EXPOSE、VOLUME、ENV，在默认情况下，你不需要再次指定它们docker-compose.yml。</p><p>可以使用 Bash 类 ${VARIABLE} 语法在配置值中使用环境变量。</p><h3 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h3><h4 id="1-bulid"><a href="#1-bulid" class="headerlink" title="1.bulid"></a>1.bulid</h4><p>服务除了可以基于指定的镜像，还可以基于一份 Dockerfile，在使用 up 启动之时执行构建任务，这个构建标签就是 build，它可以指定 Dockerfile 所在文件夹的路径。Compose 将会利用它自动构建这个镜像，然后使用这个镜像启动服务容器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span> <span class="hljs-string">/path/to/build/dir</span><br></code></pre></td></tr></table></figure><p>也可以是相对路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span> <span class="hljs-string">./dir</span><br></code></pre></td></tr></table></figure><p>设定上下文根目录，然后以该目录为准指定 Dockerfile</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">../</span><br>  <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">path/of/Dockerfile</span><br>  <br><span class="hljs-comment"># 例子</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">webapp:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./dir</span><br></code></pre></td></tr></table></figure><p>如果 context 中有指定的路径，并且可以选定 Dockerfile 和 args。那么 arg 这个标签，就像 Dockerfile 中的 ARG 指令，它可以在构建过程中指定环境变量，但是在构建成功后取消，在 docker-compose.yml 文件中也支持这样的写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">webapp:</span><br>    <span class="hljs-attr">build:</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">./dir</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile-alternate</span><br>      <span class="hljs-attr">args:</span><br>        <span class="hljs-attr">buildno:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>与 ENV 不同的是，ARG 可以为空值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">args:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">buildno</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">password</span><br></code></pre></td></tr></table></figure><p>如果要指定 image 以及 build ，选项格式为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span> <span class="hljs-string">./dir</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">webapp:tag</span><br></code></pre></td></tr></table></figure><p>这会在 .&#x2F;dir 目录生成一个名为 webaapp 和标记为 tag 的镜像</p><blockquote><p>Note:当用(Version 3) Compose 文件在群集模式下部署堆栈时，该选项被忽略。因为 docker stack 命令只接受预先构建的镜像</p></blockquote><h4 id="2-context"><a href="#2-context" class="headerlink" title="2.context"></a>2.context</h4><p>context 选项可以是 Dockerfile 的文件路径，也可以是到链接到 git 仓库的 url</p><p>当提供的值是相对路径时，它被解析为相对于撰写文件的路径，此目录也是发送到 Docker 守护进程的 context</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">./dir</span><br></code></pre></td></tr></table></figure><h4 id="3-dockerfile"><a href="#3-dockerfile" class="headerlink" title="3.dockerfile"></a>3.dockerfile</h4><p>使用此 dockerfile 文件来构建，必须指定构建路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile-alternate</span><br></code></pre></td></tr></table></figure><h4 id="4-args"><a href="#4-args" class="headerlink" title="4.args"></a>4.args</h4><p>添加构建参数，这些参数是仅在构建过程中可访问的环境变量</p><p>首先， 在Dockerfile中指定参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">ARG buildno<br>ARG password<br><br>RUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Build number: <span class="hljs-variable">$buildno</span>&quot;</span><br>RUN script-requiring-password.sh <span class="hljs-string">&quot;<span class="hljs-variable">$password</span>&quot;</span><br></code></pre></td></tr></table></figure><p>然后指定 build 下的参数,可以传递映射或列表</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">args:</span><br>    <span class="hljs-attr">buildno:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">secret</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">args:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">buildno=1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">password=secret</span><br></code></pre></td></tr></table></figure><p>指定构建参数时可以省略该值，在这种情况下，构建时的值默认构成运行环境中的值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">args:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">buildno</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">password</span><br></code></pre></td></tr></table></figure><blockquote><p>Note： YAML 布尔值（true，false，yes，no，on，off）必须使用引号括起来，以为了能够正常被解析为字符串</p></blockquote><h4 id="5-cache-from"><a href="#5-cache-from" class="headerlink" title="5.cache_from"></a>5.cache_from</h4><p>编写缓存解析镜像列表</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">cache_from:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">alpine:latest</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">corp/web_app:3.14</span><br></code></pre></td></tr></table></figure><h4 id="6-labels"><a href="#6-labels" class="headerlink" title="6.labels"></a>6.labels</h4><p>使用 Docker标签 将元数据添加到生成的镜像中，可以使用数组或字典。</p><p>建议使用反向 DNS 标记来防止签名与其他软件所使用的签名冲突</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">com.example.description:</span> <span class="hljs-string">&quot;Accounting webapp&quot;</span><br>    <span class="hljs-attr">com.example.department:</span> <span class="hljs-string">&quot;Finance&quot;</span><br>    <span class="hljs-attr">com.example.label-with-empty-value:</span> <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;com.example.description=Accounting webapp&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;com.example.department=Finance&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;com.example.label-with-empty-value&quot;</span><br></code></pre></td></tr></table></figure><h4 id="7-shm-size"><a href="#7-shm-size" class="headerlink" title="7.shm_size"></a>7.shm_size</h4><p>设置容器 &#x2F;dev&#x2F;shm 分区的大小，值为表示字节的整数值或表示字符的字符串</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">shm_size:</span> <span class="hljs-string">&#x27;2gb&#x27;</span><br><br><span class="hljs-comment"># 或</span><br><br><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">shm_size:</span> <span class="hljs-number">10000000</span><br></code></pre></td></tr></table></figure><h4 id="8-target"><a href="#8-target" class="headerlink" title="8.target"></a>8.target</h4><p>根据对应的 Dockerfile 构建指定 Stage</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>    <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">target:</span> <span class="hljs-string">prod</span><br></code></pre></td></tr></table></figure><h4 id="9-cap-add、cap-drop"><a href="#9-cap-add、cap-drop" class="headerlink" title="9.cap_add、cap_drop"></a>9.cap_add、cap_drop</h4><p>添加或删除容器功能，可查看 man 7 capabilities</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cap_add:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ALL</span><br><br><span class="hljs-attr">cap_drop:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">NET_ADMIN</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">SYS_ADMIN</span><br></code></pre></td></tr></table></figure><blockquote><p>Note:当用(Version 3) Compose 文件在群集模式下部署堆栈时，该选项被忽略。因为 docker stack 命令只接受预先构建的镜像</p></blockquote><h4 id="10-command"><a href="#10-command" class="headerlink" title="10.command"></a>10.command</h4><p>覆盖容器启动后默认执行的命令</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">command:</span> <span class="hljs-string">bundle</span> <span class="hljs-string">exec</span> <span class="hljs-string">thin</span> <span class="hljs-string">-p</span> <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><p>该命令也可以是一个列表，方法类似于 dockerfile:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;bundle&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;thin&quot;</span>, <span class="hljs-string">&quot;-p&quot;</span>, <span class="hljs-string">&quot;3000&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="11-configs"><a href="#11-configs" class="headerlink" title="11.configs"></a>11.configs</h4><p>使用服务 configs 配置为每个服务赋予相应的访问权限，支持两种不同的语法。</p><blockquote><p>Note: 配置必须存在或在 configs 此堆栈文件的顶层中定义，否则堆栈部署失效</p></blockquote><h5 id="1-SHORT-语法"><a href="#1-SHORT-语法" class="headerlink" title="1.SHORT 语法"></a>1.SHORT 语法</h5><p>SHORT 语法只能指定配置名称，这允许容器访问配置并将其安装在 &#x2F;<config_name> 容器内，源名称和目标装入点都设为配置名称。</config_name></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">my_config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">my_other_config</span><br><span class="hljs-attr">configs:</span><br>  <span class="hljs-attr">my_config:</span><br>    <span class="hljs-attr">file:</span> <span class="hljs-string">./my_config.txt</span><br>  <span class="hljs-attr">my_other_config:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>以上实例使用 SHORT 语法将 redis 服务访问授予 my_config 和 my_other_config ,并被 my_other_config 定义为外部资源，这意味着它已经在 Docker 中定义。可以通过 docker config create 命令或通过另一个堆栈部署。如果外部部署配置都不存在，则堆栈部署会失败并出现 config not found 错误。</p><blockquote><p>Note: config 定义仅在 3.3 版本或在更高版本的撰写文件格式中受支持，YAML 的布尔值（true, false, yes, no, on, off）必须要使用引号引起来（单引号、双引号均可），否则会当成字符串解析。</p></blockquote><h5 id="2-LONG-语法"><a href="#2-LONG-语法" class="headerlink" title="2.LONG 语法"></a>2.LONG 语法</h5><p>LONG 语法提供了创建服务配置的更加详细的信息</p><ul><li><p>source:Docker 中存在的配置的名称</p></li><li><p>target:要在服务的任务中装载的文件的路径或名称。如果未指定则默认为 &#x2F;<source></p></li><li><p>uid 和 gid:在服务的任务容器中拥有安装的配置文件的数字 UID 或 GID。如果未指定，则默认为在Linux上。Windows不支持</p></li><li><p>mode:在服务的任务容器中安装的文件的权限，以八进制表示法。例如，0444 代表文件可读的。默认是 0444。如果配置文件无法写入，是因为它们安装在临时文件系统中，所以如果设置了可写位，它将被忽略。可执行位可以设置。如果您不熟悉 UNIX 文件权限模式，Unix Permissions Calculator</p><p>下面示例在容器中将 my_config 名称设置为 redis_config，将模式设置为 0440（group-readable）并将用户和组设置为 103。该　｀redis　服务无法访问 my_other_config 配置。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">my_config</span><br>        <span class="hljs-attr">target:</span> <span class="hljs-string">/redis_config</span><br>        <span class="hljs-attr">uid:</span> <span class="hljs-string">&#x27;103&#x27;</span><br>        <span class="hljs-attr">gid:</span> <span class="hljs-string">&#x27;103&#x27;</span><br>        <span class="hljs-attr">mode:</span> <span class="hljs-number">0440</span><br><span class="hljs-attr">configs:</span><br>  <span class="hljs-attr">my_config:</span><br>    <span class="hljs-attr">file:</span> <span class="hljs-string">./my_config.txt</span><br>  <span class="hljs-attr">my_other_config:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>可以同时授予多个配置的服务相应的访问权限，也可以混合使用 LONG 和 SHORT 语法。定义配置并不意味着授予服务访问权限。</p><h4 id="12-cgroup-parent"><a href="#12-cgroup-parent" class="headerlink" title="12.cgroup_parent"></a>12.cgroup_parent</h4><p>可以为容器选择一个可选的父 cgroup</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cgroup_parent:</span> <span class="hljs-string">m-executor-abcd</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：当 使用（Version 3）Compose 文件在群集模式下部署堆栈时，忽略此选项</p></blockquote><h4 id="13-container-name"><a href="#13-container-name" class="headerlink" title="13.container_name"></a>13.container_name</h4><p>为自定义的容器指定一个名称，而不是使用默认的名称</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">container_name:</span> <span class="hljs-string">my-web-container</span><br></code></pre></td></tr></table></figure><p>因为 docker 容器名称必须是唯一的，所以如果指定了一个自定义的名称，不能扩展一个服务超过 1 个容器</p><h4 id="14-credential-spec"><a href="#14-credential-spec" class="headerlink" title="14.credential_spec"></a>14.credential_spec</h4><p>为托管服务账户配置凭据规范，此选项仅适用于 Windows 容器服务</p><p>在 credential_spec 上的配置列表格式为 file:&#x2F;&#x2F;<filename> 或 registry:&#x2F;&#x2F;<value-name></value-name></filename></p><p>使用 file: 应该注意引用的文件必须存在于 <strong>CredentialSpecs,docker</strong>  数据目录的子目录中。在 Windows 上，该目录默认为 C:\ProgramData\Docker\ 。以下示例从名为  C:\ProgramData\Docker\CredentialSpecs\my-credential-spec.json  的文件加载凭证规范 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">credential_spec:</span><br>  <span class="hljs-attr">file:</span> <span class="hljs-string">my-credential-spec.json</span><br></code></pre></td></tr></table></figure><p>使用 registry: 将从守护进程主机上的 Windows 注册表中读取凭据规范。其注册表值必须位于：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Virtualization\Containers\CredentialSpecs<br></code></pre></td></tr></table></figure><p>下面的示例通过 my-credential-spec 注册表中指定的值加载凭证规范：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">credential_spec:</span><br>  <span class="hljs-attr">registry:</span> <span class="hljs-string">my-credential-spec</span><br></code></pre></td></tr></table></figure><h4 id="15-deploy"><a href="#15-deploy" class="headerlink" title="15.deploy"></a>15.deploy</h4><p>指定与部署和运行服务相关的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:alpine</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">6</span><br>      <span class="hljs-attr">update_config:</span><br>        <span class="hljs-attr">parallelism:</span> <span class="hljs-number">2</span><br>        <span class="hljs-attr">delay:</span> <span class="hljs-string">10s</span><br>      <span class="hljs-attr">restart_policy:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span><br></code></pre></td></tr></table></figure><p>这里有几个子选项</p><h5 id="1-endpoint-mode"><a href="#1-endpoint-mode" class="headerlink" title="1.endpoint_mode"></a>1.endpoint_mode</h5><p>指定连接到群组外部客户端服务发现方法</p><p><strong>endpoint_mode: vip</strong> ：Docker 为该服务分配了一个虚拟 IP(VIP),作为客户端的 “前端“ 部位用于访问网络上的服务。<br><strong>endpoint_mode: dnsrr</strong> : DNS轮询（DNSRR）服务发现不使用单个虚拟 IP。Docker为服务设置 DNS 条目，使得服务名称的 DNS 查询返回一个 IP 地址列表，并且客户端直接连接到其中的一个。如果想使用自己的负载平衡器，或者混合 Windows 和 Linux 应用程序，则 DNS 轮询调度（round-robin）功能就非常实用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.3&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">wordpress:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">wordpress</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:80</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">overlay</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">replicated</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">endpoint_mode:</span> <span class="hljs-string">vip</span><br><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">volumes:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">db-data:/var/lib/mysql/data</span><br>    <span class="hljs-attr">networks:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">overlay</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">replicated</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">endpoint_mode:</span> <span class="hljs-string">dnsrr</span><br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">db-data:</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">overlay:</span><br></code></pre></td></tr></table></figure><p>相关信息：Swarm 模式 CLI 命令 、Configure 服务发现</p><blockquote><p><strong>注意：</strong> 使用 <strong>deploy</strong> 字段配置时，该配置默认只在swarm模式下生效，如果不想开启swarm，</p><p>只要在 docker-compos 启动时加上 <strong>–compatibility</strong> 即可</p></blockquote><h5 id="2-labels"><a href="#2-labels" class="headerlink" title="2.labels"></a>2.labels</h5><p>指定服务的标签，这些标签仅在服务上设置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">com.example.description:</span> <span class="hljs-string">&quot;This label will appear on the web service&quot;</span><br></code></pre></td></tr></table></figure><p>通过将 deploy 外面的 labels 标签来设置容器上的 labels</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">com.example.description:</span> <span class="hljs-string">&quot;This label will appear on all containers for the web service&quot;</span><br></code></pre></td></tr></table></figure><h5 id="3-mode"><a href="#3-mode" class="headerlink" title="3.mode"></a>3.mode</h5><ul><li><p>global:每个集节点只有一个容器</p></li><li><p>replicated:指定容器数量（默认）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">worker:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/examplevotingapp_worker</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">global</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="4-placement"><a href="#4-placement" class="headerlink" title="4.placement"></a>4.placement</h5><p>指定 constraints 和 preferences</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">placement:</span><br>        <span class="hljs-attr">constraints:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">node.role</span> <span class="hljs-string">==</span> <span class="hljs-string">manager</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">engine.labels.operatingsystem</span> <span class="hljs-string">==</span> <span class="hljs-string">ubuntu</span> <span class="hljs-number">14.04</span><br>        <span class="hljs-attr">preferences:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">spread:</span> <span class="hljs-string">node.labels.zone</span><br></code></pre></td></tr></table></figure><h5 id="5-replicas"><a href="#5-replicas" class="headerlink" title="5.replicas"></a>5.replicas</h5><p>如果服务是 replicated（默认)，需要指定运行的容器数量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">worker:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/examplevotingapp_worker</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">frontend</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">replicated</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h5 id="6-resources"><a href="#6-resources" class="headerlink" title="6.resources"></a>6.resources</h5><p>配置资源限制</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:alpine</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;0.50&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">50M</span><br>        <span class="hljs-attr">reservations:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;0.25&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">20M</span><br></code></pre></td></tr></table></figure><p>此例子中，redis 服务限制使用不超过 50M 的内存和 0.50（50％）可用处理时间（CPU），并且 保留 20M 了内存和 0.25 CPU时间</p><h5 id="7-restart-policy"><a href="#7-restart-policy" class="headerlink" title="7.restart_policy"></a>7.restart_policy</h5><p>配置容器的重新启动，代替 restart</p><ul><li><p><strong>condition:</strong> 值可以为 <strong>none</strong> 、<strong>on-failure</strong> 以及 <strong>any</strong> (默认)</p></li><li><p><strong>delay:</strong>  尝试重启的等待时间，默认为 0</p></li><li><p><strong>max_attempts:</strong> 放弃之前尝试重新启动容器次数（默认：从不放弃）。如果重新启动在配置中没有成功 window，则此尝试不计入配置max_attempts 值。例如，如果 max_attempts 值为 2，并且第一次尝试重新启动失败，则可能会尝试重新启动两次以上。</p></li><li><p><strong>windows:</strong> 在决定重新启动是否成功之前的等时间，指定为持续时间（默认值：立即决定）。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:alpine</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">restart_policy:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span><br>        <span class="hljs-attr">delay:</span> <span class="hljs-string">5s</span><br>        <span class="hljs-attr">max_attempts:</span> <span class="hljs-number">3</span><br>        <span class="hljs-attr">window:</span> <span class="hljs-string">120s</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="8-update-config"><a href="#8-update-config" class="headerlink" title="8.update_config"></a>8.update_config</h5><p>配置更新服务，用于无缝更新应用（rolling update)</p><ul><li><p><strong>parallelism：</strong>一次性更新的容器数量</p></li><li><p><strong>delay</strong>：更新一组容器之间的等待时间。</p></li><li><p><strong>failure_action：</strong>如果更新失败，可以执行的的是 continue、rollback 或 pause （默认）</p></li><li><p><strong>monitor：</strong>每次任务更新后监视失败的时间 (ns|us|ms|s|m|h)（默认为0）</p></li><li><p><strong>max_failure_ratio：</strong>在更新期间能接受的失败率</p></li><li><p><strong>order：</strong>更新次序设置，top-first（旧的任务在开始新任务之前停止）、start-first（新的任务首先启动，并且正在运行的任务短暂重叠）（默认 stop-first）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.4&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">vote:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/examplevotingapp_vote:before</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">update_config:</span><br>        <span class="hljs-attr">parallelism:</span> <span class="hljs-number">2</span><br>        <span class="hljs-attr">delay:</span> <span class="hljs-string">10s</span><br>        <span class="hljs-attr">order:</span> <span class="hljs-string">stop-first</span><br></code></pre></td></tr></table></figure><p><strong>不支持 Docker stack desploy 的几个子选项</strong><br>build、cgroup_parent、container_name、devices、tmpfs、external_links、inks、network_mode、restart、security_opt、stop_signal、sysctls、userns_mode</p></li></ul><h4 id="16-devices"><a href="#16-devices" class="headerlink" title="16.devices"></a>16.devices</h4><p>设置映射列表，与 Docker 客户端的 –device 参数类似 :</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">devices:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/dev/ttyUSB0:/dev/ttyUSB0&quot;</span><br></code></pre></td></tr></table></figure><h4 id="17-depends-on"><a href="#17-depends-on" class="headerlink" title="17.depends_on"></a>17.depends_on</h4><p>此选项解决了启动顺序的问题</p><p>在使用 Compose 时，最大的好处就是少打启动命令，但是一般项目容器启动的顺序是有要求的，如果直接从上到下启动容器，必然会因为容器依赖问题而启动失败。例如在没启动数据库容器的时候启动了应用容器，这时候应用容器会因为找不到数据库而退出，为了避免这种情况我们需要加入一个标签，就是 depends_on，这个标签解决了容器的依赖、启动先后的问题。</p><p>指定服务之间的依赖关系，有两种效果</p><ul><li><p>docker-compose up 以依赖顺序启动服务，下面例子中 redis 和 db 服务在 web 启动前启动</p></li><li><p>docker-compose up SERVICE 自动包含 SERVICE 的依赖性，下面例子中，例如下面容器会先启动 redis 和 db<br>两个服务，最后才启动 web 服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres</span><br></code></pre></td></tr></table></figure><p>注意的是，默认情况下使用 docker-compose up web 这样的方式启动 web 服务时，也会启动 redis 和 db 两个服务，因为在配置文件中定义了依赖关系</p></li></ul><h4 id="18-dns"><a href="#18-dns" class="headerlink" title="18.dns"></a>18.dns</h4><p>自定义 DNS 服务器，与 –dns 具有一样的用途，可以是单个值或列表</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dns:</span> <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span><br><span class="hljs-attr">dns:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">9.9</span><span class="hljs-number">.9</span><span class="hljs-number">.9</span><br></code></pre></td></tr></table></figure><h4 id="19-dns-search"><a href="#19-dns-search" class="headerlink" title="19.dns_search"></a>19.dns_search</h4><p>自定义 DNS 搜索域，可以是单个值或列表</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dns_search:</span> <span class="hljs-string">example.com</span><br><span class="hljs-attr">dns_search:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">dc1.example.com</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">dc2.example.com</span><br></code></pre></td></tr></table></figure><h4 id="20-tmpfs"><a href="#20-tmpfs" class="headerlink" title="20.tmpfs"></a>20.tmpfs</h4><p>挂载临时文件目录到容器内部，与 run 的参数一样效果，可以是单个值或列表</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tmpfs:</span> <span class="hljs-string">/run</span><br><span class="hljs-attr">tmpfs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/run</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/tmp</span><br></code></pre></td></tr></table></figure><h4 id="21-entrypoint"><a href="#21-entrypoint" class="headerlink" title="21.entrypoint"></a>21.entrypoint</h4><p>在 Dockerfile 中有一个指令叫做 ENTRYPOINT 指令，用于指定接入点。在 docker-compose.yml 中可以定义接入点，覆盖 Dockerfile 中的定义：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">entrypoint:</span> <span class="hljs-string">/code/entrypoint.sh</span><br></code></pre></td></tr></table></figure><p><strong>entrypoint</strong> 也可以是一个列表，方法类似于 dockerfile</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">entrypoint:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">php</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-d</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-d</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">memory_limit=-1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">vendor/bin/phpunit</span><br></code></pre></td></tr></table></figure><h4 id="21-env-file"><a href="#21-env-file" class="headerlink" title="21.env_file"></a>21.env_file</h4><p>从文件中添加环境变量。可以是单个值或是列表<br>如果已经用 docker-compose -f FILE 指定了 Compose 文件，那么 env_file 路径值为相对于该文件所在的目录</p><p>但 environment 环境中的设置的变量会会覆盖这些值，无论这些值未定义还是为 None</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">env_file:</span> <span class="hljs-string">.env</span><br></code></pre></td></tr></table></figure><p>或者根据 docker-compose.yml 设置多个：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">env_file:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">./common.env</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">./apps/web.env</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/secrets.env</span><br></code></pre></td></tr></table></figure><p>环境配置文件 env_file 中的声明每行都是以 VAR&#x3D;VAL 格式，其中以 # 开头的被解析为注释而被忽略</p><blockquote><p>注意环境变量配置列表的顺序*,例如下面例子</p></blockquote><p>docker_compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">some-service:</span><br>    <span class="hljs-attr">env_file:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">a.env</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">b.env</span><br></code></pre></td></tr></table></figure><p>a.env 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># a.env</span><br><span class="hljs-string">VAR=1</span><br></code></pre></td></tr></table></figure><p>b.env文件</p><p>对于在文件a.env 中指定的相同变量但在文件 b.env 中分配了不同的值，如果 b.env 像下面列在 a.env 之后，则刚在 a.env 设置的值被 b.env 相同变量的值覆盖，此时 $VAR 值为 hello。此外，这里所说的环境变量是对宿主机的 Compose 而言的，如果在配置文件中有 build 操作，这些变量并不会进入构建过程中，如果要在构建中使用变量还是首选 arg 标签</p><h4 id="22-environment"><a href="#22-environment" class="headerlink" title="22.environment"></a>22.environment</h4><p>添加环境变量，可以使用数组或字典。与上面的 env_file 选项完全不同，反而和 arg 有几分类似，这个标签的作用是设置镜像变量，它可以保存变量到镜像里面，也就是说启动的容器也会包含这些变量设置，这是与 arg 最大的不同。<br>一般 arg 标签的变量仅用在构建过程中。而 environment 和 Dockerfile 中的 ENV 指令一样会把变量一直保存在镜像、容器中，类似 docker run -e 的效果</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">environment:</span><br>  <span class="hljs-attr">RACK_ENV:</span> <span class="hljs-string">development</span><br>  <span class="hljs-attr">SHOW:</span> <span class="hljs-string">&#x27;true&#x27;</span><br>  <span class="hljs-attr">SESSION_SECRET:</span><br><br><span class="hljs-comment"># 或</span><br><br><span class="hljs-attr">environment:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">RACK_ENV=development</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">SHOW=true</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">SESSION_SECRET</span><br></code></pre></td></tr></table></figure><h4 id="23-expose"><a href="#23-expose" class="headerlink" title="23.expose"></a>23.expose</h4><p>暴露端口，但不映射到宿主机，只被连接的服务访问。这个标签与 Dockerfile 中的 EXPOSE 指令一样，用于指定暴露的端口，但是只是作为一种参考，实际上 docker-compose.yml 的端口映射还得 ports 这样的标签</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">expose:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3000&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8000&quot;</span><br></code></pre></td></tr></table></figure><h4 id="24-external-links"><a href="#24-external-links" class="headerlink" title="24.external_links"></a>24.external_links</h4><p>链接到 docker-compose.yml 外部的容器，甚至 并非 Compose 项目文件管理的容器。参数格式跟 links 类似</p><blockquote><p>在使用Docker过程中，会有许多单独使用 docker run 启动的容器的情况，为了使 Compose 能够连接这些不在docker-compose.yml 配置文件中定义的容器，那么就需要一个特殊的标签，就是 external_links，它可以让Compose 项目里面的容器连接到那些项目配置外部的容器（前提是外部容器中必须至少有一个容器是连接到与项目内的服务的同一个网络里面）。</p></blockquote><p>格式如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">external_links:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">redis_1</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">project_db_1:mysql</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">project_db_1:postgresql</span><br></code></pre></td></tr></table></figure><h4 id="25-extra-hosts"><a href="#25-extra-hosts" class="headerlink" title="25.extra_hosts"></a>25.extra_hosts</h4><p>添加主机名的标签，就是往 &#x2F;etc&#x2F;hosts 文件中添加一些记录，与 Docker 客户端 中的 –add-host 类似：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">extra_hosts:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;somehost:162.242.195.82&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;otherhost:50.31.209.229&quot;</span><br></code></pre></td></tr></table></figure><p>具有 IP 地址和主机名的条目在 &#x2F;etc&#x2F;hosts 内部容器中创建。启动之后查看容器内部 hosts ，例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-number">162.242</span><span class="hljs-number">.195</span><span class="hljs-number">.82</span>  somehost<br><span class="hljs-number">50.31</span><span class="hljs-number">.209</span><span class="hljs-number">.229</span>   otherhost<br></code></pre></td></tr></table></figure><h4 id="26-healthcheck"><a href="#26-healthcheck" class="headerlink" title="26.healthcheck"></a>26.healthcheck</h4><p>用于检查测试服务使用的容器是否正常</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">healthcheck:</span><br><span class="hljs-symbol">  test:</span> [<span class="hljs-string">&quot;CMD&quot;</span>, <span class="hljs-string">&quot;curl&quot;</span>, <span class="hljs-string">&quot;-f&quot;</span>, <span class="hljs-string">&quot;http://localhost&quot;</span>]<br><span class="hljs-symbol">  interval:</span> <span class="hljs-number">1</span>m30s<br><span class="hljs-symbol">  timeout:</span> <span class="hljs-number">10</span>s<br><span class="hljs-symbol">  retries:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">  start_period:</span> <span class="hljs-number">40</span>s<br></code></pre></td></tr></table></figure><p><strong>interval，timeout</strong>  以及 <strong>start_period</strong> 都定为持续时间</p><p>test 必须是字符串或列表，如果它是一个列表，第一项必须是 NONE，CMD 或 CMD-SHELL ；如果它是一个字符串，则相当于指定CMD-SHELL 后跟该字符串。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit"># Hit the local web app<br><span class="hljs-keyword">test: </span>[&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost&quot;]<br><br># As above, but wrapped in /bin/sh. Both forms below are equivalent.<br><span class="hljs-keyword">test: </span>[&quot;CMD-SHELL&quot;, &quot;curl -f http://localhost || exit 1&quot;]<br><span class="hljs-keyword">test: </span>curl -f https://localhost || exit 1<br></code></pre></td></tr></table></figure><p>如果需要禁用镜像的所有检查项目，可以使用 disable:true,相当于 test:[“NONE”]</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">healthcheck:</span><br>  <span class="hljs-attr">disable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="27-image"><a href="#27-image" class="headerlink" title="27.image"></a>27.image</h4><p>从指定的镜像中启动容器，可以是存储仓库、标签以及镜像 ID</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">ubuntu:14.04</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">tutum/influxdb</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">example-registry.com:4000/postgresql</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">a4bc65fd</span><br></code></pre></td></tr></table></figure><p>如果镜像不存在，Compose 会自动拉去镜像</p><h4 id="28-isolation"><a href="#28-isolation" class="headerlink" title="28.isolation"></a>28.isolation</h4><p>Linux 上仅仅支持 default 值</p><h4 id="29-labels"><a href="#29-labels" class="headerlink" title="29.labels"></a>29.labels</h4><p>使用 Docker 标签将元数据添加到容器，可以使用数组或字典。与 Dockerfile 中的 LABELS 类似：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">labels:</span><br>  <span class="hljs-attr">com.example.description:</span> <span class="hljs-string">&quot;Accounting webapp&quot;</span><br>  <span class="hljs-attr">com.example.department:</span> <span class="hljs-string">&quot;Finance&quot;</span><br>  <span class="hljs-attr">com.example.label-with-empty-value:</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-attr">labels:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;com.example.description=Accounting webapp&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;com.example.department=Finance&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;com.example.label-with-empty-value&quot;</span><br></code></pre></td></tr></table></figure><h4 id="30-links"><a href="#30-links" class="headerlink" title="30.links"></a>30.links</h4><p>链接到其它服务的中的容器，可以指定服务名称也可以指定链接别名（SERVICE：ALIAS)，与 Docker 客户端的 –link 有一样效果，会连接到其它服务中的容器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">web:</span><br>  <span class="hljs-attr">links:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">db:database</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br></code></pre></td></tr></table></figure><p>使用的别名将会自动在服务容器中的 &#x2F;etc&#x2F;hosts 里创建。例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-number">172.12</span><span class="hljs-number">.2</span><span class="hljs-number">.186</span>  db<br><span class="hljs-number">172.12</span><span class="hljs-number">.2</span><span class="hljs-number">.186</span>  database<br><span class="hljs-number">172.12</span><span class="hljs-number">.2</span><span class="hljs-number">.187</span>  redis<br></code></pre></td></tr></table></figure><p>相应的环境变量也将被创建</p><h4 id="31-logging"><a href="#31-logging" class="headerlink" title="31.logging"></a>31.logging</h4><p>配置日志服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">driver:</span> <span class="hljs-string">syslog</span><br>  <span class="hljs-attr">options:</span><br>    <span class="hljs-attr">syslog-address:</span> <span class="hljs-string">&quot;tcp://192.168.0.42:123&quot;</span><br></code></pre></td></tr></table></figure><p>该 driver值是指定服务器的日志记录驱动程序，默认值为 json-file,与 –log-diver 选项一样</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">driver:</span> <span class="hljs-string">&quot;json-file&quot;</span><br><span class="hljs-attr">driver:</span> <span class="hljs-string">&quot;syslog&quot;</span><br><span class="hljs-attr">driver:</span> <span class="hljs-string">&quot;none&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：只有驱动程序 json-file 和 journald 驱动程序可以直接从 docker-compose up 和 docker-compose logs 获取日志。使用任何其他方式不会显示任何日志。</p></blockquote><p>对于可选值，可以使用 options 指定日志记录中的日志记录选项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">driver:</span> <span class="hljs-string">&quot;syslog&quot;</span><br><span class="hljs-attr">options:</span><br>  <span class="hljs-attr">syslog-address:</span> <span class="hljs-string">&quot;tcp://192.168.0.42:123&quot;</span><br></code></pre></td></tr></table></figure><p>默认驱动程序 json-file 具有限制存储日志量的选项，所以，使用键值对来获得最大存储大小以及最小存储数量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">options:</span><br>  <span class="hljs-attr">max-size:</span> <span class="hljs-string">&quot;200k&quot;</span><br>  <span class="hljs-attr">max-file:</span> <span class="hljs-string">&quot;10&quot;</span><br></code></pre></td></tr></table></figure><p>上面实例将存储日志文件，直到它们达到max-size:200kB，存储的单个日志文件的数量由该 max-file 值指定。随着日志增长超出最大限制，旧日志文件将被删除以存储新日志</p><p>docker-compose.yml 限制日志存储的示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">some-service:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">some-service</span><br>    <span class="hljs-attr">logging:</span><br>      <span class="hljs-attr">driver:</span> <span class="hljs-string">&quot;json-file&quot;</span><br>      <span class="hljs-attr">options:</span><br>        <span class="hljs-attr">max-size:</span> <span class="hljs-string">&quot;200k&quot;</span><br>        <span class="hljs-attr">max-file:</span> <span class="hljs-string">&quot;10&quot;</span><br></code></pre></td></tr></table></figure><h4 id="32-network-mode"><a href="#32-network-mode" class="headerlink" title="32.network_mode"></a>32.network_mode</h4><p>网络模式，用法类似于 Docke 客户端的 –net 选项，格式为：service:[service name]</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">network_mode:</span> <span class="hljs-string">&quot;bridge&quot;</span><br><span class="hljs-attr">network_mode:</span> <span class="hljs-string">&quot;host&quot;</span><br><span class="hljs-attr">network_mode:</span> <span class="hljs-string">&quot;none&quot;</span><br><span class="hljs-attr">network_mode:</span> <span class="hljs-string">&quot;service:[service name]&quot;</span><br><span class="hljs-attr">network_mode:</span> <span class="hljs-string">&quot;container:[container name/id]&quot;</span><br></code></pre></td></tr></table></figure><p>可以指定使用服务或者容器的网络</p><h4 id="33-networks"><a href="#33-networks" class="headerlink" title="33.networks"></a>33.networks</h4><p>加入指定网络</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">some-service:</span><br>    <span class="hljs-attr">networks:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">some-network</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">other-network</span><br></code></pre></td></tr></table></figure><h4 id="34-aliases"><a href="#34-aliases" class="headerlink" title="34.aliases"></a>34.aliases</h4><p>同一网络上的其他容器可以使用服务器名称或别名来连接到其他服务的容器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">some-service:</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">some-network:</span><br>        <span class="hljs-attr">aliases:</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-string">alias1</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-string">alias3</span><br>      <span class="hljs-attr">other-network:</span><br>        <span class="hljs-attr">aliases:</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-string">alias2</span><br></code></pre></td></tr></table></figure><p>下面实例中，提供 web 、worker以及db 服务，伴随着两个网络 new 和 legacy 。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./web</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">new</span><br><br>  <span class="hljs-attr">worker:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./worker</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">legacy</span><br><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">new:</span><br>        <span class="hljs-attr">aliases:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">database</span><br>      <span class="hljs-attr">legacy:</span><br>        <span class="hljs-attr">aliases:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">mysql</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">new:</span><br>  <span class="hljs-attr">legacy:</span><br></code></pre></td></tr></table></figure><p>相同的服务可以在不同的网络有不同的别名</p><h4 id="35-ipv4-address、ipv6-address"><a href="#35-ipv4-address、ipv6-address" class="headerlink" title="35.ipv4_address、ipv6_address"></a>35.ipv4_address、ipv6_address</h4><p>为服务的容器指定一个静态 IP 地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2.1&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">app:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">ifconfig</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">app_net:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.238</span><span class="hljs-number">.10</span><br>        <span class="hljs-attr">ipv6_address:</span> <span class="hljs-number">2001</span><span class="hljs-string">:3984:3989::10</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">app_net:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span><br>    <span class="hljs-attr">enable_ipv6:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">ipam:</span><br>      <span class="hljs-attr">driver:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">config:</span><br>      <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">subnet:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.238</span><span class="hljs-number">.0</span><span class="hljs-string">/24</span><br>      <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">subnet:</span> <span class="hljs-number">2001</span><span class="hljs-string">:3984:3989::/64</span><br></code></pre></td></tr></table></figure><h4 id="36-PID"><a href="#36-PID" class="headerlink" title="36.PID"></a>36.PID</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pid:</span> <span class="hljs-string">&quot;host&quot;</span><br></code></pre></td></tr></table></figure><p>将 PID 模式设置为主机 PID 模式，可以打开容器与主机操作系统之间的共享 PID 地址空间。使用此标志启动的容器可以访问和操作宿主机的其他容器，反之亦然。</p><h4 id="37-ports"><a href="#37-ports" class="headerlink" title="37. ports"></a>37. ports</h4><p>映射端口</p><h5 id="1-SHORT-语法-1"><a href="#1-SHORT-语法-1" class="headerlink" title="1.SHORT 语法"></a>1.SHORT 语法</h5><p>可以使用 HOST:CONTAINER 的方式指定端口，也可以指定容器端口（选择临时主机端口），宿主机会随机映射端口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ports:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3000&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3000-3005&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8000:8000&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9090-9091:8080-8081&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;49100:22&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;127.0.0.1:8001:8001&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;127.0.0.1:5000-5010:5000-5010&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6060:6060/udp&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：当使用 HOST:CONTAINER 格式来映射端口时，如果使用的容器端口小于 60 可能会得到错误得结果，因为YAML 将会解析 xx:yy 这种数字格式为 60 进制，所以建议采用字符串格式。</p></blockquote><h5 id="2-LONG-语法-1"><a href="#2-LONG-语法-1" class="headerlink" title="2.LONG 语法"></a>2.LONG 语法</h5><p>LONG 语法支持 SHORT 语法不支持的附加字段</p><ul><li><p>target：容器内的端口</p></li><li><p>published：公开的端口</p></li><li><p>protocol： 端口协议（tcp 或 udp）</p></li><li><p>mode：通过host 用在每个节点还是哪个发布的主机端口或使用 ingress 用于集群模式端口进行平衡负载，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">target:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">published:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">tcp</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">host</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="38-secrets"><a href="#38-secrets" class="headerlink" title="38.secrets"></a>38.secrets</h4><p>通过 secrets为每个服务授予相应的访问权限</p><h5 id="1-SHORT-语法-2"><a href="#1-SHORT-语法-2" class="headerlink" title="1.SHORT 语法"></a>1.SHORT 语法</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.1&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">secrets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">my_secret</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">my_other_secret</span><br><span class="hljs-attr">secrets:</span><br>  <span class="hljs-attr">my_secret:</span><br>    <span class="hljs-attr">file:</span> <span class="hljs-string">./my_secret.txt</span><br>  <span class="hljs-attr">my_other_secret:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h5 id="2-LONG-语法-2"><a href="#2-LONG-语法-2" class="headerlink" title="2.LONG 语法"></a>2.LONG 语法</h5><p>LONG 语法可以添加其他选项</p><ul><li><p>source：secret 名称</p></li><li><p>target：在服务任务容器中需要装载在 &#x2F;run&#x2F;secrets&#x2F; 中的文件名称，如果 source 未定义，那么默认为此值</p></li><li><p>uid&amp;gid：在服务的任务容器中拥有该文件的 UID 或 GID 。如果未指定，两者都默认为 0。</p></li><li><p>mode：以八进制表示法将文件装载到服务的任务容器中 &#x2F;run&#x2F;secrets&#x2F; 的权限。例如，0444 代表可读。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.1&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">secrets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">my_secret</span><br>        <span class="hljs-attr">target:</span> <span class="hljs-string">redis_secret</span><br>        <span class="hljs-attr">uid:</span> <span class="hljs-string">&#x27;103&#x27;</span><br>        <span class="hljs-attr">gid:</span> <span class="hljs-string">&#x27;103&#x27;</span><br>        <span class="hljs-attr">mode:</span> <span class="hljs-number">0440</span><br><span class="hljs-attr">secrets:</span><br>  <span class="hljs-attr">my_secret:</span><br>    <span class="hljs-attr">file:</span> <span class="hljs-string">./my_secret.txt</span><br>  <span class="hljs-attr">my_other_secret:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="39-security-opt"><a href="#39-security-opt" class="headerlink" title="39.security_opt"></a>39.security_opt</h4><p>为每个容器覆盖默认的标签。简单说来就是管理全部服务的标签，比如设置全部服务的 user 标签值为 USER</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">security_opt:<br>  - label:user:<span class="hljs-keyword">USER</span><br>  <span class="hljs-title">- label</span>:role:ROLE<br></code></pre></td></tr></table></figure><h5 id="40-stop-grace-period"><a href="#40-stop-grace-period" class="headerlink" title="40.stop_grace_period"></a>40.stop_grace_period</h5><p>在发送 SIGKILL 之前指定 stop_signal ，如果试图停止容器（如果它没有处理 SIGTERM（或指定的任何停止信号）），则需要等待的时间</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">stop_grace_period:</span> <span class="hljs-string">1s</span><br><span class="hljs-attr">stop_grace_period:</span> <span class="hljs-string">1m30s</span><br></code></pre></td></tr></table></figure><p>默认情况下，stop 在发送SIGKILL之前等待10秒钟容器退出</p><h4 id="41-stop-signal"><a href="#41-stop-signal" class="headerlink" title="41.stop_signal"></a>41.stop_signal</h4><p>设置另一个信号来停止容器。在默认情况下使用的 SIGTERM 来停止容器。设置另一个信号可以使用 stop_signal 标签：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">stop_signal:</span> <span class="hljs-string">SIGUSR1</span><br></code></pre></td></tr></table></figure><h4 id="42-sysctls"><a href="#42-sysctls" class="headerlink" title="42.sysctls"></a>42.sysctls</h4><p>在容器中设置的内核参数，可以为数组或字典</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sysctls:</span><br>  <span class="hljs-attr">net.core.somaxconn:</span> <span class="hljs-number">1024</span><br>  <span class="hljs-attr">net.ipv4.tcp_syncookies:</span> <span class="hljs-number">0</span><br><br><span class="hljs-attr">sysctls:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">net.core.somaxconn=1024</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">net.ipv4.tcp_syncookies=0</span><br></code></pre></td></tr></table></figure><h4 id="43-ulimits"><a href="#43-ulimits" class="headerlink" title="43.ulimits"></a>43.ulimits</h4><p>覆盖容器的默认限制，可以单一地将限制值设为一个整数，也可以将soft&#x2F;hard 限制指定为映射</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ulimits:</span><br>  <span class="hljs-attr">nproc:</span> <span class="hljs-number">65535</span><br>  <span class="hljs-attr">nofile:</span><br>    <span class="hljs-attr">soft:</span> <span class="hljs-number">20000</span><br>    <span class="hljs-attr">hard:</span> <span class="hljs-number">40000</span><br></code></pre></td></tr></table></figure><h4 id="44-userns-mode"><a href="#44-userns-mode" class="headerlink" title="44.userns_mode"></a>44.userns_mode</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">userns_mode:</span> <span class="hljs-string">&quot;host&quot;</span><br></code></pre></td></tr></table></figure><h4 id="45-volumes"><a href="#45-volumes" class="headerlink" title="45.volumes"></a>45.volumes</h4><p>挂载一个目录或者一个已存在的数据卷容器，可以直接使用 HOST:CONTAINER 这样的格式，或者使用 HOST:CONTAINER:ro 这样的格式，后者对于容器来说，数据卷是只读的，这样可以有效保护宿主机的文件系统</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.2&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:alpine</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">volume</span><br>        <span class="hljs-attr">source:</span> <span class="hljs-string">mydata</span><br>        <span class="hljs-attr">target:</span> <span class="hljs-string">/data</span><br>        <span class="hljs-attr">volume:</span><br>          <span class="hljs-attr">nocopy:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">bind</span><br>        <span class="hljs-attr">source:</span> <span class="hljs-string">./static</span><br>        <span class="hljs-attr">target:</span> <span class="hljs-string">/opt/app/static</span><br><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:latest</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;dbdata:/var/lib/postgresql/data&quot;</span><br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">mydata:</span><br>  <span class="hljs-attr">dbdata:</span><br></code></pre></td></tr></table></figure><p>Compose 的数据卷指定路径可以是相对路径，使用 . 或者 .. 来指定相对目录。</p><p>数据卷的格式可以是下面多种形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">volumes:</span><br>  <span class="hljs-comment"># 只是指定一个路径，Docker 会自动在创建一个数据卷（这个路径是容器内部的）。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/var/lib/mysql</span><br><br>  <span class="hljs-comment"># 使用绝对路径挂载数据卷</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/data:/var/lib/mysql</span><br><br>  <span class="hljs-comment"># 以 Compose 配置文件为中心的相对路径作为数据卷挂载到容器。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">./cache:/tmp/cache</span><br><br>  <span class="hljs-comment"># 使用用户的相对路径（~/ 表示的目录是 /home/&lt;用户目录&gt;/ 或者 /root/）。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">~/configs:/etc/configs/:ro</span><br><br>  <span class="hljs-comment"># 已经存在的命名的数据卷。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">datavolume:/var/lib/mysql</span><br><br></code></pre></td></tr></table></figure><p>如果你不使用宿主机的路径，可以指定一个 volume_driver</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">volume_driver:</span> <span class="hljs-string">mydriver</span><br></code></pre></td></tr></table></figure><h5 id="1-SHORT-语法-3"><a href="#1-SHORT-语法-3" class="headerlink" title="1.SHORT 语法"></a>1.SHORT 语法</h5><p>可以选择在主机（HOST:CONTAINER）或访问模式（HOST:CONTAINER:ro）上指定路径。</p><p>可以在主机上挂载相对路径，该路径相对于正在使用的 Compose 配置文件的目录进行扩展。相对路径应始终以 . 或 .. 开头</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">volumes:</span><br>  <span class="hljs-comment"># Just specify a path and let the Engine create a volume</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/var/lib/mysql</span><br><br>  <span class="hljs-comment"># Specify an absolute path mapping</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/data:/var/lib/mysql</span><br><br>  <span class="hljs-comment"># Path on the host, relative to the Compose file</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">./cache:/tmp/cache</span><br><br>  <span class="hljs-comment"># User-relative path</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">~/configs:/etc/configs/:ro</span><br><br>  <span class="hljs-comment"># Named volume</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">datavolume:/var/lib/mysql</span><br></code></pre></td></tr></table></figure><h5 id="2-LONG-语法-3"><a href="#2-LONG-语法-3" class="headerlink" title="2.LONG 语法"></a>2.LONG 语法</h5><p>LONG 语法有些附加字段</p><ul><li><p>type：安装类型，可以为 volume、bind 或 tmpfs</p></li><li><p>source：安装源，主机上用于绑定安装的路径或定义在顶级 volumes密钥中卷的名称 ,不适用于 tmpfs 类型安装。</p></li><li><p>target：卷安装在容器中的路径</p></li><li><p>read_only：标志将卷设置为只读</p></li><li><p>bind：配置额外的绑定选项</p></li><li><p>propagation：用于绑定的传播模式</p></li><li><p>volume：配置额外的音量选项</p></li><li><p>nocopy：创建卷时禁止从容器复制数据的标志</p></li><li><p>tmpfs：配置额外的 tmpfs 选项</p></li><li><p>size：tmpfs 的大小，以字节为单位</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.2&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:alpine</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">volume</span><br>        <span class="hljs-attr">source:</span> <span class="hljs-string">mydata</span><br>        <span class="hljs-attr">target:</span> <span class="hljs-string">/data</span><br>        <span class="hljs-attr">volume:</span><br>          <span class="hljs-attr">nocopy:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">bind</span><br>        <span class="hljs-attr">source:</span> <span class="hljs-string">./static</span><br>        <span class="hljs-attr">target:</span> <span class="hljs-string">/opt/app/static</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">webnet:</span><br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">mydata:</span><br></code></pre></td></tr></table></figure><h5 id="3-volumes-from"><a href="#3-volumes-from" class="headerlink" title="3.volumes_from"></a>3.volumes_from</h5><p>从其它容器或者服务挂载数据卷，可选的参数是 :ro 或 :rw，前者表示容器只读，后者表示容器对数据卷是可读可写的（默认情况为可读可写的）。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">volumes_from:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">service_name</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">service_name:ro</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">container:container_name</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">container:container_name:rw</span><br></code></pre></td></tr></table></figure><h5 id="4-用于服务、群集以及堆栈文件的卷"><a href="#4-用于服务、群集以及堆栈文件的卷" class="headerlink" title="4.用于服务、群集以及堆栈文件的卷"></a>4.用于服务、群集以及堆栈文件的卷</h5><p>在使用服务，群集和 docker-stack.yml 文件时，请记住支持服务的任务（容器）可以部署在群集中的任何节点上，并且每次更新服务时都可能是不同的节点。</p><p>在缺少指定源的命名卷的情况下，Docker 为支持服务的每个任务创建一个匿名卷。关联的容器被移除后，匿名卷不会保留。</p><p>如果希望数据持久存在，请使用可识别多主机的命名卷和卷驱动程序，以便可以从任何节点访问数据。或者，对该服务设置约束，以便将其任务部署在具有该卷的节点上。</p><p>下面一个例子，Docker Labs 中 votingapp 示例的 docker-stack.yml文件中定义了一个称为 db 的服务。它被配置为一个命名卷来保存群体上的数据， 并且仅限于在节点上运行。下面是来自该文件的部分内容：db postgres manager</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:9.4</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db-data:/var/lib/postgresql/data</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">placement:</span><br>        <span class="hljs-attr">constraints:</span> [<span class="hljs-string">node.role</span> <span class="hljs-string">==</span> <span class="hljs-string">manager</span>]<br></code></pre></td></tr></table></figure><h4 id="46-restart"><a href="#46-restart" class="headerlink" title="46.restart"></a>46.restart</h4><p>默认值为 no ，即在任何情况下都不会重新启动容器；当值为 always 时，容器总是重新启动；当值为 on-failure 时，当出现 on-failure 报错容器退出时，容器重新启动。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">restart:</span> <span class="hljs-string">&quot;no&quot;</span><br><span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br><span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br><span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br></code></pre></td></tr></table></figure><h4 id="47-其他选项"><a href="#47-其他选项" class="headerlink" title="47.其他选项"></a>47.其他选项</h4><p>关于标签：cpu_shares、cpu_quota、 cpuse、domainname、hostname、 ipc、 mac_address、privileged、 read_only、 shm_size、stdin_open、tty、 user、 working_dir</p><p>上面这些都是一个单值的标签，类似于使用 docker run 的效果</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cpu_shares:</span> <span class="hljs-number">73</span><br><span class="hljs-attr">cpu_quota:</span> <span class="hljs-number">50000</span><br><span class="hljs-attr">cpuset:</span> <span class="hljs-number">0</span><span class="hljs-string">,1</span><br><br><span class="hljs-attr">user:</span> <span class="hljs-string">postgresql</span><br><span class="hljs-attr">working_dir:</span> <span class="hljs-string">/code</span><br><br><span class="hljs-attr">domainname:</span> <span class="hljs-string">foo.com</span><br><span class="hljs-attr">hostname:</span> <span class="hljs-string">foo</span><br><span class="hljs-attr">ipc:</span> <span class="hljs-string">host</span><br><span class="hljs-attr">mac_address:</span> <span class="hljs-number">02</span><span class="hljs-string">:42:ac:11:65:43</span><br><br><span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br><br><br><span class="hljs-attr">read_only:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">shm_size:</span> <span class="hljs-string">64M</span><br><span class="hljs-attr">stdin_open:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">tty:</span> <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><h4 id="48-持续时间"><a href="#48-持续时间" class="headerlink" title="48.持续时间"></a>48.持续时间</h4><p>某些配置选项如 check 的子选项interval以及timeout 的设置格式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-number">2.</span>5s<br>10s<br>1m30s<br>2h32m<br>5h34m56s<br></code></pre></td></tr></table></figure><p>支持的单位有 us、ms、s、m 以及 h</p><h3 id="49-指定字节值"><a href="#49-指定字节值" class="headerlink" title="49.指定字节值"></a>49.指定字节值</h3><p>某些选项如 bulid 的子选项 shm_size</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript">2b<br>1024kb<br>2048k<br>300m<br>1gb<br></code></pre></td></tr></table></figure><p>支持的单位是 b，k，m 以及 g，或 kb， mb 和 gb。目前不支持十进制值</p><h3 id="50-extends"><a href="#50-extends" class="headerlink" title="50.extends"></a>50.extends</h3><p>这个标签可以扩展另一个服务，扩展内容可以是来自在当前文件，也可以是来自其他文件，相同服务的情况下，后来者会有选择地覆盖原有配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">extends:</span><br>  <span class="hljs-attr">file:</span> <span class="hljs-string">common.yml</span><br>  <span class="hljs-attr">service:</span> <span class="hljs-string">webapp</span><br></code></pre></td></tr></table></figure><p>用户可以在任何地方使用这个标签，只要标签内容包含 file 和 service 两个值就可以了。file 的值可以是相对或者绝对路径，如果不指定 file 的值，那么 Compose 会读取当前 YML 文件的信息。</p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>docker-compose</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker-compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker镜像操作，以及docker命令的使用</title>
    <link href="/2023/03/24/docker/docker%E5%9F%BA%E7%A1%80%E3%80%81%E5%AE%89%E8%A3%85/docker%E9%95%9C%E5%83%8F%E6%93%8D%E4%BD%9C%EF%BC%8C%E4%BB%A5%E5%8F%8Adocker%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/24/docker/docker%E5%9F%BA%E7%A1%80%E3%80%81%E5%AE%89%E8%A3%85/docker%E9%95%9C%E5%83%8F%E6%93%8D%E4%BD%9C%EF%BC%8C%E4%BB%A5%E5%8F%8Adocker%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker镜像操作，以及docker命令使用"><a href="#docker镜像操作，以及docker命令使用" class="headerlink" title="docker镜像操作，以及docker命令使用"></a>docker镜像操作，以及docker命令使用</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">参考文献：<br>Docker初学者的常用命令：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/weixin_43062251/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">103825065</span><br>Docker详细：https:<span class="hljs-regexp">//</span>jiajially.gitbooks.io<span class="hljs-regexp">/dockerguide/</span>content<span class="hljs-regexp">/chapter_fastlearn/</span>docker_run/index.html<br>http:<span class="hljs-regexp">//</span>docker.baoshu.red<span class="hljs-regexp">/network/m</span>ode.html<br></code></pre></td></tr></table></figure><h2 id="一、镜像的相关操作"><a href="#一、镜像的相关操作" class="headerlink" title="一、镜像的相关操作"></a>一、镜像的相关操作</h2><h3 id="1-拉取镜像到本地"><a href="#1-拉取镜像到本地" class="headerlink" title="1.拉取镜像到本地"></a>1.拉取镜像到本地</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull 镜像名称[:tag]<span class="hljs-comment">#链接可以在网上拉取</span><br><span class="hljs-comment"># 举个例子</span><br>docker pull tomcat daocloud.io/library/tomcat:8.5.15-jre8<br></code></pre></td></tr></table></figure><h3 id="2-查看全部本地的镜像"><a href="#2-查看全部本地的镜像" class="headerlink" title="2.查看全部本地的镜像"></a>2.查看全部本地的镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker images<br></code></pre></td></tr></table></figure><h3 id="3-删除本地镜像"><a href="#3-删除本地镜像" class="headerlink" title="3.删除本地镜像"></a>3.删除本地镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker rmi 镜像的标识 <br>docker rmi -f 镜像标识<br><span class="hljs-comment">#如果打了两个标签，同一标识，删除不了</span><br>docker rmi  镜像名称：镜像标识<br></code></pre></td></tr></table></figure><h3 id="4-镜像的导入导出（不规范）"><a href="#4-镜像的导入导出（不规范）" class="headerlink" title="4.镜像的导入导出（不规范）"></a>4.镜像的导入导出（不规范）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 将本地的镜像导出</span><br>docker save -o 导出的路径 镜像<span class="hljs-built_in">id</span><br><br>docker save 120.27.153.22:5000/rel/file_rel:1.1.114 |gzip &gt; file-rel-114.tar.gz  <span class="hljs-comment">#打包压缩</span><br><br><span class="hljs-comment"># 加载本地的镜像文件</span><br>docker load -i 镜像文件<br></code></pre></td></tr></table></figure><h3 id="5-修改镜像名称"><a href="#5-修改镜像名称" class="headerlink" title="5.修改镜像名称"></a>5.修改镜像名称</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker tag 镜像<span class="hljs-built_in">id</span> 新镜像名称:版本<br></code></pre></td></tr></table></figure><h2 id="二、docker运行相关容器的相关操作"><a href="#二、docker运行相关容器的相关操作" class="headerlink" title="二、docker运行相关容器的相关操作"></a>二、docker运行相关容器的相关操作</h2><h3 id="1-运行容器"><a href="#1-运行容器" class="headerlink" title="1.运行容器"></a>1.运行容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 简单操作</span><br>docker run 镜像的标识|镜像名称[:tag]<br><br>备注：<br>常用的参数docker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识|镜像名称[:tag]<br>-d：代表后台运行容器<br>-p 宿主机端口:容器端口：为了映射当前Linux端口和容器端口<br>--name 容器名称：指定容器的名称<br></code></pre></td></tr></table></figure><h3 id="2-查看正在运行的容器"><a href="#2-查看正在运行的容器" class="headerlink" title="2.查看正在运行的容器"></a>2.查看正在运行的容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker ps [-q,a]<br><br>-a 查看全部的容器，包括没有运行<br>-q 查看正在运行的标识<br></code></pre></td></tr></table></figure><h3 id="3-查看容器的日志"><a href="#3-查看容器的日志" class="headerlink" title="3.查看容器的日志"></a>3.查看容器的日志</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker logs -f 容器ID<br><br>-f：可以滚动查看日志的最后几行<br></code></pre></td></tr></table></figure><h3 id="4-执行容器内命令"><a href="#4-执行容器内命令" class="headerlink" title="4.执行容器内命令"></a>4.执行容器内命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#进入容器内执行：</span><br>docker <span class="hljs-built_in">exec</span> -it 容器ID bash  [等于=] docker <span class="hljs-built_in">exec</span> -it 容器ID /bin/bash<br><span class="hljs-comment">#或docker exec -it 容器ID sh  [等于=] docker exec -it /bin/sh </span><br><br><span class="hljs-comment">#Docker在容器外执行容器内命令或脚本:</span><br>docker <span class="hljs-built_in">exec</span> 容器ID /bin/bash -c <span class="hljs-string">&quot;XXX命令&quot;</span><br><span class="hljs-comment">#例如：</span><br>docker <span class="hljs-built_in">exec</span> 容器ID或容器名 /bin/sh -c <span class="hljs-string">&quot;mkdir /www/default/runtime; \</span><br><span class="hljs-string">                                 chmod +x /www/default/ank; \</span><br><span class="hljs-string">                                 /www/default/ank clearcache; \</span><br><span class="hljs-string">                                 chmod 754 -R /www/default/runtime;&quot;</span><br><br><span class="hljs-comment">#执行容器内shell脚本:</span><br>docker <span class="hljs-built_in">exec</span> web-blog /www/default/start.sh<br></code></pre></td></tr></table></figure><h3 id="5、删除容器（删除容器前，需要先停止容器运行）"><a href="#5、删除容器（删除容器前，需要先停止容器运行）" class="headerlink" title="5、删除容器（删除容器前，需要先停止容器运行）"></a>5、删除容器（删除容器前，需要先停止容器运行）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#停止指定的容器</span><br>docker stop 容器ID<br><br><span class="hljs-comment">#停止全部的容器</span><br>docker stop $(docker ps -qa)<br><br><span class="hljs-comment">#删除指定的容器</span><br>docker <span class="hljs-built_in">rm</span> 容器<span class="hljs-built_in">id</span><br><br><span class="hljs-comment">#删除全部的容器</span><br>docker <span class="hljs-built_in">rm</span> $(docker ps -qa)<br></code></pre></td></tr></table></figure><h3 id="6-启动容器"><a href="#6-启动容器" class="headerlink" title="6. #启动容器"></a>6. #启动容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker start 容器ID<br></code></pre></td></tr></table></figure><h3 id="7-docker容器中文件的上传与下载"><a href="#7-docker容器中文件的上传与下载" class="headerlink" title="7. #docker容器中文件的上传与下载"></a>7. #docker容器中文件的上传与下载</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#上传本机文件到镜像内:</span><br>docker <span class="hljs-built_in">cp</span> /root/test.txt ecef8319d2c8:/root/<br><span class="hljs-comment">#本机/root/test.txt 文件上传到容器ID为ecef8319d2c8的root目录</span><br><br><span class="hljs-comment">#下载容器内文件到本机：</span><br>docker <span class="hljs-built_in">cp</span> ecef8319d2c8:/root/test.txt /root/<br><span class="hljs-comment">#将容器ID：ecef8319d2c8 /root/目录下的test.txt文件下载到本机的root目录下</span><br><br><span class="hljs-comment">#复制整个文件夹：</span><br>docker container <span class="hljs-built_in">cp</span> -a flink_taskmanager_1:/opt/flink/conf/ /app/flink/conf/<br><br></code></pre></td></tr></table></figure><h3 id="8-docker-commit可以将容器的存储层保存下来成为镜像。"><a href="#8-docker-commit可以将容器的存储层保存下来成为镜像。" class="headerlink" title="8. docker commit可以将容器的存储层保存下来成为镜像。"></a>8. docker commit可以将容器的存储层保存下来成为镜像。</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">换句话说:在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。与dockerfile一样，但是dockerfile更加智能，能针对每一步进行记录，并根据每一步可生成不同依赖的镜像</span><br></code></pre></td></tr></table></figure><p>参考地址：<a href="https://blog.csdn.net/qq_28723681/article/details/107210775">https://blog.csdn.net/qq_28723681/article/details/107210775</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]<br><br><br>$ docker commit \<br>    --author <span class="hljs-string">&quot;jiangzhenzhou &lt;1962821461@qq.com&gt;&quot;</span> \<br>    --message <span class="hljs-string">&quot;修改了默认网页&quot;</span> \<br>    webserver \<br>    nginx:v2<br><br><span class="hljs-comment">#输出如下：</span><br>sha256:07e33465974800ce65751acc279adc6ed2dc5ed4e0838f8b86f0c87aa1795214<br><span class="hljs-comment">#可以在 docker image ls 中看到这个新定制的镜像</span><br><br><br>docker的详细实战：https://blog.csdn.net/weixin_43062251/article/details/103825065<br></code></pre></td></tr></table></figure><h3 id="9-设置环境变量（以mongo举例）"><a href="#9-设置环境变量（以mongo举例）" class="headerlink" title="9. 设置环境变量（以mongo举例）"></a>9. 设置环境变量（以mongo举例）</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis">当你开始 mongo镜像，你可以通过传递一个或多个环境变量来调整 MongoDB 实例的初始化 docker run命令行。请注意，如果您使用已经包含数据库的数据目录启动容器，则以下任何变量都不会产生任何影响：在容器启动时，任何预先存在的数据库将始终保持不变。<br>MONGO_INITDB_ROOT_USERNAME, MONGO_INITDB_ROOT_PASSWORD 这些变量结合使用，创建一个新用户并设置该用户的密码。 该用户创建于 <span class="hljs-literal">admin</span> 身份验证数据库 并赋予 角色 root，这是 一个“超级用户”角色 。下面是使用这两个变量创建一个MongoDB实例，然后使用 mongocli 连接到 <span class="hljs-literal">admin</span>身份验证数据库。<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看容器之间的内部通信</span><br>docker network <span class="hljs-built_in">ls</span> <br><br><span class="hljs-comment">#docker network创建一个桥接网络，在docker run的时候将容器指定到新创建的桥接网络中，这样同一桥接网络中的容器就可以通过互相访问。</span><br>docker network create some-network <br><br><span class="hljs-comment">#创建mongo实例</span><br>docker run -d --network some-network --name some-mongo \<br>    -e MONGO_INITDB_ROOT_USERNAME=mongoadmin \<br>    -e MONGO_INITDB_ROOT_PASSWORD=secret \<br>    mongo<br><br><span class="hljs-comment">#运行一个mongo临时容器，退出后即清除</span><br>docker run -it --<span class="hljs-built_in">rm</span> --network some-network mongo \<br>    mongo --host some-mongo \<br>        -u mongoadmin \<br>        -p secret \<br>        --authenticationDatabase admin \<br>        some-db<br><span class="hljs-comment">#查看查看当前使用的数据库    </span><br>&gt; db.getName(); <br><br>注意：<br>some-mongo 是定义的容器名<br>some-network 是创建的docker桥接网络<br>some-db 使用的数据库<br></code></pre></td></tr></table></figure><h3 id="10-查看docker详情"><a href="#10-查看docker详情" class="headerlink" title="10. 查看docker详情"></a>10. 查看docker详情</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker inspect  01193d2fb1b1   <span class="hljs-comment">#01193d2fb1b1代表docker运行的镜像id</span><br><br><span class="hljs-comment">#根据镜像筛选后五行数据</span><br>docker inspect  01193d2fb1b1 |grep -A 5 Binds    <br></code></pre></td></tr></table></figure><h3 id="11-查看容器的cpu、内存和PID"><a href="#11-查看容器的cpu、内存和PID" class="headerlink" title="11. 查看容器的cpu、内存和PID"></a>11. 查看容器的cpu、内存和PID</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker stats --no-stream --format <span class="hljs-string">&quot;table &#123;&#123;.Name&#125;&#125;\t&#123;&#123;.CPUPerc&#125;&#125;\t&#123;&#123;.MemUsage&#125;&#125;\t&#123;&#123;.PIDs&#125;&#125;&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="12-查看容器占用磁盘空间"><a href="#12-查看容器占用磁盘空间" class="headerlink" title="12. 查看容器占用磁盘空间"></a>12. 查看容器占用磁盘空间</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker ps -a --format <span class="hljs-string">&quot;table &#123;&#123;.Size&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><br><span class="hljs-comment">#查看占用空间的PID，以及对应的容器名称</span><br>docker ps -q | xargs docker inspect --format <span class="hljs-string">&#x27;&#123;&#123;.State.Pid&#125;&#125;, &#123;&#123;.Name&#125;&#125;, &#123;&#123;.GraphDriver.Data.WorkDir&#125;&#125;&#x27;</span> | grep <span class="hljs-string">&quot;ec3241de83a99bb8a18764142a1194a1b248ea7c53e39447ddf198d5b61b0099&quot;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>docker基础、安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker安装</title>
    <link href="/2023/03/24/docker/docker%E5%9F%BA%E7%A1%80%E3%80%81%E5%AE%89%E8%A3%85/docker%E5%AE%89%E8%A3%85/"/>
    <url>/2023/03/24/docker/docker%E5%9F%BA%E7%A1%80%E3%80%81%E5%AE%89%E8%A3%85/docker%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装docker："><a href="#安装docker：" class="headerlink" title="安装docker："></a>安装docker：</h1><h2 id="一、yum在线安装："><a href="#一、yum在线安装：" class="headerlink" title="一、yum在线安装："></a>一、yum在线安装：</h2><p>安装指定版可参考文档：<a href="https://www.cnblogs.com/lixie0215/p/14804777.html">https://www.cnblogs.com/lixie0215/p/14804777.html</a></p><h3 id="1、下载关于docker的依赖环境"><a href="#1、下载关于docker的依赖环境" class="headerlink" title="1、下载关于docker的依赖环境"></a>1、下载关于docker的依赖环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install yum-utils device-mapper-persistent-data lvm2<br><br>可以使用该插件更快编译补齐代码：<br><span class="hljs-comment"># yum -y install bash-completion.noarch</span><br>yum -y install bash-completion.noarch net-tools vim lrzsz wget tree screen lsof tcpdump nc telnet unzip <br></code></pre></td></tr></table></figure><h3 id="2、设置一下下载Docker的镜像源"><a href="#2、设置一下下载Docker的镜像源" class="headerlink" title="2、设置一下下载Docker的镜像源"></a>2、设置一下下载Docker的镜像源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><br></code></pre></td></tr></table></figure><h3 id="3-安装docker"><a href="#3-安装docker" class="headerlink" title="3.安装docker"></a>3.安装docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum makecache fast<br>yum -y install docker-ce<br></code></pre></td></tr></table></figure><h3 id="4、启动docker服务"><a href="#4、启动docker服务" class="headerlink" title="4、启动docker服务"></a>4、启动docker服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start docker<br></code></pre></td></tr></table></figure><h3 id="5-设置开机启动"><a href="#5-设置开机启动" class="headerlink" title="5.设置开机启动"></a>5.设置开机启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><h3 id="6-测试是否安装成功"><a href="#6-测试是否安装成功" class="headerlink" title="6.测试是否安装成功"></a>6.测试是否安装成功</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run hello-world<br></code></pre></td></tr></table></figure><h3 id="7-设置docker中央仓库"><a href="#7-设置docker中央仓库" class="headerlink" title="7.设置docker中央仓库"></a>7.设置docker中央仓库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">1、Docker官方的中央仓库：这个仓库是镜像最全的，但是下载速度很慢。https://hub.docker.com<br><br>2、国内的镜像网站：<br>https://c.163yun.com/hub<span class="hljs-comment">#/home</span><br>http://hub.daocloud.io <span class="hljs-comment">#(推荐使用)</span><br><br>3、在公司内部会采用私服的方式拉取镜像。（添加配置）<br>需要在/etc/docker/daemon.json中，如果没有的话，需要增加<br>&#123;<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>:[<span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>],<br>    <span class="hljs-string">&quot;insecure-registries&quot;</span>:[<span class="hljs-string">&quot;ip:port&quot;</span>]<br>    <span class="hljs-comment">#&quot;graph&quot;: &quot;/app&quot;  存放路径</span><br>&#125;<br><br>4、重启两个服务<br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="二、二进制安装"><a href="#二、二进制安装" class="headerlink" title="二、二进制安装"></a>二、二进制安装</h2><p>参考文献：<a href="https://blog.csdn.net/gzt19881123/article/details/109454467">https://blog.csdn.net/gzt19881123/article/details/109454467</a></p><h3 id="1-下载docker二进制版本"><a href="#1-下载docker二进制版本" class="headerlink" title="1. 下载docker二进制版本"></a>1. 下载docker二进制版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#请选择最新最稳定的CE版本</span><br>https://download.docker.com/linux/static/stable/x86_64/<br><br>例如 ：下载版本为18.06.3-ce的docker二进制压缩包到 /tmp目录下：<br>wget  https://download.docker.com/linux/static/stable/x86_64/docker-18.06.3-ce.tgz<br></code></pre></td></tr></table></figure><h3 id="2-解压出二进制文件"><a href="#2-解压出二进制文件" class="headerlink" title="2. 解压出二进制文件"></a>2. 解压出二进制文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">解压出的一个文件目录为 docker/<br><br>[root@localhost tmp]<span class="hljs-comment"># tar -xvf docker-18.06.3-ce.tgz</span><br>[root@localhost tmp]<span class="hljs-comment"># ls</span><br>docker  docker-18.06.3-ce.tgz<br></code></pre></td></tr></table></figure><h3 id="3-复制二进制文件到-x2F-usr-x2F-bin目录下"><a href="#3-复制二进制文件到-x2F-usr-x2F-bin目录下" class="headerlink" title="3. 复制二进制文件到&#x2F;usr&#x2F;bin目录下"></a>3. 复制二进制文件到&#x2F;usr&#x2F;bin目录下</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@localhost tmp]<span class="hljs-comment"># cp docker/* /usr/bin/</span><br><br>检查docker命令是否可用<br>[root@localhost tmp]<span class="hljs-comment"># docker --version</span><br>Docker version 18.06.3-ce, build d7080c1<br></code></pre></td></tr></table></figure><h3 id="4-配置systemctl-启动命令并设置开机启动"><a href="#4-配置systemctl-启动命令并设置开机启动" class="headerlink" title="4. 配置systemctl 启动命令并设置开机启动"></a>4. 配置systemctl 启动命令并设置开机启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh">以上步骤安装成功后，shell命令行下 sudo dockerd &amp; 即可启动docker，但一般我们采用 systemctl方式启动docker服务并设置开机启动，所以创建 /usr/lib/systemd/system/docker.service 文件<br><br>vim /usr/lib/systemd/system/docker.service<br><span class="hljs-comment">#并且在文件里面设置如下内容：</span><br><br>[Unit]<br>Description=Docker Application Container Engine<br>Documentation=https://docs.docker.com<br>After=network-online.target firewalld.service<br>Wants=network-online.target<br><br>[Service]<br>Type=notify<br>ExecStart=/usr/bin/dockerd<br>ExecReload=/bin/kill -s HUP <span class="hljs-variable">$MAINPID</span><br>LimitNOFILE=infinity<br>LimitNPROC=infinity<br>TimeoutStartSec=0<br>Delegate=<span class="hljs-built_in">yes</span><br>KillMode=process<br>Restart=on-failure<br>StartLimitBurst=3<br>StartLimitInterval=60s<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="5-采用-systemctl-设置自动重启"><a href="#5-采用-systemctl-设置自动重启" class="headerlink" title="5. 采用 systemctl 设置自动重启"></a>5. 采用 systemctl 设置自动重启</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl start docker.service<br><br><span class="hljs-comment"># --------------设置开机自动启动-------------------</span><br>systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>docker基础、安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
