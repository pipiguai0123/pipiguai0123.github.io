<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/03/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/03/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="使用jenkins持续集成；编译，打包部署微服务"><a href="#使用jenkins持续集成；编译，打包部署微服务" class="headerlink" title="使用jenkins持续集成；编译，打包部署微服务"></a>使用jenkins持续集成；编译，打包部署微服务</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p><strong>部署服务机器：</strong></p><table><thead><tr><th align="center">部署平台</th><th align="center">IP地址：端口</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">gitlab平台</td><td align="center">192.168.5.111:8188</td><td align="center">代码仓库地址</td></tr><tr><td align="center">harbor平台</td><td align="center">192.168.5.133:8080</td><td align="center">用来存放打包的镜像</td></tr><tr><td align="center">jenkins平台</td><td align="center">192.168.94.154:8080</td><td align="center">jenkins流水线</td></tr><tr><td align="center">maven</td><td align="center">192.168.94.154</td><td align="center">编译jar包</td></tr><tr><td align="center">sonarqube</td><td align="center">192.168.94.154:9000</td><td align="center">代码质量扫描</td></tr><tr><td align="center">postgresql</td><td align="center">192.168.94.155:5432</td><td align="center">数据库，使用docker运行，具体安装查看安装手册</td></tr><tr><td align="center">sonar-scanner</td><td align="center">192.168.94.154</td><td align="center">路径为&#x2F;opt&#x2F;sonar-scanner&#x2F;bin&#x2F;sonar-scanner</td></tr></tbody></table><p><strong>相关服务截图：</strong></p><p>1、使用gitlab的项目库：192.168.5.111:8188&#x2F;root&#x2F;java-fuwu</p><p>该demo包从github上拉取并上传到本地gitlab上：<a href="https://github.com/pipiguai0123/simple-java-maven-app">https://github.com/pipiguai0123/simple-java-maven-app</a></p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220905150648167.png" alt="image-20220905150648167"></p><p>2、使用的harbor仓库地址：192.168.5.133:8080&#x2F;harbor&#x2F;projects</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220905150825471.png" alt="image-20220905150825471"></p><p>3、使用的jenkins地址：192.168.94.154:8080&#x2F;view&#x2F;weifuwu&#x2F;</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220905150955622.png" alt="image-20220905150955622"></p><p>4.SonarQube管理页面：192.168.94.154:9000</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220907170244292.png" alt="image-20220907170244292"></p><p><strong>使用jenkins+maven编译</strong></p><p>1、直接新增项目-流水线，然后设置从gitlab代码仓库内拿到编写的jenkinsfile</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220907171507295.png" alt="image-20220907171507295"></p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220907171746577.png" alt="image-20220907171746577"></p><p>2、应用保存后输出如下：</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220907171821055.png" alt="image-20220907171821055"></p><p><strong>使用jenkins+sonarqube质量扫描</strong></p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220907173032352.png" alt="image-20220907173032352"></p><p>1、访问sonarqube页面：192.168.94.154:9000，登录后，需要创建一个sonarqube的token，拥有 Token 就得到了 Token 持有人的身份及几乎所有权限</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220907172154561.png" alt="image-20220907172154561"></p><p>2、输入令牌名称，然后选择令牌的过期时间，（我这边选择的是永久）然后生成token，切记复制token到本地</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220907172333440.png" alt="image-20220907172333440"></p><p>注意：本人后面使用的是sonarqube-jenkins-pinju名称的token，上述的test名称的token未使用</p><p>sonarqube-jenkins-pinju的token为：squ_47a6a36a2b62fb57ac27317c7805df4003026434</p><p>#未打开SCM的需要打开：</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220908111059008.png" alt="image-20220908111059008"></p><p>3、jenkins安装SonarQube Scanner插件</p><p>Manage <a href="https://so.csdn.net/so/search?q=Jenkins&spm=1001.2101.3001.7020">Jenkins</a>（设置）–&gt;Manage Plugins（插件管理）–&gt;filter（筛选）</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220908094235641.png" alt="image-20220908094235641"></p><p>4、添加 server authentication token<br>凭据–&gt;添加凭据–&gt;填写sonarqube生成的token -&gt;保存</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220908094931973.png" alt="image-20220908094931973"></p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220908094956432.png" alt="image-20220908094956432"></p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220908110330350.png" alt="image-20220908110330350"></p><p>5、Manage Jenkins（系统管理）–&gt;Configure System（系统配置）</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220908113017696.png" alt="image-20220908113017696"></p><p>参考文档：<a href="https://blog.csdn.net/jiatong151/article/details/111995890">https://blog.csdn.net/jiatong151/article/details/111995890</a></p><p>6、编写<strong>sonar-project.properties</strong>文件，文件路径直接在项目下</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220908144624891.png" alt="image-20220908144624891"></p><p>sonar-project.properties文件详解：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 项目的key唯一不重复即可 </span><br>sonar.<span class="hljs-attribute">projectKey</span>=java-demo<br><span class="hljs-comment"># 项目的名字</span><br>sonar.<span class="hljs-attribute">projectName</span>=java-demo<br><span class="hljs-comment"># 项目的版本</span><br>sonar.<span class="hljs-attribute">projectVersion</span>=1.0<br><span class="hljs-comment"># 需要分析的源码的目录，多个目录用英文逗号隔开</span><br>sonar.<span class="hljs-attribute">sources</span>=.<br><span class="hljs-comment"># sonarQube扫描的对象</span><br>sonar.java.<span class="hljs-attribute">binaries</span>=.<br><span class="hljs-comment"># 编码格式 </span><br>sonar.<span class="hljs-attribute">sourceEncoding</span>=UTF-8<br><span class="hljs-comment"># 具有项目执行分析权限的 SonarQube 用户的身份验证令牌或登录名</span><br>sonar.<span class="hljs-attribute">login</span>=squ_47a6a36a2b62fb57ac27317c7805df4003026434<br><span class="hljs-comment"># 如果使用身份验证令牌，请设置为空。如果使用的是登录名，则填写用户名的密码。</span><br>sonar.password=<br></code></pre></td></tr></table></figure><p>如何配置sonar-project.properties文件：<a href="https://blog.csdn.net/weixin_44410537/article/details/113770515">https://blog.csdn.net/weixin_44410537/article/details/113770515</a></p><p>7、jenkins新增流水线，设置流水线pipiline</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs stylus">pipeline &#123;<br>    agent any<br>     options &#123;<br>        <span class="hljs-built_in">timestamps</span>()          <span class="hljs-comment">//日志会有时间</span><br>        <span class="hljs-built_in">skipDefaultCheckout</span>() <span class="hljs-comment">//删除隐式checkout scm语句</span><br>        <span class="hljs-built_in">timeout</span>(<span class="hljs-selector-tag">time</span>: <span class="hljs-number">1</span>, unit: <span class="hljs-string">&#x27;HOURS&#x27;</span> ) <span class="hljs-comment">//超时时间终止</span><br>    &#125;<br>    stages &#123;<br>        <span class="hljs-built_in">stage</span>(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>            steps &#123;<br>                git branch: <span class="hljs-string">&#x27;main&#x27;</span>, credentialsId: <span class="hljs-string">&#x27;gitlab-root-http&#x27;</span>, url: <span class="hljs-string">&#x27;http://192.168.5.111:8188/root/java-fuwu.git&#x27;</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">stage</span>(<span class="hljs-string">&#x27;质量扫描&#x27;</span>) &#123;<br>        steps &#123;<br>            echo <span class="hljs-string">&#x27;SonarQube analysis 开始&#x27;</span><br>                 sh <span class="hljs-string">&quot;/opt/Sonar-scanner/bin/sonar-scanner&quot;</span> <span class="hljs-comment">//Sonar-scanner路径</span><br>     echo <span class="hljs-string">&#x27;SonarQube analysis 结束&#x27;</span><br><br>      &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>构建成功后，访问sonarqube，可以查看到项目代码质量以及详情：</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220908161956686.png" alt="image-20220908161956686"></p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220908164206483.png" alt="image-20220908164206483"></p><p><strong>jenkins+maven+sonarqube+harbor+部署运行</strong></p><p>1、登录jenkins，并安装插件：Git Parameter</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220913220001586.png" alt="image-20220913220001586"></p><p>2、在gitlab仓库内上新增docker文件夹，并编写dockerfile文件</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220913215743288.png" alt="image-20220913215743288"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-alpine <span class="hljs-comment">##依赖镜像</span><br><span class="hljs-keyword">VOLUME</span><span class="language-bash"> /tmp</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> my-app-1.0-SNAPSHOT.jar my-app.jar</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">9350</span>  <span class="hljs-comment">#定义服务使用的端口</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;/my-app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>3、在jenkins服务器上修改docker的daemon.json文件，添加harbor镜像地址：<a href="http://192.168.5.133:8080，并登录habor仓库">http://192.168.5.133:8080，并登录habor仓库</a></p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220913220157333.png" alt="image-20220913220157333"></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> login <span class="hljs-number">192.168.5.133:8080</span><br><span class="hljs-comment">#输入账号密码，显示成功即可</span><br></code></pre></td></tr></table></figure><p>4、部署准备（预计将服务部署在192.168.94.155服务器上，按照步骤3（修改daemon.json并登录harbor仓库）</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle">编写运行该容器的脚本：因为流水线部署时执行了<br>cat <span class="hljs-regexp">/srv/</span>dockerrun/java-maven-sonarqube-docker.sh<br>#!<span class="hljs-regexp">/bin/</span>bash<br>docker rm -f java-demo<br>##只保留三个版本的镜像在本地<br>docker images | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;java-demo&quot;</span>  | awk <span class="hljs-string">&#x27;(NR&gt;3)&#123;print&#125;&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs docker rmi<br>##运行镜像<br>docker run -d -p <span class="hljs-number">9350</span>:<span class="hljs-number">9350</span>  --restart=always  --name java-demo \<br>-e TZ=<span class="hljs-string">&quot;Asia/Shanghai&quot;</span> \<br>-e JAVA_OPTS=<span class="hljs-string">&#x27;-server -Xms512m -Xmx512m&#x27;</span> \<br>-m <span class="hljs-number">2048</span>m --cpus <span class="hljs-number">1</span> \<br><span class="hljs-number">192.168</span>.<span class="hljs-number">5.133</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/weifuwu/</span>java-damo #使用编译的镜像，初始如果没有的情况下，可定义<span class="hljs-number">192.168</span>.<span class="hljs-number">5.133</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/weifuwu/</span>java-damo<br></code></pre></td></tr></table></figure><p>从jenkins服务器上设置免密认证到192.168.94.155上和并使用node1命名解析：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">cat /etc/hosts<br><span class="hljs-number">192.168.94.155</span> node1<br></code></pre></td></tr></table></figure><p>5、新增流水线</p><p>将所有操作整合，只需将以下流水线语法粘贴到jenkins流水线内并构建即可！</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs awk">pipeline &#123;<br>  agent any<br>  options &#123;<br>        timestamps()          <span class="hljs-regexp">//</span>日志会有时间<br>        skipDefaultCheckout() <span class="hljs-regexp">//</span>删除隐式checkout scm语句<br>        timeout(time: <span class="hljs-number">1</span>, unit: <span class="hljs-string">&#x27;HOURS&#x27;</span> )<br>  &#125;<br>  parameters &#123;<br>    <span class="hljs-regexp">//</span>jenkins选择分支构建，默认为main<br>    gitParameter branchFilter: <span class="hljs-string">&#x27;origin/(.*)&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;main&#x27;</span>, name: <span class="hljs-string">&#x27;BRANCH&#x27;</span>, type: <span class="hljs-string">&#x27;PT_BRANCH&#x27;</span><br>  &#125;<br>  environment&#123;<br>        <span class="hljs-regexp">//</span>定义推送的镜像名称<br>        image_tag=<span class="hljs-string">&quot;192.168.5.133:8080/weifuwu/java-damo:$&#123;BUILD_ID&#125;&quot;</span><br>        <span class="hljs-regexp">//</span>镜像存放路径<br>        dest_dir=<span class="hljs-string">&quot;/srv/dockerrun&quot;</span><br>  &#125;<br>  stages &#123;<br>    stage(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>      steps &#123;<br>        git branch: <span class="hljs-string">&quot;$&#123;params.BRANCH&#125;&quot;</span>, credentialsId: <span class="hljs-string">&#x27;gitlab-root-http&#x27;</span>, url: <span class="hljs-string">&#x27;http://192.168.5.111:8188/root/java-fuwu.git&#x27;</span><br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;质量扫描&#x27;</span>) &#123;<br>        steps &#123;<br>            timeout(time:<span class="hljs-number">10</span>, unit:<span class="hljs-string">&#x27;MINUTES&#x27;</span>) &#123; <span class="hljs-regexp">//</span>指定步骤的超时时间<br>             script &#123; <span class="hljs-regexp">//</span> 指定运行的脚本<br>                echo <span class="hljs-string">&#x27;SonarQube analysis 开始&#x27;</span><br>                sh <span class="hljs-string">&quot;/opt/sonar-scanner/bin/sonar-scanner&quot;</span><br>                echo <span class="hljs-string">&#x27;SonarQube analysis 结束&#x27;</span><br>            &#125;<br>          &#125;<br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;maven编译&#x27;</span>) &#123;<br>        steps &#123;<br>             sh <span class="hljs-string">&#x27;mvn -B -DskipTests clean package&#x27;</span><br>        &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;编译镜像&#x27;</span>) &#123;<br>        steps &#123;<br>              <span class="hljs-regexp">//</span>进到存放dockerfile文件的目录下，将编译后的jar包复制过来<br>             sh <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                cd docker/ &amp;&amp; cp ../target/my-app*.jar ./</span><br><span class="hljs-string">                docker build -t $&#123;image_tag&#125; .</span><br><span class="hljs-string">                &#x27;&#x27;&#x27;</span><br>                <span class="hljs-regexp">//</span>推送镜像<br>              sh <span class="hljs-string">&#x27;docker push $&#123;image_tag&#125;&#x27;</span><br>               <span class="hljs-regexp">//</span> input message: <span class="hljs-string">&#x27;Finished using the web site? (Click &quot;Proceed&quot; to continue)&#x27;</span>, ok: <span class="hljs-string">&#x27;发布镜像&#x27;</span><br>               &#125;<br>        &#125;<br>    stage(<span class="hljs-string">&#x27;部署服务&#x27;</span>) &#123;<br>        steps &#123;<br>              <span class="hljs-regexp">//</span><span class="hljs-variable">$JOB_NAME</span>：任务的名称，也就是流水线创建的名称<br>              <span class="hljs-regexp">//</span><span class="hljs-variable">$dest_dir</span>:部署服务所在路径<br>              <span class="hljs-regexp">//</span>替换脚本内的镜像，并执行脚本<br>              sh <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                echo &quot;sed -i &#x27;s#192.168.5.133:8080.*#$&#123;image_tag&#125;#g&#x27; $&#123;dest_dir&#125;/$&#123;JOB_NAME&#125;.sh &amp;&amp; bash $&#123;dest_dir&#125;/$&#123;JOB_NAME&#125;.sh&quot; |ssh node1</span><br><span class="hljs-string">                &#x27;&#x27;&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6、添加构建成功后发送邮件功能！（脚本如下）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs awk">pipeline &#123;<br>  agent any<br>  options &#123;<br>        timestamps()          <span class="hljs-regexp">//</span>日志会有时间<br>        skipDefaultCheckout() <span class="hljs-regexp">//</span>删除隐式checkout scm语句<br>        timeout(time: <span class="hljs-number">1</span>, unit: <span class="hljs-string">&#x27;HOURS&#x27;</span> )<br>  &#125;<br>  parameters &#123;<br>    <span class="hljs-regexp">//</span>jenkins选择分支构建，默认为main<br>    gitParameter branchFilter: <span class="hljs-string">&#x27;origin/(.*)&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;main&#x27;</span>, name: <span class="hljs-string">&#x27;BRANCH&#x27;</span>, type: <span class="hljs-string">&#x27;PT_BRANCH&#x27;</span><br>  &#125;<br>  environment&#123;<br>        <span class="hljs-regexp">//</span>定义推送的镜像名称<br>        image_tag=<span class="hljs-string">&quot;192.168.5.133:8080/weifuwu/java-damo:$&#123;BUILD_ID&#125;&quot;</span><br>        <span class="hljs-regexp">//</span>镜像存放路径<br>        dest_dir=<span class="hljs-string">&quot;/srv/dockerrun&quot;</span><br>        <span class="hljs-regexp">//</span>邮件接收人<br>        emailUser=<span class="hljs-string">&quot;1962821461@qq.com&quot;</span><br>        <span class="hljs-regexp">//</span>构建状态<br>        BUILD_STATUS=<span class="hljs-string">&quot;成功！&quot;</span><br><br>  &#125;<br>  stages &#123;<br>    stage(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>      steps &#123;<br>        git branch: <span class="hljs-string">&quot;$&#123;params.BRANCH&#125;&quot;</span>, credentialsId: <span class="hljs-string">&#x27;gitlab-root-http&#x27;</span>, url: <span class="hljs-string">&#x27;http://192.168.5.111:8188/root/java-fuwu.git&#x27;</span><br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;质量扫描&#x27;</span>) &#123;<br>        steps &#123;<br>            timeout(time:<span class="hljs-number">10</span>, unit:<span class="hljs-string">&#x27;MINUTES&#x27;</span>) &#123; <span class="hljs-regexp">//</span>指定步骤的超时时间<br>             script &#123; <span class="hljs-regexp">//</span> 指定运行的脚本<br>                echo <span class="hljs-string">&#x27;SonarQube analysis 开始&#x27;</span><br>                sh <span class="hljs-string">&quot;/opt/sonar-scanner/bin/sonar-scanner&quot;</span><br>                echo <span class="hljs-string">&#x27;SonarQube analysis 结束&#x27;</span><br>            &#125;<br>          &#125;<br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;maven编译&#x27;</span>) &#123;<br>        steps &#123;<br>             sh <span class="hljs-string">&#x27;mvn -B -DskipTests clean package&#x27;</span><br>        &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;编译镜像&#x27;</span>) &#123;<br>        steps &#123;<br>              <span class="hljs-regexp">//</span>进到存放dockerfile文件的目录下，将编译后的jar包复制过来<br>             sh <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                cd docker/ &amp;&amp; cp ../target/my-app*.jar ./</span><br><span class="hljs-string">                docker build -t $&#123;image_tag&#125; .</span><br><span class="hljs-string">                &#x27;&#x27;&#x27;</span><br>                <span class="hljs-regexp">//</span>推送镜像<br>              sh <span class="hljs-string">&#x27;docker push $&#123;image_tag&#125;&#x27;</span><br>               <span class="hljs-regexp">//</span> input message: <span class="hljs-string">&#x27;Finished using the web site? (Click &quot;Proceed&quot; to continue)&#x27;</span>, ok: <span class="hljs-string">&#x27;发布镜像&#x27;</span><br>               &#125;<br>        &#125;<br>    stage(<span class="hljs-string">&#x27;部署服务&#x27;</span>) &#123;<br>        steps &#123;<br>              <span class="hljs-regexp">//</span><span class="hljs-variable">$JOB_NAME</span><br>              sh <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                echo &quot;sed -i &#x27;s#192.168.5.133/.*#$&#123;image_tag&#125;#g&#x27; $&#123;dest_dir&#125;/$&#123;JOB_NAME&#125;.sh &amp;&amp; bash $&#123;dest_dir&#125;/$&#123;JOB_NAME&#125;.sh&quot; |ssh node1</span><br><span class="hljs-string">                &#x27;&#x27;&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    post &#123;<br>    <span class="hljs-regexp">//</span>failure:失败后执行，为了测试正常，我已经改成为成功后发送<br>    <span class="hljs-regexp">//</span>    failure &#123; <br>        success &#123;<br>           script &#123;<br>               emailext body: <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            &lt;!DOCTYPE html&gt; </span><br><span class="hljs-string">            &lt;html&gt; </span><br><span class="hljs-string">            &lt;head&gt; </span><br><span class="hljs-string">            &lt;meta charset=&quot;UTF-8&quot;&gt; </span><br><span class="hljs-string">            &lt;/head&gt; </span><br><span class="hljs-string">            &lt;body leftmargin=&quot;8&quot; marginwidth=&quot;0&quot; topmargin=&quot;8&quot; marginheight=&quot;4&quot; offset=&quot;0&quot;&gt; </span><br><span class="hljs-string">                &lt;img src=&quot;https://raw.githubusercontent.com/pipiguai0123/JenkinsShareLibrary/main/docs/Jenkins%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E9%9B%86%E6%88%90.png&quot;&gt;</span><br><span class="hljs-string">                &lt;table width=&quot;95%&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; style=&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;&gt;   </span><br><span class="hljs-string">                    &lt;tr&gt; </span><br><span class="hljs-string">                        &lt;td&gt;&lt;br /&gt; </span><br><span class="hljs-string">                            &lt;b&gt;&lt;font color=&quot;#0B610B&quot;&gt;构建信息&lt;/font&gt;&lt;/b&gt; </span><br><span class="hljs-string">                        &lt;/td&gt; </span><br><span class="hljs-string">                    &lt;/tr&gt; </span><br><span class="hljs-string">                    &lt;tr&gt; </span><br><span class="hljs-string">                        &lt;td&gt; </span><br><span class="hljs-string">                            &lt;ul&gt; </span><br><span class="hljs-string">                                &lt;li&gt;项目名称：$&#123;JOB_NAME&#125;&lt;/li&gt;         </span><br><span class="hljs-string">                                &lt;li&gt;构建编号：$&#123;BUILD_ID&#125;&lt;/li&gt; </span><br><span class="hljs-string">                                &lt;li&gt;构建结果：&lt;span style=&quot;color:red&quot;&gt; $&#123;BUILD_STATUS&#125;&lt;/span&gt; &lt;/li&gt;                 </span><br><span class="hljs-string">                                &lt;li&gt;项目地址：&lt;a href=&quot;$&#123;BUILD_URL&#125;&quot;&gt;$&#123;BUILD_URL&#125;&lt;/a&gt;&lt;/li&gt;    </span><br><span class="hljs-string">                                &lt;li&gt;构建日志：&lt;a href=&quot;$&#123;BUILD_URL&#125;console&quot;&gt;$&#123;BUILD_URL&#125;console&lt;/a&gt;&lt;/li&gt; </span><br><span class="hljs-string">                            &lt;/ul&gt; </span><br><span class="hljs-string">                        &lt;/td&gt; </span><br><span class="hljs-string">                    &lt;/tr&gt; </span><br><span class="hljs-string">                    &lt;tr&gt;  </span><br><span class="hljs-string">                &lt;/table&gt; </span><br><span class="hljs-string">            &lt;/body&gt; </span><br><span class="hljs-string">            &lt;/html&gt;  &quot;&quot;&quot;</span>,<br>            subject: <span class="hljs-string">&quot;Jenkins-$&#123;JOB_NAME&#125;项目构建信息 &quot;</span>,<br>            to: <span class="hljs-string">&quot;$emailUser&quot;</span><br>    &#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>7、完成后截图：</p><p>写入流水线语法</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220914160659411.png" alt="image-20220914160659411"></p><p>gitlab上新增了test分支，jenkins贴入语法后，jenkins构建时可以选择分支：</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220914160848816.png" alt="image-20220914160848816"></p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220914161113131.png" alt="image-20220914161113131"></p><p>选择分支构建后，编译完成，harbor仓库推送镜像，并会发送邮件：</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220914170126609.png" alt="image-20220914170126609"></p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220914161149196.png" alt="image-20220914161149196"></p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220914161644205.png" alt="image-20220914161644205"></p><p>编译部署完成后，在192.168.94.155服务器上可以看到该docker镜像已运行，但因为是demo，会一直重启，日志可以看到信息</p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0.assets/image-20220914161444375.png" alt="image-20220914161444375"></p><p><img src="/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%9B%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1.assets/image-20220914161539752.png" alt="image-20220914161539752"></p>]]></content>
    
    
    
    <tags>
      
      <tag>张振州原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/23/hello-world/"/>
    <url>/2023/03/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
