<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Nacos集群搭建</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/Nacos/Nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/Nacos/Nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Nacos集群搭建"><a href="#Nacos集群搭建" class="headerlink" title="Nacos集群搭建"></a>Nacos集群搭建</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html<br></code></pre></td></tr></table></figure><h2 id="1、Nacos集群部署架构"><a href="#1、Nacos集群部署架构" class="headerlink" title="1、Nacos集群部署架构"></a>1、Nacos集群部署架构</h2><p><strong>生产环境大多使用集群模式以确保高可用。</strong></p><p>nacos集群架构图如下：</p><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/Nacos/Nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/Nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%5C28cba1735c84ae4b24d3564c61f34dc4.png" alt="image-20220415183010933"></p><p>nacos支持三种部署模式：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">- 单击模式：用于测试和单击试用。<br>- 集群模式：用于生产环境，确保高可用。<br>- 多集群模式：用于多数据中心场景。<br></code></pre></td></tr></table></figure><p>  官方推荐的集群方案，通过域名 + VIP模式的方式来实现，VIP模式就用 Nginx 就行，用它来负载多个 Nacos 节点 IP，外部客户端直接通过域名访问就可，不仅可读性好，而且更换 IP 方便，最为推荐采用！</p><h2 id="2、环境准备"><a href="#2、环境准备" class="headerlink" title="2、环境准备"></a>2、环境准备</h2><ul><li><strong>安装好 JDK，需要 1.8 及其以上版本</strong></li><li>建议: 2核 CPU &#x2F; 4G 内存 及其以上</li></ul><table><thead><tr><th>主机名</th><th>IP地址</th><th>备注</th></tr></thead><tbody><tr><td>nacos-1</td><td>192.168.62.128</td><td>使用默认的8848端口、安装docker运行mysql单节点</td></tr><tr><td>nacos-2</td><td>192.168.62.129</td><td>使用默认的8848端口</td></tr><tr><td>nacos-3</td><td>192.168.62.130</td><td>使用默认的8848端口、安装nginx</td></tr></tbody></table><h2 id="3、开始安装"><a href="#3、开始安装" class="headerlink" title="3、开始安装"></a>3、开始安装</h2><h3 id="1、创建工作目录并下载安装包（nacos-1、nacos-2、nacos-3均需要下载）"><a href="#1、创建工作目录并下载安装包（nacos-1、nacos-2、nacos-3均需要下载）" class="headerlink" title="1、创建工作目录并下载安装包（nacos-1、nacos-2、nacos-3均需要下载）"></a>1、创建工作目录并下载安装包（nacos-1、nacos-2、nacos-3均需要下载）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建工作目录</span><br><span class="hljs-built_in">mkdir</span> /app &amp;&amp; <span class="hljs-built_in">cd</span> /app<br><br><span class="hljs-comment">#下载安装包，下载地址：https://github.com/alibaba/nacos/tags</span><br>wget https://github.com/alibaba/nacos/releases/download/1.3.0/nacos-server-1.3.0.tar.gz<br><br><span class="hljs-comment">#解压并进入目录</span><br>tar -xnf nacos-server-1.3.0.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> nacos<br></code></pre></td></tr></table></figure><h3 id="2、修改配置文件（nacos-1、nacos-2、nacos-3均需要做修改）"><a href="#2、修改配置文件（nacos-1、nacos-2、nacos-3均需要做修改）" class="headerlink" title="2、修改配置文件（nacos-1、nacos-2、nacos-3均需要做修改）"></a>2、修改配置文件（nacos-1、nacos-2、nacos-3均需要做修改）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#conf文件夹中有cluster.conf.example，复制一份并更名成conf文件，直接使用如下追加命令修改配置文件则不需要执行该步骤</span><br><span class="hljs-comment">#cp conf/cluster.conf.example conf/cluster.conf</span><br><br><span class="hljs-comment">#修改配置文件</span><br><span class="hljs-comment">##配置成ip:port</span><br><span class="hljs-built_in">echo</span> 192.168.62.128:8848 &gt; conf/cluster.conf<br><span class="hljs-built_in">echo</span> 192.168.62.129:8848 &gt;&gt; conf/cluster.conf<br><span class="hljs-built_in">echo</span> 192.168.62.130:8848 &gt;&gt; conf/cluster.conf<br></code></pre></td></tr></table></figure><h3 id="3、配置MySQL数据库（使用外置数据源）（nacos-1机器上操作，运行mysql）"><a href="#3、配置MySQL数据库（使用外置数据源）（nacos-1机器上操作，运行mysql）" class="headerlink" title="3、配置MySQL数据库（使用外置数据源）（nacos-1机器上操作，运行mysql）"></a>3、配置MySQL数据库（使用外置数据源）（nacos-1机器上操作，运行mysql）</h3><p>生产环境中数据库使用建议至少主备模式，或者采用高可用数据库。以下为了简化，使用docker运行一个mysql容器实现</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#使用docker运行一个mysql</span><br>docker run -p 3306:3306 \<br>--name mysql -e TZ=Asia/Shanghai \<br>--restart=always \<br>-v /app/mysql/conf:/etc/mysql/conf.d \<br>-v /app/mysql/log:/logs \<br>-v /app/mysql/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-d mysql:5.7<br></code></pre></td></tr></table></figure><p>连接mysql数据库，并创建名为：nacos_config的数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">create database nacos_config;<br></code></pre></td></tr></table></figure><p>将conf文件夹下的nacos-mysql.sql脚本在mysql中执行（复制到容器或者安装mysql插件宿主机执行）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#宿主机（服务器）上执行</span><br>mysql -uroot -p123456 nacos_config &lt; conf/nacos-mysql.sql<br><br><span class="hljs-comment">#以下为复制到容器内执行</span><br>docker <span class="hljs-built_in">cp</span> conf/nacos-mysql.sql mysql:/<br>mysql -uroot -p123456 nacos_config &lt; /nacos-mysql.sql<br><br></code></pre></td></tr></table></figure><h3 id="4、修改application-properties（nacos-1、nacos-2、nacos-3中都需要修改）"><a href="#4、修改application-properties（nacos-1、nacos-2、nacos-3中都需要修改）" class="headerlink" title="4、修改application.properties（nacos-1、nacos-2、nacos-3中都需要修改）"></a>4、修改application.properties（nacos-1、nacos-2、nacos-3中都需要修改）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim conf/application.properties<br><span class="hljs-comment">#----------修改以下内容--------------------</span><br>server.port=8848 <span class="hljs-comment">#端口号，默认8848，可根据实际情况更改</span><br><br>spring.datasource.platform=mysql<br><br><span class="hljs-comment"># Count of DB:</span><br>db.num=1<br><br><span class="hljs-comment"># Connect URL of DB:</span><br>db.url.0=jdbc:mysql://192.168.62.128:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=<span class="hljs-literal">true</span>&amp;useUnicode=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC （复制问号?前面内容即可）<br>rue&amp;useUnicode=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC<br>db.user=root<span class="hljs-comment">#数据库连接用户名，生产环境可设置其他用户名和密码</span><br>db.password=123456<span class="hljs-comment">#连接密码</span><br><br></code></pre></td></tr></table></figure><h3 id="5、-启动服务器-nacos-1、nacos-2、nacos-3启动）"><a href="#5、-启动服务器-nacos-1、nacos-2、nacos-3启动）" class="headerlink" title="5、 启动服务器 (nacos-1、nacos-2、nacos-3启动）"></a>5、 启动服务器 (nacos-1、nacos-2、nacos-3启动）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">sh bin/startup.sh<br><br><span class="hljs-comment">#将输出以集群模式(cluster)启动的日志提示：</span><br>nacos is starting with cluster<br>nacos is starting，you can check the /app/nacos/nacos/logs/start.out<br><br><span class="hljs-comment">#可使用jps命令查看是否运行</span><br><span class="hljs-comment">#备注：当服务器配置过低时可能会导致服务起不来，可修改bin/startup.sh中的Xms配置</span><br>JAVA_OPT=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=256m&quot;</span><br></code></pre></td></tr></table></figure><h3 id="6、访问三台节点的控制台查看是否成功-ip-端口-x2F-nacos"><a href="#6、访问三台节点的控制台查看是否成功-ip-端口-x2F-nacos" class="headerlink" title="6、访问三台节点的控制台查看是否成功(ip+端口&#x2F;nacos)"></a>6、访问三台节点的控制台查看是否成功(ip+端口&#x2F;nacos)</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">访问地址：192.168.62.128:8848/nacos、192.168.62.129:8848/nacos、192.168.62.130:8848/nacos<br>初始账号：nacos<br>初始密码：nacos<br><br>#登录进去后。点击集群管理&gt;-节点管理；可看到nacos集群存在<br></code></pre></td></tr></table></figure><h3 id="7、使用nginx做负载均衡-nacos-3上安装了nginx"><a href="#7、使用nginx做负载均衡-nacos-3上安装了nginx" class="headerlink" title="7、使用nginx做负载均衡(nacos-3上安装了nginx)"></a>7、使用nginx做负载均衡(nacos-3上安装了nginx)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#修改nginx文件</span><br>vim default.conf<br><br>upstream nacos&#123;<br>        server 192.168.62.128:8848;<br>        server 192.168.62.129:8848;<br>        server 192.168.62.130:8848;<br>&#125;<br>server &#123;<br>        listen 8888;<br>        server_name localhost;<br>        location / &#123;<br>            proxy_set_header Host <span class="hljs-variable">$http_host</span>;<br>            proxy_set_header X-Forwarded-For <span class="hljs-variable">$remote_addr</span>;<br>            client_body_buffer_size 10M;<br>            client_max_body_size 10G;<br>            proxy_buffers 1024 4k;<br>            proxy_read_timeout 300;<br>            proxy_next_upstream error <span class="hljs-built_in">timeout</span> http_404;<br>            proxy_pass http://nacos;<br>        &#125;<br>&#125;<br><br><br><span class="hljs-comment">#修改后启动nginx!</span><br><span class="hljs-comment">#即可通过：http://192.168.62.130:8888/nacos 访问nacos页面</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Nacos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka安装部署及使用(集群)</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E9%9B%86%E7%BE%A4)/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E9%9B%86%E7%BE%A4)/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Kafka集群搭建（多节点多Broker）"><a href="#Kafka集群搭建（多节点多Broker）" class="headerlink" title="Kafka集群搭建（多节点多Broker）"></a>Kafka集群搭建（多节点多Broker）</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考博客：https://blog.csdn.net/mengshicheng1992/article/details/119730753<br></code></pre></td></tr></table></figure><p>备注：生产环境中为确保高可用时，一般使用集群部署（即：多节点多Broker，以集群的方式来部署Kafka）</p><p>注意：Kafka强依赖ZooKeeper(以下简称ZK），部署Kafka集群，需要先安装ZK集群。</p><p><strong>以下操作如未指定，则命令在所有节点上执行！</strong></p><h2 id="一、系统资源及组件规划"><a href="#一、系统资源及组件规划" class="headerlink" title="一、系统资源及组件规划"></a>一、系统资源及组件规划</h2><table><thead><tr><th>节点名称</th><th>CPU&#x2F;内存</th><th>IP地址</th><th>节点角色</th></tr></thead><tbody><tr><td>Kafka1</td><td>2CPU&#x2F;4G&#x2F;40G</td><td>192.168.62.128</td><td>Kafka、ZooKeeper</td></tr><tr><td>Kafka2</td><td>2CPU&#x2F;4G&#x2F;40G</td><td>192.168.62.129</td><td>Kafka、ZooKeeper</td></tr><tr><td>Kafka3</td><td>2CPU&#x2F;4G&#x2F;40G</td><td>192.168.62.130</td><td>Kafka、ZooKeeper</td></tr></tbody></table><h2 id="二、系统软件安装与设置"><a href="#二、系统软件安装与设置" class="headerlink" title="二、系统软件安装与设置"></a>二、系统软件安装与设置</h2><h3 id="1、系统初始设置"><a href="#1、系统初始设置" class="headerlink" title="1、系统初始设置"></a>1、系统初始设置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">1）修改主机名<br><br>2）安装依赖包<br>yum -y install vim lrzsz bash-completion<br><br>3)设置NTP时间同步<br>yum -y install chrony<br><br><span class="hljs-comment">#启动chrony并设置自启动</span><br>systemctl start chronyd<br>systemctl <span class="hljs-built_in">enable</span> chronyd<br>systemctl status chronyd<br><br>chronyc sources<br><br>4）设置SELinux、关闭防火墙<br><br></code></pre></td></tr></table></figure><h3 id="2、设置名称解析"><a href="#2、设置名称解析" class="headerlink" title="2、设置名称解析"></a>2、设置名称解析</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> 192.168.62.128 kafka1 &gt;&gt; /etc/hosts<br><span class="hljs-built_in">echo</span> 192.168.62.129 kafka2 &gt;&gt; /etc/hosts<br><span class="hljs-built_in">echo</span> 192.168.62.130 kafka3 &gt;&gt; /etc/hosts<br></code></pre></td></tr></table></figure><h2 id="三、搭建Kafka高可用集群"><a href="#三、搭建Kafka高可用集群" class="headerlink" title="三、搭建Kafka高可用集群"></a>三、搭建Kafka高可用集群</h2><h3 id="1、安装JDK"><a href="#1、安装JDK" class="headerlink" title="1、安装JDK"></a>1、安装JDK</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#已略过，详情可参考《配置java环境》文档或执行《jdk安装.sh》脚本</span><br></code></pre></td></tr></table></figure><h3 id="2、安装zookeeper"><a href="#2、安装zookeeper" class="headerlink" title="2、安装zookeeper"></a>2、安装zookeeper</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#已略过，详情可参考《liunx之Zookeeper集群搭建》文档</span><br></code></pre></td></tr></table></figure><h3 id="3、下载并安装Kafka"><a href="#3、下载并安装Kafka" class="headerlink" title="3、下载并安装Kafka"></a>3、下载并安装Kafka</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#下载Kafka</span><br><span class="hljs-comment">#下载地址：http://kafka.apache.org/downloads</span><br>wget https://dlcdn.apache.org/kafka/3.3.1/kafka_2.13-3.3.1.tgz --no-check-certificate<br><br><span class="hljs-comment">#解压到指定目录</span><br>tar -xnf kafka_2.13-3.3.1.tgz -C /app/<br><br><span class="hljs-comment">#更名或者设置软链接</span><br><span class="hljs-built_in">mv</span> /app/kafka_2.13-3.3.1 /app/kafka<br><br><span class="hljs-comment">#设置环境变量</span><br>vim /etc/profile<br><br><span class="hljs-built_in">export</span> KAFKA_HOME=/app/kafka<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$KAFKA_HOME</span>/bin<br><br><span class="hljs-comment">#使之生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="4、配置Kafka集群"><a href="#4、配置Kafka集群" class="headerlink" title="4、配置Kafka集群"></a>4、配置Kafka集群</h3><p>在所有Kafka节点上修改&#x2F;app&#x2F;kafka&#x2F;config&#x2F;server.properties文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /app/kafka/config/server.properties &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string"></span><br><span class="hljs-string">#broker的全局唯一编号，不能重复,各环节修改编号分别为：0,1,2</span><br><span class="hljs-string">broker.id=0</span><br><span class="hljs-string"># 配置监听</span><br><span class="hljs-string">listeners=PLAINTEXT://192.168.62.129:9092</span><br><span class="hljs-string">advertised.listeners=PLAINTEXT://192.168.62.129:9092</span><br><span class="hljs-string"># 处理网络请求的线程数量，默认</span><br><span class="hljs-string">num.network.threads=3</span><br><span class="hljs-string"># 用来处理磁盘IO的线程数量，默认</span><br><span class="hljs-string">num.io.threads=8</span><br><span class="hljs-string"># 发送套接字的缓冲区大小，默认</span><br><span class="hljs-string">socket.send.buffer.bytes=102400</span><br><span class="hljs-string"># 接收套接字的缓冲区大小，默认</span><br><span class="hljs-string">socket.receive.buffer.bytes=102400</span><br><span class="hljs-string"># 请求套接字的缓冲区大小，默认</span><br><span class="hljs-string">socket.request.max.bytes=104857600</span><br><span class="hljs-string">#日志文件存放路径</span><br><span class="hljs-string">log.dirs=/tmp/kafka-logs</span><br><span class="hljs-string"># topic 在当前broker上的分片个数，默认为1</span><br><span class="hljs-string">num.partitions=1</span><br><span class="hljs-string"># 用来恢复和清理data下数据的线程数量，默认</span><br><span class="hljs-string">num.recovery.threads.per.data.dir=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">offsets.topic.replication.factor=1</span><br><span class="hljs-string">transaction.state.log.replication.factor=1</span><br><span class="hljs-string">transaction.state.log.min.isr=1</span><br><span class="hljs-string"># segment文件保留的最长时间，超时将被删除，默认</span><br><span class="hljs-string">log.retention.hours=168</span><br><span class="hljs-string"></span><br><span class="hljs-string">log.segment.bytes=1073741824</span><br><span class="hljs-string">log.retention.check.interval.ms=300000</span><br><span class="hljs-string"># 滚动生成新的segment文件的最大时间，默认</span><br><span class="hljs-string">log.roll.hours=168</span><br><span class="hljs-string"></span><br><span class="hljs-string">zookeeper.connect=kafka1:2181,kafka2:2181,kafka3:2181</span><br><span class="hljs-string">zookeeper.connection.timeout.ms=18000</span><br><span class="hljs-string">group.initial.rebalance.delay.ms=0</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="5、启动Kafka集群"><a href="#5、启动Kafka集群" class="headerlink" title="5、启动Kafka集群"></a>5、启动Kafka集群</h3><p>在所有Kafka节点上启动Kafka</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">kafka-server-start.sh -daemon /app/kafka/config/server.properties<br><br><span class="hljs-comment">#查看Kafka进程：</span><br>jps<br></code></pre></td></tr></table></figure><h3 id="6、查看集群是否加入"><a href="#6、查看集群是否加入" class="headerlink" title="6、查看集群是否加入"></a>6、查看集群是否加入</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#连接zookeeper</span><br>zkCli.sh -server localhost:2181<br><br><span class="hljs-built_in">ls</span> /brokers/ids<br><br>输出：[0, 1, 2]代表已经有三个节点加入<br><br><br><span class="hljs-comment">#完全清理kafka和zookeeper数据：</span><br><span class="hljs-comment">##停止kafka</span><br>jps<br><br><span class="hljs-built_in">kill</span> -9 kafka进程ID<br><br><span class="hljs-comment">##然后删除kafka日志目录</span><br><span class="hljs-built_in">rm</span> -rf /tmp/kafka-logs<br><br><span class="hljs-comment">##连接zookeeper</span><br>zkCli.sh -server localhost:2181<br><br><span class="hljs-comment">##查看数据</span><br><span class="hljs-built_in">ls</span> /<br><br><span class="hljs-comment">##删除/下的数据（除zookeeper）</span><br>rmr /config<br><br></code></pre></td></tr></table></figure><h3 id="7、Kafka功能演示"><a href="#7、Kafka功能演示" class="headerlink" title="7、Kafka功能演示"></a>7、Kafka功能演示</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建topic（指定副本数量为3）</span><br>kafka-topics.sh --create --bootstrap-server kafka1:9092 --replication-factor 3 --partitions 2 --topic <span class="hljs-built_in">test</span><br><br><span class="hljs-comment">#查看所有的topic信息</span><br>kafka-topics.sh --list  --bootstrap-server kafka3:9092<br><br><span class="hljs-comment">#启动生产者</span><br>kafka-console-producer.sh --broker-list kafka1:9092,kafka2:9092,kafka3:9092 --topic <span class="hljs-built_in">test</span><br><br><span class="hljs-comment">#启动消费者</span><br>kafka-console-consumer.sh --bootstrap-server kafka2:9092 --topic <span class="hljs-built_in">test</span> --from-beginning<br><br><span class="hljs-comment">#删除topic</span><br>kafka-topics.sh --alter --bootstrap-server kafka2:9092 --topic <span class="hljs-built_in">test</span> --delete-config flush.messages<br><br></code></pre></td></tr></table></figure><h2 id="四、把zookeeper和kafka做成系统服务并开机自动启动（可以把之前在终端执行的启动命令关了，不然起不来）"><a href="#四、把zookeeper和kafka做成系统服务并开机自动启动（可以把之前在终端执行的启动命令关了，不然起不来）" class="headerlink" title="四、把zookeeper和kafka做成系统服务并开机自动启动（可以把之前在终端执行的启动命令关了，不然起不来）"></a>四、把zookeeper和kafka做成系统服务并开机自动启动（可以把之前在终端执行的启动命令关了，不然起不来）</h2><h3 id="把zookeeper做成系统服务"><a href="#把zookeeper做成系统服务" class="headerlink" title="把zookeeper做成系统服务"></a>把zookeeper做成系统服务</h3><h4 id="1、设置zookeeper的环境变量"><a href="#1、设置zookeeper的环境变量" class="headerlink" title="1、设置zookeeper的环境变量"></a>1、设置zookeeper的环境变量</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /home/zk/zookeeper/bin/zkEnv.sh<br><br><span class="hljs-comment">#添加java环境变量,服务启动时依赖java环境，不然会启动不了</span><br>JAVA_HOME=/opt/jdk<br><br></code></pre></td></tr></table></figure><h4 id="2、创建zookeeper的service文件"><a href="#2、创建zookeeper的service文件" class="headerlink" title="2、创建zookeeper的service文件"></a>2、创建zookeeper的service文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /lib/systemd/system/zookeeper.service <br><br>[Unit]<br>Description=Zookeeper<br>After=network.target remote-fs.target nss-lookup.target<br> <br>[Service]<br>Type=forking<br>ExecStart=/home/zk/zookeeper/bin/zkServer.sh start /home/zk/zookeeper/conf/zoo.cfg<br>ExecReload=/bin/kill -s HUP <span class="hljs-variable">$MAINPID</span><br>ExecStop=/home/zk/zookeeper/bin/zkServer.sh stop<br> <br>[Install]<br>WantedBy=multi-user.target<br><br></code></pre></td></tr></table></figure><h4 id="3、启动zookeeper服务并设置开机启动"><a href="#3、启动zookeeper服务并设置开机启动" class="headerlink" title="3、启动zookeeper服务并设置开机启动"></a>3、启动zookeeper服务并设置开机启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start zookeeper<br>systemctl <span class="hljs-built_in">enable</span> zookeeper<br></code></pre></td></tr></table></figure><h3 id="把kafka做成系统服务"><a href="#把kafka做成系统服务" class="headerlink" title="把kafka做成系统服务"></a>把kafka做成系统服务</h3><h4 id="1、创建kafka-service文件"><a href="#1、创建kafka-service文件" class="headerlink" title="1、创建kafka.service文件"></a>1、创建kafka.service文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /lib/systemd/system/kafka.service<br><br>[Unit]<br>Description=kafka<br>After=network.target remote-fs.target nss-lookup.target zookeeper.service<br> <br>[Service]<br>Type=forking<br>Environment=<span class="hljs-string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/jdk/bin&quot;</span><br>ExecStart=/app/kafka/bin/kafka-server-start.sh -daemon /app/kafka/config/server.properties<br>ExecReload=/bin/kill -s HUP <span class="hljs-variable">$MAINPID</span><br>ExecStop=/app/kafka/bin/kafka-server-stop.sh<br><span class="hljs-comment">#PrivateTmp=true</span><br> <br>[Install]<br>WantedBy=multi-user.target<br><br></code></pre></td></tr></table></figure><p>注意：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">[service]<br>Type 服务启动类型， forking：后台启动<br>Environment 为依赖的环境，“/opt/jdk/bin”是自己jdk的安装路径<br>ExecStart 定义启动的命令，“/app/kafka/” 为自己的kafka安装路径，“-daemon”：后台启动<br>ExecReload? 定义重启命令，“/bin/kill -s HUP <span class="hljs-variable">$MAINPID</span>” 通用重启命令<br>ExecStop 定义停止命令<br>PrivateTmp 是否分配独立空间，若分配，则jps将查不到。<br></code></pre></td></tr></table></figure><h4 id="2、启动kafka服务并设置开机启动"><a href="#2、启动kafka服务并设置开机启动" class="headerlink" title="2、启动kafka服务并设置开机启动"></a>2、启动kafka服务并设置开机启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start kafka<br><br>systemctl <span class="hljs-built_in">enable</span> kafka<br></code></pre></td></tr></table></figure><p>查看服务日志：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">journalctl -u kafka -f<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka安装部署及使用(单节点)</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Kafka安装部署及使用-单节点"><a href="#Kafka安装部署及使用-单节点" class="headerlink" title="Kafka安装部署及使用(单节点)"></a>Kafka安装部署及使用(单节点)</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文献：https://blog.csdn.net/HG_Harvey/article/details/79174104<br></code></pre></td></tr></table></figure><p>备注：单节点单Broker部署、单节点多Broker部署、集群部署（多节点多Broker）。实际生产环境中使用的是第三种方式，以集群的方式来部署Kafka。</p><p>注意：Kafka强依赖ZooKeeper(以下简称ZK），如果想要使用Kafka，就必须安装ZK，Kafka中的消费偏置信息、kafka集群、topic信息会被存储在ZK中。有人可能会说我在使用Kafka的时候就没有安装ZK，那是因为Kafka内置了一个ZK，一般我们不使用它</p><p>Kafka中单节点部署又分为两种，一种为单节点单Broker部署，一种为单节点多Broker部署。因为是单节点的Kafka，所以在安装ZK时也只需要单节点即可。</p><p>ZooKeeper官网：<a href="http://zookeeper.apache.org/">http://zookeeper.apache.org/</a></p><h2 id="1、安装Zookeeper-下列为单节点，集群模式可参考文档-lt-liunx搭建Zookeeper集群搭建-gt"><a href="#1、安装Zookeeper-下列为单节点，集群模式可参考文档-lt-liunx搭建Zookeeper集群搭建-gt" class="headerlink" title="1、安装Zookeeper(下列为单节点，集群模式可参考文档&lt;liunx搭建Zookeeper集群搭建&gt;)"></a>1、安装Zookeeper(下列为单节点，集群模式可参考文档&lt;liunx搭建Zookeeper集群搭建&gt;)</h2><h3 id="1-1、安装JDK"><a href="#1-1、安装JDK" class="headerlink" title="1.1、安装JDK"></a>1.1、安装JDK</h3><h3 id="1-2、创建zookeeper用户-集群各节点参照执行"><a href="#1-2、创建zookeeper用户-集群各节点参照执行" class="headerlink" title="1.2、创建zookeeper用户 (集群各节点参照执行)"></a>1.2、创建zookeeper用户 (集群各节点参照执行)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">useradd zk<br>passwd zk<br>&gt;输入密码<br><br>su - zk<br></code></pre></td></tr></table></figure><h3 id="1-3、下载Zookeeper最新稳定版"><a href="#1-3、下载Zookeeper最新稳定版" class="headerlink" title="1.3、下载Zookeeper最新稳定版"></a>1.3、下载Zookeeper最新稳定版</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://mirrors.bfsu.edu.cn/apache/zookeeper/zookeeper-3.5.10/apache-zookeeper-3.5.10-bin.tar.gz --no-check-certificate<br><span class="hljs-comment">#其他版本：https://mirrors.bfsu.edu.cn/apache/zookeeper</span><br></code></pre></td></tr></table></figure><h3 id="1-4、解压Zookeeper压缩包"><a href="#1-4、解压Zookeeper压缩包" class="headerlink" title="1.4、解压Zookeeper压缩包"></a>1.4、解压Zookeeper压缩包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -xnf apache-zookeeper-3.5.10-bin.tar.gz<br><br><span class="hljs-comment">#设置软链接：</span><br><span class="hljs-built_in">ln</span> -s apache-zookeeper-3.5.10-bin zookeeper<br></code></pre></td></tr></table></figure><h3 id="1-5、修改配置文件zoo-cfg"><a href="#1-5、修改配置文件zoo-cfg" class="headerlink" title="1.5、修改配置文件zoo.cfg"></a>1.5、修改配置文件zoo.cfg</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> data<br><span class="hljs-built_in">cd</span> zookeeper/conf<br><span class="hljs-built_in">cp</span> zoo_sample.cfg zoo.cfg<br><br><span class="hljs-comment">#编辑cfg文件，配置如下：</span><br>vim  zoo.cfg<br><br>tickTime=2000<br>initLimit=10<br>syncLimit=5<br>dataDir=/home/zk/data<br></code></pre></td></tr></table></figure><h3 id="1-6、启动Zookeeper服务"><a href="#1-6、启动Zookeeper服务" class="headerlink" title="1.6、启动Zookeeper服务"></a>1.6、启动Zookeeper服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~/zookeeper/bin/<br>./zkServer.sh start<br></code></pre></td></tr></table></figure><h3 id="1-7、设置环境变量"><a href="#1-7、设置环境变量" class="headerlink" title="1.7、设置环境变量"></a>1.7、设置环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#需切换为root用户</span><br>vim /etc/profile<br><br><span class="hljs-built_in">export</span> ZOOKEEPER_HOME=/home/zk/zookeeper<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$ZOOKEEPER_HOME</span>/bin<br><br><span class="hljs-comment">#使之生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br><br><span class="hljs-comment">#测试是否生效</span><br>zkServer.sh status<br></code></pre></td></tr></table></figure><h2 id="2、Kafka-单节点单Broker部署及使用"><a href="#2、Kafka-单节点单Broker部署及使用" class="headerlink" title="2、Kafka 单节点单Broker部署及使用"></a>2、Kafka 单节点单Broker部署及使用</h2><p>架构图：</p><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)%5Cimage-20221020164316467.png" alt="img"></p><h3 id="2-1、下载Kafka"><a href="#2-1、下载Kafka" class="headerlink" title="2.1、下载Kafka"></a>2.1、下载Kafka</h3><p><code>官网下载地址：http://kafka.apache.org/downloads</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#下载kafka安装包</span><br>wget https://dlcdn.apache.org/kafka/3.3.1/kafka_2.13-3.3.1.tgz --no-check-certificate<br><br><span class="hljs-comment">#解压到指定目录</span><br>tar -xnf kafka_2.13-3.3.1.tgz -C /app/<br><br><span class="hljs-comment">#更名或者设置软链接</span><br><span class="hljs-built_in">mv</span> /app/kafka_2.13-3.3.1 /app/kafka<br></code></pre></td></tr></table></figure><h3 id="2-2、配置kafka"><a href="#2-2、配置kafka" class="headerlink" title="2.2、配置kafka"></a>2.2、配置kafka</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#进入kafka的config目录下，并修改server.properties</span><br><span class="hljs-built_in">cd</span> /app/kafak/config/ &amp;&amp; vim server.properties <br><br><span class="hljs-comment"># broker的全局唯一编号，不能重复</span><br>broker.id=0<br><span class="hljs-comment"># 监听端口</span><br>listeners=PLAINTEXT://:9092<br><span class="hljs-comment"># 日志目录</span><br>log.dirs=/tmp/kafka-logs<br><span class="hljs-comment"># 配置zookeeper的连接（如果不是本机，需要该为ip或主机名）</span><br>zookeeper.connect=localhost:2181<br><br></code></pre></td></tr></table></figure><h3 id="2-3、启动zookeeper和kafka"><a href="#2-3、启动zookeeper和kafka" class="headerlink" title="2.3、启动zookeeper和kafka"></a>2.3、启动zookeeper和kafka</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#启动zookeeper</span><br>zkServer.sh start<br><br><span class="hljs-comment">#启动kafka</span><br>/app/kafka/bin/kafka-server-start.sh /app/kafka/config/server.properties<br><br><span class="hljs-comment"># 后台启动服务 , 运行的日志打印在 logs 目录里的server.log 里，不会打印日志到控制台</span><br><span class="hljs-comment">#方法1：</span><br>bin/kafka-server-start.sh -daemon config/server.properties<br><span class="hljs-comment">#方法2：</span><br>bin/kafka‐server‐start.sh config/server.properties &amp;<br><br><span class="hljs-comment">#停止kafka</span><br>bin/kafka‐server‐stop.sh<br><br><span class="hljs-comment">#输入jps查看进程，如果可以看到Kafka进程，表示启动成功</span><br>jps<br></code></pre></td></tr></table></figure><h3 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h3><p><code>参考官网：https://kafka.apache.org/30/documentation.html#quickstart</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/kafka<br><br><span class="hljs-comment">#创建topic</span><br>bin/kafka-topics.sh --create --topic test-topic --bootstrap-server localhost:9092 --replication-factor 1 --partitions 4<br><br><span class="hljs-comment">#参数详解：</span><br>--bootstrap-server: 指定kafka连接url<br>–-replication-factor：指定副本数量<br>–-partitions：指定分区数量<br>–-topic：主题名称<br><br><span class="hljs-comment">#查看所有的topic信息</span><br>bin/kafka-topics.sh --list  --bootstrap-server localhost:9092<br><span class="hljs-comment">#----------输出内容-------------</span><br>test-topic<br><br><span class="hljs-comment">#启动生产者</span><br>bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic<br>&gt;hello,word<br><br><br><span class="hljs-comment">#启动消费者</span><br>bin/kafka-console-consumer.sh  --topic test-topic --from-beginning --bootstrap-server localhost:9092<br><span class="hljs-comment">#----------输出内容-------------</span><br>hello,word<br><br><span class="hljs-comment">#参数详解：</span><br>--from-beginning：参数如果有表示从最开始消费数据，旧的和新的数据都会被消费，而没有该参数表示只会消费新产生的数据<br></code></pre></td></tr></table></figure><h2 id="3、Kafka-单节点多Broker部署及使用"><a href="#3、Kafka-单节点多Broker部署及使用" class="headerlink" title="3、Kafka 单节点多Broker部署及使用"></a>3、Kafka 单节点多Broker部署及使用</h2><p>部署架构<br><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)%5Cimage-20221020164810461.png" alt="image-20221020164810461"></p><h3 id="3-1、按照2-1步骤下载并解压kafka后，拷贝server-properties三份"><a href="#3-1、按照2-1步骤下载并解压kafka后，拷贝server-properties三份" class="headerlink" title="3.1、按照2.1步骤下载并解压kafka后，拷贝server.properties三份"></a>3.1、按照2.1步骤下载并解压kafka后，拷贝server.properties三份</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/kafka/config/<br><span class="hljs-built_in">cp</span> server.properties server-1.properties<br><span class="hljs-built_in">cp</span> server.properties server-2.properties<br><span class="hljs-built_in">cp</span> server.properties server-3.properties<br></code></pre></td></tr></table></figure><h3 id="3-2、修改配置文件"><a href="#3-2、修改配置文件" class="headerlink" title="3.2、修改配置文件"></a>3.2、修改配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim server-1.properties<br><br><span class="hljs-comment"># broker的全局唯一编号，不能重复</span><br>broker.id=1<br><span class="hljs-comment"># 监听</span><br>listeners=PLAINTEXT://:9093<br><span class="hljs-comment"># 日志目录</span><br>log.dirs=/tmp/kafka-logs-1<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim server-2.properties<br><br><span class="hljs-comment"># broker的全局唯一编号，不能重复</span><br>broker.id=2<br><span class="hljs-comment"># 监听</span><br>listeners=PLAINTEXT://:9094<br><span class="hljs-comment"># 日志目录</span><br>log.dirs=/tmp/kafka-logs-2<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim server-3.properties<br><br><span class="hljs-comment"># broker的全局唯一编号，不能重复</span><br>broker.id=3<br><span class="hljs-comment"># 监听</span><br>listeners=PLAINTEXT://:9095<br><span class="hljs-comment"># 日志目录</span><br>log.dirs=/tmp/kafka-logs-3<br></code></pre></td></tr></table></figure><h3 id="3-3、启动Zookeeper"><a href="#3-3、启动Zookeeper" class="headerlink" title="3.3、启动Zookeeper"></a>3.3、启动Zookeeper</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">zkServer.sh start<br></code></pre></td></tr></table></figure><h3 id="3-4、启动Kafka（分别启动server1、2、3）"><a href="#3-4、启动Kafka（分别启动server1、2、3）" class="headerlink" title="3.4、启动Kafka（分别启动server1、2、3）"></a>3.4、启动Kafka（分别启动server1、2、3）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/kafka<br><br>bin/kafka-server-start.sh -daemon config/server-1.properties<br>bin/kafka-server-start.sh -daemon config/server-2.properties<br>bin/kafka-server-start.sh -daemon config/server-3.properties<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看端口是否占用</span><br>netstat -lntup| grep java | grep 909<br><span class="hljs-comment">#出现9003、9004、9005端口</span><br><span class="hljs-comment">#查看进程</span><br>jps -m<br></code></pre></td></tr></table></figure><h3 id="3-5、创建topic（指定副本数量为3）"><a href="#3-5、创建topic（指定副本数量为3）" class="headerlink" title="3.5、创建topic（指定副本数量为3）"></a>3.5、创建topic（指定副本数量为3）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">bin/kafka-topics.sh --create --bootstrap-server localhost:9093 --replication-factor 3 --partitions 1 --topic my-replicated-topic<br><br><span class="hljs-comment">#输出Created topic my-replicated-topic.</span><br></code></pre></td></tr></table></figure><h3 id="3-6、查看所有的topic信息"><a href="#3-6、查看所有的topic信息" class="headerlink" title="3.6、查看所有的topic信息"></a>3.6、查看所有的topic信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">bin/kafka-topics.sh --list  --bootstrap-server localhost:9093<br><br><span class="hljs-comment">#查看某个topic的详细信息</span><br><br>bin/kafka-topics.sh --describe --bootstrap-server localhost:9093 --topic my-replicated-topic<br></code></pre></td></tr></table></figure><h3 id="3-7、启动生产者"><a href="#3-7、启动生产者" class="headerlink" title="3.7、启动生产者"></a>3.7、启动生产者</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">bin/kafka-console-producer.sh --broker-list localhost:9093,localhost:9094,localhost:9095 --topic my-replicated-topic<br></code></pre></td></tr></table></figure><h3 id="3-8、启动消费者"><a href="#3-8、启动消费者" class="headerlink" title="3.8、启动消费者"></a>3.8、启动消费者</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">bin/kafka-console-consumer.sh --bootstrap-server localhost:9093 --topic my-replicated-topic --from-beginning<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">kafka全部数据清空与某一topic数据清空：https://blog.csdn.net/wutongyuWxc/article/details/104546169<br>Kafka图形化工具Eagle:https://juejin.cn/post/6971224791793532941<br>kafka可视化客户端 https://www.studytime.xin/article/kafka-tool.html<br></code></pre></td></tr></table></figure><h3 id="3-9、单节点多borker容错性测试"><a href="#3-9、单节点多borker容错性测试" class="headerlink" title="3.9、单节点多borker容错性测试"></a>3.9、单节点多borker容错性测试</h3><p>Kafka是支持容错的，上面我们已经完成了Kafka单节点多Blocker的部署，下面我们来对Kafka的容错性进行测试，测试步骤如下:</p><h4 id="验证一：kill掉状态是follower的borker后，测试生产和消费的信息是否正确"><a href="#验证一：kill掉状态是follower的borker后，测试生产和消费的信息是否正确" class="headerlink" title="验证一：kill掉状态是follower的borker后，测试生产和消费的信息是否正确"></a>验证一：kill掉状态是follower的borker后，测试生产和消费的信息是否正确</h4><h5 id="1-查看topic的详细信息"><a href="#1-查看topic的详细信息" class="headerlink" title="(1)查看topic的详细信息"></a>(1)查看topic的详细信息</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">bin/kafka-topics.sh --describe --topic my-replicated-topic --bootstrap-server localhost:9093<br><br><span class="hljs-comment">#输出信息中可以看到3为leader, 1和2为follower</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)%5Cimage-20221020152107702.png" alt="image-20221020152107702"></p><h5 id="2-kill掉状态是follower的borker（我这将follower为1的进程kill掉），测试生成和消费信息是否正确"><a href="#2-kill掉状态是follower的borker（我这将follower为1的进程kill掉），测试生成和消费信息是否正确" class="headerlink" title="(2)kill掉状态是follower的borker（我这将follower为1的进程kill掉），测试生成和消费信息是否正确"></a>(2)kill掉状态是follower的borker（我这将follower为1的进程kill掉），测试生成和消费信息是否正确</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看进程信息</span><br>jps -m<br><br><span class="hljs-built_in">kill</span> -9 进程<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)%5Cimage-20221020152801513.png" alt="image-20221020152801513"></p><h5 id="3-启动生产者和消费者，测试信息是否正确"><a href="#3-启动生产者和消费者，测试信息是否正确" class="headerlink" title="(3)启动生产者和消费者，测试信息是否正确"></a>(3)启动生产者和消费者，测试信息是否正确</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#启动生产者</span><br>bin/kafka-console-producer.sh --broker-list localhost:9093,localhost:9094,localhost:9095 --topic my-replicated-topic<br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)%5Cimage-20221020153446152.png" alt="image-20221020153446152"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#启动消费者</span><br>bin/kafka-console-consumer.sh --bootstrap-server localhost:9094 --topic my-replicated-topic --from-beginning<br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)%5Cimage-20221020153601755.png" alt="image-20221020153601755"></p><p><strong>结论：kill掉任意一个状态是follower的broker，生成和消费信息正确，不受任何影响</strong></p><h4 id="验证二：kill掉状态是Leader的borker后，测试生产和消费的信息是否正确"><a href="#验证二：kill掉状态是Leader的borker后，测试生产和消费的信息是否正确" class="headerlink" title="验证二：kill掉状态是Leader的borker后，测试生产和消费的信息是否正确"></a>验证二：kill掉状态是Leader的borker后，测试生产和消费的信息是否正确</h4><h5 id="1-查看topic详细信息，并kill掉状态为leader的borker"><a href="#1-查看topic详细信息，并kill掉状态为leader的borker" class="headerlink" title="(1)查看topic详细信息，并kill掉状态为leader的borker"></a>(1)查看topic详细信息，并kill掉状态为leader的borker</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">bin/kafka-topics.sh --describe --topic my-replicated-topic --bootstrap-server localhost:9094<br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)%5Cimage-20221020160243454.png" alt="image-20221020160243454"></p><h5 id="2-启动生产和消费者测试信息是否正确"><a href="#2-启动生产和消费者测试信息是否正确" class="headerlink" title="(2)启动生产和消费者测试信息是否正确"></a>(2)启动生产和消费者测试信息是否正确</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#启动生产者</span><br>bin/kafka-console-producer.sh --broker-list localhost:9093,localhost:9094,localhost:9095 --topic my-replicated-topic<br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)%5Cimage-20221020161457496.png" alt="image-20221020161457496"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#启动消费者</span><br>bin/kafka-console-consumer.sh --bootstrap-server localhost:9094 --topic my-replicated-topic --from-beginning<br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%8D%95%E8%8A%82%E7%82%B9)%5Cimage-20221020161607599.png" alt="image-20221020161607599"></p><p><strong>结论：kill掉状态是leader的borker，生产和消费的信息正确</strong></p><p><strong>根据验证一和验证二结果得知：不管当前状态的borker是leader还是follower，当我们kill掉后，只要有一个borker能够正常使用，则消息仍然能够正常的生产和发送。即Kafka的容错性是有保证的！</strong></p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker启动elasticsearch.md</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/docker%E5%90%AF%E5%8A%A8elasticsearch/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/docker%E5%90%AF%E5%8A%A8elasticsearch/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker启动elasticsearch-md"><a href="#docker启动elasticsearch-md" class="headerlink" title="docker启动elasticsearch.md"></a>docker启动elasticsearch.md</h1><h2 id="一、修改主机配置参数"><a href="#一、修改主机配置参数" class="headerlink" title="一、修改主机配置参数"></a>一、修改主机配置参数</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/sysctl.conf<br>vm.max_map_count=262144<br><br><span class="hljs-comment">#生效</span><br>sysctl -p<br><br>vim /etc/systemd/system.conf<br><br>DefaultLimitNOFILE=65536<br>DefaultLimitNPROC=32000<br>DefaultLimitMEMLOCK=infinity<br><br><span class="hljs-comment">#生效</span><br>systemctl daemon-reload<br><br>vim /etc/security/limits.conf<br><br>* soft nofile 65536<br>* hard nofile 65536<br>* soft <span class="hljs-built_in">nproc</span> 4096<br>* hard <span class="hljs-built_in">nproc</span> 4096<br>* hard memlock unlimited<br>* soft memlock unlimited<br><br></code></pre></td></tr></table></figure><h2 id="二、启动-elasticsearch"><a href="#二、启动-elasticsearch" class="headerlink" title="二、启动 elasticsearch"></a>二、启动 elasticsearch</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /data/elasticsearch/data<br><span class="hljs-built_in">mkdir</span> -p /data/elasticsearch/logs<br><span class="hljs-built_in">chmod</span> -R 777 /data/elasticsearch/data<br><span class="hljs-built_in">chmod</span> -R 777 /data/elasticsearch/logs<br>docker run -d --name=es7 \<br>  --restart=always \<br>  -p 9200:9200 -p 9300:9300 \<br>  -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \<br>  -v /data/elasticsearch/data:/usr/share/elasticsearch/data \<br>  -v /data/elasticsearch/logs:/usr/share/elasticsearch/logs \<br>elasticsearch:7.10.1<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name es_test \<br>-p 9200:9200 -p 9300:9300 \<br>-v /app/es/esdata:/data/elasticsearch/data \<br>-v /app/es/conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \<br>-e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms300m -Xmx300m&quot;</span> -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span>  ikpinyin:5.6.1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>elasticsearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>es</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch安装和辅助插件安装</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ElasticSearch安装和辅助插件安装"><a href="#ElasticSearch安装和辅助插件安装" class="headerlink" title="ElasticSearch安装和辅助插件安装"></a>ElasticSearch安装和辅助插件安装</h1><h2 id="一、ElasticSearch-安装"><a href="#一、ElasticSearch-安装" class="headerlink" title="一、ElasticSearch 安装"></a>一、ElasticSearch 安装</h2><h3 id="1、下载ElasticSearch安装包"><a href="#1、下载ElasticSearch安装包" class="headerlink" title="1、下载ElasticSearch安装包"></a>1、下载ElasticSearch安装包</h3><p>下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下载es安装包</span><br>wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.4.0-linux-x86_64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="2、执行解压操作"><a href="#2、执行解压操作" class="headerlink" title="2、执行解压操作"></a>2、执行解压操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 将elasticsearch-7.4.0-linux-x86_64.tar.gz解压到opt文件夹下. -C 大写</span><br>tar -zxvf elasticsearch-7.4.0-linux-x86_64.tar.gz  -C /opt<br></code></pre></td></tr></table></figure><h3 id="3、创建普通用户"><a href="#3、创建普通用户" class="headerlink" title="3、创建普通用户"></a>3、创建普通用户</h3><p>因为安全问题，Elasticsearch 不允许root用户直接运行，所以要创建新用户，在root用户中创建新用户,执行如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">useradd itheima  <span class="hljs-comment"># 新增itheima用户</span><br>passwd  itheima  <span class="hljs-comment"># 为itheima用户设置密码</span><br></code></pre></td></tr></table></figure><h3 id="4、为新用户授权，如下图"><a href="#4、为新用户授权，如下图" class="headerlink" title="4、为新用户授权，如下图"></a>4、为新用户授权，如下图</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chown</span> -R itheima:itheima /opt/elasticsearch-7.4.0 <span class="hljs-comment">#文件夹所有者</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/2226570-20210326181350582-2125565058.png" alt="img"></p><p>将 &#x2F;opt&#x2F;elasticsearch-7.4.0文件夹授权给itheima用户，由上图可见，我们的文件夹权限赋给了itheima</p><h3 id="5、修改elasticsearch-yml文件"><a href="#5、修改elasticsearch-yml文件" class="headerlink" title="5、修改elasticsearch.yml文件"></a>5、修改elasticsearch.yml文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /opt/elasticsearch-7.4.0/config/elasticsearch.yml <br><span class="hljs-comment"># ======================== Elasticsearch Configuration =========================</span><br>cluster.name: my-application<br>node.name: node-1<br>network.host: 0.0.0.0<br>http.port: 9200<br>cluster.initial_master_nodes: [<span class="hljs-string">&quot;node-1&quot;</span>]<br></code></pre></td></tr></table></figure><p>备注：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">cluster.name：配置elasticsearch的集群名称，默认是elasticsearch。建议修改成一个有意义的名称<br>node.name：节点名，elasticsearch会默认随机指定一个名字，建议指定一个有意义的名称，方便管理<br>network.host：设置为0.0.0.0允许外网访问<br>http.port：Elasticsearch的http访问端口<br>cluster.initial_master_nodes：初始化新的集群时需要此配置来选举master<br></code></pre></td></tr></table></figure><h3 id="6、修改配置文件"><a href="#6、修改配置文件" class="headerlink" title="6、修改配置文件"></a>6、修改配置文件</h3><p>新创建的itheima用户最大可创建文件数太小，最大虚拟内存太小，切换到root用户，编辑下列配置文件， 添加类似如下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 切换到root用户</span><br>su root <br><br><span class="hljs-comment">#1. ===最大可创建文件数太小=======</span><br>vim /etc/security/limits.conf <br><span class="hljs-comment"># 在文件末尾中增加下面内容</span><br>itheima soft nofile 65536<br>itheima hard nofile 65536<br><br>vim /etc/security/limits.d/20-nproc.conf<br><span class="hljs-comment"># 在文件末尾中增加下面内容</span><br>itheima soft nofile 65536<br>itheima hard nofile 65536<br>*  hard    <span class="hljs-built_in">nproc</span>     4096<br><span class="hljs-comment"># 注：* 代表Linux所有用户名称 </span><br><br><span class="hljs-comment">#2. ===最大虚拟内存太小=======</span><br>vim /etc/sysctl.conf<br><span class="hljs-comment"># 在文件中增加下面内容</span><br>vm.max_map_count=655360<br><br><span class="hljs-comment"># 重新加载，输入下面命令：</span><br>sysctl -p<br></code></pre></td></tr></table></figure><h3 id="7、启动elasticsearch"><a href="#7、启动elasticsearch" class="headerlink" title="7、启动elasticsearch"></a>7、启动elasticsearch</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#switch user</span><br>su itheima  <span class="hljs-comment"># 切换到itheima用户启动</span><br><span class="hljs-built_in">cd</span> /opt/elasticsearch-7.4.0/bin<br>./elasticsearch <span class="hljs-comment">#启动</span><br>./elasticsearch -d  <span class="hljs-comment">#后台启动</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/2226570-20210326181404318-915148786.png" alt="img"></p><p>通过上图我们可以看到elasticsearch已经成功启动</p><h3 id="8、设置elasticsearch为开机自启动服务"><a href="#8、设置elasticsearch为开机自启动服务" class="headerlink" title="8、设置elasticsearch为开机自启动服务"></a>8、设置elasticsearch为开机自启动服务</h3><h4 id="8-1、先查看当前的开机启动服务"><a href="#8-1、先查看当前的开机启动服务" class="headerlink" title="8.1、先查看当前的开机启动服务"></a>8.1、先查看当前的开机启动服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">chkconfig --list<br></code></pre></td></tr></table></figure><h4 id="8-2、创建es-的系统启动服务文件，进入到-cd-x2F-etc-x2F-init-d-目录，编写elasticsearch脚本"><a href="#8-2、创建es-的系统启动服务文件，进入到-cd-x2F-etc-x2F-init-d-目录，编写elasticsearch脚本" class="headerlink" title="8.2、创建es 的系统启动服务文件，进入到 cd &#x2F;etc&#x2F;init.d 目录，编写elasticsearch脚本"></a>8.2、创建es 的系统启动服务文件，进入到 cd &#x2F;etc&#x2F;init.d 目录，编写elasticsearch脚本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /etc/init.d    　　<span class="hljs-comment">#【进入到目录】</span><br><br>vim elasticsearch 　　 <span class="hljs-comment">#【创建es系统启动服务文件】</span><br><br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-comment"># chkconfig: - 85 15</span><br><span class="hljs-comment">#description: elasticsearch</span><br><span class="hljs-built_in">export</span> ES_HOME=/opt/elasticsearch-7.4.0<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span><br>start)<br>    su es&lt;&lt;!<br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$ES_HOME</span><br>    ./bin/elasticsearch -d -p pid<br>!<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;elasticsearch startup&quot;</span><br>    ;;  <br>stop)<br>    <span class="hljs-built_in">kill</span> -9 `<span class="hljs-built_in">cat</span> <span class="hljs-variable">$ES_HOME</span>/pid`<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;elasticsearch stopped&quot;</span><br>    ;;  <br>restart)<br>    <span class="hljs-built_in">kill</span> -9 `<span class="hljs-built_in">cat</span> <span class="hljs-variable">$ES_HOME</span>/pid`<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;elasticsearch stopped&quot;</span><br>    su es&lt;&lt;!<br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$ES_HOME</span><br>    ./bin/elasticsearch -d -p pid<br>!<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;elasticsearch startup&quot;</span><br>    ;;  <br>*)<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;start|stop|restart&quot;</span><br>    ;;  <br><span class="hljs-keyword">esac</span><br><span class="hljs-built_in">exit</span> $?<br></code></pre></td></tr></table></figure><h4 id="8-3、修改文件权限；"><a href="#8-3、修改文件权限；" class="headerlink" title="8.3、修改文件权限；"></a>8.3、修改文件权限；</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> 777 elasticsearch<br></code></pre></td></tr></table></figure><h4 id="8-4、添加和删除服务并设置启动方式；"><a href="#8-4、添加和删除服务并设置启动方式；" class="headerlink" title="8.4、添加和删除服务并设置启动方式；"></a>8.4、添加和删除服务并设置启动方式；</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">chkconfig --add elasticsearch　　　　<span class="hljs-comment"># 【添加系统服务】</span><br>chkconfig --del elasticsearch　　　　<span class="hljs-comment"># 【删除系统服务】</span><br></code></pre></td></tr></table></figure><h4 id="8-5、关闭和启动服务；"><a href="#8-5、关闭和启动服务；" class="headerlink" title="8.5、关闭和启动服务；"></a>8.5、关闭和启动服务；</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start elasticsearch   　　　<span class="hljs-comment"># 【启动服务】</span><br>systemctl stop elasticsearch 　　　　　 <span class="hljs-comment"># 【停止服务】</span><br>systemctl restart elasticsearch       <span class="hljs-comment"># 【重启服务】</span><br></code></pre></td></tr></table></figure><h4 id="8-6、设置服务是否开机启动；"><a href="#8-6、设置服务是否开机启动；" class="headerlink" title="8.6、设置服务是否开机启动；"></a>8.6、设置服务是否开机启动；</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#【开启服务】</span><br>chkconfig elasticsearch on　　　　　<br>systemctl <span class="hljs-built_in">enable</span> elasticsearch <br><span class="hljs-comment"># 【关闭服务】</span><br>chkconfig elasticsearch off　　   　<br>systemctl <span class="hljs-built_in">disable</span> elasticsearch <br><br></code></pre></td></tr></table></figure><h3 id="9-访问elasticsearch"><a href="#9-访问elasticsearch" class="headerlink" title="9. 访问elasticsearch"></a>9. 访问elasticsearch</h3><h4 id="在访问elasticsearch前，请确保防火墙是关闭的，执行命令："><a href="#在访问elasticsearch前，请确保防火墙是关闭的，执行命令：" class="headerlink" title="在访问elasticsearch前，请确保防火墙是关闭的，执行命令："></a>在访问elasticsearch前，请确保防火墙是关闭的，执行命令：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#暂时关闭防火墙</span><br>systemctl  stop  firewalld<br><br><span class="hljs-comment"># 或者</span><br><span class="hljs-comment">#永久设置防火墙状态</span><br>systemctl <span class="hljs-built_in">enable</span> firewalld.service  <span class="hljs-comment">#打开防火墙永久性生效，重启后不会复原 </span><br>systemctl <span class="hljs-built_in">disable</span> firewalld.service <span class="hljs-comment">#关闭防火墙，永久性生效，重启后不会复原 </span><br></code></pre></td></tr></table></figure><p>浏览器输入<a href="http://192.168.52.128:9200/%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE">http://192.168.52.128:9200/，如下图</a></p><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/2226570-20210326181413062-739940539.png" alt="img"></p><p>此时elasticsearch已成功启动：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs d">重点几个关注下即可:<br>numbe<span class="hljs-string">r&quot; : &quot;</span><span class="hljs-number">7.4</span><span class="hljs-number">.0</span><span class="hljs-string">&quot;   表示elasticsearch版本</span><br><span class="hljs-string">lucene_version&quot;</span> : <span class="hljs-string">&quot;8.2.0&quot;</span>  表示lucene版本<br>name ： 默认启动的时候指定了 ES 实例名称<br>cluster_name ： 默认名为 elasticsearch<br></code></pre></td></tr></table></figure><h2 id="二、-Elasticsearch辅助插件安装"><a href="#二、-Elasticsearch辅助插件安装" class="headerlink" title="二、 Elasticsearch辅助插件安装"></a>二、 Elasticsearch辅助插件安装</h2><h3 id="1-、Postman安装"><a href="#1-、Postman安装" class="headerlink" title="1 、Postman安装"></a>1 、Postman安装</h3><p>Postman是一个http模拟请求的工具。它是一个专门测试 API 的工具，Postman 提供功能强大的 Web API 和 HTTP 请求的调试，它能够发送任何类型的HTTP 请求 (GET, POST, PUT, DELETE…)，并且能附带任何数量的参数和 Headers。不仅如此，它还提供测试数据和环境配置数据的导入导出。</p><p>进入官网<a href="https://www.cnblogs.com/859630097com/p/www.getpostman.com">www.getpostman.com</a>，下载</p><h3 id="2、-Kibana安装"><a href="#2、-Kibana安装" class="headerlink" title="2、 Kibana安装"></a>2、 Kibana安装</h3><p>Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。</p><p>Kibana让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示Elasticsearch查询动态。</p><h4 id="2-1、上传并解压kibana"><a href="#2-1、上传并解压kibana" class="headerlink" title="2.1、上传并解压kibana"></a>2.1、上传并解压kibana</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#解压到当前目录（/opt）下</span><br>tar -xzf kibana-7.4.0-linux-x86_64.tar.gz -C /opt<br></code></pre></td></tr></table></figure><h4 id="2-2、修改kibana配置"><a href="#2-2、修改kibana配置" class="headerlink" title="2.2、修改kibana配置"></a>2.2、修改kibana配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /opt/kibana-7.4.0-linux-x86_64/config/kibana.yml<br>server.port: 5601<br>server.host: <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>server.name: <span class="hljs-string">&quot;kibana-itcast&quot;</span><br>elasticsearch.hosts: [<span class="hljs-string">&quot;http://127.0.0.1:9200&quot;</span>]<br>elasticsearch.requestTimeout: 99999<br><br><span class="hljs-comment">#参数解释：</span><br>server.port：http访问端口<br>server.host：ip地址，0.0.0.0表示可远程访问<br>server.name：kibana服务名<br>elasticsearch.hosts：elasticsearch地址<br>elasticsearch.requestTimeout：请求elasticsearch超时时间，默认为30000，此处可根据情况设置<br></code></pre></td></tr></table></figure><h4 id="2-3、启动kibana"><a href="#2-3、启动kibana" class="headerlink" title="2.3、启动kibana"></a>2.3、启动kibana</h4><p>由于kibana不建议使用root用户启动，如果用root启动，需要加–allow-root参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 切换到kibana的bin目录</span><br><span class="hljs-built_in">cd</span> /opt/kibana-7.4.0-linux-x86_64/bin<br><span class="hljs-comment"># 启动</span><br>./kibana --allow-root<br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/2226570-20210326181435785-1459362013.png" alt="img"></p><p>启动成功。</p><h4 id="2-4、访问kibana"><a href="#2-4、访问kibana" class="headerlink" title="2.4、访问kibana"></a>2.4、访问kibana</h4><p>浏览器输入http:&#x2F;&#x2F;服务器IP:5601&#x2F;，如下图：</p><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/2226570-20210326181443577-1850236452.png" alt="img"></p><p>看到这个界面，说明Kibanan已成功安装！。</p><p><code>Discover</code>：可视化查询分析器 <code>Visualize</code>：统计分析图表 <code>Dashboard</code>：自定义主面板（添加图表） <code>Timelion</code>：Timelion是一个kibana时间序列展示组件（暂时不用） <code>Dev Tools</code>：Console控制台（同CURL&#x2F;POSTER，操作ES代码工具，代码提示，很方便） <code>Management</code>：管理索引库(index)、已保存的搜索和可视化结果(save objects)、设置 kibana 服务器属性。</p><h3 id="3、head安装"><a href="#3、head安装" class="headerlink" title="3、head安装"></a>3、head安装</h3><p><strong>head简介</strong></p><p>head插件是ES的一个可视化管理插件，用来监视ES的状态，并通过head客户端和ES服务进行交互，比如创建映射、创建索引等。</p><p>在登陆和访问head插件地址和ElasticSearch前需要事先在服务器上安装和配置好ElasticSearch以及head插件。安装完后，默认head插件的web端口为9100，ElasticSearch服务的端口为9200，使用浏览器访问head地址，如<a href="http://10.82.25.183:9100/">http://IP地址:9100/</a>，推荐使用Chrome浏览器，head插件对Chrome浏览器兼容更佳。进入head页面后将ElasticSearch连接输入框中填写正确的ElasticSearch服务地址，就可以监控ElasticSearch运行信息</p><h4 id="3-1-安装head首先需要安装Node"><a href="#3-1-安装head首先需要安装Node" class="headerlink" title="3.1 安装head首先需要安装Node"></a>3.1 安装head首先需要安装Node</h4><h5 id="3-1-1-什么是Node"><a href="#3-1-1-什么是Node" class="headerlink" title="3.1.1 什么是Node"></a>3.1.1 什么是Node</h5><p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 <a href="https://developers.google.com/v8/">Chrome V8</a> 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I&#x2F;O 的模型，使其轻量又高效。Node.js 的包管理器 <a href="https://www.npmjs.com/">npm</a>，是全球最大的开源库生态系统。</p><h5 id="3-1-2-下载Node"><a href="#3-1-2-下载Node" class="headerlink" title="3.1.2 下载Node"></a>3.1.2 下载Node</h5><p>由于elasticsearch-head插件是由nodejs语言编写，所以安装elasticsearch-head前需要先安装nodejs。 首先，执行以下命令安装nodejs和grunt</p><p>打开虚拟机，执行wget命令下载Node，如下图：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://nodejs.org/dist/v10.15.2/node-v10.15.2-linux-x64.tar.xz<br></code></pre></td></tr></table></figure><h5 id="3-1-3-解压Node包"><a href="#3-1-3-解压Node包" class="headerlink" title="3.1.3 解压Node包"></a>3.1.3 解压Node包</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar xvf node-v10.15.2-linux-x64.tar.xz<br></code></pre></td></tr></table></figure><h5 id="3-1-4-设置软连接"><a href="#3-1-4-设置软连接" class="headerlink" title="3.1.4 设置软连接"></a>3.1.4 设置软连接</h5><p>解压文件的 bin 目录底下包含了 node、npm 等命令，我们可以使用 ln 命令来设置软连接：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ln</span> -s bin/npm /usr/local/bin/<br><br><span class="hljs-built_in">ln</span> -s bin/node /usr/local/bin/<br></code></pre></td></tr></table></figure><p>在&#x2F;etc&#x2F;profile中配置好path环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi ~/.bash_profile<br><br><span class="hljs-built_in">export</span> NODE_HOME=/opt/nodejs/node-v10.15.2-linux-x64<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$NODE_HOME</span>/bin<br><br><br><span class="hljs-comment">#保存退出，使文件生效</span><br><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure><h5 id="3-1-5-验证安装"><a href="#3-1-5-验证安装" class="headerlink" title="3.1.5 验证安装"></a>3.1.5 验证安装</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">node -v<br></code></pre></td></tr></table></figure><h4 id="3-2-grunt安装"><a href="#3-2-grunt安装" class="headerlink" title="3.2 grunt安装"></a>3.2 grunt安装</h4><p>安装grunt（运行在Node.js上面的任务管理器（task runner）），为了获得Grunt的更多产品特性，需要全局安装Grunt’s 命令行接口（CLI），使用npm进行安装，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -g grunt-cli<br></code></pre></td></tr></table></figure><p>查看grunt版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">grunt --version<br><span class="hljs-comment">#输出grunt版本信息，表示安装成功。</span><br></code></pre></td></tr></table></figure><h4 id="3-3-head安装"><a href="#3-3-head安装" class="headerlink" title="3.3 head安装"></a>3.3 head安装</h4><h5 id="3-3-1-执行命令安装git"><a href="#3-3-1-执行命令安装git" class="headerlink" title="3.3.1 执行命令安装git"></a>3.3.1 执行命令安装git</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install git -y<br></code></pre></td></tr></table></figure><h5 id="3-3-2-切换到-x2F-opt目录下-执行下面的克隆命令"><a href="#3-3-2-切换到-x2F-opt目录下-执行下面的克隆命令" class="headerlink" title="3.3.2 切换到&#x2F;opt目录下,执行下面的克隆命令"></a>3.3.2 切换到&#x2F;opt目录下,执行下面的克隆命令</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> git://github.com/mobz/elasticsearch-head.git<br></code></pre></td></tr></table></figure><h5 id="3-3-3-进入到elasticsearch-head目录"><a href="#3-3-3-进入到elasticsearch-head目录" class="headerlink" title="3.3.3) 进入到elasticsearch-head目录"></a>3.3.3) 进入到elasticsearch-head目录</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> elasticsearch-head<br></code></pre></td></tr></table></figure><h5 id="3-3-4-运行"><a href="#3-3-4-运行" class="headerlink" title="3.3.4) 运行"></a>3.3.4) 运行</h5><p>在运行之前我们需要修改下elasticsearch.yml，因为ES默认不开启跨域访问，需要添加以下配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#开启cors跨域访问支持，默认为false </span><br>http.cors.enabled: <span class="hljs-literal">true</span><br><span class="hljs-comment">#跨域访问允许的域名地址，(允许所有域名)以上使用正则</span><br>http.cors.allow-origin: <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>然后开始执行运行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm run start<br></code></pre></td></tr></table></figure><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/2226570-20210326181555123-864219776.png" alt="img"></p><h5 id="3-3-5-访问head"><a href="#3-3-5-访问head" class="headerlink" title="3.3.5) 访问head"></a>3.3.5) 访问head</h5><p>浏览器输入ip:port:9100，如下图</p><p><img src="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%AE%89%E8%A3%85%E5%92%8C%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/2226570-20210326181602095-654760258.png" alt="img"></p><p>看到这个界面说明我们的head插件成功安装并且成功连接Elasticsearch。</p><h3 id="4、IK分词器安装"><a href="#4、IK分词器安装" class="headerlink" title="4、IK分词器安装"></a>4、IK分词器安装</h3><h4 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h4><p>Elasticsearch 要使用 ik，就要先构建 ik 的 jar包，这里要用到 maven 包管理工具，而 maven 需要java 环境，而 Elasticsearch 内置了jdk， 所以可以将JAVA_HOME设置为Elasticsearch 内置的jdk</p><h5 id="1-1）设置JAVA-HOME"><a href="#1-1）设置JAVA-HOME" class="headerlink" title="1.1）设置JAVA_HOME"></a>1.1）设置JAVA_HOME</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/profile<br><span class="hljs-comment"># 在profile文件末尾添加</span><br><span class="hljs-comment">#java environment</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/opt/elasticsearch-7.4.0/jdk<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin<br><br><span class="hljs-comment"># 保存退出后，重新加载profile</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h5 id="1-2）下载maven安装包"><a href="#1-2）下载maven安装包" class="headerlink" title="1.2）下载maven安装包"></a>1.2）下载maven安装包</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget http://mirror.cc.columbia.edu/pub/software/apache/maven/maven-3/3.1.1/binaries/apache-maven-3.1.1-bin.tar.gz  <br></code></pre></td></tr></table></figure><h5 id="1-3）解压maven安装包"><a href="#1-3）解压maven安装包" class="headerlink" title="1.3）解压maven安装包"></a>1.3）解压maven安装包</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar xzf apache-maven-3.1.1-bin.tar.gz <br></code></pre></td></tr></table></figure><h5 id="1-4）设置软连接"><a href="#1-4）设置软连接" class="headerlink" title="1.4）设置软连接"></a>1.4）设置软连接</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ln</span> -s apache-maven-3.1.1 maven <br></code></pre></td></tr></table></figure><h5 id="1-5）设置path"><a href="#1-5）设置path" class="headerlink" title="1.5）设置path"></a>1.5）设置path</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim  /etc/profile.d/maven.sh<br><br><span class="hljs-comment">#将下面的内容复制到文件，保存</span><br><span class="hljs-built_in">export</span> MAVEN_HOME=/opt/maven  <br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$&#123;MAVEN_HOME&#125;</span>/bin:<span class="hljs-variable">$&#123;PATH&#125;</span> <br><br><span class="hljs-comment">#设置好Maven的路径之后，需要运行下面的命令使其生效</span><br><span class="hljs-built_in">source</span> /etc/profile.d/maven.sh<br></code></pre></td></tr></table></figure><h5 id="1-6）验证maven是否安装成功"><a href="#1-6）验证maven是否安装成功" class="headerlink" title="1.6）验证maven是否安装成功"></a>1.6）验证maven是否安装成功</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mvn -v<br></code></pre></td></tr></table></figure><h4 id="2、安装IK分词器"><a href="#2、安装IK分词器" class="headerlink" title="2、安装IK分词器"></a>2、安装IK分词器</h4><h5 id="2-1）下载IK"><a href="#2-1）下载IK" class="headerlink" title="2.1）下载IK"></a>2.1）下载IK</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/medcl/elasticsearch-analysis-ik/archive/v7.4.0.zip<br></code></pre></td></tr></table></figure><h5 id="2-2）解压IK"><a href="#2-2）解压IK" class="headerlink" title="2.2）解压IK"></a>2.2）解压IK</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">unzip v7.4.0.zip<br></code></pre></td></tr></table></figure><h5 id="2-3）编译jar包"><a href="#2-3）编译jar包" class="headerlink" title="2.3）编译jar包"></a>2.3）编译jar包</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 切换到 elasticsearch-analysis-ik-7.4.0目录</span><br><span class="hljs-built_in">cd</span> elasticsearch-analysis-ik-7.4.0/<br><span class="hljs-comment">#打包</span><br>mvn package<br></code></pre></td></tr></table></figure><h5 id="2-4）-jar包移动"><a href="#2-4）-jar包移动" class="headerlink" title="2.4） jar包移动"></a>2.4） jar包移动</h5><p>package执行完毕后会在当前目录下生成target&#x2F;releases目录，将其中的elasticsearch-analysis-ik-7.4.0.zip拷贝到elasticsearch目录下的新建的目录plugins&#x2F;analysis-ik，并解压</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#切换目录</span><br><span class="hljs-built_in">cd</span> /opt/elasticsearch-7.4.0/plugins/<br><span class="hljs-comment">#新建目录</span><br><span class="hljs-built_in">mkdir</span> analysis-ik<br><span class="hljs-built_in">cd</span> analysis-ik<br><span class="hljs-comment">#执行拷贝</span><br><span class="hljs-built_in">cp</span> -R /opt/elasticsearch-analysis-ik-7.4.0/target/releases/elasticsearch-analysis-ik-7.4.0.zip      /opt/elasticsearch-7.4.0/plugins/analysis-ik<br><span class="hljs-comment">#执行解压</span><br>unzip  /opt/elasticsearch-7.4.0/plugins/analysis-ik/elasticsearch-analysis-ik-7.4.0.zip<br></code></pre></td></tr></table></figure><h5 id="2-5）拷贝辞典"><a href="#2-5）拷贝辞典" class="headerlink" title="2.5）拷贝辞典"></a>2.5）拷贝辞典</h5><p>将elasticsearch-analysis-ik-7.4.0目录下的config目录中的所有文件 拷贝到elasticsearch的config目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> -R /opt/elasticsearch-analysis-ik-7.4.0/config/*   /opt/elasticsearch-7.4.0/config<br></code></pre></td></tr></table></figure><p><strong>记得一定要重启Elasticsearch！！！</strong></p><h4 id="3、使用IK分词器"><a href="#3、使用IK分词器" class="headerlink" title="3、使用IK分词器"></a>3、使用IK分词器</h4><p>IK分词器有两种分词模式：ik_max_word和ik_smart模式。</p><h5 id="3-1）ik-max-word"><a href="#3-1）ik-max-word" class="headerlink" title="3.1）ik_max_word"></a>3.1）ik_max_word</h5><p>会将文本做最细粒度的拆分，比如会将“乒乓球明年总冠军”拆分为“乒乓球、乒乓、球、明年、总冠军、冠军。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">GET /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;乒乓球明年总冠军&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>ik_max_word分词器执行如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs sh">&#123;<br>  <span class="hljs-string">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;乒乓球&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 0,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 3,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 0<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;乒乓&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 0,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 2,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 1<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;球&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 2,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 3,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_CHAR&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 2<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;明年&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 3,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 5,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 3<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;总冠军&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 5,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 8,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 4<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;冠军&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 6,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 8,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 5<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2）ik-smart"><a href="#3-2）ik-smart" class="headerlink" title="3.2）ik_smart"></a>3.2）ik_smart</h5><p>会做最粗粒度的拆分，比如会将“乒乓球明年总冠军”拆分为乒乓球、明年、总冠军。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh">GET /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;乒乓球明年总冠军&quot;</span><br>&#125;<br>ik_smart分词器执行如下：<br><br>&#123;<br>  <span class="hljs-string">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;乒乓球&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 0,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 3,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 0<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;明年&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 3,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 5,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 1<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;总冠军&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 5,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 8,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 2<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>由此可见 使用ik_smart可以将文本”text”: “乒乓球明年总冠军”分成了【乒乓球】【明年】【总冠军】</p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>elasticsearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>es</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch的IK分词插件、pinyin插件安装</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%8F%8AIK%E5%88%86%E8%AF%8D%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/elasticsearch/ElasticSearch%E5%8F%8AIK%E5%88%86%E8%AF%8D%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ElasticSearch的IK分词插件、pinyin插件安装"><a href="#ElasticSearch的IK分词插件、pinyin插件安装" class="headerlink" title="ElasticSearch的IK分词插件、pinyin插件安装"></a>ElasticSearch的IK分词插件、pinyin插件安装</h1><p><strong>安装时采用ElasticSearch版本5.6.12</strong></p><h2 id="一、安装ElasticSearch"><a href="#一、安装ElasticSearch" class="headerlink" title="一、安装ElasticSearch"></a>一、安装ElasticSearch</h2><h3 id="1-安装openjdk环境"><a href="#1-安装openjdk环境" class="headerlink" title="1.安装openjdk环境"></a>1.安装openjdk环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install java-1.8.0-openjdk-devel<br></code></pre></td></tr></table></figure><h3 id="2-使用yum安装rpm包"><a href="#2-使用yum安装rpm包" class="headerlink" title="2.使用yum安装rpm包"></a>2.使用yum安装rpm包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.12.rpm<br>yum install elasticsearch-5.6.12.rpm<br></code></pre></td></tr></table></figure><h3 id="3-查看安装的elasticsearch相关文件所在的目录"><a href="#3-查看安装的elasticsearch相关文件所在的目录" class="headerlink" title="3.查看安装的elasticsearch相关文件所在的目录"></a>3.查看安装的elasticsearch相关文件所在的目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">whereis elasticsearch<br><br><span class="hljs-comment">#输出:</span><br>elasticsearch: /etc/elasticsearch /usr/share/elasticsearch<br><br></code></pre></td></tr></table></figure><h3 id="4-修改yml文件"><a href="#4-修改yml文件" class="headerlink" title="4.修改yml文件"></a>4.修改yml文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/elasticsearch/elasticsearch.yml <br><br><span class="hljs-comment">#----------以下为解除注释的内容------------------#</span><br>cluster.name: my-application  <span class="hljs-comment">#该name可自己定义</span><br>node.name: node-1<br>network.host: 0.0.0.0  <span class="hljs-comment">#可设置为本地地址，正式环境建议设置为本机</span><br>http.port: 9200<br><br><span class="hljs-comment">#path.data: /path/to/data  #修改路径地址时，请先确保正常启动后再修改,系统默认启动后的默认日志存放路径在/var/log/elasticsearch/</span><br><span class="hljs-comment">#path.logs: /path/to/logs  #修改路径地址时，请先确保正常启动后再修改,系统默认启动后的默认日志存放路径在/var/log/elasticsearch/</span><br></code></pre></td></tr></table></figure><h3 id="5-启动elasticsearch"><a href="#5-启动elasticsearch" class="headerlink" title="5.启动elasticsearch"></a>5.启动elasticsearch</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start elasticsearch.service &amp;&amp; systemctl status elasticsearch.service<br></code></pre></td></tr></table></figure><p><strong>注：启动不成功时，请vim &#x2F;etc&#x2F;elasticsearch&#x2F;jvm.options  查看-Xms2g -Xmx2g 内存是否是服务器的50%</strong></p><h2 id="二、安装IK分词插件"><a href="#二、安装IK分词插件" class="headerlink" title="二、安装IK分词插件"></a>二、安装IK分词插件</h2><h3 id="1-将相关的插件包上传到-x2F-usr-x2F-share-x2F-elasticsearch-x2F-plugins目录下，并解压"><a href="#1-将相关的插件包上传到-x2F-usr-x2F-share-x2F-elasticsearch-x2F-plugins目录下，并解压" class="headerlink" title="1.将相关的插件包上传到&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins目录下，并解压"></a>1.将相关的插件包上传到&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins目录下，并解压</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/share/elasticsearch/plugins<br><br>unzip elasticsearch-analysis-ik-5.6.12.zip <br><br><span class="hljs-comment">#更名</span><br><span class="hljs-built_in">mv</span> elasticsearch analysis-ik  <br><br><span class="hljs-comment">#解压后需删除该目录下的zip文件</span><br><span class="hljs-built_in">rm</span> -rf elasticsearch-analysis-ik-5.6.12.zip <br></code></pre></td></tr></table></figure><h3 id="2-修改文件的权限"><a href="#2-修改文件的权限" class="headerlink" title="2.修改文件的权限"></a>2.修改文件的权限</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> 755 analysis-ik<br><span class="hljs-built_in">chown</span> -R elasticsearch:elasticsearch analysis-ik<br></code></pre></td></tr></table></figure><h3 id="3-拷贝辞典，将目录下的config目录中的所有文件-拷贝到elasticsearch的config目录"><a href="#3-拷贝辞典，将目录下的config目录中的所有文件-拷贝到elasticsearch的config目录" class="headerlink" title="3.拷贝辞典，将目录下的config目录中的所有文件 拷贝到elasticsearch的config目录"></a>3.拷贝辞典，将目录下的config目录中的所有文件 拷贝到elasticsearch的config目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> -R /usr/share/elasticsearch/plugins/analysis-ik/config/* /etc/elasticsearch/<br></code></pre></td></tr></table></figure><h3 id="4-重启elasticsearch服务-并实时查看日志，路径有在"><a href="#4-重启elasticsearch服务-并实时查看日志，路径有在" class="headerlink" title="4.重启elasticsearch服务,并实时查看日志，路径有在"></a>4.重启elasticsearch服务,并实时查看日志，路径有在</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart elasticsearch.service &amp;&amp; <span class="hljs-built_in">tail</span> -f /var/log/elasticsearch/elasticsearch.log<br></code></pre></td></tr></table></figure><h2 id="三、安装pinyin插件"><a href="#三、安装pinyin插件" class="headerlink" title="三、安装pinyin插件"></a>三、安装pinyin插件</h2><h3 id="1-将相关的插件包上传到-x2F-usr-x2F-share-x2F-elasticsearch-x2F-plugins目录下，并解压-1"><a href="#1-将相关的插件包上传到-x2F-usr-x2F-share-x2F-elasticsearch-x2F-plugins目录下，并解压-1" class="headerlink" title="1.将相关的插件包上传到&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins目录下，并解压"></a>1.将相关的插件包上传到&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins目录下，并解压</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/share/elasticsearch/plugins<br><br>unzip elasticsearch-analysis-pinyin-5.6.12.zip<br><br><span class="hljs-built_in">mv</span> elasticsearch/ analysis-pinyin <span class="hljs-comment">#更名</span><br><br><span class="hljs-built_in">rm</span> -rf elasticsearch-analysis-pinyin-5.6.12.zip <span class="hljs-comment">#解压后删除该目录下zip文件</span><br></code></pre></td></tr></table></figure><h3 id="2-修改文件的权限-1"><a href="#2-修改文件的权限-1" class="headerlink" title="2.修改文件的权限"></a>2.修改文件的权限</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> 755 analysis-pinyin/<br><span class="hljs-built_in">chown</span> -R elasticsearch:elasticsearch analysis-pinyin/<br></code></pre></td></tr></table></figure><h3 id="3-重启elasticsearch服务"><a href="#3-重启elasticsearch服务" class="headerlink" title="3.重启elasticsearch服务"></a>3.重启elasticsearch服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart elasticsearch.service <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>elasticsearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>es</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker-compose安装consul</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/consul/%E4%BD%BF%E7%94%A8docker-compose%E5%AE%89%E8%A3%85consul/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/consul/%E4%BD%BF%E7%94%A8docker-compose%E5%AE%89%E8%A3%85consul/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker-compose安装consul"><a href="#使用docker-compose安装consul" class="headerlink" title="使用docker-compose安装consul"></a>使用docker-compose安装consul</h1><h2 id="1-创建工作目录并拉取consul镜像"><a href="#1-创建工作目录并拉取consul镜像" class="headerlink" title="1.创建工作目录并拉取consul镜像"></a>1.创建工作目录并拉取consul镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app/consul &amp;&amp; <span class="hljs-built_in">cd</span> /app/consul<br><br>docker pull consul<br></code></pre></td></tr></table></figure><h2 id="2-修改docker的json配置"><a href="#2-修改docker的json配置" class="headerlink" title="2.修改docker的json配置"></a>2.修改docker的json配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/docker/daemon.json<br><br>&#123;<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>],<br>  <span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br>  <span class="hljs-string">&quot;log-opts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;max-size&quot;</span>: <span class="hljs-string">&quot;100m&quot;</span>,<br>    <span class="hljs-string">&quot;max-file&quot;</span>: <span class="hljs-string">&quot;5&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;storage-driver&quot;</span>: <span class="hljs-string">&quot;overlay2&quot;</span>,<br>  <span class="hljs-string">&quot;storage-opts&quot;</span>: [<br>    <span class="hljs-string">&quot;overlay2.override_kernel_check=true&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>:[<span class="hljs-string">&quot;https://r2hd8p9u.mirror.aliyuncs.com&quot;</span>],<br>  <span class="hljs-string">&quot;insecure-registries&quot;</span>:[<span class="hljs-string">&quot;120.77.159.14:5000&quot;</span>],<br>  <span class="hljs-string">&quot;graph&quot;</span>: <span class="hljs-string">&quot;/app/docker&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-编辑consul-compose-yaml文件"><a href="#3-编辑consul-compose-yaml文件" class="headerlink" title="3.编辑consul-compose.yaml文件"></a>3.编辑consul-compose.yaml文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> consul-compose.yaml:<br><br>services:<br><br>  consul1:<br>    image: consul:latest<br>    container_name: consul_server_1<br>    restart: always<br>    volumes:<br>      - /app/consul/server1/data:/consul/data<br>      - /app/consul/server1/config:/consul/config<br>    environment:<br>      - data-dir:/consul/data<br>      - config-dir:/consul/config<br>    <span class="hljs-built_in">command</span>:<br>      - agent<br>      - -server<br>      - -bootstrap-expect=3<br>      - -node=10.10.0.2<br>      - -client=0.0.0.0<br>      - -datacenter=dc1<br>    networks:<br>      consul:<br>        ipv4_address: 10.10.0.2<br><br>  consul2:<br>    image: consul:latest<br>    container_name: consul_server_2<br>    restart: always<br>    depends_on:<br>      - consul1<br>    volumes:<br>      - /app/consul/server2/data:/consul/data<br>      - /app/consul/server2/config:/consul/config<br>    environment:<br>      - data-dir:/consul/data<br>      - config-dir:/consul/config<br>    <span class="hljs-built_in">command</span>:<br>      - agent<br>      - -server<br>      - -node=10.10.0.3<br>      - -client=0.0.0.0<br>      - -datacenter=dc1<br>      - -retry-join=10.10.0.2<br>    networks:<br>      consul:<br>        ipv4_address: 10.10.0.3<br><br>  consul3:<br>    image: consul:latest<br>    container_name: consul_server_3<br>    restart: always<br>    depends_on:<br>      - consul1<br>    volumes:<br>      - /app/consul/server3/data:/consul/data<br>      - /app/consul/server3/config:/consul/config<br>    environment:<br>      - data-dir:/consul/data<br>      - config-dir:/consul/config<br>    <span class="hljs-built_in">command</span>:<br>      - agent<br>      - -server<br>      - -node=10.10.0.4<br>      - -client=0.0.0.0<br>      - -datacenter=dc1<br>      - -retry-join=10.10.0.2<br>    networks:<br>      consul:<br>        ipv4_address: 10.10.0.4<br><br>  consul_agent:<br>    image: consul:latest<br>    container_name: consul_agent<br>    restart: always<br>    depends_on:<br>      - consul1<br>    ports:<br>      - <span class="hljs-string">&quot;8500:8500&quot;</span><br>    volumes:<br>      - /app/consul/agent/data:/consul/data<br>      - /app/consul/agent/config:/consul/config<br>    environment:<br>      - data-dir:/consul/data<br>      - config-dir:/consul/config<br>    <span class="hljs-built_in">command</span>:<br>      - agent<br>      - -ui<br>      - -node=10.10.0.5<br>      - -client=0.0.0.0<br>      - -datacenter=dc1<br>      - -retry-join=10.10.0.2<br>    networks:<br>      consul:<br>        ipv4_address: 10.10.0.5<br><br>networks:<br>  consul:<br>    ipam:<br>      driver: default<br>      config:<br>        - subnet: <span class="hljs-string">&quot;10.10.0.0/24&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看yaml文件volumes数据卷文件，在该目录下新建</span><br><br><span class="hljs-built_in">mkdir</span> /app/consul/agent/&#123;config,data&#125;<br></code></pre></td></tr></table></figure><h2 id="4-启动"><a href="#4-启动" class="headerlink" title="4.启动"></a>4.启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose -f consul-compose.yaml up -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>consul</category>
      
    </categories>
    
    
    <tags>
      
      <tag>consul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker安装consul服务</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/consul/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85consul/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/consul/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85consul/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker安装consul服务"><a href="#使用docker安装consul服务" class="headerlink" title="使用docker安装consul服务"></a>使用docker安装consul服务</h1><h2 id="一、使用docker搭建consul单节点"><a href="#一、使用docker搭建consul单节点" class="headerlink" title="一、使用docker搭建consul单节点"></a>一、使用docker搭建consul单节点</h2><h3 id="1、创建工作目录"><a href="#1、创建工作目录" class="headerlink" title="1、创建工作目录"></a>1、创建工作目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /consul/node1/config<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --restart=always --name consul \<br>-p 8500:8500 \<br>-v /consul/node1:/consul \<br>consul:latest agent -server -ui -bootstrap-expect=1 -node=node1 -client=0.0.0.0<br><br>参数解释：<br>-server：表示启动的节点类型为server类型<br>-bootstrap-expect：用于server节点选举leader的参数,表示达到几个server节点时开始选举<br>-bootstrap：表示这个节点是 Server-Leader ，每个数据中心只能运行一台服务器<br>-node：节点的名称，集群中必须是唯一的<br></code></pre></td></tr></table></figure><h2 id="二、使用docker搭建consul集群"><a href="#二、使用docker搭建consul集群" class="headerlink" title="二、使用docker搭建consul集群"></a>二、使用docker搭建consul集群</h2><h3 id="1、创建docker网络和工作目录"><a href="#1、创建docker网络和工作目录" class="headerlink" title="1、创建docker网络和工作目录"></a>1、创建docker网络和工作目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker network create --subnet=172.25.2.2/16 consulnet<br><span class="hljs-built_in">mkdir</span> -p /consul/node&#123;0,1,2&#125;/config<br></code></pre></td></tr></table></figure><h3 id="2、docker运行consul服务（集群模式）"><a href="#2、docker运行consul服务（集群模式）" class="headerlink" title="2、docker运行consul服务（集群模式）"></a>2、docker运行consul服务（集群模式）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --restart=always \<br>--name node1 \<br>--net consulnet \<br>--ip 172.25.0.2 \<br>-e <span class="hljs-string">&#x27;CONSUL_LOCAL_CONFIG=&#123;&quot;skip_leave_on_interrupt&quot;: true&#125;&#x27;</span> \<br>-v /consul/node1:/consul \<br>consul:1.4.3 agent -server -node=node1 -bootstrap-expect=2<br><br>docker run -d --restart=always \<br>--name node2 \<br>--net consulnet \<br>--ip 172.25.0.3 \<br>-e <span class="hljs-string">&#x27;CONSUL_LOCAL_CONFIG=&#123;&quot;skip_leave_on_interrupt&quot;: true&#125;&#x27;</span> \<br>-v /consul/node2:/consul \<br>consul:1.4.3 agent -server -node=node2 \<br>-<span class="hljs-built_in">join</span> 172.25.0.2<br><br><br>docker run -d --restart=always \<br>--name node0 \<br>--net consulnet \<br>--ip 172.25.0.100 \<br>-p 8400:8400 -p 8500:8500 -p 8600:53/udp \<br>-e <span class="hljs-string">&#x27;CONSUL_LOCAL_CONFIG=&#123;&quot;skip_leave_on_interrupt&quot;: true&#125;&#x27;</span> \<br>-v /consul/node0:/consul \<br>consul:1.4.3 agent -ui -node=node0 \<br>-client=0.0.0.0 \<br>-<span class="hljs-built_in">join</span> 172.25.0.2<br><br><span class="hljs-comment">#参数详解：</span><br>agent：表示启动 Agent 进程。<br>-client：指定客户端访问consul集群（比如consul集群提供的web界面，DNS服务等）,表示启动 Consul Cilent 模式。<br>-server：表示该consul节点工作在server模式,表示启动 Consul Server 模式<br>-<span class="hljs-built_in">join</span> 172.17.0.1：与172.17.0.1这个地址的节点通信，以加入集群<br>-node：节点的名称，集群中必须是唯一的<br>-ui：表示启动 Web UI 管理器，默认开放端口 8500<br>-bootstrap-expect：用于server节点选举leader的参数,表示达到几个server节点时开始选举<br></code></pre></td></tr></table></figure><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">命令行备份：<br>consul snapshot save backup.snap<br><br>命令行恢复：<br>consul snapshot restore backup.snap<br></code></pre></td></tr></table></figure><h3 id="consul查看失效服务："><a href="#consul查看失效服务：" class="headerlink" title="consul查看失效服务："></a>consul查看失效服务：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl http://192.168.4.157:8500/v1/health/state/critical<br></code></pre></td></tr></table></figure><h3 id="consul删除失效服务："><a href="#consul删除失效服务：" class="headerlink" title="consul删除失效服务："></a>consul删除失效服务：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -request PUT http://192.168.4.157:8500/v1/agent/service/deregister/服务名<br><br>一条命令删除失效服务：<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `curl http://192.168.4.157:8500/v1/health/state/critical | <span class="hljs-built_in">tr</span> <span class="hljs-string">&quot;,&quot;</span> <span class="hljs-string">&quot;\n&quot;</span>|grep ServiceID| awk -F <span class="hljs-string">&#x27;:|&quot;&#x27;</span> <span class="hljs-string">&#x27;&#123;print $5&#125;&#x27;</span>` ; <span class="hljs-keyword">do</span> curl -request PUT http://192.168.4.157:8500/v1/agent/service/deregister/<span class="hljs-variable">$i</span> ;<span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>consul</category>
      
    </categories>
    
    
    <tags>
      
      <tag>consul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制安装consul</title>
    <link href="/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/consul/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85consul/"/>
    <url>/2023/03/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/consul/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85consul/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二进制安装consul"><a href="#二进制安装consul" class="headerlink" title="二进制安装consul"></a>二进制安装consul</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置。Consul 使用 Go 语言编写，因此具有天然可移植性（支持Linux、windows和Mac OS X）。</p><p>Consul 内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key&#x2F;Value 存储、多数据中心方案，不再需要依赖其他工具（比如 ZooKeeper 等），使用起来也较为简单。</p><p>Consul 遵循CAP原理中的CP原则，保证了强一致性和分区容错性，且使用的是Raft算法，比zookeeper使用的Paxos算法更加简单。虽然保证了强一致性，但是可用性就相应下降了，例如服务注册的时间会稍长一些，因为 Consul 的 raft 协议要求必须过半数的节点都写入成功才认为注册成功 ；在leader挂掉了之后，重新选举出leader之前会导致Consul 服务不可用。</p><h2 id="一、consul单机安装"><a href="#一、consul单机安装" class="headerlink" title="一、consul单机安装"></a>一、consul单机安装</h2><h3 id="1-下载并解压consul"><a href="#1-下载并解压consul" class="headerlink" title="1.下载并解压consul"></a>1.下载并解压consul</h3><p>consul下载地址：<a href="https://releases.hashicorp.com/consul/">https://releases.hashicorp.com/consul/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://releases.hashicorp.com/consul/1.12.7/consul_1.12.7_linux_amd64.zip<br><br>unzip consul_1.12.7_linux_amd64.zip<br><br><span class="hljs-built_in">mv</span> consul /usr/local/bin<br><br><span class="hljs-comment">#测试是否成功安装</span><br>consul version<br><br><br><span class="hljs-comment">#使用开发模式启动测试</span><br>consul agent  -ui -node=consul-dev -client=0.0.0.0<br><br>启动后可使用ip+8500访问consul的web页面！<br></code></pre></td></tr></table></figure><h3 id="2-设置开机自启动"><a href="#2-设置开机自启动" class="headerlink" title="2.设置开机自启动"></a>2.设置开机自启动</h3><h4 id="2-1、新建一个名为consul-service的service服务"><a href="#2-1、新建一个名为consul-service的service服务" class="headerlink" title="2.1、新建一个名为consul.service的service服务"></a>2.1、新建一个名为<code>consul.service</code>的service服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /usr/lib/systemd/system/consul.service &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=consul</span><br><span class="hljs-string">After=network.target</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">ExecStart=/usr/local/consul/start.sh</span><br><span class="hljs-string">KillSignal=SIGTERM</span><br><span class="hljs-string">    </span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h4 id="2-2、新建consul启动脚本，以便上诉service服务调用该脚本"><a href="#2-2、新建consul启动脚本，以便上诉service服务调用该脚本" class="headerlink" title="2.2、新建consul启动脚本，以便上诉service服务调用该脚本"></a>2.2、新建consul启动脚本，以便上诉service服务调用该脚本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /usr/local/consul/start.sh <br><br><span class="hljs-comment">#!/bin/bash</span><br>consul agent -server -ui -bootstrap-expect=1 -data-dir=/app/consul/data -node=agent-1 -client=0.0.0.0 -log-file=/app/consul/log/consul_log-$(<span class="hljs-built_in">date</span> +%Y-%m-%d--%H-%M) -<span class="hljs-built_in">bind</span>=192.168.62.130<br><br><span class="hljs-built_in">mkdir</span> -p /app/consul/&#123;data,<span class="hljs-built_in">log</span>&#125;<br><span class="hljs-comment">#给脚本赋权</span><br><span class="hljs-built_in">chmod</span> 777 /usr/local/consul/start.sh <br></code></pre></td></tr></table></figure><h3 id="3-启动服务，并设置开机自启"><a href="#3-启动服务，并设置开机自启" class="headerlink" title="3.启动服务，并设置开机自启"></a>3.启动服务，并设置开机自启</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start consul<br>systemctl <span class="hljs-built_in">enable</span> consul <br>systemctl status consul<br></code></pre></td></tr></table></figure><h2 id="二、搭建consul集群"><a href="#二、搭建consul集群" class="headerlink" title="二、搭建consul集群"></a>二、搭建consul集群</h2><p>consul 架构:<br>Server负责组成 cluster 的复杂工作（选举、状态维护、转发请求到 lead），以及 consul 提供的服务（响应 RCP 请求）。考虑到容错和收敛，一般部署 3 ~ 5 个比较合适，而client数量不做限制</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">可参考文档：https://littlefxc.github.io/<span class="hljs-number">2021</span>/<span class="hljs-number">01</span>/<span class="hljs-number">11</span>/Consul-<span class="hljs-variable">%E5</span><span class="hljs-variable">%8</span>D<span class="hljs-variable">%95</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%9</span>C<span class="hljs-variable">%BA</span><span class="hljs-variable">%E9</span><span class="hljs-variable">%9</span>B<span class="hljs-variable">%86</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%BE</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%90</span><span class="hljs-variable">%AD</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%BA</span>/<br></code></pre></td></tr></table></figure><h3 id="1、准备环境"><a href="#1、准备环境" class="headerlink" title="1、准备环境"></a>1、准备环境</h3><table><thead><tr><th>IP地址</th><th>节点名</th></tr></thead><tbody><tr><td>192.168.62.128</td><td>consul-1</td></tr><tr><td>192.168.62.129</td><td>consul-2</td></tr><tr><td>192.168.62.130</td><td>consul-3</td></tr></tbody></table><p>备注：机器均已经关闭防火墙，seliunx</p><h3 id="2、下载并解压安装包"><a href="#2、下载并解压安装包" class="headerlink" title="2、下载并解压安装包"></a>2、下载并解压安装包</h3><p>consul下载地址：<a href="https://releases.hashicorp.com/consul/">https://releases.hashicorp.com/consul/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://releases.hashicorp.com/consul/1.12.7/consul_1.12.7_linux_amd64.zip<br><br>unzip consul_1.12.7_linux_amd64.zip<br><br><span class="hljs-built_in">mv</span> consul /usr/local/bin<br><br><span class="hljs-comment">#测试是否成功安装</span><br>consul version<br><br></code></pre></td></tr></table></figure><h3 id="3、集群启动"><a href="#3、集群启动" class="headerlink" title="3、集群启动"></a>3、集群启动</h3><p>consul集群:当一个consul agent启动后，它不知道任何其他节点,要学习到集群中的其他节点，agent必须加入一个已经存在的集群(cluster)。要加入这样的集群，它只需要知道这个集群中的一个节点即可。它加入后，将会和这个member gossip（交谈）并迅速发现集群中的其他节点。一个consul agent可以加入任何类型的其他agent，而不只是那些运行于server mode的agent。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app/consul/&#123;data,<span class="hljs-built_in">log</span>&#125;<br><br><br>consul agent -server -ui -bootstrap-expect=3 -data-dir=/app/consul/data -log-file=/app/consul/log/consul_log-$(<span class="hljs-built_in">date</span> +%Y-%m-%d--%H-%M) -node=consul-1 -<span class="hljs-built_in">bind</span>=192.168.62.128 -client=0.0.0.0 -datacenter=dc1  <br><br>consul agent -server -ui -bootstrap-expect=3 -data-dir=/app/consul/data -log-file=/app/consul/log/consul_log-$(<span class="hljs-built_in">date</span> +%Y-%m-%d--%H-%M) -node=consul-2 -<span class="hljs-built_in">bind</span>=192.168.62.129 -client=0.0.0.0 -datacenter=dc1  -<span class="hljs-built_in">join</span> 192.168.62.128<br><br>consul agent -server -ui -bootstrap-expect=3 -data-dir=/app/consul/data -log-file=/app/consul/log/consul_log-$(<span class="hljs-built_in">date</span> +%Y-%m-%d--%H-%M) -node=consul-3 -<span class="hljs-built_in">bind</span>=192.168.62.130 -client=0.0.0.0 -datacenter=dc1  -<span class="hljs-built_in">join</span> 192.168.62.128<br></code></pre></td></tr></table></figure><p>Agent各种各样的配置选项，可以通过命令行或者配置文件指定。<br>配置优先级为 命令行 -&gt; 配置文件<br>加载配置时，将按照词法顺序从目录中读取配置。 配置格式可以为 HCL（.hcl） 或 JSON(.json)格式。</p><h3 id="4、查看启动结果"><a href="#4、查看启动结果" class="headerlink" title="4、查看启动结果"></a>4、查看启动结果</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">consul members<br><br>Node           Address             Status  Type    Build  Protocol  DC   Segment<br>consul-1  192.168.62.128:8301      alive   server  1.12.7  2        dc1  &lt;all&gt;<br>consul-2  192.168.62.129:8301      alive   server  1.12.7  2        dc1  &lt;all&gt;<br>consul-3  192.168.62.130:8301      alive   server  1.12.7  2        dc1  &lt;all&gt;<br><br><br></code></pre></td></tr></table></figure><h3 id="5、集群重启或kill-consul时-需要删除-data-dir下所有文件"><a href="#5、集群重启或kill-consul时-需要删除-data-dir下所有文件" class="headerlink" title="5、集群重启或kill consul时 需要删除-data-dir下所有文件"></a>5、集群重启或kill consul时 需要删除-data-dir下所有文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">rm</span> -rf /app/consul/data/*<br></code></pre></td></tr></table></figure><h2 id="附上相关参数含义"><a href="#附上相关参数含义" class="headerlink" title="附上相关参数含义"></a>附上相关参数含义</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sh">advertise: 广播给集群中得其他节点得地址，<span class="hljs-built_in">bind</span>参数可能无法绑定时，使用此参数。<br><br><span class="hljs-built_in">bind</span>: 绑定集群通信得地址，这个ip地址应该是就集群内得其他节点可达，可找到得。 默认 0.0.0.0,将绑定机器得所有地址，同时把 ipv4地址告诉集群得其他人。如果指定[::],将广播IPV6地址。 如果存在多个IPV4/IPV6地址，启动则报错。<br><br>domain: 指定交由 Consul 处理的DNS域， 默认consul, 比如执行 xxx.consul时，由 Consul 进行域名解析。<br><br>node: 节点在集群中的名称。 在集群中一定是唯一的，默认为机器的HostName(主机名)。<br><br><span class="hljs-built_in">join</span>: 加入Server节点，组成集群，无法加入,将启动失败， 注意集群部署时，推荐使用 retry-join, 将自动重试Join列表，直到成功。<br><br>retry-join: 自动加入存在Server节点，组建数据中心, 如： -retry-join<br>“consul.domain.internal” -retry-join “10.0.4.67”<br><br>bootstrap: 不推荐使用, 是否开启bootstrap 模式, 如果一个数据中心只有一个节点时， 使用此模式，允许选举自己为<br>Leader.<br><br>bootstrap-expect: Consul将会等到Sever节点数达到指定数值时，才会启动集群（自动选举Leader）。<br>仅Server有此参数, 注意这个值集群中所有节点要一致， 或着仅指定一个节点。<br><br>client: 客户端连接Server的地址，默认127.0.0.1，可绑定多个。<br><br>ui: 启用内置 Web UI 和必要的 HTTP路由。<br><br>config-file：<br>指定要加载的配置文件，可多次指定。后面的配置将与前面的配置进行Merge。单个KV将直接代替，列表类型将进行追加。<br><br>config-dir: 配置目录，将加载目录中的 .hcl 或 .json 格式配置。 注意子路径不会加载。<br><br>data-dir: Agent存储状态的的数据目录。<br><br>dev: Consul开发模式，快速启动一个Consul Agent。 （此模式下， 所以持久化将关闭，适用内存）<br>此模式适用于开发阶段, 在此模式下Connect也是启用的，此模式不要用于生产级场景。<br><br>hcl: 配置片段，可指定多次。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>consul</category>
      
    </categories>
    
    
    <tags>
      
      <tag>consul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins使用时遇到的问题记录和处理</title>
    <link href="/2023/03/30/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E5%92%8C%E5%A4%84%E7%90%86/"/>
    <url>/2023/03/30/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E5%92%8C%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="jenkins使用时遇到的问题记录和处理"><a href="#jenkins使用时遇到的问题记录和处理" class="headerlink" title="jenkins使用时遇到的问题记录和处理"></a>jenkins使用时遇到的问题记录和处理</h1><h2 id="一、离线导入相关插件："><a href="#一、离线导入相关插件：" class="headerlink" title="一、离线导入相关插件："></a>一、离线导入相关插件：</h2><p>在有插件的机器上，先停掉jk服务，systemctl stop jenkins 然后进入到&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;plugins&#x2F;下 将里面的内容复制到离线的机器&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;plugins&#x2F;下</p><h2 id="二、jenkins配置文件不生效-在构建任务时，使用的是jenkins账户，导致命令无权限执行。"><a href="#二、jenkins配置文件不生效-在构建任务时，使用的是jenkins账户，导致命令无权限执行。" class="headerlink" title="二、jenkins配置文件不生效,在构建任务时，使用的是jenkins账户，导致命令无权限执行。"></a>二、jenkins配置文件不生效,在构建任务时，使用的是jenkins账户，导致命令无权限执行。</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">#参考文献：https://blog.csdn.net/C343500263/article/details/123400385<br></code></pre></td></tr></table></figure><p>配置文件 vim &#x2F;etc&#x2F;sysconfig&#x2F;jenkins 不生效，ps -ef | grep jenkins 发现启动的用户还是为jenkins<br>原因： 启动命令使用 systemctl start jenkins 。 systemd的资源Unit ，在目录&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system(Centos)或&#x2F;etc&#x2F;systemd&#x2F;system(Ubuntu)</p><p>启动未加载&#x2F;etc&#x2F;sysconfig&#x2F;jenkins 配置。（以下为centos)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /usr/lib/systemd/system/jenkins.service <br><span class="hljs-comment">#....</span><br><span class="hljs-comment">#修改用户和组</span><br>User=root<br>Group=root<br><span class="hljs-comment">#...</span><br><span class="hljs-comment">##修改端口</span><br>Environment=<span class="hljs-string">&quot;JENKINS_PORT=8080&quot;</span><br><br><span class="hljs-comment">#修改后重启jenkins</span><br>systemctl restart jenkins<br></code></pre></td></tr></table></figure><h2 id="三、通过-SSH-连接到远程服务器，然后在远程服务器上运行命令时"><a href="#三、通过-SSH-连接到远程服务器，然后在远程服务器上运行命令时" class="headerlink" title="三、通过 SSH 连接到远程服务器，然后在远程服务器上运行命令时"></a>三、通过 SSH 连接到远程服务器，然后在远程服务器上运行命令时</h2><p>ssh 192.168.94.155 #提示如下错误<br>Pseudo-terminal will not be allocated because stdin is not a terminal</p><p>因为：SSH 不会创建交互式会话，因此它与在交互式终端中执行一系列命令并不完全相同。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#要通过 SSH 会话运行特定命令，需要使用：</span><br>ssh root@192.168.94.155 <span class="hljs-string">&#x27;uname -a&#x27;</span><br><span class="hljs-comment">#或者使用：</span><br>ssh root@192.168.94.155 &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">pwd &amp;&amp; ip add</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="四、jenkins-关闭，开启tomcat时-提示："><a href="#四、jenkins-关闭，开启tomcat时-提示：" class="headerlink" title="四、jenkins 关闭，开启tomcat时 提示："></a>四、jenkins 关闭，开启tomcat时 提示：</h2><p>Neither the JAVA_HOME nor the JRE_HOME environment variable is defined At least one of these environment variable is needed to run this program</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#用vim打开tomcat的bin目录下的setclasspath.sh</span><br>vim /usr/local/tomcat/bin/setclasspath.sh<br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-comment">#  Set JAVA_HOME or JRE_HOME if not already set, ensure any provided settings</span><br><span class="hljs-comment">#  are valid and consistent with the selected start-up options and set up the</span><br><span class="hljs-comment">#  endorsed directory.</span><br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-comment"># 添加JAVA_HOME和JRE_HOME两个环境变量</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/local/jdk1.8.0<br><span class="hljs-built_in">export</span> JRE_HOME=/usr/local/jdk1.8.0<br><span class="hljs-comment"># Make sure prerequisite environment variables are set</span><br><span class="hljs-comment">#.....</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins选择分支和tag构建</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E9%80%89%E6%8B%A9%E5%88%86%E6%94%AF%E6%9E%84%E5%BB%BA/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E9%80%89%E6%8B%A9%E5%88%86%E6%94%AF%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="jenkins选择分支和tag构建"><a href="#jenkins选择分支和tag构建" class="headerlink" title="jenkins选择分支和tag构建"></a>jenkins选择分支和tag构建</h1><h2 id="一、Jenkins选择分支发布Gitlab项目"><a href="#一、Jenkins选择分支发布Gitlab项目" class="headerlink" title="一、Jenkins选择分支发布Gitlab项目"></a>一、Jenkins选择分支发布Gitlab项目</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">官方文档：https://plugins.jenkins.io/git-parameter/<br><br>可参考文档：https://www.cnblogs.com/yucongblog/p/12993498.html<br></code></pre></td></tr></table></figure><h3 id="1、需要的插件"><a href="#1、需要的插件" class="headerlink" title="1、需要的插件"></a>1、需要的插件</h3><ul><li>Git plugin</li><li>Git Parameter Plugin</li><li>Gitlab Plugin</li></ul><h3 id="2、过程"><a href="#2、过程" class="headerlink" title="2、过程"></a>2、过程</h3><ul><li><p>创建test分支</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E9%80%89%E6%8B%A9%E5%88%86%E6%94%AF%E6%9E%84%E5%BB%BA/image-20220914161045429.png" alt="image-20220914161045429"></p></li><li><p>创建一个流水线项目，选择参数化构建过程-&gt;选择Git 参数，输入名称(下面将会用到该参数)，参数类型选择-&gt; 分支，输入默认分支名称（直接使用如下的流水线语法保存，将会自动选择）</p></li></ul><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E9%80%89%E6%8B%A9%E5%88%86%E6%94%AF%E6%9E%84%E5%BB%BA/image-20220913114139787.png" alt="image-20220913114139787"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E9%80%89%E6%8B%A9%E5%88%86%E6%94%AF%E6%9E%84%E5%BB%BA/image-20220913114327388.png" alt="image-20220913114327388"></p><ul><li>编写流水线</li></ul><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E9%80%89%E6%8B%A9%E5%88%86%E6%94%AF%E6%9E%84%E5%BB%BA/image-20220913145126454.png" alt="image-20220913145126454"></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gams">pipeline &#123;<br>  agent any<br>  <span class="hljs-keyword">parameters</span> &#123;<br>    gitParameter <span class="hljs-comment">branchFilter:</span> <span class="hljs-comment">&#x27;origin/(.*)&#x27;</span><span class="hljs-comment">, defaultValue:</span> <span class="hljs-comment">&#x27;main&#x27;</span><span class="hljs-comment">, name:</span> <span class="hljs-comment">&#x27;BRANCH&#x27;</span><span class="hljs-comment">, type:</span> <span class="hljs-comment">&#x27;PT_BRANCH&#x27;</span><br>  &#125;<br>  stages <span class="hljs-comment">&#123;</span><br>    stage(<span class="hljs-string">&#x27;测试&#x27;</span>) &#123;<br>      steps <span class="hljs-comment">&#123;</span><br>        git <span class="hljs-comment">branch:</span> <span class="hljs-comment">&quot;$&#123;params.BRANCH&#125;&quot;</span><span class="hljs-comment">, credentialsId:</span> <span class="hljs-comment">&#x27;gitlab-root-http&#x27;</span><span class="hljs-comment">, url:</span> <span class="hljs-comment">&#x27;http://192.168.5.111:8188/root/java-fuwu.git&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E9%80%89%E6%8B%A9%E5%88%86%E6%94%AF%E6%9E%84%E5%BB%BA/image-20220913145404722.png" alt="image-20220913145404722"></p><h2 id="二、jenkins选择tag标签构建"><a href="#二、jenkins选择tag标签构建" class="headerlink" title="二、jenkins选择tag标签构建"></a>二、jenkins选择tag标签构建</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php">pipeline &#123;<br>    agent any<br>    parameters &#123;<br>        gitParameter name: <span class="hljs-string">&#x27;TAG&#x27;</span>,<br>                     type: <span class="hljs-string">&#x27;PT_TAG&#x27;</span>,<br>                     defaultValue: <span class="hljs-string">&#x27;master&#x27;</span><br>    &#125;<br>    stages &#123;<br>        <span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;克隆&#x27;</span>) &#123;<br>            steps &#123;<br>                <span class="hljs-title function_ invoke__">checkout</span>([<span class="hljs-variable">$class</span>: <span class="hljs-string">&#x27;GitSCM&#x27;</span>,<br>                          <span class="hljs-attr">branches</span>: [[<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;$&#123;params.TAG&#125;&quot;</span>]],<br>                          <span class="hljs-attr">doGenerateSubmoduleConfigurations</span>: <span class="hljs-literal">false</span>,<br>                          <span class="hljs-attr">extensions</span>: [],<br>                          <span class="hljs-attr">gitTool</span>: <span class="hljs-string">&#x27;Default&#x27;</span>,<br>                          <span class="hljs-attr">submoduleCfg</span>: [],<br>                          //<span class="hljs-attr">userRemoteConfigs</span>:的<span class="hljs-attr">credentialsId</span>:<span class="hljs-number">1</span>为jenkins身份令牌的id，后面为代码仓库地址<br>                          <span class="hljs-attr">userRemoteConfigs</span>: [[<span class="hljs-attr">credentialsId</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://192.168.5.111:8188/root/java-fuwu.git&#x27;</span>]]<br>                        ])<br>            &#125;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">stage</span>(<span class="hljs-string">&#x27;打包项目&#x27;</span>) &#123;<br>            steps &#123;<br>              sh <span class="hljs-string">&quot;/usr/local/go/bin/go build -o $&#123;params.tag&#125; main.go&quot;</span><br>            &#125;<br>         &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>远程触发jenkins任务</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E8%BF%9C%E7%A8%8B%E8%A7%A6%E5%8F%91jenkins%E4%BB%BB%E5%8A%A1/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E8%BF%9C%E7%A8%8B%E8%A7%A6%E5%8F%91jenkins%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="远程触发jenkins任务"><a href="#远程触发jenkins任务" class="headerlink" title="远程触发jenkins任务"></a>远程触发jenkins任务</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://blog.csdn.net/u013511989/article/details/113995842<br></code></pre></td></tr></table></figure><h2 id="1、系统配置：回到首页，点击用户列表-gt-选择用户"><a href="#1、系统配置：回到首页，点击用户列表-gt-选择用户" class="headerlink" title="1、系统配置：回到首页，点击用户列表&gt;选择用户"></a><strong>1、系统配置：回到首页，点击用户列表&gt;选择用户</strong></h2><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E8%BF%9C%E7%A8%8B%E8%A7%A6%E5%8F%91jenkins%E4%BB%BB%E5%8A%A1/image-20221114135805904.png" alt="image-20221114135805904.png"></p><p>  设置&gt;添加token，输入token名称，生产token（token需要复制保存）</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E8%BF%9C%E7%A8%8B%E8%A7%A6%E5%8F%91jenkins%E4%BB%BB%E5%8A%A1/image-20221114135928703.png" alt="image-20221114135928703"></p><h2 id="2、任务设置：进入job任务，选择触发远程构建（可自定义远程身份验证令牌）"><a href="#2、任务设置：进入job任务，选择触发远程构建（可自定义远程身份验证令牌）" class="headerlink" title="2、任务设置：进入job任务，选择触发远程构建（可自定义远程身份验证令牌）"></a><strong>2、任务设置：进入job任务，选择触发远程构建（可自定义远程身份验证令牌）</strong></h2><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E8%BF%9C%E7%A8%8B%E8%A7%A6%E5%8F%91jenkins%E4%BB%BB%E5%8A%A1/image-20221114140118138.png" alt="image-20221114140118138"></p><h2 id="3、使用postman触发"><a href="#3、使用postman触发" class="headerlink" title="3、使用postman触发"></a><strong>3、使用<a href="https://so.csdn.net/so/search?q=postman&spm=1001.2101.3001.7020">postman</a>触发</strong></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#不带参数触发：</span><br>http:<span class="hljs-regexp">//</span>admin:<span class="hljs-number">1145917</span>aeee2706f88711601f5b769deec@<span class="hljs-number">192.168</span>.<span class="hljs-number">0.196</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/job/</span>test/build?token=remotoToken<br><br><span class="hljs-comment">#带参数触发：</span><br>http:<span class="hljs-regexp">//</span>admin:<span class="hljs-number">1145917</span>aeee2706f88711601f5b769deec@<span class="hljs-number">192.168</span>.<span class="hljs-number">0.196</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/job/</span>test/buildWithParameters?token=test123456&amp;tag=<span class="hljs-number">0.0</span>.<span class="hljs-number">2</span><br><br><br></code></pre></td></tr></table></figure><h2 id="4、使用curl触发"><a href="#4、使用curl触发" class="headerlink" title="4、使用curl触发"></a><strong>4、使用curl触发</strong></h2><h3 id="4-1-通过build触发无参数job"><a href="#4-1-通过build触发无参数job" class="headerlink" title="4.1 通过build触发无参数job"></a>4.1 通过build触发无参数job</h3><p>举例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -X post <span class="hljs-string">&quot;http://token名称:token密码@jenkins地址/job/testforremote/build?token=remotoToken&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-通过buildWithParameters触发有参数job"><a href="#4-2-通过buildWithParameters触发有参数job" class="headerlink" title="4.2 通过buildWithParameters触发有参数job"></a>4.2 通过buildWithParameters触发有参数job</h3><p>举例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -X post <span class="hljs-string">&quot;http://token名称:token密码@jenkins地址/job/testforremote/build?token=remotoToken&amp;test=1&quot;</span><br><br><span class="hljs-comment">##举例：</span><br>curl -s -u admin:1145917aeee2706f88711601f5b769deec -X POST http://192.168.0.196:8080/job/test/buildWithParameters?token=test123456&amp;tag=0.0.1<br></code></pre></td></tr></table></figure><h3 id="4-3-通过传输json触发有参数job"><a href="#4-3-通过传输json触发有参数job" class="headerlink" title="4.3 通过传输json触发有参数job"></a>4.3 通过传输json触发有参数job</h3><p>当参数比较长时使用4.2的方法就不行了，此时可以使用json传参。</p><p>举例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -u token名称:token密码 -X POST -F <span class="hljs-string">&quot;token=remotoToken&quot;</span> -F json=<span class="hljs-string">&#x27;&#123;&quot;parameter&quot;:[&#123;&quot;name&quot;:&quot;test&quot;,&quot;value&quot;:&quot;1&quot;&#125;]&#125;&#x27;</span> http://jenkins地址/job/testforremote/build<br></code></pre></td></tr></table></figure><h3 id="4-4-传输文件"><a href="#4-4-传输文件" class="headerlink" title="4.4 传输文件"></a>4.4 传输文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -u token名称:token密码 -X POST -F <span class="hljs-string">&quot;token=remotoToken&quot;</span> -F json=<span class="hljs-string">&#x27;&#123;&quot;parameter&quot;:[&#123;&quot;name&quot;:&quot;test&quot;,&quot;value&quot;:&quot;1&quot;&#125;,</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins基于shell实现简单的代码部署，与gitlab的使用</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Jenkins基于shell实现简单的代码部署，与gitlab的使用"><a href="#Jenkins基于shell实现简单的代码部署，与gitlab的使用" class="headerlink" title="Jenkins基于shell实现简单的代码部署，与gitlab的使用"></a>Jenkins基于shell实现简单的代码部署，与gitlab的使用</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">#参考视频：https://www.bilibili.com/video/BV16v411V7CQ?p=4<br>#全文档：https://github.com/pipiguai0123/Jenkinsdoc<br></code></pre></td></tr></table></figure><h2 id="先测试使用ssh进行代码克隆："><a href="#先测试使用ssh进行代码克隆：" class="headerlink" title="先测试使用ssh进行代码克隆："></a>先测试使用ssh进行代码克隆：</h2><p>首先在Jenkins服务器上生成ssh秘钥：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen -t rsa -P <span class="hljs-string">&quot;&quot;</span> -f ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><p>生成了公钥（id_rsa.pub）和私钥（id_rsa)</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211221112220027.png" alt="image-20211221112220027"></p><p>将生成的公钥（id_rsa.pub）复制到gitlab的SSH秘钥内</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211221113051193.png" alt="image-20211221113051193"></p><p>在Jenkins服务器上使用git命令测试是否能远程拷贝gitlab代码仓库内数据</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223154834727.png" alt="image-20211223154834727"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> ssh://git@192.168.94.188:2222/jiangzhenzhou/devops.git<br></code></pre></td></tr></table></figure><p><strong>我这里git使用的2222端口：采用的是docker运行的gitlab，2222端口映射的是gitlab容器22端口</strong></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211221172045756.png" alt="image-20211221172045756"></p><p>执行命令后，发现已经拉取成功，成功显示如下：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223155001524.png" alt="image-20211223155001524"></p><h2 id="一、通过jenkins自动化clone代码："><a href="#一、通过jenkins自动化clone代码：" class="headerlink" title="一、通过jenkins自动化clone代码："></a>一、通过jenkins自动化clone代码：</h2><h3 id="1-1、登录到Jenkins，新建一个任务：我这里用test名称"><a href="#1-1、登录到Jenkins，新建一个任务：我这里用test名称" class="headerlink" title="1.1、登录到Jenkins，新建一个任务：我这里用test名称"></a>1.1、登录到Jenkins，新建一个任务：我这里用test名称</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223112134104.png" alt="image-20211223112134104"></p><h3 id="1-2、源码管理-gt-gt-Git-gt-gt-添加URL-gt-gt-添加凭据"><a href="#1-2、源码管理-gt-gt-Git-gt-gt-添加URL-gt-gt-添加凭据" class="headerlink" title="1.2、源码管理&gt;&gt;Git&gt;&gt;添加URL&gt;&gt;添加凭据"></a>1.2、源码管理&gt;&gt;Git&gt;&gt;添加URL&gt;&gt;添加凭据</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223154138145.png" alt="image-20211223154138145"></p><h3 id="1-3、凭据类型选择-gt-gt-SSH-Username-with-private-key-gt-gt-添加私钥"><a href="#1-3、凭据类型选择-gt-gt-SSH-Username-with-private-key-gt-gt-添加私钥" class="headerlink" title="1.3、凭据类型选择&gt;&gt;SSH Username with private key &gt;&gt;添加私钥"></a>1.3、凭据类型选择&gt;&gt;SSH Username with private key &gt;&gt;添加私钥</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223142334979.png" alt="image-20211223142334979"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223142825593.png" alt="image-20211223142825593"></p><h3 id="1-4、复制私钥："><a href="#1-4、复制私钥：" class="headerlink" title="1.4、复制私钥："></a>1.4、复制私钥：</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/root/</span>.ssh/id_rsa<br></code></pre></td></tr></table></figure><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220512150151024.png" alt="image-20220512150151024"></p><h3 id="1-5、添加私钥以后，选择root。并指定代码拉取的分支"><a href="#1-5、添加私钥以后，选择root。并指定代码拉取的分支" class="headerlink" title="1.5、添加私钥以后，选择root。并指定代码拉取的分支"></a>1.5、添加私钥以后，选择root。并指定代码拉取的分支</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223151906344.png" alt="image-20211223151906344"></p><h3 id="1-6、应用并保存后-gt-gt-点击“立即构建”即可完成"><a href="#1-6、应用并保存后-gt-gt-点击“立即构建”即可完成" class="headerlink" title="1.6、应用并保存后&gt;&gt;点击“立即构建”即可完成"></a>1.6、应用并保存后&gt;&gt;点击“立即构建”即可完成</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223154552810.png" alt="image-20211223154552810"></p><h3 id="1-7、以上步骤即可使用Jenkins系统拉取gitlab代码仓库代码"><a href="#1-7、以上步骤即可使用Jenkins系统拉取gitlab代码仓库代码" class="headerlink" title="1.7、以上步骤即可使用Jenkins系统拉取gitlab代码仓库代码"></a>1.7、以上步骤即可使用Jenkins系统拉取gitlab代码仓库代码</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223160446723.png" alt="image-20211223160446723"></p><h3 id="1-8、构建-gt-gt-选择执行shell-gt-gt-即可添加源shell命令，我添加命令：-ip-add-做测试"><a href="#1-8、构建-gt-gt-选择执行shell-gt-gt-即可添加源shell命令，我添加命令：-ip-add-做测试" class="headerlink" title="1.8、构建&gt;&gt;选择执行shell&gt;&gt;即可添加源shell命令，我添加命令： ip add 做测试"></a>1.8、构建&gt;&gt;选择执行shell&gt;&gt;即可添加源shell命令，我添加命令： ip add 做测试</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223160621391.png" alt="image-20211223160621391"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211223162022256.png" alt="image-20211223162022256"></p><h3 id="1-9、点击“立即构建”以后，即可在日志内看到执行的命令，在输出的日志中进入工作空间，能看到代码已经被克隆"><a href="#1-9、点击“立即构建”以后，即可在日志内看到执行的命令，在输出的日志中进入工作空间，能看到代码已经被克隆" class="headerlink" title="1.9、点击“立即构建”以后，即可在日志内看到执行的命令，在输出的日志中进入工作空间，能看到代码已经被克隆"></a>1.9、点击“立即构建”以后，即可在日志内看到执行的命令，在输出的日志中进入工作空间，能看到代码已经被克隆</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220512151250724.png" alt="image-20220512151250724"></p><h2 id="二、通过shell命令clone代码并部署Tomcat项目"><a href="#二、通过shell命令clone代码并部署Tomcat项目" class="headerlink" title="二、通过shell命令clone代码并部署Tomcat项目"></a>二、通过shell命令clone代码并部署Tomcat项目</h2><h3 id="2-1、tomcat服务器信息："><a href="#2-1、tomcat服务器信息：" class="headerlink" title="2.1、tomcat服务器信息："></a>2.1、tomcat服务器信息：</h3><p>服务器ip：192.168.94.155<br>浏览器页面访问：192.168.94.155:8080<br>html放置路径：&#x2F;app&#x2F;html&#x2F;www&#x2F;<br>tomcat安装路径：&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;</p><h3 id="2-2、在jenkins上根据之前的配置完成后，编写执行的代码"><a href="#2-2、在jenkins上根据之前的配置完成后，编写执行的代码" class="headerlink" title="2.2、在jenkins上根据之前的配置完成后，编写执行的代码"></a>2.2、在jenkins上根据之前的配置完成后，编写执行的代码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#将从gitlab克隆的web项目打包</span><br>tar -acvf web.tar.gz ./*<br><span class="hljs-comment">#停止tomcat服务</span><br>ssh root@192.168.94.155 &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">/usr/local/tomcat/bin/shutdown.sh</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment">#将压缩包分发</span><br>scp web.tar.gz 192.168.94.155:/app/html/www<br><span class="hljs-comment">#解压文件,并启动tomcat</span><br>ssh root@192.168.94.155 &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">tar -xnf /app/html/www/web.tar.gz  -C /app/html/www/</span><br><span class="hljs-string">ls -l /app/html/www</span><br><span class="hljs-string">/usr/local/tomcat/bin/startup.sh</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513113508025.png" alt="image-20220513113508025"></p><h3 id="2-3、点击立即构建，查看控制台输出。显示SUCCESS，代表已经部署成功！"><a href="#2-3、点击立即构建，查看控制台输出。显示SUCCESS，代表已经部署成功！" class="headerlink" title="2.3、点击立即构建，查看控制台输出。显示SUCCESS，代表已经部署成功！"></a>2.3、点击立即构建，查看控制台输出。显示SUCCESS，代表已经部署成功！</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513113626357.png" alt="image-20220513113626357"></p><h3 id="2-4、访问tomcat网页，发现项目已经部署！"><a href="#2-4、访问tomcat网页，发现项目已经部署！" class="headerlink" title="2.4、访问tomcat网页，发现项目已经部署！"></a>2.4、访问tomcat网页，发现项目已经部署！</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513114401449.png" alt="image-20220513114401449"></p><h2 id="三、jenkins新增节点"><a href="#三、jenkins新增节点" class="headerlink" title="三、jenkins新增节点"></a>三、jenkins新增节点</h2><p>新节点准备工作：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>、安装特定的jdk版本<br><span class="hljs-number">2</span>、创建与master机器一样的工作目录，一般默认为：<span class="hljs-regexp">/var/</span>lib/jenkins<br>mkdir -p <span class="hljs-regexp">/var/</span>lib/jenkins<br><span class="hljs-number">3</span>、安装git<br>yum install git -y<br></code></pre></td></tr></table></figure><h3 id="3-1、点击系统管理-gt-gt-节点管理-gt-gt-新建节点-gt-gt-输入节点名称，并勾选固定节点-gt-gt-create"><a href="#3-1、点击系统管理-gt-gt-节点管理-gt-gt-新建节点-gt-gt-输入节点名称，并勾选固定节点-gt-gt-create" class="headerlink" title="3.1、点击系统管理&gt;&gt;节点管理&gt;&gt;新建节点&gt;&gt;输入节点名称，并勾选固定节点&gt;&gt;create"></a>3.1、点击系统管理&gt;&gt;节点管理&gt;&gt;新建节点&gt;&gt;输入节点名称，并勾选固定节点&gt;&gt;create</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513151121013.png" alt="image-20220513151121013"></p><h3 id="3-2、填写相关的信息"><a href="#3-2、填写相关的信息" class="headerlink" title="3.2、填写相关的信息"></a>3.2、填写相关的信息</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513152026055.png" alt="image-20220513152026055"></p><p> #备注：选择只运行绑定到这个机器的job：可以实现：根据项目来进行部署，该节点机器设置免密认证等。实现项目管控。</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513160011024.png" alt="image-20220513160011024"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513154954595.png" alt="image-20220513154954595"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513160257439.png" alt="image-20220513160257439"></p><p><strong>备注：节点属性根据用途和实际情况进行添加</strong></p><h3 id="3-3、点击保存后，刷新状态，可以看到jenkins-agent1已经添加成功"><a href="#3-3、点击保存后，刷新状态，可以看到jenkins-agent1已经添加成功" class="headerlink" title="3.3、点击保存后，刷新状态，可以看到jenkins-agent1已经添加成功"></a>3.3、点击保存后，刷新状态，可以看到jenkins-agent1已经添加成功</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513160856924.png" alt="image-20220513160856924"></p><p><strong>备注：如果有报错和故障提示，可以通过查看执行的日志进行问题排查</strong></p><h2 id="四、使用Jenkins-Pipline实现部署Tomcat项目"><a href="#四、使用Jenkins-Pipline实现部署Tomcat项目" class="headerlink" title="四、使用Jenkins Pipline实现部署Tomcat项目"></a>四、使用Jenkins Pipline实现部署Tomcat项目</h2><p>官网：<a href="https://www.jenkins.io/zh/doc/book/pipeline/">https://www.jenkins.io/zh/doc/book/pipeline/</a></p><h3 id="4-1、新建任务-gt-gt-输入任务名称-gt-gt-选择流水线"><a href="#4-1、新建任务-gt-gt-输入任务名称-gt-gt-选择流水线" class="headerlink" title="4.1、新建任务&gt;&gt;输入任务名称&gt;&gt;选择流水线"></a>4.1、新建任务&gt;&gt;输入任务名称&gt;&gt;选择流水线</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220513163848298.png" alt="image-20220513163848298"></p><h3 id="4-2、选择流水线"><a href="#4-2、选择流水线" class="headerlink" title="4.2、选择流水线"></a>4.2、选择流水线</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220516163449538.png" alt="image-20220516163449538"></p><h3 id="4-3、写好Pipline语句（Pipline的语法使用，和生成，请阅读《五、流水线语法的使用》）"><a href="#4-3、写好Pipline语句（Pipline的语法使用，和生成，请阅读《五、流水线语法的使用》）" class="headerlink" title="4.3、写好Pipline语句（Pipline的语法使用，和生成，请阅读《五、流水线语法的使用》）"></a>4.3、写好Pipline语句（Pipline的语法使用，和生成，请阅读《五、流水线语法的使用》）</h3><p>以下代码实现，流水线clone代码并部署Tomcat项目（脚本式）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#采用脚本式格式编写：</span><br>node&#123;<br>    stage(<span class="hljs-string">&quot;克隆代码&quot;</span>) &#123;<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;克隆代码&quot;</span><br>sh <span class="hljs-string">&quot;cd /var/lib/jenkins/workspace/test-web &amp;&amp; rm -rf ./*&quot;</span><br>        git branch: <span class="hljs-string">&#x27;main&#x27;</span>, credentialsId: <span class="hljs-string">&#x27;81fe0c81-01bd-4d7e-8e08-a5d22d8fd6a9&#x27;</span>, url: <span class="hljs-string">&#x27;ssh://git@192.168.31.194:2222/root/web.git&#x27;</span><br>      &#125;<br>stage(<span class="hljs-string">&quot;打包项目&quot;</span>) &#123;<br>        sh <span class="hljs-string">&quot;tar -acvf web.tar.gz ./* &quot;</span><br>      &#125;<br>    stage(<span class="hljs-string">&quot;关闭服务&quot;</span>) &#123;<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;关闭服务&quot;</span><br>sh <span class="hljs-string">&#x27;ssh root@192.168.94.155 &quot;/bin/bash /usr/local/tomcat/bin/shutdown.sh &amp;&amp; rm -rf /app/html/www/*&quot;&#x27;</span><br>      &#125;<br>    stage(<span class="hljs-string">&quot;代码部署&quot;</span>) &#123;<br>        sh <span class="hljs-string">&#x27;scp web.tar.gz 192.168.94.155:/app/html/www&#x27;</span><br>    sh <span class="hljs-string">&#x27;ssh root@192.168.94.155 &quot;tar -xnf /app/html/www/web.tar.gz  -C /app/html/www/ &amp;&amp; ls -l /app/html/www&quot;&#x27;</span><br>      &#125;<br>    stage(<span class="hljs-string">&quot;开启服务&quot;</span>) &#123;<br>    sh <span class="hljs-string">&#x27;ssh root@192.168.94.155 &quot;/usr/local/tomcat/bin/startup.sh&quot;&#x27;</span><br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接点击构建即可：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220516163808779.png" alt="image-20220516163808779"></p><h2 id="五、流水线语法的使用："><a href="#五、流水线语法的使用：" class="headerlink" title="五、流水线语法的使用："></a>五、流水线语法的使用：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">pipline语法:<br>Stage:阶段,一个pipline可以划分为若干个stage，每个stage都是一个操作步骤，比如 <span class="hljs-built_in">clone</span>代码、代码编译、代码测试和代码部署，阶段是一个逻辑分组，可以跨多个node执行<br>Node:节点，每个node都是一个jenkins节点，可以是jenkins master也可以是jenkins agent，node是执行step的具体服务器。<br>    Step:步骤，step是jenkins pipline最基本的操作单元，从在服务器创建目录到构建容器镜像，由各类Jenkins 插件提供实现，一个stage中可以有多个step，例如: sh“make<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="5-1、jenkins自带了流水线的语法生成："><a href="#5-1、jenkins自带了流水线的语法生成：" class="headerlink" title="5.1、jenkins自带了流水线的语法生成："></a>5.1、jenkins自带了流水线的语法生成：</h3><p>例如：自动生成git的连接串</p><p>选择流水线语法&gt;&gt;选择示例步骤&gt;&gt;选择git&gt;&gt;填写信息后，生成流水线脚本</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220516163648835.png" alt="image-20220516163648835"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220516170143369.png" alt="image-20220516170143369"></p><h3 id="5-2、pipline脚本式流水线与声明式流水线"><a href="#5-2、pipline脚本式流水线与声明式流水线" class="headerlink" title="5.2、pipline脚本式流水线与声明式流水线"></a>5.2、pipline脚本式流水线与声明式流水线</h3><p>以下为脚本式流水线：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">//node的jenkins-agent1:指在代理jenkins-agent1上执行<br>node(<span class="hljs-string">&quot;jenkins-agent1&quot;</span>)&#123; <br>      stage(<span class="hljs-string">&quot;克隆代码&quot;</span>) &#123;  // 定义 <span class="hljs-string">&quot;克隆代码&quot;</span> 阶段。<br>           <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;克隆代码&quot;</span><br>  sh <span class="hljs-string">&quot;cd /var/lib/jenkins/workspace/test-web &amp;&amp; rm -rf ./*&quot;</span><br>           git branch: <span class="hljs-string">&#x27;main&#x27;</span>, credentialsId: <span class="hljs-string">&#x27;81fe0c81-01bd-4d7e-8e08-a5d22d8fd6a9&#x27;</span>, url: <span class="hljs-string">&#x27;ssh://git@192.168.31.194:2222/root/web.git&#x27;</span><br>        &#125;<br></code></pre></td></tr></table></figure><p>以下为声明式流水线 :</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs sh"> pipeline &#123;<br>    agent any //在任何可用的代理上，执行流水线或它的任何阶段<br>    //agent &#123; node &#123; label <span class="hljs-string">&#x27;jenkins-agent1&#x27;</span>   //在代理jenkins-agent1上执行<br>    //  customWorkspace <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;workspace&#125;</span>&quot;</span> //指定运行的工作目录（不写为默认路径）<br>    //      &#125;    &#125; <br>    options &#123;<br>        timestamps()          //日志会有时间<br>        skipDefaultCheckout() //删除隐式checkout scm语句<br>        disableConcurrentBuilds() //禁止并行<br>        <span class="hljs-built_in">timeout</span>(time: 1, unit: <span class="hljs-string">&#x27;HOURS&#x27;</span> )  //流水线超时设置1h，超时自动结束<br>    &#125;<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Build&#x27;</span>) &#123;  // 定义 <span class="hljs-string">&quot;Build&quot;</span> 阶段。<br>            steps &#123;<br>              //agent &#123; label <span class="hljs-string">&#x27;master1&#x27;</span>&#125;  该步骤在master1上执行<br>              <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;克隆代码&quot;</span><br>              sh <span class="hljs-string">&quot;cd /var/lib/jenkins/workspace/test-web &amp;&amp; rm -rf ./*&quot;</span>  /<br>              //执行与 <span class="hljs-string">&quot;Build&quot;</span> 阶段相关的步骤。<br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Test&#x27;</span>) &#123; <br>            steps &#123;<br>                // <br>            &#125;<br>        &#125;<br>    &#125;<br>    //构建后操作<br>    post &#123;<br>       always &#123;<br>           script&#123;<br>               println(<span class="hljs-string">&quot;always&quot;</span>)<br>           &#125;<br>       &#125;<br>       success &#123; //成功后执行<br>           script&#123;<br>           currentBuild.description = <span class="hljs-string">&quot;\n 构建成功！&quot;</span><br>           &#125;<br>       &#125;<br>       failure &#123; //失败后执行<br>           script&#123;<br>           currentBuild.description = <span class="hljs-string">&quot;\n 构建失败！&quot;</span><br>           &#125;<br>       &#125;<br>       aborted &#123; //取消后执行<br>       script&#123;<br>           currentBuild.description = <span class="hljs-string">&quot;\n 构建取消！&quot;</span>  //全局构建描述<br>           &#125;<br>       &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3、实战："><a href="#5-3、实战：" class="headerlink" title="5.3、实战："></a>5.3、实战：</h3><p>根据《四、使用Jenkins Pipline实现部署Tomcat项目》4.3 中编写流水线</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs sh">pipeline &#123;<br>agent &#123;<br>    label <span class="hljs-string">&#x27;master&#x27;</span><br>&#125;<br>options &#123;<br>    timestamps()<br>    <span class="hljs-built_in">timeout</span>(time: 1, unit: <span class="hljs-string">&#x27;HOURS&#x27;</span> )<br>&#125;<br>stages &#123;<br>stage(<span class="hljs-string">&#x27;克隆代码&#x27;</span>) &#123;<br>steps &#123;<br>sh <span class="hljs-string">&quot;cd /var/lib/jenkins/workspace/test-web &amp;&amp; rm -rf ./*&quot;</span><br>git branch: <span class="hljs-string">&#x27;main&#x27;</span>, credentialsId: <span class="hljs-string">&#x27;81fe0c81-01bd-4d7e-8e08-a5d22d8fd6a9&#x27;</span>, url: <span class="hljs-string">&#x27;ssh://git@192.168.31.194:2222/root/web.git&#x27;</span><br>              &#125;<br>&#125;<br>stage(<span class="hljs-string">&#x27;打包项目&#x27;</span>) &#123;<br>steps &#123;<br>sh <span class="hljs-string">&quot;tar -acvf web.tar.gz ./* &quot;</span><br><br>&#125;<br>&#125;<br>stage(<span class="hljs-string">&#x27;关闭服务&#x27;</span>) &#123;<br>steps &#123;<br>sh <span class="hljs-string">&#x27;ssh root@192.168.94.155 &quot;/bin/bash /usr/local/tomcat/bin/shutdown.sh &amp;&amp; rm -rf /app/html/www/*&quot;&#x27;</span><br>&#125;<br>&#125;<br>stage(<span class="hljs-string">&#x27;代码部署&#x27;</span>) &#123;<br>steps &#123;<br>sh <span class="hljs-string">&#x27;scp web.tar.gz 192.168.94.155:/app/html/www&#x27;</span><br>sh <span class="hljs-string">&#x27;ssh root@192.168.94.155 &quot;tar -xnf /app/html/www/web.tar.gz  -C /app/html/www/ &amp;&amp; ls -l /app/html/www&quot;&#x27;</span><br>&#125;<br>&#125;<br>stage(<span class="hljs-string">&#x27;开启服务&#x27;</span>) &#123;<br>steps &#123;<br>sh <span class="hljs-string">&#x27;ssh root@192.168.94.155 &quot;/usr/local/tomcat/bin/startup.sh&quot;&#x27;</span><br><br>&#125;<br>&#125;<br>&#125;<br>post &#123;<br>failure &#123; //失败后执行<br>script&#123;<br>currentBuild.description = <span class="hljs-string">&quot;\n 构建失败！&quot;</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>构建后，输出结果：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520145838621.png" alt="image-20220520145838621"></p><h3 id="5-4、设置流水线语法的版本控制。"><a href="#5-4、设置流水线语法的版本控制。" class="headerlink" title="5.4、设置流水线语法的版本控制。"></a>5.4、设置流水线语法的版本控制。</h3><p>创建Jenkinsfile存放流水线pipeline语法，并将Jenkinsflie推送到gitlab仓库</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220519100701675.png" alt="image-20220519100701675"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220519100309698.png" alt="image-20220519100309698"></p><p>修改流水线配置</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220519101520819.png" alt="image-20220519101520819"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220519101704757.png" alt="image-20220519101704757"></p><p>##备注：脚本路径为上传到gitlab的仓库路径，我的为主页，所以路径为：Jenkins，如果是在scripts下,就写:scripts&#x2F;Jenkinsfile</p><p>保存后点构建即可！</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220520143652198.png" alt="image-20220520143652198"></p><h3 id="5-5、jenkins共享库"><a href="#5-5、jenkins共享库" class="headerlink" title="5.5、jenkins共享库"></a>5.5、jenkins共享库</h3><p>本人github上共享库地址为：<a href="https://github.com/pipiguai0123/JenkinsShareLibrary">https://github.com/pipiguai0123/JenkinsShareLibrary</a></p><h3 id="5-5-1、jenkins设置："><a href="#5-5-1、jenkins设置：" class="headerlink" title="5.5.1、jenkins设置："></a>5.5.1、jenkins设置：</h3><p>系统管理&gt;系统配置&gt;Global Pipeline Libraries</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609165726963.png" alt="image-20220609165726963"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609165811130.png" alt="image-20220609165811130"></p><p>备注：因为我这边使用的是github上的，所以仓库使用的是github上的，公司内部使用gitlab的话，以下为举例，采用gitlab地址：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609165914728.png" alt="image-20220609165914728"></p><p>jenkins共享库的文件结构为：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609160829641.png" alt="image-20220609160829641"></p><h3 id="5-5-2、使用github共享库实现《使用Jenkins-Pipline实现部署Tomcat项目，构建的状态发送邮件》："><a href="#5-5-2、使用github共享库实现《使用Jenkins-Pipline实现部署Tomcat项目，构建的状态发送邮件》：" class="headerlink" title="5.5.2、使用github共享库实现《使用Jenkins Pipline实现部署Tomcat项目，构建的状态发送邮件》："></a>5.5.2、使用github共享库实现《使用Jenkins Pipline实现部署Tomcat项目，构建的状态发送邮件》：</h3><p>需要先将jenkins设置邮件发送，具体可参考《jenkins使用–jenkins设置邮件发送》文档。</p><p>我这边已将Pipline代码上传到了github上的test.jenkinsfiles，以下为test.jenkins详解</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#!groovy</span><br><br>@Library(<span class="hljs-string">&#x27;jenkinslibrary@main&#x27;</span>) _ <br>//表示调用上边配置共享库步骤配置的名字，这里还可以通过跟上不同后缀标识选择不同分支。 默认是 master 分支，这里因为我们用的是 main 分支，所以需要显式指定<br><br>def toemail = new org.devops.toemail()<br>//使用/src/org/devops下的toemail类<br>userEmail = <span class="hljs-string">&quot;1962821461@qq.com&quot;</span><br>//定义发送的邮箱地址<br>pipeline&#123;<br>    agent &#123; label <span class="hljs-string">&#x27;master&#x27;</span> &#125;<br>    <br>    stages&#123;<br>            //<span class="hljs-comment">#省略内容</span><br>        &#125;<br><br>    post &#123;<br>        always&#123;<br>            script&#123;<br>                println(<span class="hljs-string">&quot;always&quot;</span>)<br>            &#125;<br>        &#125;<br>        <br>        success&#123;<br>            script&#123;<br>                println(<span class="hljs-string">&quot;success&quot;</span>)<br>                //对应/src/org/devops下类传递的变量，传递“流水线成功”和“邮箱地址”<br>                toemail.Email(<span class="hljs-string">&quot;流水线成功！&quot;</span>,userEmail)<br>            <br>            &#125;<br>        <br>        &#125;<br><span class="hljs-comment">#....省略....</span><br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>新增流水线，设置流水线配置，采用登录获取设置</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609164938179.png" alt="image-20220609164938179"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609165143255.png" alt="image-20220609165143255"></p><p>#保存后构建：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609170329170.png" alt="image-20220609170329170"></p><p>构建后，将会收到相关邮件通知：</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E5%AE%9E%E8%B7%B5/Jenkins%E5%9F%BA%E4%BA%8Eshell%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%EF%BC%8C%E4%B8%8Egitlab%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220609170426188.png" alt="image-20220609170426188"></p><p>具体更加复杂的可参考文档：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt"><br>学习可参考文档：https://wiki.eryajf.net/pages/2415.html#_1-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E3%80%82<br><br>文档地址：https://github.com/pipiguai0123/Jenkinsdoc<br><br>学习视频：https://www.bilibili.com/video/BV1YJ411G7Yz?spm_id_from=333.337.search-card.all.click<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Devops</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins设置发送邮件通知</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Jenkins设置发送邮件通知"><a href="#Jenkins设置发送邮件通知" class="headerlink" title="Jenkins设置发送邮件通知"></a>Jenkins设置发送邮件通知</h1><p>Jenkins中配置邮件发送有2中形式，一种是在pipline项目中，另一种是在自由风格项目中（此处称为shell模式）</p><p><strong>Jenkins流水线执行完成后发送邮件通知：</strong></p><h2 id="1、Jenkins需要先配置邮件通知、使用QQ邮箱，设置SMTP服务器地址，输入用户名和密码。可以通过发送测试邮件测试是否配置完成！"><a href="#1、Jenkins需要先配置邮件通知、使用QQ邮箱，设置SMTP服务器地址，输入用户名和密码。可以通过发送测试邮件测试是否配置完成！" class="headerlink" title="1、Jenkins需要先配置邮件通知、使用QQ邮箱，设置SMTP服务器地址，输入用户名和密码。可以通过发送测试邮件测试是否配置完成！"></a>1、Jenkins需要先配置邮件通知、使用QQ邮箱，设置SMTP<a href="https://cloud.tencent.com/product/cvm?from=10680">服务器</a>地址，输入用户名和密码。可以通过发送测试邮件测试是否配置完成！</h2><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/image-20220609104228187.png" alt="image-20220609104228187"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/image-20220609104309635.png" alt="image-20220609104309635"></p><h2 id="2、安装插件Email-Extension，然后进入系统管理-gt-系统设置-gt-Extended-E-email-Notification。依旧使用的是QQ邮箱，填写SMTP服务器地址smtp-qq-com-和端口-465注意要开启SSL，密码为授权码。"><a href="#2、安装插件Email-Extension，然后进入系统管理-gt-系统设置-gt-Extended-E-email-Notification。依旧使用的是QQ邮箱，填写SMTP服务器地址smtp-qq-com-和端口-465注意要开启SSL，密码为授权码。" class="headerlink" title="2、安装插件Email Extension，然后进入系统管理-&gt; 系统设置 -&gt;Extended E-email Notification。依旧使用的是QQ邮箱，填写SMTP服务器地址smtp.qq.com 和端口 465注意要开启SSL，密码为授权码。"></a>2、安装插件<code>Email Extension</code>，然后进入系统管理-&gt; <code>系统设置</code> -&gt;<code>Extended E-email Notification</code>。依旧使用的是QQ邮箱，填写SMTP<a href="https://cloud.tencent.com/product/cvm?from=10680">服务器</a>地址<code>smtp.qq.com</code> 和端口 <code>465</code>注意要开启SSL，密码为授权码。</h2><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/image-20220609102329749.png" alt="image-20220609102329749"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/image-20220609102443096.png" alt="image-20220609102443096"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/image-20220609102544398.png" alt="image-20220609102544398"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/image-20220609102730225.png" alt="image-20220609102730225"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/image-20220609102631627.png" alt="image-20220609102631627"></p><p><strong>原低版本Jenkins构建后发送邮件，及配置变量（暂未验证）</strong>：</p><p>在项目中配置变量，此处用到的信息来自git仓库推送触发构建时传过来的信息，所以相对应的取值如图</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58bad5402fe.png" alt="img"></p><p>${JOB_NAME} ${BUILD_STATUS} ${BUILD_DISPLAY_NAME} ${BUILD_URL}属于Jenkins包含的环境变量， 可以不需要额外取值</p><p>${message} ${updatetime} ${account} 是自定义变量，定义方式需要根据推送信息来定</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58badd606ee.png" alt="img"></p><p>${message}变量名最终格式为 $.commits[0].message<br><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58bae6c3aa2.png" alt="img"></p><p>${updatetime} 变量名最终格式为 $.repository.updated_at</p><p>同理，其他变量也是这么设置，最终设置如下</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58baecc996f.png" alt="img"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58baf2e8412.png" alt="img"></p><p>以上这些是共同设置。</p><p>在pipline项目中，要发邮件，需要用如下设置</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58baf81cb7c.png" alt="img"></p><p>上图表示构建成功时发邮件，这只是个示例，通常时失败或者abort的时候才发</p><p>在shell项目中，则要多些设置</p><p>首先到 构建后操作 的部分</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58bb01ab8ed.png" alt="img"></p><p>选择 Editable Email Notification</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58bb0538ec9.png" alt="img"></p><p>填写信息</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58bb099430b.png" alt="img"></p><p>点击高级定义触发方式，如图</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%AE%BE%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/5e58bb0e6a357.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins自动备份</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Jenkins自动备份"><a href="#Jenkins自动备份" class="headerlink" title="Jenkins自动备份"></a>Jenkins自动备份</h1><h6 id="登录Jenkins，选择左侧菜单的系统管理，然后选择ThinBackup，如下图界面：登录Jenkins，选择左侧菜单的系统管理，然后选择ThinBackup，如下图界面："><a href="#登录Jenkins，选择左侧菜单的系统管理，然后选择ThinBackup，如下图界面：登录Jenkins，选择左侧菜单的系统管理，然后选择ThinBackup，如下图界面：" class="headerlink" title="登录Jenkins，选择左侧菜单的系统管理，然后选择ThinBackup，如下图界面：登录Jenkins，选择左侧菜单的系统管理，然后选择ThinBackup，如下图界面："></a>登录Jenkins，选择左侧菜单的<strong>系统管理</strong>，然后选择<strong>ThinBackup</strong>，如下图界面：登录Jenkins，选择左侧菜单的<strong>系统管理</strong>，然后选择<strong>ThinBackup</strong>，如下图界面：</h6><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/image-20230330104619475.png" alt="image-20230330104619475"></p><hr><p>选择<strong>Settings</strong>，界面如下图:</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/image-20230330104654310.png" alt="image-20230330104654310"></p><ul><li>Backup directory: 设置备份的目录，注意运行 jenkins 的目录要对它有写的权限。</li><li>Backup schedule for full backups: 设置完整定时任务，Example:<br><em>0 12</em> <em>1-5 Executes on 12:00 every weekday (Mo-Fr)</em></li><li>Backup schedule for differential backups 设置增量备份的计划，仅仅存储上一次完整备份的之后的更改部分。 对于增量备份，我们必须要有一个完整备份。</li><li>Max number of backup sets： 备份的最大数量数，默认为 -1.表示无限制。</li><li>Files excluded from backup (regular expression)： 备份需要排除的目录。</li><li>Wait until Jenkins&#x2F;Hudson is idle to perform a backup： 等待 jenkins 进入“Quiet Mode”(安静模式)的时候去进行备份。安静模式期间不处理任何任务。 建议勾选。</li><li>Force Jenkins to quiet mode after specified minutes ： 最长等待进入安静模式的时间，当超过这个时间，就会强制进入 安静模式。</li><li>Backup build results： 备份构建的结果，这个可能会产生大量的数据。占用磁盘会比较大。</li><li>Backup build archive： 只有勾选了 Backup build results 才会出现这个选项。备份存档，</li><li>Backup only builds marked to keep： 如果勾选此项，只备份被标记为 <code>Keep this build forever</code> 的上的构建结果。只有勾选了 Backup build results 才会出现这个选项。</li><li>Backup ‘userContent’ folder： 如果启用该备份，userContent 目录($JENKINS_HOME&#x2F;userContent)将会备份。 如果有软链接部分，不能备份该内容。</li><li>Backup next build number file： 如果启用该项，则 nextBuildNumber 也会进行备份。</li><li>Backup plugins archives： 启用该项的话，会进行备份插件存档。</li><li>Backup additional files： 备份特定的文件，可以通过正则进行匹配。</li><li>Clean up differential backups： 如果启用了该选项的话，在执行完整备份的时候，会删除差异化备份。</li><li>Move old backups to ZIP files： 将老的备份文件进行压缩。</li></ul><hr><p>如果点击<strong>Backup Now</strong>，会立即执行备份，根据需要备份的数据大小，会等待一段时间。</p><hr><p>点击<strong>Restore</strong>会进行备份恢复，界面如下图;</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/jenkins%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/image-20230330104712908.png" alt="image-20230330104712908"></p><p>选择想恢复的时间节点然后点击<strong>Restore</strong>，稍等一会儿就恢复了。</p>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置Jenkins用户和权限</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="配置Jenkins用户和权限"><a href="#配置Jenkins用户和权限" class="headerlink" title="配置Jenkins用户和权限"></a>配置Jenkins用户和权限</h1><h2 id="授权方法一：（适用于用户量少，对用户权限不需要过多的分配）"><a href="#授权方法一：（适用于用户量少，对用户权限不需要过多的分配）" class="headerlink" title="授权方法一：（适用于用户量少，对用户权限不需要过多的分配）"></a>授权方法一：（适用于用户量少，对用户权限不需要过多的分配）</h2><h3 id="1、系统管理-gt-gt-管理用户"><a href="#1、系统管理-gt-gt-管理用户" class="headerlink" title="1、系统管理&gt;&gt;管理用户"></a>1、系统管理&gt;&gt;管理用户</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20220506164349547.png" alt="image-20220506164349547"></p><h3 id="2、新建用户，填写用户信息"><a href="#2、新建用户，填写用户信息" class="headerlink" title="2、新建用户，填写用户信息"></a>2、新建用户，填写用户信息</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20220506164322659.png" alt="image-20220506164322659"></p><h3 id="3、系统管理-gt-gt-全局安全配置"><a href="#3、系统管理-gt-gt-全局安全配置" class="headerlink" title="3、系统管理&gt;&gt; 全局安全配置"></a>3、系统管理&gt;&gt; 全局安全配置</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20220510113937813.png" alt="image-20220510113937813"></p><h3 id="4、安全域选择《专有用户数据库》，授权策略选择《安全矩阵》"><a href="#4、安全域选择《专有用户数据库》，授权策略选择《安全矩阵》" class="headerlink" title="4、安全域选择《专有用户数据库》，授权策略选择《安全矩阵》"></a>4、安全域选择《专有用户数据库》，授权策略选择《安全矩阵》</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20220510114017088.png" alt="image-20220510114017088"></p><h3 id="5、创建用户矩阵，添加用户"><a href="#5、创建用户矩阵，添加用户" class="headerlink" title="5、创建用户矩阵，添加用户"></a>5、创建用户矩阵，添加用户</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20220510114119758.png" alt="image-20220510114119758"></p><h3 id="6、根据需求设置安全矩阵，任何用户在：全部一栏都需要选择Read，只读"><a href="#6、根据需求设置安全矩阵，任何用户在：全部一栏都需要选择Read，只读" class="headerlink" title="6、根据需求设置安全矩阵，任何用户在：全部一栏都需要选择Read，只读"></a>6、根据需求设置安全矩阵，任何用户在：全部一栏都需要选择Read，只读</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20220510114231574.png" alt="image-20220510114231574"></p><h2 id="授权方法二：（适用于项目多，划分角色和权限多）"><a href="#授权方法二：（适用于项目多，划分角色和权限多）" class="headerlink" title="授权方法二：（适用于项目多，划分角色和权限多）"></a>授权方法二：（适用于项目多，划分角色和权限多）</h2><p>参考文档：<a href="https://www.cnblogs.com/qican/p/15533972.html">https://www.cnblogs.com/qican/p/15533972.html</a></p><h3 id="1、安装插件："><a href="#1、安装插件：" class="headerlink" title="1、安装插件："></a>1、安装插件：</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Role</span>-based <span class="hljs-keyword">Authorization</span> Strategy<br></code></pre></td></tr></table></figure><h3 id="2、系统管理-gt-gt-全局安全配置"><a href="#2、系统管理-gt-gt-全局安全配置" class="headerlink" title="2、系统管理&gt;&gt; 全局安全配置"></a>2、系统管理&gt;&gt; 全局安全配置</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/image-20220510113937813.png" alt="image-20220510113937813"></p><h3 id="3、选择Role-based、并保存应用"><a href="#3、选择Role-based、并保存应用" class="headerlink" title="3、选择Role-based、并保存应用"></a>3、选择Role-based、并保存应用</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AEJenkins%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/1171635-20211116103911633-2008125869.png" alt="img"></p><h3 id="4、在系统管理页面找到Manage-and-Assign-Roles点击进入页面中、点击管理角色-》创建一个新的全局角色，分配权限后保存，再分配角色"><a href="#4、在系统管理页面找到Manage-and-Assign-Roles点击进入页面中、点击管理角色-》创建一个新的全局角色，分配权限后保存，再分配角色" class="headerlink" title="4、在系统管理页面找到Manage and Assign Roles点击进入页面中、点击管理角色-》创建一个新的全局角色，分配权限后保存，再分配角色"></a>4、在系统管理页面找到Manage and Assign Roles点击进入页面中、点击管理角色-》创建一个新的全局角色，分配权限后保存，再分配角色</h3><h2 id="问题处理："><a href="#问题处理：" class="headerlink" title="问题处理："></a>问题处理：</h2><h3 id="Jenkins权限配置错误，导致无法登录："><a href="#Jenkins权限配置错误，导致无法登录：" class="headerlink" title="Jenkins权限配置错误，导致无法登录："></a>Jenkins权限配置错误，导致无法登录：</h3><p>1.停止jenkins</p><p>2、配置config.xml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /var/lib/jenkins/config.xml<br>&lt;useSecurity&gt;<span class="hljs-literal">true</span>&lt;/useSecurity&gt; <span class="hljs-comment">#true 修改为:false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins-构建触发器-webhook</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Jenkins-构建触发器-webhook"><a href="#Jenkins-构建触发器-webhook" class="headerlink" title="Jenkins-构建触发器-webhook"></a>Jenkins-构建触发器-webhook</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">参考文档：https://www.cnblogs.com/byhh/p/15624146.html<br></code></pre></td></tr></table></figure><h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><p>我们已经了解到了，Jenkins 本身内置了4种构建触发器，分别是：</p><ul><li><strong>触发远程构建</strong></li><li><strong>其他项目工程构建后触发 Build after other projects are built</strong></li><li><strong>定时构建 Build periodically</strong></li><li><strong>轮循构建 Poll SCM</strong></li></ul><p>这四种构建触发器，基本可以满足我们日常工作的大部分需求，但也有其不足的地方：</p><p>1、触发远程构建：需要额外调用url 通知Jenkins 去触发构建</p><p>2、前置工程构建后触发：可以配合其他构建触发器一起使用，但是没有解决主要工程构建的问题</p><p>3、定时构建：会存在即使，远程仓库代码没有任何变动，也会触发构建，导致资源浪费</p><p>4、轮循构建:相比于定时构建，轮循构建只有在代码变动的情况下，才会触发构建，减少了一部分资源的浪费，但是依赖于轮询，其定时轮询机制本身会消耗Jenkins 服务器的资源，导致一些资源上的浪费。</p><p>综合以上问题：webhook 应运而生 （这里以 gitlab 为例）</p><p>webhook 拦截特定事件（如 push 代码后 ，自动触发远程构建），事件以 http 的方式通知第三方服务，如触发持续集成Jenkins。</p><h2 id="二、gitlab-利用-webhook-实现push-代码后-Jenkins-自动构建"><a href="#二、gitlab-利用-webhook-实现push-代码后-Jenkins-自动构建" class="headerlink" title="二、gitlab 利用 webhook 实现push 代码后 Jenkins 自动构建"></a>二、gitlab 利用 webhook 实现push 代码后 Jenkins 自动构建</h2><h3 id="1、Jenkins-安装-gitlab-相关插件"><a href="#1、Jenkins-安装-gitlab-相关插件" class="headerlink" title="1、Jenkins 安装 gitlab 相关插件"></a>1、Jenkins 安装 gitlab 相关插件</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/2560969-20211130141452458-1117825345.png" alt="img"></p><h3 id="2、插件安装完毕后，项目配置目录下-构建触发器器会新增-一个-触发器选项，选择并设置对应触发构建事件，保存殷勇即可"><a href="#2、插件安装完毕后，项目配置目录下-构建触发器器会新增-一个-触发器选项，选择并设置对应触发构建事件，保存殷勇即可" class="headerlink" title="2、插件安装完毕后，项目配置目录下 构建触发器器会新增 一个 触发器选项，选择并设置对应触发构建事件，保存殷勇即可"></a>2、插件安装完毕后，项目配置目录下 构建触发器器会新增 一个 触发器选项，选择并设置对应触发构建事件，保存殷勇即可</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/2560969-20211130141629398-1998578973.png" alt="img"></p><h3 id="3、gitlab-上设置webhook"><a href="#3、gitlab-上设置webhook" class="headerlink" title="3、gitlab 上设置webhook"></a>3、gitlab 上设置webhook</h3><p>管理员登录 gitlab 远程仓库，进入指定项目，设置入口 点击进入webhook 配置页面</p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/2560969-20211130141845535-890314326.png" alt="img"></p><h3 id="4、配置gitlab-webhook，配置完成后点击-add-webhook"><a href="#4、配置gitlab-webhook，配置完成后点击-add-webhook" class="headerlink" title="4、配置gitlab webhook，配置完成后点击 add webhook"></a>4、配置gitlab webhook，配置完成后点击 add webhook</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/2560969-20211130142549536-752996834.png" alt="img"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/2560969-20211130142703276-241677714.png" alt="img"></p><p>经测试webhook 已经生效，接下来可以试试 本地push 代码 检测 是否生效了！</p><h2 id="三、gitea利用-webhook-实现push-代码后-Jenkins-自动构建"><a href="#三、gitea利用-webhook-实现push-代码后-Jenkins-自动构建" class="headerlink" title="三、gitea利用 webhook 实现push 代码后 Jenkins 自动构建"></a>三、gitea利用 webhook 实现push 代码后 Jenkins 自动构建</h2><h3 id="1、jenkins安装插件：Generic-Webhook-Trigger-Plugin"><a href="#1、jenkins安装插件：Generic-Webhook-Trigger-Plugin" class="headerlink" title="1、jenkins安装插件：Generic Webhook Trigger Plugin "></a>1、jenkins安装插件：<code>Generic Webhook Trigger Plugin </code></h3><h3 id="2、在创建好项目之后配置Jenkins如下"><a href="#2、在创建好项目之后配置Jenkins如下" class="headerlink" title="2、在创建好项目之后配置Jenkins如下:"></a>2、在创建好项目之后配置Jenkins如下:</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/image-20230201175748145.png" alt="image-20230201175748145"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/image-20230201175803197.png" alt="image-20230201175803197"></p><p>保存即可，Jenkins配置完成接下来到gitea配置！</p><h3 id="3、gitea创建好代码库-进入代码库如下配置"><a href="#3、gitea创建好代码库-进入代码库如下配置" class="headerlink" title="3、gitea创建好代码库 进入代码库如下配置"></a>3、gitea创建好代码库 进入代码库如下配置</h3><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/20210307002010978.png" alt="img"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/20210307002052516.png" alt="img"></p><p><strong>然后注意目标url只写上jenkins地址和你的自定义token即可</strong></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/image-20230201180003191.png" alt="image-20230201180003191"></p><p><strong>保存后点击链接，测试推送</strong></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/image-20230201180256740.png" alt="image-20230201180256740"></p><p><img src="/2023/03/29/devops/jenkins/jenkins%E4%BD%BF%E7%94%A8/Jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8-webhook/image-20230201180113450.png" alt="image-20230201180113450"></p>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SonarQube安装部署</title>
    <link href="/2023/03/29/devops/sonarQube/sonarQube%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/03/29/devops/sonarQube/sonarQube%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SonarQube安装部署"><a href="#SonarQube安装部署" class="headerlink" title="SonarQube安装部署"></a>SonarQube安装部署</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">官方文档：https:<span class="hljs-regexp">//</span>docs.sonarqube.org<span class="hljs-regexp">/latest/</span>setup<span class="hljs-regexp">/install-server/</span><br><br>参考文档：https:<span class="hljs-regexp">//</span>cloud.tencent.com<span class="hljs-regexp">/developer/</span>article/<span class="hljs-number">1600167</span><br><br>SonarQube+SonarScanner 最全安装步骤：https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/xiaozi/</span>p/<span class="hljs-number">15503311</span>.html<br><br>k8s安装：https:<span class="hljs-regexp">//</span>wqblogs.com<span class="hljs-regexp">/2021/</span><span class="hljs-number">08</span><span class="hljs-regexp">/09/</span>sonarqube%E9%<span class="hljs-number">83</span>%A8%E7%BD%B2%E5%AE%<span class="hljs-number">89</span>%E8%A3%<span class="hljs-number">85</span>/<br></code></pre></td></tr></table></figure><h2 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h2><p><strong>Sonar (SonarQube)是一个开源平台，用于管理源代码的质量。</strong><br><strong>Sonar 不只是一个质量数据报告工具，更是代码质量管理平台。</strong><br>支持Java, C#, C&#x2F;C++, PL&#x2F;SQL, Cobol, JavaScrip, Groovy 等等二十几种编程语言的代码质量管理与检测。</p><p>Sonar可以从以下七个维度检测代码质量，而作为开发人员至少需要处理前5种代码质量问题。</p><ol><li>不遵循代码标准<br>sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具规范代码编写。</li><li>潜在的缺陷<br>sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具检 测出潜在的缺陷。</li><li>糟糕的复杂度分布<br>文件、类、方法等，如果复杂度过高将难以改变，这会使得开发人员 难以理解它们, 且如果没有自动化的单元测试，对于程序中的任何组件的改变都将可能导致需要全面的回归测试。</li><li>重复<br>显然程序中包含大量复制粘贴的代码是质量低下的，sonar可以展示 源码中重复严重的地方。</li><li>注释不足或者过多<br>没有注释将使代码可读性变差，特别是当不可避免地出现人员变动 时，程序的可读性将大幅下降 而过多的注释又会使得开发人员将精力过多地花费在阅读注释上，亦违背初衷。</li><li>缺乏单元测试<br>sonar可以很方便地统计并展示单元测试覆盖率。</li><li>糟糕的设计<br>通过sonar可以找出循环，展示包与包、类与类之间的相互依赖关系，可以检测自定义的架构规则 通过sonar可以管理第三方的jar包，可以利用LCOM4检测单个任务规则的应用情况， 检测藕合。</li></ol><h2 id="二、安装前准备以及注意事项："><a href="#二、安装前准备以及注意事项：" class="headerlink" title="二、安装前准备以及注意事项："></a>二、安装前准备以及注意事项：</h2><p><strong>安装前准备环境：</strong></p><table><thead><tr><th>环境&#x2F;工具&#x2F;服务器</th><th>版本</th></tr></thead><tbody><tr><td>192.168.94.154</td><td>centos7.9</td></tr><tr><td>jdk</td><td>11.0.14</td></tr><tr><td>sonarqube</td><td>9.6.1</td></tr><tr><td><strong>环境&#x2F;工具&#x2F;服务器</strong></td><td><strong>版本</strong></td></tr><tr><td>192.168.94.155</td><td>centos7.9</td></tr><tr><td>postgres</td><td>docker安装</td></tr></tbody></table><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">下载对应操作系统的安装包，官网下载链接：https://www.sonarqube.org/downloads/<br>sonarqube7.9及以上使用postgres为数据库使用<br>sonarqube7.8版本使用mysql `https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.8.zip`<br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">1.SonarQube安装使用依赖JDK，需提前安装配置好JDK相关信息<br><br>2.为了获得最佳性能，SonarQube 服务器和数据库应该安装在不同的主机上，并且服务器主机应该是专用的。服务器和数据库主机应位于同一网络中。<br><br>3.所有主机必须是时间同步的。<br></code></pre></td></tr></table></figure><h2 id="三、安装过程："><a href="#三、安装过程：" class="headerlink" title="三、安装过程："></a>三、安装过程：</h2><h3 id="1-下载sonarqube安装包"><a href="#1-下载sonarqube安装包" class="headerlink" title="1.下载sonarqube安装包"></a>1.下载sonarqube安装包</h3><p>下载安装包后，上传到&#x2F;app目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">unzip sonarqube-9.6.1.59531.zip<br><span class="hljs-built_in">cd</span> sonarqube-9.6.1.59531/<br></code></pre></td></tr></table></figure><h3 id="2-添加sonar系统用户"><a href="#2-添加sonar系统用户" class="headerlink" title="2.添加sonar系统用户"></a>2.添加sonar系统用户</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">groupadd sonar<br><br><span class="hljs-comment">#创建sonar用户，设置无法登录(无法登录可去掉)</span><br>useradd -g sonar -s /sbin/nologin sonar<br><br><span class="hljs-comment"># 设置权限</span><br><span class="hljs-built_in">chown</span> sonar:sonar -R /app/sonarqube/<br><br>su -s /bin/bash - sonar<br><br>注：SonarQube必须以普通用户运行，不能使用root用户<br></code></pre></td></tr></table></figure><h3 id="3-更改配置文件"><a href="#3-更改配置文件" class="headerlink" title="3.更改配置文件"></a>3.更改配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /app/sonarqube/sonarqube-9.6.1.59531/conf/sonar.properties<br><br><span class="hljs-comment">#已使用docker在192.168.94.155机器上安装postgres，安装postgres可参考文档</span><br>sonar.jdbc.username=postgres<br>sonar.jdbc.password=123456<br>sonar.jdbc.url=jdbc:postgresql://192.168.94.155:5432/sonar<br></code></pre></td></tr></table></figure><h3 id="4-启动SonarQube"><a href="#4-启动SonarQube" class="headerlink" title="4.启动SonarQube"></a>4.启动SonarQube</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">##第一次服务启动时，使用该命令，方便定位问题</span><br>/app/sonarqube/sonarqube-9.6.1.59531/bin/linux-x86-64/sonar.sh console<br><br><span class="hljs-comment">#无问题后</span><br>/app/sonarqube/sonarqube-9.6.1.59531/bin/linux-x86-64/sonar.sh start<br></code></pre></td></tr></table></figure><h4 id="可能会遇到的问题处理："><a href="#可能会遇到的问题处理：" class="headerlink" title="可能会遇到的问题处理："></a>可能会遇到的问题处理：</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs smali">问题：<br>ERROR: [1] bootstrap checks failed. You must address the points described in the following [1] lines before starting Elasticsearch.<br>bootstrap<span class="hljs-built_in"> check </span>failure [1] of [1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]<br><br>处理方法：<br>vim /etc/sysctl.conf<br><br><span class="hljs-comment">#最后一行添加,并保存退出</span><br>vm.max_map_count=262144<br><br><span class="hljs-comment">#加载使其生效</span><br>sysctl -p<br></code></pre></td></tr></table></figure><h3 id="5-登录配置"><a href="#5-登录配置" class="headerlink" title="5.登录配置"></a>5.登录配置</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs txt">启动成功：访问：192.168.94.154:9000<br>（1）默认账户admin/admin，首次登录，强制修改密码<br><br>（2）安装汉化插件：选择 Administration -&gt; Marketplace -&gt; Plugins 中搜索 Chinese pack ，然后Install.<br><br>![image-20220907102018599](sonarQube安装部署/image-20220907102018599.png)<br><br>注意：如遇到Chinese pack 插件不能直接在Marketplace中直接安装，可采用以下方式：<br><br>- 访问插件GitHub项目库：<br>https://github.com/xuhuisheng/sonar-l10n-zh/releases/tag/sonar-l10n-zh-plugin-9.4<br>- 下载Chinese pack jar包<br>- 把jar包放在SonarQube服务文件夹下的extensions/plugins中<br>举例：将jar包放置/app/sonarqube/sonarqube-9.6.1.59531/extensions/plugins<br>- 然后重启即可： ./sonar.sh restart<br></code></pre></td></tr></table></figure><h2 id="SonarScanner扫描"><a href="#SonarScanner扫描" class="headerlink" title="SonarScanner扫描"></a><strong>SonarScanner扫描</strong></h2><h3 id="1、下载地址：https-docs-sonarqube-org-latest-analysis-scan-sonarscanner"><a href="#1、下载地址：https-docs-sonarqube-org-latest-analysis-scan-sonarscanner" class="headerlink" title="1、下载地址：https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/"></a>1、下载地址：<code>https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/</code></h3><p><img src="/2023/03/29/devops/sonarQube/sonarQube%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/image-20220908145251627.png" alt="image-20220908145251627"></p><h3 id="2、解压文件并配置环境变量"><a href="#2、解压文件并配置环境变量" class="headerlink" title="2、解压文件并配置环境变量"></a>2、解压文件并配置环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#解压文件到指定目录</span><br>unzip sonar-scanner-cli-4.7.0.2747-linux.zip -d /opt/Sonar-scanner<br><br><span class="hljs-comment">#配置环境变量</span><br>vim /etc/profile<br><span class="hljs-comment">#按GG到最后一行，添加如下内容</span><br><span class="hljs-comment"># sonar-scanner</span><br><span class="hljs-built_in">export</span> Sonar_Home=/opt/Sonar-scanner<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$Sonar_Home</span>/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment">#使配置生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><p>扫描方式：可参考上面《SonarQube+SonarScanner 最全安装步骤》文献</p><h3 id="3、如果在项目的根目录下无法创建-sonar-project-properties-文件，有几种替代方法："><a href="#3、如果在项目的根目录下无法创建-sonar-project-properties-文件，有几种替代方法：" class="headerlink" title="3、如果在项目的根目录下无法创建 sonar-project.properties 文件，有几种替代方法："></a>3、如果在项目的根目录下无法创建 sonar-project.properties 文件，有几种替代方法：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">可以通过命令行直接指定属性：<br>sonar-scanner -Dsonar.projectKey=myproject -Dsonar.sources=src1<br><br>属性 project.settings 可用于指定项目配置文件的路径（该选项与该sonar.projectBaseDir属性不兼容）：<br>sonar-scanner -Dproject.settings=../myproject.properties<br><br>sonar.projectBaseDir从 SonarScanner 2.4 开始，可以通过属性设置要分析的项目的根文件夹。\<br>sonar-project.properties如果sonar.projectKey未在命令行中指定，此文件夹必须包含文件。可以在此项目配置文件中或通过命令行参数定义其他分析参数。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>SonarQube</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SonarQube</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker运行Nexus搭建Maven私服</title>
    <link href="/2023/03/29/devops/nexus/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8CNexus%E6%90%AD%E5%BB%BAMaven%E7%A7%81%E6%9C%8D/"/>
    <url>/2023/03/29/devops/nexus/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8CNexus%E6%90%AD%E5%BB%BAMaven%E7%A7%81%E6%9C%8D/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker运行Nexus搭建Maven私服"><a href="#使用docker运行Nexus搭建Maven私服" class="headerlink" title="使用docker运行Nexus搭建Maven私服"></a>使用docker运行Nexus搭建Maven私服</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://www.hangge.com/blog/cache/detail_2844.html<br></code></pre></td></tr></table></figure><h2 id="docker方式运行Nexus"><a href="#docker方式运行Nexus" class="headerlink" title="docker方式运行Nexus"></a>docker方式运行Nexus</h2><h3 id="1）拉取Nexus3-镜像："><a href="#1）拉取Nexus3-镜像：" class="headerlink" title="1）拉取Nexus3 镜像："></a>1）拉取Nexus3 镜像：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull sonatype/nexus3<br></code></pre></td></tr></table></figure><h3 id="2）接着执行如下命令，创建宿主机挂载目录："><a href="#2）接着执行如下命令，创建宿主机挂载目录：" class="headerlink" title="2）接着执行如下命令，创建宿主机挂载目录："></a>2）接着执行如下命令，创建宿主机挂载目录：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> –p /app/nexus-data<br><span class="hljs-built_in">chown</span> -R 200 /app/nexus-data<br><span class="hljs-comment">#chmod 777 /app/nexus-data</span><br></code></pre></td></tr></table></figure><h3 id="3）最后执行如下命令运行-Nexus3-容器即可："><a href="#3）最后执行如下命令运行-Nexus3-容器即可：" class="headerlink" title="3）最后执行如下命令运行 Nexus3 容器即可："></a>3）最后执行如下命令运行 Nexus3 容器即可：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d -e TZ=Asia/Shanghai \<br>--restart=always \<br>--name nexus3 \<br>-p 8081:8081 \<br>-v /app/nexus-data:/nexus-data \<br>sonatype/nexus3<br></code></pre></td></tr></table></figure><h2 id="nexus3-docker-数据迁移"><a href="#nexus3-docker-数据迁移" class="headerlink" title="nexus3 docker 数据迁移"></a>nexus3 docker 数据迁移</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">参考文档：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/allenjsl/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">119829495</span><br></code></pre></td></tr></table></figure><p>备注：数据迁移时：复制过去的数据目录需要给权限,有些启动不了的情况也需要赋予权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chown</span> -R 200<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Nexus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nexus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven安装部署</title>
    <link href="/2023/03/29/devops/maven/maven%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/29/devops/maven/maven%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Maven的使用"><a href="#Maven的使用" class="headerlink" title="Maven的使用"></a>Maven的使用</h1><p>详细文档：<a href="https://blog.csdn.net/lovequanquqn/article/details/81627807">https://blog.csdn.net/lovequanquqn/article/details/81627807</a></p><h2 id="Maven规定的目录结构"><a href="#Maven规定的目录结构" class="headerlink" title="Maven规定的目录结构"></a>Maven规定的目录结构</h2><p>若要使用Maven，那么项目的目录结构必须符合Maven的规范，其目录结构如下：</p><p><img src="/2023/03/29/devops/maven/maven%E7%9A%84%E4%BD%BF%E7%94%A8/201808131239225" alt="img"></p><h2 id="Maven基本命令"><a href="#Maven基本命令" class="headerlink" title="Maven基本命令"></a>Maven基本命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">-v:查询Maven版本<br>本命令用于检查maven是否安装成功。<br>Maven安装完成之后，在命令行输入mvn -v，若出现maven信息，则说明安装成功。<br><br>compile：编译<br>将java源文件编译成class文件<br><br><span class="hljs-built_in">test</span>:测试项目<br>执行<span class="hljs-built_in">test</span>目录下的测试用例<br><br>package:打包<br>将项目打成jar包<br><br>clean:删除target文件夹<br><br>install:安装<br>将当前项目放到Maven的本地仓库中，供其他项目使用。<br></code></pre></td></tr></table></figure><p><strong>什么是Maven仓库？</strong><br>    Maven仓库用来存放Maven管理的所有Jar包。分为：本地仓库 和 中央仓库。<br>    本地仓库：Maven本地的Jar包仓库。<br>    中央仓库： Maven官方提供的远程仓库。<br>    当项目编译时，Maven首先从本地仓库中寻找项目所需的Jar包，若本地仓库没有，再到Maven的中央仓库下载所需Jar包。</p><p><strong>什么是“坐标”？</strong><br>    在Maven中，坐标是Jar包的唯一标识，Maven通过坐标在仓库中找到项目所需的Jar包。</p><p>如下代码中，groupId和artifactId构成了一个Jar包的坐标。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.missbe.web.search<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>resource-search<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>groupId：所需Jar包的项目名</li><li>artifactId：所需Jar包的模块名</li><li>version：所需Jar包的版本号</li></ul><p><strong>传递依赖 与 排除依赖</strong><br>    传递依赖：如果我们的项目引用了一个Jar包，而该Jar包又引用了其他Jar包，那么在默认情况下项目编译时，Maven会把直接引用和间接引用的Jar包都下载到本地。<br>    排除依赖：如果我们只想下载直接引用的Jar包，那么需要在pom.xml中做如下配置：(将需要排除的Jar包的坐标写在中)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.missbe.web.search<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>resource-search<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>依赖范围scope</strong><br>    在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。        </p><ul><li>compile ：默认范围，用于编译      </li><li>provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath      </li><li>runtime: 在执行时需要使用      </li><li>test:    用于test任务时使用      </li><li>system: 需要外在提供相应的元素。通过systemPath来取得      </li><li>systemPath: 仅用于范围为system。提供相应的路径      </li><li>optional:   当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用</li></ul><p><strong>依赖冲突</strong><br>    若项目中多个Jar同时引用了相同的Jar时，会产生依赖冲突，但Maven采用了两种避免冲突的策略，因此在Maven中是不存在依赖冲突的。</p><p>​<strong>1.短路优先</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">本项目——&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>jar——&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B</span>.</span></span>jar——&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">X</span>.</span></span>jar<br>本项目——&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">C</span>.</span></span>jar——&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">X</span>.</span></span>jar<br></code></pre></td></tr></table></figure><p>若本项目引用了A.jar，A.jar又引用了B.jar，B.jar又引用了X.jar，并且C.jar也引用了X.jar。</p><p>在此时，Maven只会引用引用路径最短的Jar。</p><p>​<strong>2.声明优先</strong></p><p>若引用路径长度相同时，在pom.xml中谁先被声明，就使用谁。</p><p><strong>聚合</strong><br>    1.什么是聚合？<br>        将多个项目同时运行就称为聚合。<br>    2.如何实现聚合？<br>        只需在pom中作如下配置即可实现聚合：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>web-connection-pool<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>web-java-crawler<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>继承</strong><br>1.什么是继承？</p><p>在聚合多个项目时，如果这些被聚合的项目中需要引入相同的Jar，那么可以将这些Jar写入父pom中，各个子项目继承该pom即可。</p><p>2.如何实现继承？</p><p>父pom配置：将需要继承的Jar包的坐标放入标签即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.missbe.web.search<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>resource-search<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子pom配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>父pom所在项目的groupId<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>父pom所在项目的artifactId<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>父pom所在项目的版本号<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>resource-search<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.missbe.web.search<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>使用Maven构建Web项目</strong><br>    1.New Maven项目：选择WebApp：</p><p>​2.若使用JSP，需添加Servlet依赖：</p><p>注：Servlet依赖只在编译和测试时使用！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 只在编译和测试时运行 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.在Bulid Path中设置resource输出目录：<br>2.勾选：Dynamic Web Module<br>3.删掉测试目录<br>4.在pom中加入jetty的插件，并设置JDK版本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span>  <br>      <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.jetty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.3.10.v20160621<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span> <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行项目：</p><p>输入：jetty:run</p><p>访问127.0.0.1:8080</p><p>若出现如下界面，表示成功！</p><p><strong>pom.xml详解</strong><br>pom.xml是Maven的核心，你的项目需要什么Jar包就在pom.xml里面配置。当编译项目时Maven读取该文件，并从仓库中下载相应的Jar包。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--父项目的坐标。如果项目中没有规定某个元素的值，</span></span><br><span class="hljs-comment"><span class="language-xml">那么父项目中的对应值即为项目的默认值。 </span></span><br><span class="hljs-comment"><span class="language-xml">坐标包括group ID，artifact ID和 version。--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--被继承的父项目的构件标识符--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--被继承的父项目的全球唯一标识符--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--被继承的父项目的版本--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span> </span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，</span></span><br><span class="hljs-comment"><span class="language-xml">但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，</span></span><br><span class="hljs-comment"><span class="language-xml">确保稳定性。--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。</span></span><br><span class="hljs-comment"><span class="language-xml">并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：</span></span><br><span class="hljs-comment"><span class="language-xml">/com/mycompany/app--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.missbe.web<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，</span></span><br><span class="hljs-comment"><span class="language-xml">你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 </span></span><br><span class="hljs-comment"><span class="language-xml">特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，</span></span><br><span class="hljs-comment"><span class="language-xml">Maven为项目产生的构件包括：JARs，源码，二进制发布和WARs等。--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>search-resources<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建</span></span><br><span class="hljs-comment"><span class="language-xml">他们自己的构件类型，所以前面列的不是全部构件类型--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--项目的名称, Maven产生的文档用--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>search-resources<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--项目主页的URL, Maven产生的文档用--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.missbe.cn<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 项目的详细描述, Maven 产生的文档用。  当这个元素能够用HTML格式描述时</span></span><br><span class="hljs-comment"><span class="language-xml">（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 签）， </span></span><br><span class="hljs-comment"><span class="language-xml">不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，</span></span><br><span class="hljs-comment"><span class="language-xml">你应该修改你自己的索引页文件，而不是调整这里的文档。--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>A maven project to study maven.<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--描述了这个项目构建环境中的前提条件。--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">prerequisites</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--构建该项目或使用该插件所需要的Maven的最低版本--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">maven</span>/&gt;</span> </span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">prerequisites</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--构建项目需要的信息--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--该元素设置了项目源码目录，当构建项目的时候，</span></span><br><span class="hljs-comment"><span class="language-xml">构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">sourceDirectory</span>/&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：</span></span><br><span class="hljs-comment"><span class="language-xml">绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">scriptSourceDirectory</span>/&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，</span></span><br><span class="hljs-comment"><span class="language-xml">构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">testSourceDirectory</span>/&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--被编译过的应用程序class文件存放的目录。--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>/&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--被编译过的测试class文件存放的目录。--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">testOutputDirectory</span>/&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--使用来自该项目的一系列构建扩展--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--描述使用到的构建扩展。--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">extension</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--构建扩展的groupId--&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--构建扩展的artifactId--&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--构建扩展的版本--&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span> </span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">extension</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">extensions</span>&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，</span></span><br><span class="hljs-comment"><span class="language-xml">这些资源被包含在最终的打包文件里。--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--这个元素描述了项目相关或测试相关的所有资源路径--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$</span></span><span class="hljs-template-variable">&#123;project.build.outputDirectory&#125;</span><span class="language-xml"><span class="hljs-comment">）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。</span></span><br><span class="hljs-comment"><span class="language-xml">然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。--&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>/&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，</span></span><br><span class="hljs-comment"><span class="language-xml">文件在filters元素里列出。--&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>/&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--描述存放资源的目录，该路径相对POM路径--&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--包含的模式列表，例如**/*.xml.--&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--排除的模式列表，例如**/*.xml--&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span> </span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">testResources</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">testResource</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span> </span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">testResource</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">testResources</span>&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--构建产生的所有文件存放的目录--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--产生的构件的文件名，默认值是$</span></span><span class="hljs-template-variable">&#123;artifactId&#125;</span><span class="language-xml"><span class="hljs-comment">-$</span></span><span class="hljs-template-variable">&#123;version&#125;</span><span class="language-xml"><span class="hljs-comment">。--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>/&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--当filtering开关打开时，使用到的过滤器属性文件列表--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">filters</span>/&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。</span></span><br><span class="hljs-comment"><span class="language-xml">给定插件的任何本地配置都会覆盖这里的配置--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--使用的插件列表 。--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--plugin元素包含描述插件所需要的信息。--&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span> </span><br><span class="language-xml">          <span class="hljs-comment">&lt;!--插件在仓库里的group ID--&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-comment">&lt;!--插件在仓库里的artifact ID--&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-comment">&lt;!--被使用的插件的版本（或版本范围）--&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-comment">&lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，</span></span><br><span class="hljs-comment"><span class="language-xml">只有在真需要下载时，该元素才被设置成enabled。--&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>/&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-comment">&lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。--&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span> </span><br><span class="language-xml">            <span class="hljs-comment">&lt;!--execution元素包含了插件执行需要的信息--&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span> </span><br><span class="language-xml">              <span class="hljs-comment">&lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标--&gt;</span>  </span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span>  </span><br><span class="language-xml">              <span class="hljs-comment">&lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段--&gt;</span>  </span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>/&gt;</span>  </span><br><span class="language-xml">              <span class="hljs-comment">&lt;!--配置的执行目标--&gt;</span>  </span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span>  </span><br><span class="language-xml">              <span class="hljs-comment">&lt;!--配置是否被传播到子POM--&gt;</span>  </span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span>  </span><br><span class="language-xml">              <span class="hljs-comment">&lt;!--作为DOM对象的配置--&gt;</span>  </span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span> </span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span> </span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-comment">&lt;!--项目引入插件所需要的额外依赖--&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span> </span><br><span class="language-xml">            <span class="hljs-comment">&lt;!--参见dependencies/dependency元素--&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> </span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-comment">&lt;!--任何配置是否被传播到子项目--&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-comment">&lt;!--作为DOM对象的配置--&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--使用的插件列表--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>/&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span> </span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span> </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span> </span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span> </span><br><span class="language-xml">          <span class="hljs-comment">&lt;!--参见dependencies/dependency元素--&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span> </span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span> </span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--模块（有时称作子项目） 被构建成项目的一部分。</span></span><br><span class="hljs-comment"><span class="language-xml">列出的每个模块元素是指向该模块的目录的相对路径--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>/&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--发现依赖和扩展的远程仓库列表。--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--包含需要连接到远程仓库的信息--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--如何处理远程仓库里发布版本的下载--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>/&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。--&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>/&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。--&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>/&gt;</span> </span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，</span></span><br><span class="hljs-comment"><span class="language-xml">POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 策略。</span></span><br><span class="hljs-comment"><span class="language-xml">例如，可能有人会决定只为开发目的开启对快照版本下载的支持。</span></span><br><span class="hljs-comment"><span class="language-xml">参见repositories/repository/releases元素 --&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>/&gt;</span> </span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>banseon-repository-proxy<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--远程仓库名称--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>banseon-repository-proxy<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--远程仓库URL，按protocol://hostname/path形式--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.1.169:9999/repository/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span> </span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--发现插件的远程仓库列表，这些插件用于构建和报表--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span> </span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。</span></span><br><span class="hljs-comment"><span class="language-xml">它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--依赖的group ID--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--依赖的artifact ID--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-artifact<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外</span></span><br><span class="hljs-comment"><span class="language-xml">。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应，</span></span><br><span class="hljs-comment"><span class="language-xml"> 尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。</span></span><br><span class="hljs-comment"><span class="language-xml">如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。</span></span><br><span class="hljs-comment"><span class="language-xml">分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 JAR，</span></span><br><span class="hljs-comment"><span class="language-xml">一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">classifier</span>/&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。    </span></span><br><span class="hljs-comment"><span class="language-xml">                - compile ：默认范围，用于编译      </span></span><br><span class="hljs-comment"><span class="language-xml">                - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath      </span></span><br><span class="hljs-comment"><span class="language-xml">                - runtime: 在执行时需要使用      </span></span><br><span class="hljs-comment"><span class="language-xml">                - test:    用于test任务时使用      </span></span><br><span class="hljs-comment"><span class="language-xml">                - system: 需要外在提供相应的元素。通过systemPath来取得      </span></span><br><span class="hljs-comment"><span class="language-xml">                - systemPath: 仅用于范围为system。提供相应的路径      </span></span><br><span class="hljs-comment"><span class="language-xml">                - optional:   当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--仅供system范围使用。注意，不鼓励使用这个元素，</span></span><br><span class="hljs-comment"><span class="language-xml">并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。</span></span><br><span class="hljs-comment"><span class="language-xml">需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$</span></span><span class="hljs-template-variable">&#123;java.home&#125;</span><span class="language-xml"><span class="hljs-comment">。--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>/&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。</span></span><br><span class="hljs-comment"><span class="language-xml">即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span> </span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  </span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> </span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,</span></span><br><span class="hljs-comment"><span class="language-xml">而是当子项目声明一个依赖（必须描述group ID和 artifact ID信息），</span></span><br><span class="hljs-comment"><span class="language-xml">如果group ID和artifact ID以外的一些信息没有描述，</span></span><br><span class="hljs-comment"><span class="language-xml">则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--参见dependencies/dependency元素--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span> </span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--项目分发信息，在执行mvn deploy后表示要发布的位置。</span></span><br><span class="hljs-comment"><span class="language-xml">有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--部署项目产生的构件到远程仓库需要的信息--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？</span></span><br><span class="hljs-comment"><span class="language-xml">还是每次都使用相同的版本号？参见repositories/repository元素--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">uniqueVersion</span>/&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>banseon-maven2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>banseon maven2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>file://$</span><span class="hljs-template-variable">&#123;basedir&#125;</span><span class="language-xml">/target/deploy<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>/&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，</span></span><br><span class="hljs-comment"><span class="language-xml">参见distributionManagement/repository元素--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">uniqueVersion</span>/&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>banseon-maven2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Banseon-maven2 Snapshot Repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>scp://svn.baidu.com/banseon:/usr/local/maven-snapshot<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>/&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--部署项目的网站需要的信息--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">site</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>banseon-site<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--部署位置的名称--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>business api website<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--部署位置的URL，按protocol://hostname/path形式--&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">site</span>&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页。</span></span><br><span class="hljs-comment"><span class="language-xml">使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">downloadUrl</span>/&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，</span></span><br><span class="hljs-comment"><span class="language-xml">因为这是工具自动更新的。有效的值有：none（默认），</span></span><br><span class="hljs-comment"><span class="language-xml">converted（仓库管理员从 Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。--&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">status</span>/&gt;</span> </span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。--&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>/&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven安装部署</title>
    <link href="/2023/03/29/devops/maven/maven%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/03/29/devops/maven/maven%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="maven安装部署"><a href="#maven安装部署" class="headerlink" title="maven安装部署"></a>maven安装部署</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://www.cnblogs.com/leoshi/p/16493867.html<br>https://blog.csdn.net/m0_69287945/article/details/124560052<br></code></pre></td></tr></table></figure><p>Maven是一个JAVA源码的编译打包工具，JAVA开发人员编写好源代码以后，要在JVM虚拟机上运行必须先编译和打包，然后再把打包好的WAR包或者JAR包放到Tomcat上运行，那么从源代码到WAR或JAR包的过程就是Maven做的事。</p><p>什么是Maven？<br>如今我们构建一个项目需要用到很多第三方的类库，如写一个使用Spring的Web项目就需要引入大量的jar包。一个项目Jar包的数量之多往往让我们瞠目结舌，并且Jar包之间的关系错综复杂，一个Jar包往往又会引用其他Jar包，缺少任何一个Jar包都会导致项目编译失败。</p><p>以往开发项目时，程序员往往需要花较多的精力在引用Jar包搭建项目环境上，而这一项工作尤为艰难，少一个Jar包、多一个Jar包往往会报一些让人摸不着头脑的异常。</p><p>而Maven就是一款帮助程序员构建项目的工具，我们只需要告诉Maven需要哪些Jar 包，它会帮助我们下载所有的Jar，极大提升开发效率。</p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>maven需要依赖java环境，系统必须要安装JAVA</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="1-下载maven"><a href="#1-下载maven" class="headerlink" title="1. 下载maven"></a>1. 下载maven</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -O https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.zip<br></code></pre></td></tr></table></figure><h3 id="2-解压压缩包"><a href="#2-解压压缩包" class="headerlink" title="2. 解压压缩包"></a>2. 解压压缩包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">unzip apache-maven-3.8.6-bin.zip<br></code></pre></td></tr></table></figure><h3 id="3-移动目录"><a href="#3-移动目录" class="headerlink" title="3. 移动目录"></a>3. 移动目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> apache-maven-3.8.6 /usr/local/bin/<br></code></pre></td></tr></table></figure><h3 id="4-创建软链接"><a href="#4-创建软链接" class="headerlink" title="4. 创建软链接"></a>4. 创建软链接</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ln</span> -sv /usr/local/bin/apache-maven-3.8.6/bin/mvn /bin/<br></code></pre></td></tr></table></figure><h3 id="5-创建环境变量"><a href="#5-创建环境变量" class="headerlink" title="5. 创建环境变量"></a>5. 创建环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/profile &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span><br><span class="hljs-comment"># Maven 3.6.3</span><br><span class="hljs-built_in">export</span> M2_HOME=/usr/local/bin/apache-maven-3.8.6<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$M2_HOME</span>/bin<br>EOF<br></code></pre></td></tr></table></figure><h3 id="6-配置生效"><a href="#6-配置生效" class="headerlink" title="6. 配置生效"></a>6. 配置生效</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="7-验证maven"><a href="#7-验证maven" class="headerlink" title="7. 验证maven"></a>7. 验证maven</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@localhost app]<span class="hljs-comment"># mvn -v</span><br>Apache Maven 3.8.6 (84538c9988a25aec085021c365c560670ad80f63)<br>Maven home: /usr/local/bin/apache-maven-3.8.6<br>Java version: 1.8.0_202, vendor: Oracle Corporation, runtime: /usr/java/jdk1.8.0_202-amd64/jre<br>Default locale: en_US, platform encoding: UTF-8<br>OS name: <span class="hljs-string">&quot;linux&quot;</span>, version: <span class="hljs-string">&quot;3.10.0-693.el7.x86_64&quot;</span>, <span class="hljs-built_in">arch</span>: <span class="hljs-string">&quot;amd64&quot;</span>, family: <span class="hljs-string">&quot;unix&quot;</span><br></code></pre></td></tr></table></figure><h3 id="8-修改maven源"><a href="#8-修改maven源" class="headerlink" title="8. 修改maven源"></a>8. 修改maven源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app/maven/repo<br><br>vim /usr/local/bin/apache-maven-3.8.6/conf/settings.xml<br><span class="hljs-comment">#插件本地缓存路径</span><br>&lt;localRepository&gt;/app/maven/repo&lt;/localRepository&gt;<br><span class="hljs-comment">#...</span><br>&lt;mirrors&gt;<br>    &lt;mirror&gt;<br>      &lt;<span class="hljs-built_in">id</span>&gt;alimaven&lt;/id&gt;<br>      &lt;name&gt;aliyun maven&lt;/name&gt;<br>      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;<br>      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        <br>    &lt;/mirror&gt;<br>&lt;/mirrors&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用k8s搭建jenkins</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E6%90%AD%E5%BB%BA/%E4%BD%BF%E7%94%A8k8s%E6%90%AD%E5%BB%BAjenkins/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E6%90%AD%E5%BB%BA/%E4%BD%BF%E7%94%A8k8s%E6%90%AD%E5%BB%BAjenkins/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用k8s搭建jenkins"><a href="#使用k8s搭建jenkins" class="headerlink" title="使用k8s搭建jenkins"></a>使用k8s搭建jenkins</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">#官方文档：https://www.jenkins.io/doc/book/installing/kubernetes/<br>#参考文档：https://www.jianshu.com/p/2c20efbd5855<br></code></pre></td></tr></table></figure><h2 id="一、准备环境："><a href="#一、准备环境：" class="headerlink" title="一、准备环境："></a>一、准备环境：</h2><p>搭建k8s已略过，防火墙已经关闭</p><table><thead><tr><th>IP地址</th><th>备注</th></tr></thead><tbody><tr><td>192.168.5.111</td><td>master节点 #安装nfs，创建持久卷</td></tr><tr><td>192.168.5.112</td><td>node节点</td></tr></tbody></table><h2 id="二、创建持久卷："><a href="#二、创建持久卷：" class="headerlink" title="二、创建持久卷："></a>二、创建持久卷：</h2><p>安装Jenkins时需要把Jenkins的配置目录挂载出来，多节点 Kubernetes 集群中，需要一些像 NFS 这样的解决方案来使挂载目录在整个集群中可用。防止我们在重新启动k8s时丢失 Jenkins 控制器的整个配置和工作。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#所有节点安装nfs：</span><br>yum -y install rpcbind nfs-utils<br><br><span class="hljs-comment">#安装nfs节点上操作：</span><br><span class="hljs-comment">#创建共享目录，并设置权限。</span><br><span class="hljs-built_in">mkdir</span> -p /data/k8s/<br><span class="hljs-built_in">chmod</span> 777 -R /data/k8s/<br><br><span class="hljs-comment">#配置NFS </span><br><span class="hljs-comment">#nfs的配置文件是 /etc/exports ，在配置文件中加入一行：</span><br>/data/k8s *(rw,<span class="hljs-built_in">sync</span>,no_root_squash,no_subtree_check)<br><br><span class="hljs-comment">#各节点启动服务并加入开机启动</span><br>systemctl start rpcbind<br>systemctl start nfs<br>systemctl <span class="hljs-built_in">enable</span> rpcbind <br>systemctl <span class="hljs-built_in">enable</span> nfs<br><br><span class="hljs-comment">#使用 showmount 命令来查看是否可连接：</span><br>showmount -e localhost<br></code></pre></td></tr></table></figure><h2 id="三、部署Jenkins（通过yaml文件方式）"><a href="#三、部署Jenkins（通过yaml文件方式）" class="headerlink" title="三、部署Jenkins（通过yaml文件方式）"></a>三、部署Jenkins（通过yaml文件方式）</h2><h3 id="1-创建命名空间"><a href="#1-创建命名空间" class="headerlink" title="1.创建命名空间"></a>1.创建命名空间</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">#不同的命名空间提供了额外的隔离层和对持续集成环境的更多控制。通过在终端上键入以下命令，为 Jenkins 部署创建命名空间：<br>kubectl create <span class="hljs-keyword">namespace</span> <span class="hljs-symbol">jenkins</span><br><span class="hljs-symbol">kubectl</span> <span class="hljs-symbol">get</span> <span class="hljs-symbol">namespaces</span><br></code></pre></td></tr></table></figure><h3 id="2-创建持久卷"><a href="#2-创建持久卷" class="headerlink" title="2.创建持久卷"></a>2.创建持久卷</h3><p>创建一个由物理存储支持的PV，PV相对集群而言，不与任何pod相关联。创建的PVC会自动绑定到合适的PV。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> jenkins-volume.yaml<br><br>apiVersion: v1<br>kind: PersistentVolume<br>metadata:<br>  name: jenkins-pv<br>spec:<br>  storageClassName: nfs-jenkins-pv<br>  accessModes:<br>  - ReadWriteMany<br>  capacity:<br>    storage: 50Gi<br>  persistentVolumeReclaimPolicy: Retain<br>  nfs:<br>    server: 192.168.5.111<br>    path: /data/k8s/<br><br>---<br>kind: PersistentVolumeClaim<br>apiVersion: v1<br>metadata:<br>  name: jenkins-pvc<br>  namespace: jenkins<br>spec:<br>  storageClassName: nfs-jenkins-pv<br>  accessModes:<br>    - ReadWriteMany<br>  resources:<br>    requests:<br>      storage: 50Gi<br><br><span class="hljs-comment">#部署volume</span><br>kubectl apply -f jenkins-volume.yaml<br></code></pre></td></tr></table></figure><h3 id="3-创建service-account"><a href="#3-创建service-account" class="headerlink" title="3.创建service account"></a>3.创建service account</h3><p>创建pod时，如果不指定服务账户，则会自动为其分配一个名为default的同一namespace中的服务账户。但是通常应用程序时存在权限不足的情况，所以需要我们自己创建一个服务账户。</p><p>打开网址：<a href="https://raw.githubusercontent.com/jenkins-infra/jenkins.io/master/content/doc/tutorials/kubernetes/installing-jenkins-on-kubernetes/jenkins-sa.yaml">https://raw.githubusercontent.com/jenkins-infra/jenkins.io/master/content/doc/tutorials/kubernetes/installing-jenkins-on-kubernetes/jenkins-sa.yaml</a></p><p>将内容粘贴到为 jenkins-sa.yaml，以下为该网址的内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> jenkins-sa.yaml<br>---<br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: jenkins<br>  namespace: jenkins<br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRole<br>metadata:<br>  annotations:<br>    rbac.authorization.kubernetes.io/autoupdate: <span class="hljs-string">&quot;true&quot;</span><br>  labels:<br>    kubernetes.io/bootstrapping: rbac-defaults<br>  name: jenkins<br>rules:<br>- apiGroups:<br>  - <span class="hljs-string">&#x27;*&#x27;</span><br>  resources:<br>  - statefulsets<br>  - services<br>  - replicationcontrollers<br>  - replicasets<br>  - podtemplates<br>  - podsecuritypolicies<br>  - pods<br>  - pods/log<br>  - pods/exec<br>  - podpreset<br>  - poddisruptionbudget<br>  - persistentvolumes<br>  - persistentvolumeclaims<br>  - <span class="hljs-built_in">jobs</span><br>  - endpoints<br>  - deployments<br>  - deployments/scale<br>  - daemonsets<br>  - cronjobs<br>  - configmaps<br>  - namespaces<br>  - events<br>  - secrets<br>  verbs:<br>  - create<br>  - get<br>  - watch<br>  - delete<br>  - list<br>  - patch<br>  - update<br>- apiGroups:<br>  - <span class="hljs-string">&quot;&quot;</span><br>  resources:<br>  - nodes<br>  verbs:<br>  - get<br>  - list<br>  - watch<br>  - update<br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRoleBinding<br>metadata:<br>  annotations:<br>    rbac.authorization.kubernetes.io/autoupdate: <span class="hljs-string">&quot;true&quot;</span><br>  labels:<br>    kubernetes.io/bootstrapping: rbac-defaults<br>  name: jenkins<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: jenkins<br>subjects:<br>- apiGroup: rbac.authorization.k8s.io<br>  kind: Group<br>  name: system:serviceaccounts:jenkins<br><br><span class="hljs-comment">#部署jenkins-sa.yaml</span><br>kubectl apply -f jenkins-sa.yaml<br></code></pre></td></tr></table></figure><h3 id="4-安装Jenkins"><a href="#4-安装Jenkins" class="headerlink" title="4.安装Jenkins"></a>4.安装Jenkins</h3><p>创建jenkins-deployment-service.yaml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> jenkins-deployment-service.yaml<br><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: jenkins<br>  namespace: jenkins<br>  labels:<br>    release: <span class="hljs-string">&quot;jenkins&quot;</span><br>    component: <span class="hljs-string">&quot;jenkins-master&quot;</span><br>spec:<br>  replicas: 1<br>  selector:<br>    matchLabels:<br>      app: jenkins<br>  template:<br>    metadata:<br>      labels:<br>        app: jenkins<br>    spec:<br>      securityContext:<br>        runAsUser: 0<br>      serviceAccountName: jenkins  <span class="hljs-comment">#指定我们前面创建的服务账号</span><br>      containers:<br>      - name: jenkins<br>        image: jenkins/jenkins:lts<br>        ports:<br>        - containerPort: 8080<br>        - containerPort: 50000<br>        volumeMounts:<br>        - name: jenkins-home<br>          mountPath: /var/jenkins_home<br>      volumes:<br>      - name: jenkins-home<br>        persistentVolumeClaim:<br>          claimName: jenkins-pvc  <span class="hljs-comment">#指定前面创建的PVC</span><br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: jenkins<br>  namespace: jenkins<br>spec:<br>  <span class="hljs-built_in">type</span>: NodePort<br>  ports:<br>  - name: http<br>    port: 8080<br>    targetPort: 8080<br>    nodePort: 31400  <span class="hljs-comment">#将31400定义为8080的映射端口</span><br>  - name: agent<br>    port: 50000<br>    targetPort: 50000<br>    nodePort: 31401<br>  selector:<br>    app: jenkins<br></code></pre></td></tr></table></figure><h3 id="5-登录jenkins"><a href="#5-登录jenkins" class="headerlink" title="5.登录jenkins"></a>5.登录jenkins</h3><p>打开浏览器访问192.168.5.111:31400&#x2F;</p><h4 id="5-1-获取初始化的密码"><a href="#5-1-获取初始化的密码" class="headerlink" title="5.1 获取初始化的密码"></a>5.1 获取初始化的密码</h4><p>查看日志内信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl -n jenkins logs jenkins-xxx <br></code></pre></td></tr></table></figure><p>找到信息：Please use the following password<br><strong>复制密码到登录页面即可</strong></p>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建Jenkins</title>
    <link href="/2023/03/29/devops/jenkins/jenkins%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAJenkins/"/>
    <url>/2023/03/29/devops/jenkins/jenkins%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAJenkins/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="搭建Jenkins"><a href="#搭建Jenkins" class="headerlink" title="搭建Jenkins"></a>搭建Jenkins</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">使用请参考学习文档：https://www.kancloud.cn/louis1986/jenkins/492045<br></code></pre></td></tr></table></figure><h2 id="一、使用二进制rpm包方式安装"><a href="#一、使用二进制rpm包方式安装" class="headerlink" title="一、使用二进制rpm包方式安装"></a>一、使用二进制rpm包方式安装</h2><p>操作系统：linux</p><h3 id="1、安装jdk"><a href="#1、安装jdk" class="headerlink" title="1、安装jdk"></a>1、安装jdk</h3><p><strong>由于Jenkins是基于Java开发的，安装前确认操作系统已经安装了jdk</strong></p><h4 id="1-1、yum-直接安装jdk"><a href="#1-1、yum-直接安装jdk" class="headerlink" title="1.1、yum 直接安装jdk"></a>1.1、yum 直接安装jdk</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install fontconfig java-11-openjdk -y<br></code></pre></td></tr></table></figure><h4 id="1-2、二进制安装jdk（无网的情况下）"><a href="#1-2、二进制安装jdk（无网的情况下）" class="headerlink" title="1.2、二进制安装jdk（无网的情况下）"></a>1.2、二进制安装jdk（无网的情况下）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#https://www.oracle.com/java/technologies/downloads/#java8</span><br><span class="hljs-comment">#安装jdk：</span><br>wget --no-check-certificate --no-cookies --header <span class="hljs-string">&quot;Cookie: oraclelicense=accept-securebackup-cookie&quot;</span> http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz<br><br><span class="hljs-comment">#解压到/usr/local目录下</span><br>tar zxvf jdk-7u51-linux-x64.tar.gz -C /usr/local/<br><br><span class="hljs-built_in">ls</span> /usr/local  <span class="hljs-comment">#查看目录下的jdk文件是多少，注意：需要确保与下面的所用到的路径需一致！！！</span><br><br><br><span class="hljs-comment"># 配置环境变量的配置文件 ##vim /etc/profile</span><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/profile &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">JAVA_HOME=/usr/local/jdk1.8.0 #文件名（记删除注释）</span><br><span class="hljs-string">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="hljs-string">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="hljs-string">export JAVA_HOME PATH CLASSPATH</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment">#使设置生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br><span class="hljs-comment">#查看安装版本</span><br>java  -version<br></code></pre></td></tr></table></figure><h3 id="2、如果你的系统没有自带git，那么也需要安装一个"><a href="#2、如果你的系统没有自带git，那么也需要安装一个" class="headerlink" title="2、如果你的系统没有自带git，那么也需要安装一个"></a>2、如果你的系统没有自带git，那么也需要安装一个</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install git -y<br></code></pre></td></tr></table></figure><h3 id="3、rpm包离线安装"><a href="#3、rpm包离线安装" class="headerlink" title="3、rpm包离线安装"></a>3、rpm包离线安装</h3><p>清华源rpm包下载：<code>https://mirrors.tuna.tsinghua.edu.cn/jenkins/redhat/</code></p><h4 id="3-1、将rpm包上传至centos中"><a href="#3-1、将rpm包上传至centos中" class="headerlink" title="3.1、将rpm包上传至centos中:"></a>3.1、将rpm包上传至centos中:</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/redhat/jenkins-2.380-1.1.noarch.rpm --no-check-certificate</span><br>rpm -ivh jenkins-2.380-1.1.noarch.rpm<br><span class="hljs-comment">#备注：有些版本安装时报错，需要安装依赖。yum install -y daemonize</span><br></code></pre></td></tr></table></figure><h4 id="3-2、修改jenkins配置"><a href="#3-2、修改jenkins配置" class="headerlink" title="3.2、修改jenkins配置:"></a>3.2、修改jenkins配置:</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/sysconfig/jenkins<br><br><span class="hljs-comment">#监听端口</span><br>JENKINS_PORT=<span class="hljs-string">&quot;8080&quot;</span><br><span class="hljs-comment">#为了不因为权限出现各种问题，这里直接使用root、修改用户为root</span><br><span class="hljs-comment">#修改配置</span><br>JENKINS_USER=<span class="hljs-string">&quot;root&quot;</span><br><br><span class="hljs-comment">#或者使用替换的方式进行配置：</span><br>sed -i <span class="hljs-string">&#x27;s#JENKINS_PORT.*#JENKINS_PORT=&quot;8080&quot;#g&#x27;</span> /etc/sysconfig/jenkins<br>sed -i <span class="hljs-string">&#x27;s#JENKINS_USER.*#JENKINS_USER=&quot;root&quot;#g&#x27;</span> /etc/sysconfig/jenkins<br></code></pre></td></tr></table></figure><h4 id="3-3、配置jdk路径"><a href="#3-3、配置jdk路径" class="headerlink" title="3.3、配置jdk路径"></a>3.3、配置jdk路径</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>vim /etc/init.d/jenkins<br><span class="hljs-comment">#在 candidates 后追加jdk 安装路径</span><br>/usr/local/jdk1.8.0/bin/java <span class="hljs-comment">#（一直到jdk安装路径下的bin/java  可以通过whereis java查看）</span><br><br>systemctl daemon-reload <br>systemctl start jenkins<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#在浏览器访问ip:port 即可（在此之前需开放端口，如果是学习之用可关闭防火墙），如果此时提示 Please wait while Jenkins is getting ready to work，长时间没反应则\</span><br>vim /var/lib/jenkins/hudson.model.UpdateCenter.xml<br><span class="hljs-comment">#将 https://updates.jenkins.io/update-center.json&quot; 修改为 &quot;http://mirror.xmission.com/jenkins/updates/update-center.json&quot;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#并重启服务</span><br>systemctl daemon-reload <br>systemctl restart jenkins<br></code></pre></td></tr></table></figure><h3 id="4、登录Jenkins"><a href="#4、登录Jenkins" class="headerlink" title="4、登录Jenkins"></a>4、登录Jenkins</h3><p>ip+设置的端口    #根据提示获取密码登录。</p><p>我这边设置的账号为：root 密码：12345678</p><p><strong>设置中文汉化：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">下载并启用中文汉化版插件：localization-zh-cn<br><span class="hljs-comment">#在jenkins的插件管理页面，在可用插件搜索：localization 。就可以安装这个插件，然后重启jenkins服务</span><br></code></pre></td></tr></table></figure><h3 id="5、rpm安装方式卸载jenkins方法："><a href="#5、rpm安装方式卸载jenkins方法：" class="headerlink" title="5、rpm安装方式卸载jenkins方法："></a>5、rpm安装方式卸载jenkins方法：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">rpm -e --nodeps jenkins     <span class="hljs-comment">#卸载</span><br>rpm -ql jenkins     <span class="hljs-comment">#检查是否卸载成功 </span><br>find / -iname jenkins | xargs -n 1000 <span class="hljs-built_in">rm</span> -rf  <span class="hljs-comment">#彻底删除残留文件</span><br></code></pre></td></tr></table></figure><h2 id="二、使用docker方式安装jenkins"><a href="#二、使用docker方式安装jenkins" class="headerlink" title="二、使用docker方式安装jenkins"></a>二、使用docker方式安装jenkins</h2><p>操作系统：linux</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">官方文档：https:<span class="hljs-regexp">//</span>www.jenkins.io<span class="hljs-regexp">/zh/</span>doc<span class="hljs-regexp">/book/i</span>nstalling/<br></code></pre></td></tr></table></figure><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><p>docker环境<br>JDK环境</p><h3 id="1、docker拉取镜像"><a href="#1、docker拉取镜像" class="headerlink" title="1、docker拉取镜像"></a>1、docker拉取镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull jenkinsci/blueocean<br><span class="hljs-comment">#docker pull jenkinszh/jenkins-zh</span><br></code></pre></td></tr></table></figure><h3 id="2、创建Jenkins挂载目录并授权权限"><a href="#2、创建Jenkins挂载目录并授权权限" class="headerlink" title="2、创建Jenkins挂载目录并授权权限"></a>2、创建Jenkins挂载目录并授权权限</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app/jenkins<br><span class="hljs-built_in">chmod</span> 777 /app/jenkins<br></code></pre></td></tr></table></figure><h3 id="3、创建并启动Jenkins容器"><a href="#3、创建并启动Jenkins容器" class="headerlink" title="3、创建并启动Jenkins容器"></a>3、创建并启动Jenkins容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d \<br>-p 8080:8080 \<br>-p 50000:50000 \<br>-v /app/jenkins:/var/jenkins_home \<br><span class="hljs-comment">#-v  /root/apache-maven-3.6.3:/usr/local/maven \</span><br>-v /etc/localtime:/etc/localtime \<br>--name jenkins \<br>jenkinsci/blueocean<br><br><span class="hljs-comment">#命令详细解释</span><br><span class="hljs-comment">#-v /var/jenkins_mount:/var/jenkins_mount 意义： /var/jenkins_home目录为容器jenkins工作目录，</span><br><span class="hljs-comment">#-v /etc/localtime:/etc/localtime 意义：让容器使用和服务器同样的时间设置。</span><br><span class="hljs-comment">#-v /root/apache-maven-3.6.3:/usr/local/maven 意义：挂载本地maven，前面是服务器上的，后面是挂载到容器上的目录</span><br></code></pre></td></tr></table></figure><h3 id="4、配置镜像加速"><a href="#4、配置镜像加速" class="headerlink" title="4、配置镜像加速"></a>4、配置镜像加速</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/app/</span>jenkins/hudson.model.UpdateCenter.xml<br><span class="hljs-comment">#将 url 修改为清华大学官方镜像：</span><br>https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/jenkins/u</span>pdates/update-center.json<br><br></code></pre></td></tr></table></figure><h3 id="5、登录Jenkins"><a href="#5、登录Jenkins" class="headerlink" title="5、登录Jenkins"></a>5、登录Jenkins</h3><p>访问:ip+设置的端口，提示将本机的密码复制并粘贴</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#因为我们的路径是已经映射出来了，所以直接可以通过cat命令查看宿主机的</span><br><span class="hljs-built_in">cat</span> /app/jenkins/secrets/initialAdminPassword<br></code></pre></td></tr></table></figure><h2 id="三、jenkins安装插件提速："><a href="#三、jenkins安装插件提速：" class="headerlink" title="三、jenkins安装插件提速："></a>三、jenkins安装插件提速：</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">可参考文档：https://www.cnblogs.com/hellxz/p/jenkins_install_plugins_faster.html<br></code></pre></td></tr></table></figure><p>将Jenkins使用的国外地址下载插件解析到清华大学镜像站的插件地址:<br>本来的访问地址为：<a href="https://updates.jenkins.org/download/plugins/">https://updates.jenkins.org/download/plugins/</a>……<br>现在替换的访问地址为：<a href="http://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/">http://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/</a>……</p><h3 id="1-先在该机器上安装nginx"><a href="#1-先在该机器上安装nginx" class="headerlink" title="1.先在该机器上安装nginx"></a>1.先在该机器上安装nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm<br><span class="hljs-comment">#通过yum search nginx看看是否已经添加源成功。如果成功则执行下列命令安装Nginx。</span><br>sudo yum install -y nginx<br><span class="hljs-comment">#启动Nginx并设置开机自动运行</span><br>sudo systemctl start nginx.service<br>sudo systemctl <span class="hljs-built_in">enable</span> nginx.service<br></code></pre></td></tr></table></figure><h3 id="2-将该国外地址的域名解析到本机："><a href="#2-将该国外地址的域名解析到本机：" class="headerlink" title="2.将该国外地址的域名解析到本机："></a>2.将该国外地址的域名解析到本机：</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">cat &gt;&gt; /etc/hosts &lt;&lt;EOF<br><span class="hljs-number">127.0.0.1</span> updates.jenkins.org<br>EOF<br></code></pre></td></tr></table></figure><h3 id="3-修改nginx的conf文件"><a href="#3-修改nginx的conf文件" class="headerlink" title="3.修改nginx的conf文件"></a>3.修改nginx的conf文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/nginx/conf.d/default.conf<br><span class="hljs-comment">#...</span><br> server_name  updates.jenkins.org;<br><span class="hljs-comment">#...</span><br>    location /download/plugins &#123;<br>        proxy_set_header Host mirrors.tuna.tsinghua.edu.cn; <br>        proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;   <span class="hljs-comment">#$remote_addr变量的值是客户端的IP</span><br>        proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>; <span class="hljs-comment">#X-Forwarded-For头域是为了说明请求经过了哪些服务器。</span><br>        rewrite /download/plugins(.*) /jenkins/plugins/<span class="hljs-variable">$1</span> <span class="hljs-built_in">break</span>;  <span class="hljs-comment">#重写访问的地址</span><br>        proxy_pass http://mirrors.tuna.tsinghua.edu.cn;  <span class="hljs-comment">#将请求转发到清华大学镜像站地址</span><br>    &#125;<br><span class="hljs-comment">#...</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
      <category>Jenkins</category>
      
      <category>Jenkins搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用jenkins持续集成；编译，打包部署微服务</title>
    <link href="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用jenkins持续集成；编译，打包部署微服务"><a href="#使用jenkins持续集成；编译，打包部署微服务" class="headerlink" title="使用jenkins持续集成；编译，打包部署微服务"></a>使用jenkins持续集成；编译，打包部署微服务</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><h3 id="部署服务机器："><a href="#部署服务机器：" class="headerlink" title="部署服务机器："></a>部署服务机器：</h3><table><thead><tr><th align="center">部署平台</th><th align="center">IP地址：端口</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">gitlab平台</td><td align="center">192.168.5.111:8188</td><td align="center">代码仓库地址</td></tr><tr><td align="center">harbor平台</td><td align="center">192.168.5.133:8080</td><td align="center">用来存放打包的镜像</td></tr><tr><td align="center">jenkins平台</td><td align="center">192.168.94.154:8080</td><td align="center">jenkins流水线</td></tr><tr><td align="center">maven</td><td align="center">192.168.94.154</td><td align="center">编译jar包</td></tr><tr><td align="center">sonarqube</td><td align="center">192.168.94.154:9000</td><td align="center">代码质量扫描</td></tr><tr><td align="center">postgresql</td><td align="center">192.168.94.155:5432</td><td align="center">数据库，使用docker运行，具体安装查看安装手册</td></tr><tr><td align="center">sonar-scanner</td><td align="center">192.168.94.154</td><td align="center">路径为&#x2F;opt&#x2F;sonar-scanner&#x2F;bin&#x2F;sonar-scanner</td></tr></tbody></table><h3 id="相关服务截图："><a href="#相关服务截图：" class="headerlink" title="相关服务截图："></a>相关服务截图：</h3><h4 id="1、使用gitlab的项目库：192-168-5-111-8188-x2F-root-x2F-java-fuwu"><a href="#1、使用gitlab的项目库：192-168-5-111-8188-x2F-root-x2F-java-fuwu" class="headerlink" title="1、使用gitlab的项目库：192.168.5.111:8188&#x2F;root&#x2F;java-fuwu"></a>1、使用gitlab的项目库：192.168.5.111:8188&#x2F;root&#x2F;java-fuwu</h4><p>该demo包从github上拉取并上传到本地gitlab上：<a href="https://github.com/pipiguai0123/simple-java-maven-app">https://github.com/pipiguai0123/simple-java-maven-app</a></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220905150648167.png" alt="image-20220905150648167"></p><h4 id="2、使用的harbor仓库地址：192-168-5-133-8080-x2F-harbor-x2F-projects"><a href="#2、使用的harbor仓库地址：192-168-5-133-8080-x2F-harbor-x2F-projects" class="headerlink" title="2、使用的harbor仓库地址：192.168.5.133:8080&#x2F;harbor&#x2F;projects"></a>2、使用的harbor仓库地址：192.168.5.133:8080&#x2F;harbor&#x2F;projects</h4><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220905150825471.png" alt="image-20220905150825471"></p><h4 id="3、使用的jenkins地址：192-168-94-154-8080-x2F-view-x2F-weifuwu-x2F"><a href="#3、使用的jenkins地址：192-168-94-154-8080-x2F-view-x2F-weifuwu-x2F" class="headerlink" title="3、使用的jenkins地址：192.168.94.154:8080&#x2F;view&#x2F;weifuwu&#x2F;"></a>3、使用的jenkins地址：192.168.94.154:8080&#x2F;view&#x2F;weifuwu&#x2F;</h4><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220905150955622.png" alt="image-20220905150955622"></p><h4 id="4、SonarQube管理页面：192-168-94-154-9000"><a href="#4、SonarQube管理页面：192-168-94-154-9000" class="headerlink" title="4、SonarQube管理页面：192.168.94.154:9000"></a>4、SonarQube管理页面：192.168.94.154:9000</h4><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220907170244292.png" alt="image-20220907170244292"></p><h2 id="一、使用jenkins-maven编译"><a href="#一、使用jenkins-maven编译" class="headerlink" title="一、使用jenkins+maven编译"></a>一、使用jenkins+maven编译</h2><h3 id="1、直接新增项目-流水线，然后设置从gitlab代码仓库内拿到编写的jenkinsfile"><a href="#1、直接新增项目-流水线，然后设置从gitlab代码仓库内拿到编写的jenkinsfile" class="headerlink" title="1、直接新增项目-流水线，然后设置从gitlab代码仓库内拿到编写的jenkinsfile"></a>1、直接新增项目-流水线，然后设置从gitlab代码仓库内拿到编写的jenkinsfile</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220907171507295.png" alt="image-20220907171507295"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220907171746577.png" alt="image-20220907171746577"></p><h3 id="2、应用保存后输出如下："><a href="#2、应用保存后输出如下：" class="headerlink" title="2、应用保存后输出如下："></a>2、应用保存后输出如下：</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220907171821055.png" alt="image-20220907171821055"></p><h2 id="二、使用jenkins-sonarqube质量扫描"><a href="#二、使用jenkins-sonarqube质量扫描" class="headerlink" title="二、使用jenkins+sonarqube质量扫描"></a>二、使用jenkins+sonarqube质量扫描</h2><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220907173032352.png" alt="image-20220907173032352"></p><h3 id="1、访问sonarqube页面：192-168-94-154-9000，登录后，需要创建一个sonarqube的token，拥有-Token-就得到了-Token-持有人的身份及几乎所有权限"><a href="#1、访问sonarqube页面：192-168-94-154-9000，登录后，需要创建一个sonarqube的token，拥有-Token-就得到了-Token-持有人的身份及几乎所有权限" class="headerlink" title="1、访问sonarqube页面：192.168.94.154:9000，登录后，需要创建一个sonarqube的token，拥有 Token 就得到了 Token 持有人的身份及几乎所有权限"></a>1、访问sonarqube页面：192.168.94.154:9000，登录后，需要创建一个sonarqube的token，拥有 Token 就得到了 Token 持有人的身份及几乎所有权限</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220907172154561.png" alt="image-20220907172154561"></p><h3 id="2、输入令牌名称，然后选择令牌的过期时间，（我这边选择的是永久）然后生成token，切记复制token到本地"><a href="#2、输入令牌名称，然后选择令牌的过期时间，（我这边选择的是永久）然后生成token，切记复制token到本地" class="headerlink" title="2、输入令牌名称，然后选择令牌的过期时间，（我这边选择的是永久）然后生成token，切记复制token到本地"></a>2、输入令牌名称，然后选择令牌的过期时间，（我这边选择的是永久）然后生成token，切记复制token到本地</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220907172333440.png" alt="image-20220907172333440"></p><p>注意：本人后面使用的是sonarqube-jenkins-pinju名称的token，上述的test名称的token未使用</p><p><code>sonarqube-jenkins-pinju的token为：squ_47a6a36a2b62fb57ac27317c7805df4003026434</code></p><p><strong>未打开SCM的需要打开：</strong></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908111059008.png" alt="image-20220908111059008"></p><h3 id="3、jenkins安装SonarQube-Scanner插件"><a href="#3、jenkins安装SonarQube-Scanner插件" class="headerlink" title="3、jenkins安装SonarQube Scanner插件"></a>3、jenkins安装SonarQube Scanner插件</h3><p>Manage <a href="https://so.csdn.net/so/search?q=Jenkins&spm=1001.2101.3001.7020">Jenkins</a>（设置）–&gt;Manage Plugins（插件管理）–&gt;filter（筛选）</p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908094235641.png" alt="image-20220908094235641"></p><h3 id="4、添加-server-authentication-token"><a href="#4、添加-server-authentication-token" class="headerlink" title="4、添加 server authentication token"></a>4、添加 server authentication token</h3><p>凭据–&gt;添加凭据–&gt;填写sonarqube生成的token -&gt;保存</p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908094931973.png" alt="image-20220908094931973"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908094956432.png" alt="image-20220908094956432"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908110330350.png" alt="image-20220908110330350"></p><h3 id="5、Manage-Jenkins（系统管理）–-gt-Configure-System（系统配置）"><a href="#5、Manage-Jenkins（系统管理）–-gt-Configure-System（系统配置）" class="headerlink" title="5、Manage Jenkins（系统管理）–&gt;Configure System（系统配置）"></a>5、Manage Jenkins（系统管理）–&gt;Configure System（系统配置）</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908113017696.png" alt="image-20220908113017696"></p><p>参考文档：<a href="https://blog.csdn.net/jiatong151/article/details/111995890">https://blog.csdn.net/jiatong151/article/details/111995890</a></p><h3 id="6、编写sonar-project-properties文件，文件路径直接在项目下"><a href="#6、编写sonar-project-properties文件，文件路径直接在项目下" class="headerlink" title="6、编写sonar-project.properties文件，文件路径直接在项目下"></a>6、编写<strong>sonar-project.properties</strong>文件，文件路径直接在项目下</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908144624891.png" alt="image-20220908144624891"></p><p>sonar-project.properties文件详解：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 项目的key唯一不重复即可 </span><br>sonar.<span class="hljs-attribute">projectKey</span>=java-demo<br><span class="hljs-comment"># 项目的名字</span><br>sonar.<span class="hljs-attribute">projectName</span>=java-demo<br><span class="hljs-comment"># 项目的版本</span><br>sonar.<span class="hljs-attribute">projectVersion</span>=1.0<br><span class="hljs-comment"># 需要分析的源码的目录，多个目录用英文逗号隔开</span><br>sonar.<span class="hljs-attribute">sources</span>=.<br><span class="hljs-comment"># sonarQube扫描的对象</span><br>sonar.java.<span class="hljs-attribute">binaries</span>=.<br><span class="hljs-comment"># 编码格式 </span><br>sonar.<span class="hljs-attribute">sourceEncoding</span>=UTF-8<br><span class="hljs-comment"># 具有项目执行分析权限的 SonarQube 用户的身份验证令牌或登录名</span><br>sonar.<span class="hljs-attribute">login</span>=squ_47a6a36a2b62fb57ac27317c7805df4003026434<br><span class="hljs-comment"># 如果使用身份验证令牌，请设置为空。如果使用的是登录名，则填写用户名的密码。</span><br>sonar.password=<br></code></pre></td></tr></table></figure><p>如何配置sonar-project.properties文件：<a href="https://blog.csdn.net/weixin_44410537/article/details/113770515">https://blog.csdn.net/weixin_44410537/article/details/113770515</a></p><h3 id="7、jenkins新增流水线，设置流水线pipiline"><a href="#7、jenkins新增流水线，设置流水线pipiline" class="headerlink" title="7、jenkins新增流水线，设置流水线pipiline"></a>7、jenkins新增流水线，设置流水线pipiline</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs stylus">pipeline &#123;<br>    agent any<br>     options &#123;<br>        <span class="hljs-built_in">timestamps</span>()          <span class="hljs-comment">//日志会有时间</span><br>        <span class="hljs-built_in">skipDefaultCheckout</span>() <span class="hljs-comment">//删除隐式checkout scm语句</span><br>        <span class="hljs-built_in">timeout</span>(<span class="hljs-selector-tag">time</span>: <span class="hljs-number">1</span>, unit: <span class="hljs-string">&#x27;HOURS&#x27;</span> ) <span class="hljs-comment">//超时时间终止</span><br>    &#125;<br>    stages &#123;<br>        <span class="hljs-built_in">stage</span>(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>            steps &#123;<br>                git branch: <span class="hljs-string">&#x27;main&#x27;</span>, credentialsId: <span class="hljs-string">&#x27;gitlab-root-http&#x27;</span>, url: <span class="hljs-string">&#x27;http://192.168.5.111:8188/root/java-fuwu.git&#x27;</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">stage</span>(<span class="hljs-string">&#x27;质量扫描&#x27;</span>) &#123;<br>        steps &#123;<br>            echo <span class="hljs-string">&#x27;SonarQube analysis 开始&#x27;</span><br>                 sh <span class="hljs-string">&quot;/opt/Sonar-scanner/bin/sonar-scanner&quot;</span> <span class="hljs-comment">//Sonar-scanner路径</span><br>     echo <span class="hljs-string">&#x27;SonarQube analysis 结束&#x27;</span><br><br>      &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>构建成功后，访问sonarqube，可以查看到项目代码质量以及详情：</strong></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908161956686.png" alt="image-20220908161956686"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220908164206483.png" alt="image-20220908164206483"></p><h2 id="三、jenkins-maven-sonarqube-harbor-部署运行"><a href="#三、jenkins-maven-sonarqube-harbor-部署运行" class="headerlink" title="三、jenkins+maven+sonarqube+harbor+部署运行"></a>三、jenkins+maven+sonarqube+harbor+部署运行</h2><h3 id="1、登录jenkins，并安装插件：Git-Parameter"><a href="#1、登录jenkins，并安装插件：Git-Parameter" class="headerlink" title="1、登录jenkins，并安装插件：Git Parameter"></a>1、登录jenkins，并安装插件：Git Parameter</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220913220001586.png" alt="image-20220913220001586"></p><h3 id="2、在gitlab仓库内上新增docker文件夹，并编写dockerfile文件"><a href="#2、在gitlab仓库内上新增docker文件夹，并编写dockerfile文件" class="headerlink" title="2、在gitlab仓库内上新增docker文件夹，并编写dockerfile文件"></a>2、在gitlab仓库内上新增docker文件夹，并编写dockerfile文件</h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220913215743288.png" alt="image-20220913215743288"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM openjdk:8-jdk-alpine <span class="hljs-comment">##依赖镜像</span><br>VOLUME /tmp<br>ADD my-app-1.0-SNAPSHOT.jar my-app.jar<br>EXPOSE 9350  <span class="hljs-comment">#定义服务使用的端口</span><br>RUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone<br>ENTRYPOINT [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;/my-app.jar&quot;</span>]<br></code></pre></td></tr></table></figure><h3 id="3、在jenkins服务器上修改docker的daemon-json文件，添加harbor镜像地址：http-192-168-5-133-8080，并登录habor仓库"><a href="#3、在jenkins服务器上修改docker的daemon-json文件，添加harbor镜像地址：http-192-168-5-133-8080，并登录habor仓库" class="headerlink" title="3、在jenkins服务器上修改docker的daemon.json文件，添加harbor镜像地址：http://192.168.5.133:8080，并登录habor仓库"></a>3、在jenkins服务器上修改docker的daemon.json文件，添加harbor镜像地址：<a href="http://192.168.5.133:8080，并登录habor仓库">http://192.168.5.133:8080，并登录habor仓库</a></h3><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220913220157333.png" alt="image-20220913220157333"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker login 192.168.5.133:8080<br><span class="hljs-comment">#输入账号密码，显示成功即可</span><br></code></pre></td></tr></table></figure><h3 id="4、部署准备（预计将服务部署在192-168-94-155服务器上，按照步骤3（修改daemon-json并登录harbor仓库）"><a href="#4、部署准备（预计将服务部署在192-168-94-155服务器上，按照步骤3（修改daemon-json并登录harbor仓库）" class="headerlink" title="4、部署准备（预计将服务部署在192.168.94.155服务器上，按照步骤3（修改daemon.json并登录harbor仓库）"></a>4、部署准备（预计将服务部署在192.168.94.155服务器上，按照步骤3（修改daemon.json并登录harbor仓库）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">编写运行该容器的脚本：因为流水线部署时执行了<br><span class="hljs-built_in">cat</span> /srv/dockerrun/java-maven-sonarqube-docker.sh<br><span class="hljs-comment">#!/bin/bash</span><br>docker <span class="hljs-built_in">rm</span> -f java-demo<br><span class="hljs-comment">##只保留三个版本的镜像在本地</span><br>docker images | grep <span class="hljs-string">&quot;java-demo&quot;</span>  | awk <span class="hljs-string">&#x27;(NR&gt;3)&#123;print&#125;&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs docker rmi<br><span class="hljs-comment">##运行镜像</span><br>docker run -d -p 9350:9350  --restart=always  --name java-demo \<br>-e TZ=<span class="hljs-string">&quot;Asia/Shanghai&quot;</span> \<br>-e JAVA_OPTS=<span class="hljs-string">&#x27;-server -Xms512m -Xmx512m&#x27;</span> \<br>-m 2048m --cpus 1 \<br>192.168.5.133:8080/weifuwu/java-damo <span class="hljs-comment">#使用编译的镜像，初始如果没有的情况下，可定义192.168.5.133:8080/weifuwu/java-damo</span><br></code></pre></td></tr></table></figure><p>从jenkins服务器上设置免密认证到192.168.94.155上和并使用node1命名解析：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /etc/hosts<br>192.168.94.155 node1<br></code></pre></td></tr></table></figure><h3 id="5、新增流水线"><a href="#5、新增流水线" class="headerlink" title="5、新增流水线"></a>5、新增流水线</h3><p>将所有操作整合，只需将以下流水线语法粘贴到jenkins流水线内并构建即可！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs sh">pipeline &#123;<br>  agent any<br>  options &#123;<br>        timestamps()          //日志会有时间<br>        skipDefaultCheckout() //删除隐式checkout scm语句<br>        <span class="hljs-built_in">timeout</span>(time: 1, unit: <span class="hljs-string">&#x27;HOURS&#x27;</span> )<br>  &#125;<br>  parameters &#123;<br>    //jenkins选择分支构建，默认为main<br>    gitParameter branchFilter: <span class="hljs-string">&#x27;origin/(.*)&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;main&#x27;</span>, name: <span class="hljs-string">&#x27;BRANCH&#x27;</span>, <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;PT_BRANCH&#x27;</span><br>  &#125;<br>  environment&#123;<br>        //定义推送的镜像名称<br>        image_tag=<span class="hljs-string">&quot;192.168.5.133:8080/weifuwu/java-damo:<span class="hljs-variable">$&#123;BUILD_ID&#125;</span>&quot;</span><br>        //镜像存放路径<br>        dest_dir=<span class="hljs-string">&quot;/srv/dockerrun&quot;</span><br>  &#125;<br>  stages &#123;<br>    stage(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>      steps &#123;<br>        git branch: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;params.BRANCH&#125;</span>&quot;</span>, credentialsId: <span class="hljs-string">&#x27;gitlab-root-http&#x27;</span>, url: <span class="hljs-string">&#x27;http://192.168.5.111:8188/root/java-fuwu.git&#x27;</span><br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;质量扫描&#x27;</span>) &#123;<br>        steps &#123;<br>            <span class="hljs-built_in">timeout</span>(time:10, unit:<span class="hljs-string">&#x27;MINUTES&#x27;</span>) &#123; //指定步骤的超时时间<br>             script &#123; // 指定运行的脚本<br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;SonarQube analysis 开始&#x27;</span><br>                sh <span class="hljs-string">&quot;/opt/sonar-scanner/bin/sonar-scanner&quot;</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;SonarQube analysis 结束&#x27;</span><br>            &#125;<br>          &#125;<br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;maven编译&#x27;</span>) &#123;<br>        steps &#123;<br>             sh <span class="hljs-string">&#x27;mvn -B -DskipTests clean package&#x27;</span><br>        &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;编译镜像&#x27;</span>) &#123;<br>        steps &#123;<br>              //进到存放dockerfile文件的目录下，将编译后的jar包复制过来<br>             sh <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">                cd docker/ &amp;&amp; cp ../target/my-app*.jar ./</span><br><span class="hljs-string">                docker build -t $&#123;image_tag&#125; .</span><br><span class="hljs-string">                &#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br>                //推送镜像<br>              sh <span class="hljs-string">&#x27;docker push $&#123;image_tag&#125;&#x27;</span><br>               // input message: <span class="hljs-string">&#x27;Finished using the web site? (Click &quot;Proceed&quot; to continue)&#x27;</span>, ok: <span class="hljs-string">&#x27;发布镜像&#x27;</span><br>               &#125;<br>        &#125;<br>    stage(<span class="hljs-string">&#x27;部署服务&#x27;</span>) &#123;<br>        steps &#123;<br>              //<span class="hljs-variable">$JOB_NAME</span>：任务的名称，也就是流水线创建的名称<br>              //<span class="hljs-variable">$dest_dir</span>:部署服务所在路径<br>              //替换脚本内的镜像，并执行脚本<br>              sh <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">                echo &quot;sed -i &#x27;</span>s<span class="hljs-comment">#192.168.5.133:8080.*#$&#123;image_tag&#125;#g&#x27; $&#123;dest_dir&#125;/$&#123;JOB_NAME&#125;.sh &amp;&amp; bash $&#123;dest_dir&#125;/$&#123;JOB_NAME&#125;.sh&quot; |ssh node1</span><br>                <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="6、添加构建成功后发送邮件功能！（脚本如下）"><a href="#6、添加构建成功后发送邮件功能！（脚本如下）" class="headerlink" title="6、添加构建成功后发送邮件功能！（脚本如下）"></a>6、添加构建成功后发送邮件功能！（脚本如下）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs sh">pipeline &#123;<br>  agent any<br>  options &#123;<br>        timestamps()          //日志会有时间<br>        skipDefaultCheckout() //删除隐式checkout scm语句<br>        <span class="hljs-built_in">timeout</span>(time: 1, unit: <span class="hljs-string">&#x27;HOURS&#x27;</span> )<br>  &#125;<br>  parameters &#123;<br>    //jenkins选择分支构建，默认为main<br>    gitParameter branchFilter: <span class="hljs-string">&#x27;origin/(.*)&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;main&#x27;</span>, name: <span class="hljs-string">&#x27;BRANCH&#x27;</span>, <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;PT_BRANCH&#x27;</span><br>  &#125;<br>  environment&#123;<br>        //定义推送的镜像名称<br>        image_tag=<span class="hljs-string">&quot;192.168.5.133:8080/weifuwu/java-damo:<span class="hljs-variable">$&#123;BUILD_ID&#125;</span>&quot;</span><br>        //镜像存放路径<br>        dest_dir=<span class="hljs-string">&quot;/srv/dockerrun&quot;</span><br>        //邮件接收人<br>        emailUser=<span class="hljs-string">&quot;1962821461@qq.com&quot;</span><br>        //构建状态<br>        BUILD_STATUS=<span class="hljs-string">&quot;成功！&quot;</span><br><br>  &#125;<br>  stages &#123;<br>    stage(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>      steps &#123;<br>        git branch: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;params.BRANCH&#125;</span>&quot;</span>, credentialsId: <span class="hljs-string">&#x27;gitlab-root-http&#x27;</span>, url: <span class="hljs-string">&#x27;http://192.168.5.111:8188/root/java-fuwu.git&#x27;</span><br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;质量扫描&#x27;</span>) &#123;<br>        steps &#123;<br>            <span class="hljs-built_in">timeout</span>(time:10, unit:<span class="hljs-string">&#x27;MINUTES&#x27;</span>) &#123; //指定步骤的超时时间<br>             script &#123; // 指定运行的脚本<br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;SonarQube analysis 开始&#x27;</span><br>                sh <span class="hljs-string">&quot;/opt/sonar-scanner/bin/sonar-scanner&quot;</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;SonarQube analysis 结束&#x27;</span><br>            &#125;<br>          &#125;<br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;maven编译&#x27;</span>) &#123;<br>        steps &#123;<br>             sh <span class="hljs-string">&#x27;mvn -B -DskipTests clean package&#x27;</span><br>        &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;编译镜像&#x27;</span>) &#123;<br>        steps &#123;<br>              //进到存放dockerfile文件的目录下，将编译后的jar包复制过来<br>             sh <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">                cd docker/ &amp;&amp; cp ../target/my-app*.jar ./</span><br><span class="hljs-string">                docker build -t $&#123;image_tag&#125; .</span><br><span class="hljs-string">                &#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br>                //推送镜像<br>              sh <span class="hljs-string">&#x27;docker push $&#123;image_tag&#125;&#x27;</span><br>               // input message: <span class="hljs-string">&#x27;Finished using the web site? (Click &quot;Proceed&quot; to continue)&#x27;</span>, ok: <span class="hljs-string">&#x27;发布镜像&#x27;</span><br>               &#125;<br>        &#125;<br>    stage(<span class="hljs-string">&#x27;部署服务&#x27;</span>) &#123;<br>        steps &#123;<br>              //<span class="hljs-variable">$JOB_NAME</span><br>              sh <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">                echo &quot;sed -i &#x27;</span>s<span class="hljs-comment">#192.168.5.133/.*#$&#123;image_tag&#125;#g&#x27; $&#123;dest_dir&#125;/$&#123;JOB_NAME&#125;.sh &amp;&amp; bash $&#123;dest_dir&#125;/$&#123;JOB_NAME&#125;.sh&quot; |ssh node1</span><br>                <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    post &#123;</span><br><span class="hljs-string">    //failure:失败后执行，为了测试正常，我已经改成为成功后发送</span><br><span class="hljs-string">    //    failure &#123; </span><br><span class="hljs-string">        success &#123;</span><br><span class="hljs-string">           script &#123;</span><br><span class="hljs-string">               emailext body: &quot;&quot;&quot;</span><br><span class="hljs-string">            &lt;!DOCTYPE html&gt; </span><br><span class="hljs-string">            &lt;html&gt; </span><br><span class="hljs-string">            &lt;head&gt; </span><br><span class="hljs-string">            &lt;meta charset=&quot;UTF-8&quot;&gt; </span><br><span class="hljs-string">            &lt;/head&gt; </span><br><span class="hljs-string">            &lt;body leftmargin=&quot;8&quot; marginwidth=&quot;0&quot; topmargin=&quot;8&quot; marginheight=&quot;4&quot; offset=&quot;0&quot;&gt; </span><br><span class="hljs-string">                &lt;img src=&quot;https://raw.githubusercontent.com/pipiguai0123/JenkinsShareLibrary/main/docs/Jenkins%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E9%9B%86%E6%88%90.png&quot;&gt;</span><br><span class="hljs-string">                &lt;table width=&quot;95%&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; style=&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;&gt;   </span><br><span class="hljs-string">                    &lt;tr&gt; </span><br><span class="hljs-string">                        &lt;td&gt;&lt;br /&gt; </span><br><span class="hljs-string">                            &lt;b&gt;&lt;font color=&quot;#0B610B&quot;&gt;构建信息&lt;/font&gt;&lt;/b&gt; </span><br><span class="hljs-string">                        &lt;/td&gt; </span><br><span class="hljs-string">                    &lt;/tr&gt; </span><br><span class="hljs-string">                    &lt;tr&gt; </span><br><span class="hljs-string">                        &lt;td&gt; </span><br><span class="hljs-string">                            &lt;ul&gt; </span><br><span class="hljs-string">                                &lt;li&gt;项目名称：$&#123;JOB_NAME&#125;&lt;/li&gt;         </span><br><span class="hljs-string">                                &lt;li&gt;构建编号：$&#123;BUILD_ID&#125;&lt;/li&gt; </span><br><span class="hljs-string">                                &lt;li&gt;构建结果：&lt;span style=&quot;color:red&quot;&gt; $&#123;BUILD_STATUS&#125;&lt;/span&gt; &lt;/li&gt;                 </span><br><span class="hljs-string">                                &lt;li&gt;项目地址：&lt;a href=&quot;$&#123;BUILD_URL&#125;&quot;&gt;$&#123;BUILD_URL&#125;&lt;/a&gt;&lt;/li&gt;    </span><br><span class="hljs-string">                                &lt;li&gt;构建日志：&lt;a href=&quot;$&#123;BUILD_URL&#125;console&quot;&gt;$&#123;BUILD_URL&#125;console&lt;/a&gt;&lt;/li&gt; </span><br><span class="hljs-string">                            &lt;/ul&gt; </span><br><span class="hljs-string">                        &lt;/td&gt; </span><br><span class="hljs-string">                    &lt;/tr&gt; </span><br><span class="hljs-string">                    &lt;tr&gt;  </span><br><span class="hljs-string">                &lt;/table&gt; </span><br><span class="hljs-string">            &lt;/body&gt; </span><br><span class="hljs-string">            &lt;/html&gt;  &quot;&quot;&quot;,</span><br><span class="hljs-string">            subject: &quot;Jenkins-$&#123;JOB_NAME&#125;项目构建信息 &quot;,</span><br><span class="hljs-string">            to: &quot;$emailUser&quot;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="7、完成后截图："><a href="#7、完成后截图：" class="headerlink" title="7、完成后截图："></a>7、完成后截图：</h3><p>写入流水线语法</p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914160659411.png" alt="image-20220914160659411"></p><p>gitlab上新增了test分支，jenkins贴入语法后，jenkins构建时可以选择分支：</p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914160848816.png" alt="image-20220914160848816"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914161113131.png" alt="image-20220914161113131"></p><p>选择分支构建后，编译完成，harbor仓库推送镜像，并会发送邮件：</p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914170126609.png" alt="image-20220914170126609"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914161149196.png" alt="image-20220914161149196"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914161644205.png" alt="image-20220914161644205"></p><p>编译部署完成后，在192.168.94.155服务器上可以看到该docker镜像已运行，但因为是demo，会一直重启，日志可以看到信息</p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914161444375.png" alt="image-20220914161444375"></p><p><img src="/2023/03/29/devops/%E4%BD%BF%E7%94%A8jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220914161539752.png" alt="image-20220914161539752"></p>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Devops</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB全量备份和增量备份</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E5%85%A8%E9%87%8F%E5%A4%87%E4%BB%BD%E5%92%8C%E5%A2%9E%E9%87%8F%E5%A4%87%E4%BB%BD/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E5%85%A8%E9%87%8F%E5%A4%87%E4%BB%BD%E5%92%8C%E5%A2%9E%E9%87%8F%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MongoDB全量备份和增量备份"><a href="#MongoDB全量备份和增量备份" class="headerlink" title="MongoDB全量备份和增量备份"></a>MongoDB全量备份和增量备份</h1><h2 id="一、准备工作：构建mongodb-副本集测试环境"><a href="#一、准备工作：构建mongodb-副本集测试环境" class="headerlink" title="一、准备工作：构建mongodb 副本集测试环境"></a>一、准备工作：构建mongodb 副本集测试环境</h2><p><strong>以下为机器ip：</strong></p><table><thead><tr><th>机器名</th><th>IP地址</th></tr></thead><tbody><tr><td>node0</td><td>192.168.94.154 <PRIMARY></PRIMARY></td></tr><tr><td>node1</td><td>192.168.94.155</td></tr><tr><td>node2</td><td>192.168.94.156</td></tr></tbody></table><h3 id="副本集："><a href="#副本集：" class="headerlink" title="副本集："></a>副本集：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">node0&gt;:rs.isMaster();<br>&#123;<br>    <span class="hljs-string">&quot;hosts&quot;</span> : [<br>        <span class="hljs-string">&quot;192.168.94.154:9009&quot;</span>,<br>        <span class="hljs-string">&quot;192.168.94.155:9009&quot;</span>,<br>        <span class="hljs-string">&quot;192.168.94.156:9009&quot;</span><br>    ]<br>&#125;<br>...<br></code></pre></td></tr></table></figure><h3 id="接下来往集群里写入测试数据："><a href="#接下来往集群里写入测试数据：" class="headerlink" title="接下来往集群里写入测试数据："></a>接下来往集群里写入测试数据：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">node0:PRIMARY&gt; <span class="hljs-keyword">for</span>(var i=1;i&lt;=10000;i++) db.users.insert(&#123;<span class="hljs-built_in">id</span>:i, name:<span class="hljs-string">&quot;hello，world~&quot;</span>,city:<span class="hljs-string">&quot;bei&#x27;jing&quot;</span>&#125;);<br>WriteResult(&#123; <span class="hljs-string">&quot;nInserted&quot;</span> : 1 &#125;)<br><br>node0:PRIMARY&gt; show dbs;<br>admin   0.000GB<br>config  0.000GB<br><span class="hljs-built_in">local</span>   0.000GB<br><span class="hljs-built_in">test</span>    0.000GB<br><br>node0:PRIMARY&gt; use <span class="hljs-built_in">test</span><br>switched to db <span class="hljs-built_in">test</span><br><br>node0:PRIMARY&gt; db.users.count();<br>10000<br></code></pre></td></tr></table></figure><p><em><strong>以上就是准备工作！</strong></em></p><h2 id="二、mongodb-全量备份及恢复"><a href="#二、mongodb-全量备份及恢复" class="headerlink" title="二、mongodb 全量备份及恢复"></a>二、mongodb 全量备份及恢复</h2><h3 id="1、全备脚本-mongodb-back-all-sh-如下："><a href="#1、全备脚本-mongodb-back-all-sh-如下：" class="headerlink" title="1、全备脚本 [ mongodb_back_all.sh ] 如下："></a>1、全备脚本 [ mongodb_back_all.sh ] 如下：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># 主节点ip、端口</span><br>host=<span class="hljs-string">&#x27;192.168.94.154&#x27;</span><br>port=<span class="hljs-string">&#x27;9009&#x27;</span><br><br><span class="hljs-comment">#启动文件所在目录</span><br>sourcepath=<span class="hljs-string">&#x27;/app/mongodb/mongodb/bin&#x27;</span><br><span class="hljs-comment">#备份文件存放路径</span><br>targetpath=<span class="hljs-string">&#x27;/app/mongodb/backup&#x27;</span><br><span class="hljs-comment">#时间</span><br>nowtime=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y%m%d&quot;</span>)<br> <br> <br><span class="hljs-function"><span class="hljs-title">start</span></span>()&#123;<br>    <span class="hljs-variable">$sourcepath</span>/mongodump --host <span class="hljs-variable">$host</span> --port <span class="hljs-variable">$port</span> --oplog --gzip --out <span class="hljs-variable">$&#123;targetpath&#125;</span>/<span class="hljs-variable">$&#123;nowtime&#125;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;mongodump is ok&quot;</span><br>&#125;<br> <br><span class="hljs-function"><span class="hljs-title">execute</span></span>()&#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=========================<span class="hljs-subst">$(date)</span> backup all mongodb back start  <span class="hljs-variable">$&#123;nowtime&#125;</span>=========&quot;</span><br>start<br><span class="hljs-comment">#if [ $? -eq 0 ]代表如果上一条命令结束状态是0的话就执行then后面的语句。成功就是0，失败为1</span><br><span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The MongoDB BackUp Successfully!&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The MongoDB BackUp Failure&quot;</span><br><span class="hljs-keyword">fi</span><br>&#125;<br><span class="hljs-comment">#如果没有这文件，就创建</span><br><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;targetpath&#125;</span>/<span class="hljs-variable">$&#123;nowtime&#125;</span>&quot;</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;targetpath&#125;</span>/<span class="hljs-variable">$&#123;nowtime&#125;</span>&quot;</span><br><span class="hljs-keyword">fi</span><br> <br>execute<br><br><span class="hljs-comment">#删除7天前的备份</span><br>backtime=$(<span class="hljs-built_in">date</span> -d <span class="hljs-string">&#x27;-7 days&#x27;</span> <span class="hljs-string">&quot;+%Y%m%d&quot;</span>)<br><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;targetpath&#125;</span>/<span class="hljs-variable">$&#123;backtime&#125;</span>/&quot;</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">rm</span> -rf <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;targetpath&#125;</span>/<span class="hljs-variable">$&#123;backtime&#125;</span>/&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=======<span class="hljs-variable">$&#123;targetpath&#125;</span>/<span class="hljs-variable">$&#123;backtime&#125;</span>/===删除完毕==&quot;</span><br><span class="hljs-keyword">fi</span><br> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;========================= <span class="hljs-subst">$(date)</span> backup all mongodb back end <span class="hljs-variable">$&#123;nowtime&#125;</span>=========&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2、全库还原脚本-mongodb-restore-all-sh-如下："><a href="#2、全库还原脚本-mongodb-restore-all-sh-如下：" class="headerlink" title="2、全库还原脚本 [ mongodb_restore_all.sh ] 如下："></a>2、全库还原脚本 [ mongodb_restore_all.sh ] 如下：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m*****[ Mongodb ] 全库恢复脚本*****\033[0m&quot;</span><br><span class="hljs-comment">#定义恢复节点的ip、端口</span><br>host=192.168.94.154<br>port=<span class="hljs-string">&#x27;9009&#x27;</span><br><span class="hljs-comment">#启动文件所在目录</span><br>mongo_bin=/app/mongodb/mongodb/bin<br><span class="hljs-comment">#备份的文件所在目录</span><br>backpath=<span class="hljs-string">&#x27;/app/mongodb/backup&#x27;</span><br> <br><span class="hljs-comment">#获取备份文件夹备份的文件名</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32;1m[ 选择要恢复全库的日期 ] \033[0m&quot;</span><br><span class="hljs-keyword">for</span> backfile <span class="hljs-keyword">in</span> `<span class="hljs-built_in">ls</span> <span class="hljs-variable">$backpath</span>`; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$backfile</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment">#获取输入的全库日期</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span> date_bak<br><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$date_bak</span> == <span class="hljs-string">&quot;&quot;</span> ]] || [[ <span class="hljs-variable">$date_bak</span> == <span class="hljs-string">&#x27;.&#x27;</span> ]] || [[ <span class="hljs-variable">$date_bak</span> == <span class="hljs-string">&#x27;..&#x27;</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m输入不能为特殊字符.\033[0m&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-variable">$backpath</span>/<span class="hljs-variable">$date_bak</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请确认是否恢复全库备份[y/n]:&quot;</span> choice<br> <br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$choice</span>&quot;</span> == <span class="hljs-string">&quot;y&quot;</span> ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32;1m正在恢复全库备份，请稍后...\033[0m&quot;</span><br>        <span class="hljs-variable">$mongo_bin</span>/mongorestore --host <span class="hljs-variable">$host</span> --port <span class="hljs-variable">$port</span> --oplogReplay --gzip <span class="hljs-variable">$backpath</span>/<span class="hljs-variable">$date_bak</span>/<br>        <span class="hljs-comment">#if [ $? -eq 0 ]代表如果上一条命令结束状态是0的话就执行then后面的语句。成功就是0，失败为1</span><br>        <span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32;1m--------全库恢复成功.--------\033[0m&quot;</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m恢复失败,请手动检查!\033[0m&quot;</span><br>            <span class="hljs-built_in">exit</span> 3<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">exit</span> 2<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m输入信息错误。\033[0m&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="测试全库备份以及恢复脚本："><a href="#测试全库备份以及恢复脚本：" class="headerlink" title="测试全库备份以及恢复脚本："></a>测试全库备份以及恢复脚本：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#首先执行全库备份脚本</span><br>sh mongodb_back_all.sh<br><br><span class="hljs-comment">#然后进入主的mongod节点机器，删除之前的一万行数据</span><br>node0:PRIMARY&gt; use <span class="hljs-built_in">test</span>;<br>switched to db <span class="hljs-built_in">test</span><br>node0:PRIMARY&gt; db.users.count();<br>10000<br>node0:PRIMARY&gt; db.dropDatabase();<br>node0:PRIMARY&gt; show dbs<br>admin   0.000GB<br>config  0.000GB<br><span class="hljs-built_in">local</span>   0.001GB<br><br><span class="hljs-comment">#再执行全库恢复脚本</span><br>sh mongodb_restore_all.sh<br><br></code></pre></td></tr></table></figure><h2 id="三、mongodb-增量备份及恢复"><a href="#三、mongodb-增量备份及恢复" class="headerlink" title="三、mongodb 增量备份及恢复"></a>三、mongodb 增量备份及恢复</h2><p><strong>增量备份的思路是通过 oplog 来实现的，Oplog 是用于存储 MongoDB 数据库所有数据的操作记录的(实际只记录增删改和一些系统命令操作，查是不会记录的)，有点类似于 mysql 的 binlog 日志。</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">#了解Oplog可以参考：https://www.cnblogs.com/operationhome/p/10688798.html<br>#增量备份详解：https://www.cnblogs.com/xuliuzai/p/9917137.html<br></code></pre></td></tr></table></figure><h3 id="1、增量备份-mongodb-backup-incremental-sh-脚本"><a href="#1、增量备份-mongodb-backup-incremental-sh-脚本" class="headerlink" title="1、增量备份 [ mongodb_backup_incremental.sh ] 脚本"></a>1、增量备份 [ mongodb_backup_incremental.sh ] 脚本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#定义mongdb执行命令路径</span><br>command_linebin=<span class="hljs-string">&#x27;/app/mongodb/mongodb/bin/mongo&#x27;</span><br><span class="hljs-comment">#定义启动文件路径</span><br>sourcepath=<span class="hljs-string">&#x27;/app/mongodb/mongodb/bin&#x27;</span><br><span class="hljs-comment">#定义存放back的存放路径</span><br>peichern=<span class="hljs-string">&#x27;/app/mongodb/backup/mongodbOplog_bak&#x27;</span><br><span class="hljs-comment">#定义端口和ip</span><br>host=192.168.94.154<br>port=9009<br><br><span class="hljs-comment">#新建文件存放路径</span><br><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$peichern</span>/mongo-<span class="hljs-variable">$port</span>&quot;</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$peichern</span>/mongo-<span class="hljs-variable">$port</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$peichern</span>/log-<span class="hljs-variable">$port</span>&quot;</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$peichern</span>/log-<span class="hljs-variable">$port</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment">#备份文件存放的路径</span><br>bkdatapath=<span class="hljs-variable">$peichern</span>/mongo-<span class="hljs-variable">$port</span><br><span class="hljs-comment">#备份记录的log日志</span><br>bklogpath=<span class="hljs-variable">$peichern</span>/log-<span class="hljs-variable">$port</span><br><span class="hljs-comment">#执行过程的log日志名称</span><br>logfilename=$(<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%Y%m%d&quot;</span>)<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===MongoDB 端口为&quot;</span> <span class="hljs-variable">$port</span> <span class="hljs-string">&quot;的差异备份开始，开始时间为：&quot;</span> $(<span class="hljs-built_in">date</span> -d today +<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>) &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment">#定义导出备份文件oplog中参数的结束时间</span><br>paramBakEndDate=$(<span class="hljs-built_in">date</span> +%s)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===本次备份时间参数中的结束时间为：&quot;</span> <span class="hljs-variable">$paramBakEndDate</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment">#设置备份的间隔时间</span><br>diffTime=$(<span class="hljs-built_in">expr</span> 65 \* 60)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===备份设置的间隔时间为：&quot;</span> <span class="hljs-variable">$diffTime</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment">#定义导出的备份文件oplog中参数的开始时间</span><br>paramBakStartDate=$(<span class="hljs-built_in">expr</span> <span class="hljs-variable">$paramBakEndDate</span> - <span class="hljs-variable">$diffTime</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===本次备份时间参数中的开始时间为：&quot;</span> <span class="hljs-variable">$paramBakStartDate</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment">#定义mongo命令路径</span><br>command_linebin=<span class="hljs-variable">$sourcepath</span>/mongo <br><span class="hljs-comment">#定义连接mongdb参数</span><br>command_line=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;command_linebin&#125;</span> <span class="hljs-variable">$host</span>:<span class="hljs-variable">$port</span>&quot;</span><br><span class="hljs-comment">#command_line=&quot;$sourcepath/mongo $host:$port&quot;</span><br><br><span class="hljs-comment">#获取mongodb内db.printReplicationInfo()的信息</span><br>opmes=$(/bin/echo <span class="hljs-string">&quot;db.printReplicationInfo()&quot;</span> | <span class="hljs-variable">$command_line</span> --quiet)<br><span class="hljs-comment">#将获取的信息输出到tmp内</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$opmes</span> &gt; /tmp/opdoctime<span class="hljs-variable">$port</span>.tmplog<br>opbktmplogfile=/tmp/opdoctime<span class="hljs-variable">$port</span>.tmplog<br><span class="hljs-comment">#获取文件夹内的：oplog first event time</span><br>opstartmes=$(grep <span class="hljs-string">&quot;oplog first event time&quot;</span> <span class="hljs-variable">$opbktmplogfile</span> | awk -F <span class="hljs-string">&#x27;CST&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | awk -F <span class="hljs-string">&#x27;oplog first event time: &#x27;</span>  <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F <span class="hljs-string">&#x27; GMT&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>  )<br><span class="hljs-comment">#将获取的时间转换为秒</span><br>oplogRecordFirst=$(<span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;<span class="hljs-variable">$opstartmes</span>&quot;</span>  +%s)<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===oplog集合记录的开始时间为[格式化]：&quot;</span> <span class="hljs-variable">$oplogRecordFirst</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment">#如果获取的时间小于或等于备份开始的时间（目的是为了记录突然往mongodb内写入了大量的数据，oplog的size如果太小了，写入oplog里面导致之前的时间被覆盖，做一个判断）</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$oplogRecordFirst</span> -le <span class="hljs-variable">$paramBakStartDate</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Message --检查设置备份时间合理。备份参数的开始时间在oplog记录的时间范围内。&quot;</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Fatal Error --检查设置的备份时间不合理合理。备份参数的开始时间不在oplog记录的时间范围内。请调整oplog size或调整备份频率。本次备份可以持续进行，但还原时数据完整性丢失。&quot;</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment">#定义备份文件名称</span><br>bkfilename=$(<span class="hljs-built_in">date</span> -d today +<span class="hljs-string">&quot;%Y%m%d%H%M%S&quot;</span>)<br><span class="hljs-comment">#获取设定的时间区间的oplog文件数据，并进行备份</span><br><span class="hljs-variable">$sourcepath</span>/mongodump -h <span class="hljs-variable">$host</span> --port <span class="hljs-variable">$port</span>  -d <span class="hljs-built_in">local</span> -c oplog.rs  --query <span class="hljs-string">&#x27;&#123;&quot;ts&quot;:&#123;&quot;$gt&quot;: &#123;&quot;$timestamp&quot;:&#123;&quot;t&quot;:&#x27;</span><span class="hljs-variable">$paramBakStartDate</span><span class="hljs-string">&#x27;, &quot;i&quot;:1&#125;&#125;,&quot;$lte&quot;:&#123;&quot;$timestamp&quot;:&#123;&quot;t&quot;:&#x27;</span><span class="hljs-variable">$paramBakEndDate</span><span class="hljs-string">&#x27;, &quot;i&quot;:9999&#125;&#125;&#125;&#125;&#x27;</span> -o <span class="hljs-variable">$bkdatapath</span>/mongodboplog<span class="hljs-variable">$bkfilename</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-comment">#/mongodb/bin/mongodump -h $host --port $port  -d local -c oplog.rs  --query &#x27;&#123;ts:&#123;$gte:Timestamp(&#x27;$paramBakStartDate&#x27;,1),$lte:Timestamp(&#x27;$paramBakEndDate&#x27;,9999)&#125;&#125;&#x27; -o $bkdatapath/mongodboplog$bkfilename</span><br><br><span class="hljs-comment">##再次检查，防止导出oplog数据过程耗时过长，因oplog是固定集合，如果操作期间有大量的操作，则oplog中新的数据会覆盖掉旧的数据，就可能导致导出的数据不完整，无法保证增量文件间的时间连续性。因此备份后再次检查</span><br>opmes=$(/bin/echo <span class="hljs-string">&quot;db.printReplicationInfo()&quot;</span> | <span class="hljs-variable">$command_line</span> --quiet)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$opmes</span> &gt; /tmp/opdoctime<span class="hljs-variable">$port</span>.tmplog<br>opbktmplogfile=/tmp/opdoctime<span class="hljs-variable">$port</span>.tmplog<br>opstartmes=$(grep <span class="hljs-string">&quot;oplog first event time&quot;</span> <span class="hljs-variable">$opbktmplogfile</span> | awk -F <span class="hljs-string">&#x27;CST&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | awk -F <span class="hljs-string">&#x27;oplog first event time: &#x27;</span>  <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F <span class="hljs-string">&#x27; GMT&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>  )<br>oplogRecordFirst=$(<span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;<span class="hljs-variable">$opstartmes</span>&quot;</span>  +%s)<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===执行备份后,oplog集合记录的开始时间为[时间格式化]:&quot;</span> <span class="hljs-variable">$oplogRecordFirst</span> <br><br><br><span class="hljs-comment">#为了避免数据增长过快，覆盖了还未备份的数据的，比较的依据是 mongodb内db.printReplicationInfo(); 的 oplog first event time 时间。下面设定的是61分钟</span><br>diffTime=$(<span class="hljs-built_in">expr</span> 61 \* 60)<br>paramAfterBakRequestStartDate=$(<span class="hljs-built_in">expr</span> <span class="hljs-variable">$paramBakEndDate</span> - <span class="hljs-variable">$diffTime</span>)<br><span class="hljs-comment">#转义成时间</span><br>zhuanhuandate=$( <span class="hljs-built_in">date</span> -d <span class="hljs-variable">$paramAfterBakRequestStartDate</span> +<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span> )<br><span class="hljs-comment">#echo &quot;===为保证备份的连续性,本次备份后,oplog中的开始时间需小于：&quot; $paramAfterBakRequestStartDate</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===为保证备份的连续性,本次备份后,oplog中的开始时间需小于：&quot;</span> <span class="hljs-variable">$zhuanhuandate</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><br><br><span class="hljs-comment">#如果db.printReplicationInfo()的oplog first event time小于或等于设定的间隔时间</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$oplogRecordFirst</span> -le <span class="hljs-variable">$paramAfterBakRequestStartDate</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Message --备份后，检查oplog集合中数据的开始时间，即集合中最早的一笔数据，时间不小于61分钟的时间（即参数 paramAfterBakRequestStartDate）。这样可以保证每个增量备份含有最近一个小时的全部op操作，满足文件的持续完整性，逐个还原无丢失数据风险。&quot;</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Fatal Error --备份后，检查oplog集合的涵盖的时间范围过小（小于61min）。设置的备份时间不合理合理，备份后的文件不能完全涵盖最近60分钟的数据。请调整oplog size或调整备份频率。本次备份可以持续进行，但还原时数据完整性丢失。&quot;</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-keyword">fi</span><br><br><br><span class="hljs-comment">#判断是否备份了这个文件</span><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$bkdatapath</span>/mongodboplog<span class="hljs-variable">$bkfilename</span>&quot;</span> ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Message --检查此次备份文件已经产生.文件信息为:&quot;</span> <span class="hljs-variable">$bkdatapath</span>/mongodboplog<span class="hljs-variable">$bkfilename</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Fatal Error --备份过程已执行，但是未检测到备份产生的文件，请检查！&quot;</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment">#删除三天前的数据</span><br>keepbaktime=$(<span class="hljs-built_in">date</span> -d <span class="hljs-string">&#x27;-3 days&#x27;</span> <span class="hljs-string">&quot;+%Y%m%d%H&quot;</span>)*<br><span class="hljs-keyword">if</span> [ -d <span class="hljs-variable">$bkdatapath</span>/mongodboplog<span class="hljs-variable">$keepbaktime</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$bkdatapath</span>/mongodboplog<span class="hljs-variable">$keepbaktime</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Message -- <span class="hljs-variable">$bkdatapath</span>/mongodboplog<span class="hljs-variable">$keepbaktime</span> 删除完毕&quot;</span> &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br><span class="hljs-keyword">fi</span><br> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===MongoDB 端口为&quot;</span> <span class="hljs-variable">$port</span> <span class="hljs-string">&quot;的差异备份结束，结束时间为：&quot;</span> $(<span class="hljs-built_in">date</span> -d today +<span class="hljs-string">&quot;%Y%m%d%H%M%S&quot;</span>) &gt;&gt; <span class="hljs-variable">$bklogpath</span>/<span class="hljs-variable">$logfilename</span>.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h2 id="2-增量备份还原-mongodb-backup-incremental-sh-脚本"><a href="#2-增量备份还原-mongodb-backup-incremental-sh-脚本" class="headerlink" title="2.增量备份还原 [ mongodb_backup_incremental.sh ] 脚本"></a>2.增量备份还原 [ mongodb_backup_incremental.sh ] 脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br>host=192.168.94.154<br>port=9009<br><span class="hljs-comment">#启动文件所在路径</span><br>mongo_bin=/app/mongodb/mongodb/bin/<br><span class="hljs-comment">#备份存放脚本</span><br>backpath=<span class="hljs-string">&#x27;/app/mongodb/backup/mongodbOplog_bak/mongo-$port&#x27;</span><br> <br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m*****[ Mongodb ] 增量恢复脚本*****\033[0m&quot;</span><br> <br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32;1m[ 选择要恢复增量的日期(格式：年月日时分秒) ] \033[0m&quot;</span><br><span class="hljs-keyword">for</span> time_file <span class="hljs-keyword">in</span> `<span class="hljs-built_in">ls</span> <span class="hljs-variable">$backpath</span>`; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$time_file</span><br><span class="hljs-keyword">done</span><br> <br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span> date_bak<br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$date_bak</span> == <span class="hljs-string">&quot;&quot;</span> ]] || [[ <span class="hljs-variable">$date_bak</span> == <span class="hljs-string">&#x27;.&#x27;</span> ]] || [[ <span class="hljs-variable">$date_bak</span> == <span class="hljs-string">&#x27;..&#x27;</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m输入不能为特殊字符.\033[0m&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-variable">$backpath</span>/<span class="hljs-variable">$date_bak</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请确认是否恢复[<span class="hljs-variable">$date_bak</span>]增量备份[y/n]:&quot;</span> choice<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$choice</span>&quot;</span> == <span class="hljs-string">&quot;y&quot;</span> ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">mkdir</span> -p /tmp/mongodb/ &amp;&amp; <span class="hljs-built_in">cp</span> -a <span class="hljs-variable">$backpath</span>/<span class="hljs-variable">$date_bak</span>/local/oplog.rs.bson /tmp/mongodb/oplog.bson<br>        <span class="hljs-variable">$mongo_bin</span>/mongorestore --host <span class="hljs-variable">$host</span> --port <span class="hljs-variable">$port</span> --oplogReplay /tmp/mongodb/ &amp;&amp; <span class="hljs-built_in">rm</span> -rf /tmp/mongodb/<br>        <span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32;1m--------[<span class="hljs-variable">$date_bak</span>]增量恢复成功.--------\033[0m&quot;</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m恢复失败,请手动检查!\033[0m&quot;</span><br>            <span class="hljs-built_in">exit</span> 3<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">exit</span> 2<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31;1m输入信息错误.\033[0m&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment">#增量备份的使用方法可以为：每天执行一次全量备份，再每小时执行一次增量备份脚本</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB全量备份和增量备份</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E5%89%AF%E6%9C%AC%E9%9B%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%B5%8B%E8%AF%95/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E5%89%AF%E6%9C%AC%E9%9B%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MongoDB副本集搭建及测试"><a href="#MongoDB副本集搭建及测试" class="headerlink" title="MongoDB副本集搭建及测试"></a>MongoDB副本集搭建及测试</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文件：https://www.cnblogs.com/hukey/p/5769548.html<br></code></pre></td></tr></table></figure><h2 id="一、搭建环境"><a href="#一、搭建环境" class="headerlink" title="一、搭建环境"></a>一、搭建环境</h2><p>选择三台机器进行搭建</p><p><strong>以下为机器ip：</strong></p><table><thead><tr><th>机器名</th><th>IP地址</th></tr></thead><tbody><tr><td>node0</td><td>192.168.94.154</td></tr><tr><td>node1</td><td>192.168.94.155</td></tr><tr><td>node2</td><td>192.168.94.156</td></tr></tbody></table><h2 id="二、安装mongod-并启动，如下是node0机器mongdb的conf文件："><a href="#二、安装mongod-并启动，如下是node0机器mongdb的conf文件：" class="headerlink" title="二、安装mongod,并启动，如下是node0机器mongdb的conf文件："></a>二、安装mongod,并启动，如下是node0机器mongdb的conf文件：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> mongodb.conf<br><span class="hljs-comment">#----</span><br>systemLog:<br>   destination: file<br>   path: <span class="hljs-string">&quot;/app/mongodb/mongodb/log/mongod.log&quot;</span><br>   logAppend: <span class="hljs-literal">true</span><br>processManagement:<br>   fork: <span class="hljs-literal">true</span><br>   pidFilePath: /app/mongodb/mongodb/mongod.pid<br>storage:<br>   journal:<br>      enabled: <span class="hljs-literal">true</span><br>   dbPath: <span class="hljs-string">&quot;/app/mongodb/mongodb/data&quot;</span><br>   directoryPerDB: <span class="hljs-literal">true</span><br>   engine: wiredTiger<br>   wiredTiger:<br>      engineConfig:<br>         cacheSizeGB: 1<br>         directoryForIndexes: <span class="hljs-literal">true</span><br>      collectionConfig:<br>         blockCompressor: zlib<br>      indexConfig:<br>         prefixCompression: <span class="hljs-literal">true</span><br>net:   <br>   port: 9009<br>   bindIp: 192.168.94.154<br>replication:<br>   oplogSizeMB: 2048<br>   replSetName: mongo-node0 <br><span class="hljs-comment">#security:</span><br><span class="hljs-comment">#   authorization: enabled</span><br><br></code></pre></td></tr></table></figure><h2 id="二、连接mongo-初始化副本集，添加node1和node2到node0"><a href="#二、连接mongo-初始化副本集，添加node1和node2到node0" class="headerlink" title="二、连接mongo,初始化副本集，添加node1和node2到node0"></a>二、连接mongo,初始化副本集，添加node1和node2到node0</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#连接node0机器的mongdb库，并在node0上进行配置</span><br>mongo --host 192.168.94.154 --port 9009 --authenticationDatabase admin<br><br><span class="hljs-comment">#查看状态</span><br>rs.status()<br><br><span class="hljs-comment">#初始化副本集</span><br>rs.initiate()<br><br><span class="hljs-comment">#添加node1、node2成员</span><br>node0:PRIMARY&gt; rs.add(<span class="hljs-string">&#x27;192.168.94.155:9009&#x27;</span>)<br><span class="hljs-comment">#输出&#123;&quot;OK&quot; : 1 &#125;</span><br><br>node0:PRIMARY&gt; rs.add(<span class="hljs-string">&#x27;192.168.94.156:9009&#x27;</span>)<br><span class="hljs-comment">#输出&#123;&quot;OK&quot; : 1 &#125;</span><br><br><span class="hljs-comment">#查看是否加入成功</span><br>rs.status()<br><br>rs.isMaster()  <span class="hljs-comment">#输出的内容，primary：后面是指主要的节点是192.168.94.154； me : 后面指当前所在的节点是</span><br></code></pre></td></tr></table></figure><h3 id="三、测试是否实现MongoDB副本集的高可用"><a href="#三、测试是否实现MongoDB副本集的高可用" class="headerlink" title="三、测试是否实现MongoDB副本集的高可用"></a>三、测试是否实现MongoDB副本集的高可用</h3><h4 id="1、通过对primary节点添加1万条数据，看其他两个SECONDARY节点是否同步"><a href="#1、通过对primary节点添加1万条数据，看其他两个SECONDARY节点是否同步" class="headerlink" title="1、通过对primary节点添加1万条数据，看其他两个SECONDARY节点是否同步"></a>1、通过对primary节点添加1万条数据，看其他两个SECONDARY节点是否同步</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#连接primary节点mongdb数据库</span><br>mongo --host 192.168.94.154 --port 9009 --authenticationDatabase admin<br><br><span class="hljs-comment">#插入测试数据</span><br><span class="hljs-keyword">for</span>(var i=1;i&lt;=10000;i++) db.users.insert(&#123;<span class="hljs-built_in">id</span>:i,addr_1:<span class="hljs-string">&quot;Beijing&quot;</span>,addr_2:<span class="hljs-string">&quot;Shanghai&quot;</span>&#125;);<br><span class="hljs-comment">#输出：WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><br>show dbs<br><span class="hljs-comment">#输出：===============</span><br><span class="hljs-built_in">local</span>  0.001GB<br><span class="hljs-built_in">test</span>   0.000GB<br><br><span class="hljs-comment">#使用test库</span><br>use <span class="hljs-built_in">test</span><br><span class="hljs-comment">#查看表</span><br>show collections<br><br><span class="hljs-comment">#查看表数据</span><br>db.users.find()<br></code></pre></td></tr></table></figure><h3 id="2、查看SECONDARY-节点"><a href="#2、查看SECONDARY-节点" class="headerlink" title="2、查看SECONDARY 节点"></a>2、查看SECONDARY 节点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#连接SECONDARY 节点mongdb数据库</span><br>mongo --host 192.168.94.155 --port 9009 --authenticationDatabase admin<br><br>show dbs<br><span class="hljs-comment">#将会输出以下内容：</span><br>2021-10-20T14:59:13.896+0800 E  QUERY    [js] uncaught exception: Error: listDatabases failed:&#123;<br>......省略了部分错误详情......<br>shellHelper@src/mongo/shell/utils.js:790:15<br>@(shellhelp2):1:1<br><span class="hljs-comment">#================================================</span><br>以上错误信息是因为首次在SECONDARY访问集合的时候是不允许的<br><br><span class="hljs-comment"># 首次访问集合需要执行rs.slaveOk()</span><br>rs.slaveOk()     <br><br><span class="hljs-comment">#查看数据库</span><br>show dbs<br><span class="hljs-comment">#输出：===============</span><br><span class="hljs-built_in">local</span>  0.001GB<br><span class="hljs-built_in">test</span>   0.000GB<br><br><span class="hljs-comment">#使用test库</span><br>use <span class="hljs-built_in">test</span><br><br><span class="hljs-comment">#查看表</span><br>show collections<br><br><span class="hljs-comment">#查看表数据</span><br>db.users.find()<br><br></code></pre></td></tr></table></figure><p><em><strong>输出结果与primary节点一致时，说明已经同步成功！</strong></em></p><p>*<strong>Down掉primary节点，测试是否调度primary</strong></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB主-从-仲裁节点搭建</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E4%B8%BB-%E4%BB%8E-%E4%BB%B2%E8%A3%81%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E4%B8%BB-%E4%BB%8E-%E4%BB%B2%E8%A3%81%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MongoDB主-从-仲裁节点搭建（部署带认证模式）"><a href="#MongoDB主-从-仲裁节点搭建（部署带认证模式）" class="headerlink" title="MongoDB主-从-仲裁节点搭建（部署带认证模式）"></a>MongoDB主-从-仲裁节点搭建（部署带认证模式）</h1><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境:"></a>准备环境:</h2><table><thead><tr><th>IP地址</th><th>角色</th></tr></thead><tbody><tr><td>192.168.94.179:9009</td><td>主</td></tr><tr><td>192.168.94.178:9009</td><td>从</td></tr><tr><td>192.168.94.178:9019</td><td>仲裁节点</td></tr></tbody></table><h2 id="一、前言："><a href="#一、前言：" class="headerlink" title="一、前言："></a>一、前言：</h2><p><em><strong>先安装主节点mongoDB，采用二进制安装的mongo,可使用mongodb安装脚本进行二进制安装，启动后设置完成admin密码</strong></em></p><p><em><strong>请注意：下为mongodb集群正常启动后的conf文件，非启动时的mongodb.conf文件，按照正常mongo安装脚本内的mongodb.conf文件启动后，再对比修改</strong></em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /app/mongodb/conf/mongo.conf<br><br>systemLog:<br>   destination: file<br>   path: <span class="hljs-string">&quot;/app/mongodb/log/mongod.log&quot;</span><br>   logAppend: <span class="hljs-literal">true</span><br>processManagement:<br>   fork: <span class="hljs-literal">true</span><br>   pidFilePath: /app/mongodb/mongod.pid<br>storage:<br>   journal:<br>      enabled: <span class="hljs-literal">true</span><br>   dbPath: <span class="hljs-string">&quot;/app/mongodb/data&quot;</span><br>   directoryPerDB: <span class="hljs-literal">true</span><br>   <span class="hljs-comment">#engine: wiredTiger</span><br>   wiredTiger:<br>      engineConfig:<br>         cacheSizeGB: 10 <br>         directoryForIndexes: <span class="hljs-literal">true</span><br>      collectionConfig:<br>         blockCompressor: zlib<br>      indexConfig:<br>         prefixCompression: <span class="hljs-literal">true</span><br>net:   <br>   port: 9009<br>   bindIp: 192.168.94.179   <span class="hljs-comment">#修改机器ip</span><br><br>replication:<br>   oplogSizeMB: 20480<br>   replSetName: mongo-cluster  <span class="hljs-comment">#名称可以自定义，但是必须保证主节点、从节点、仲裁节点统一复制代</span><br><br>security: <span class="hljs-comment">#刚启动时请先注释下面内容</span><br>   keyFile: /app/mongodb/conf/mongo_keyfile  <span class="hljs-comment">#第一次启动时先注释</span><br>   authorization: enabled <br>   javascriptEnabled: <span class="hljs-literal">false</span><br><br><span class="hljs-comment">## /app/mongodb/conf ##认证文件目录</span><br></code></pre></td></tr></table></figure><h2 id="二、生成秘钥，并赋权"><a href="#二、生成秘钥，并赋权" class="headerlink" title="二、生成秘钥，并赋权"></a>二、生成秘钥，并赋权</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl rand -<span class="hljs-built_in">base64</span> 741 &gt;&gt; /app/mongodb/conf/mongo_keyfile<br><span class="hljs-built_in">chmod</span> 700 /app/mongodb/conf/mongo_keyfile<br></code></pre></td></tr></table></figure><p><strong>生成keyfile文件后，根据上面的conf文件修改mongo.conf，将文件内的security的注释取消，再重新启动mongo</strong></p><h2 id="三、连接mongo-192-168-94-179-9009主库"><a href="#三、连接mongo-192-168-94-179-9009主库" class="headerlink" title="三、连接mongo 192.168.94.179:9009主库"></a>三、连接mongo 192.168.94.179:9009主库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; use admin<br>&gt; config=&#123;_id:<span class="hljs-string">&#x27;mongo-cluster&#x27;</span>,members:[&#123;_id:0,host:<span class="hljs-string">&#x27;192.168.94.179:9009&#x27;</span>,priority:2&#125;,&#123;_id:1,host:<span class="hljs-string">&#x27;192.168.94.178:9009&#x27;</span>,priority:1&#125;,&#123;_id:2,host:<span class="hljs-string">&#x27;192.168.94.178:9019&#x27;</span>, arbiterOnly:<span class="hljs-literal">true</span>&#125;]&#125;<br><br><span class="hljs-comment">#mongo-cluster：该名称取自mongo的conf文件内replSetName</span><br><span class="hljs-comment">#priority的值越高，初始化完后，该节点就会成为主节点</span><br><span class="hljs-comment">#arbiterOnly:true 代表该节点为仲裁节点。</span><br><br><br><br><span class="hljs-comment">#使用配置文件config初始化副本集</span><br>&gt; rs.initiate(config)<br><br>&gt; rs.isMaster()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker启动MongoDB</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/docker%E5%90%AF%E5%8A%A8mongodb%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/docker%E5%90%AF%E5%8A%A8mongodb%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker启动MongoDB"><a href="#使用docker启动MongoDB" class="headerlink" title="使用docker启动MongoDB"></a>使用docker启动MongoDB</h1><h2 id="容器启动mongodb命令："><a href="#容器启动mongodb命令：" class="headerlink" title="容器启动mongodb命令："></a>容器启动mongodb命令：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name mongodb_docker\<br> -v /root/mongodb_docker/db:/data/db \<br> -p 27017:27017  \<br> -e MONGO_INITDB_ROOT_USERNAME=admin \<br> -e MONGO_INITDB_ROOT_PASSWORD=admin \<br> mongo --auth<br><span class="hljs-comment">#--auth：需要密码才能访问容器服务</span><br></code></pre></td></tr></table></figure><h2 id="容器连接mongodb命令："><a href="#容器连接mongodb命令：" class="headerlink" title="容器连接mongodb命令："></a>容器连接mongodb命令：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -it --<span class="hljs-built_in">rm</span> --<span class="hljs-built_in">link</span> mongodb_docker:mongo \<br>mongo mongo --host mongo -u admin -p admin --authenticationDatabase admin<br><span class="hljs-comment">#--link 后面接的是要连接的容器与现有的容器通信，mongodb_docker（容器名）：mongod（容器别名）</span><br></code></pre></td></tr></table></figure><h2 id="mongo部分使用的命令"><a href="#mongo部分使用的命令" class="headerlink" title="mongo部分使用的命令"></a>mongo部分使用的命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">创建数据库 ：<br>&gt;use weasel；<br><br>创建用户 ：<br>&gt; db.createUser(&#123;user: <span class="hljs-string">&quot;weasel&quot;</span>,<span class="hljs-built_in">pwd</span>: <span class="hljs-string">&quot;123456&quot;</span>,roles: [ &#123; role: <span class="hljs-string">&quot;readWrite&quot;</span>, db: <span class="hljs-string">&quot;weasel&quot;</span> &#125; ]&#125;)<br><br>使用新用户连接：　<br>docker run -it --<span class="hljs-built_in">rm</span> --<span class="hljs-built_in">link</span> mongodb_docker:mongo mongo mongo --host mongo -u weasel -p 123456 --authenticationDatabase weasel　<br><br>使用：<br>use weasel;<br><br>&gt; db.test2.insert(&#123;<span class="hljs-string">&quot;cc&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;das&quot;</span>:<span class="hljs-string">&#x27;123444444&#x27;</span>&#125;);<br>WriteResult(&#123; <span class="hljs-string">&quot;nInserted&quot;</span> : 1 &#125;)<br><br>&gt; db.test2.count()<br>1<br> <br>&gt; db.test2<br>db.test2<br><br>&gt; db.test2.find(&#123;<span class="hljs-string">&quot;cc&quot;</span>:<span class="hljs-string">&#x27;123&#x27;</span>&#125;);<br>&#123; <span class="hljs-string">&quot;_id&quot;</span> : ObjectId(<span class="hljs-string">&quot;5b4c3b24099d1b0ef30cc0fb&quot;</span>), <span class="hljs-string">&quot;cc&quot;</span> : <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;das&quot;</span> : <span class="hljs-string">&quot;123444444&quot;</span> &#125;<br><br></code></pre></td></tr></table></figure><h2 id="只安装客户端进行数据库连接，可使用源文件方式安装mongodb-client"><a href="#只安装客户端进行数据库连接，可使用源文件方式安装mongodb-client" class="headerlink" title="只安装客户端进行数据库连接，可使用源文件方式安装mongodb client"></a>只安装客户端进行数据库连接，可使用源文件方式安装mongodb client</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>系统为 CentOS 7，架构为 x86_64 ，就可以去 `https://repo.mongodb.org/yum/redhat/7/mongodb-org/ `路径下寻找对应的包<br>rpm -i mongodb-org-shell-4.4.4-1.el7.x86_64.rpm<br><br>如果系统为 Ubuntu 或者 Debain 则可以去 `https://repo.mongodb.org/apt/ `路径下寻找对应的包<br><span class="hljs-comment">#https://repo.mongodb.org/apt/ubuntu/dists/bionic/mongodb-org/5.0/multiverse/binary-amd64/</span><br>dpkg -i mongodb-org-shell_5.0.0_amd64.deb<br></code></pre></td></tr></table></figure><h2 id="mongoshell快速下载安装"><a href="#mongoshell快速下载安装" class="headerlink" title="mongoshell快速下载安装"></a>mongoshell快速下载安装</h2><p>下载地址: <a href="https://www.csdn.net/tags/OtTacg2sOTY4OS1ibG9n.html">https://www.csdn.net/tags/OtTacg2sOTY4OS1ibG9n.html</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">centos:<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;[mongodb-org-3.6] \nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/3.6/x86_64/\ngpgcheck=1 \nenabled=1 \ngpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/yum.repos.d/mongodb-org-3.6.repo<br>sudo yum install -y mongodb-org-shell<br><br>ubuntu :<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/mongodb-org-3.4.list<br>apt-get install -y mongodb-org-shell --allow-unauthenticated<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB二进制安装</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/MongoDB%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MongoDB二进制安装"><a href="#MongoDB二进制安装" class="headerlink" title="MongoDB二进制安装"></a>MongoDB二进制安装</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mongo各个版本下载地址:https:<span class="hljs-regexp">//</span>www.mongodb.org<span class="hljs-regexp">/dl/</span>linux<br></code></pre></td></tr></table></figure><h2 id="1-上传安装包，并解压"><a href="#1-上传安装包，并解压" class="headerlink" title="1.上传安装包，并解压"></a>1.上传安装包，并解压</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /app<br><span class="hljs-built_in">cd</span> /app<br>tar -zxnf mongodb-4.2.11<br></code></pre></td></tr></table></figure><h2 id="2-设置软链接"><a href="#2-设置软链接" class="headerlink" title="2.设置软链接"></a>2.设置软链接</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ln</span> -s /app/mongodb-4.2.11 /app/mongodb<br></code></pre></td></tr></table></figure><h2 id="3-新建mongodb用户组"><a href="#3-新建mongodb用户组" class="headerlink" title="3.新建mongodb用户组"></a>3.新建mongodb用户组</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">useradd -u 1201 -s /bin/false mongod<br><br><span class="hljs-built_in">mkdir</span> -p /app/mongodb/&#123;data,conf,<span class="hljs-built_in">log</span>&#125;<br><br><span class="hljs-built_in">chown</span> -R mongod:mongod /app/mongodb<br></code></pre></td></tr></table></figure><h2 id="4-编辑rc-local文件"><a href="#4-编辑rc-local文件" class="headerlink" title="4.编辑rc.local文件"></a>4.编辑rc.local文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;&gt;/etc/rc.local&lt;&lt;-<span class="hljs-string">EOF</span><br><span class="hljs-string">if test -f /sys/kernel/mm/transparent_hugepage/enabled; then</span><br><span class="hljs-string">    echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">if test -f /sys/kernel/mm/transparent_hugepage/defrag; then</span><br><span class="hljs-string">    echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">ulimit -u 65535</span><br><span class="hljs-string">/app/mongodb/bin/mongod -f /app/mongodb/conf/mongodb.conf</span><br><span class="hljs-string">EOF</span><br><br><br><span class="hljs-built_in">chmod</span> +x /etc/rc.d/rc.local<br></code></pre></td></tr></table></figure><h2 id="5-编辑limits-conf文件"><a href="#5-编辑limits-conf文件" class="headerlink" title="5.编辑limits.conf文件"></a>5.编辑limits.conf文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/security/limits.conf<br><span class="hljs-comment">#---</span><br>    * soft nofile 65535<br>    * hard nofile 65535<br>    * soft <span class="hljs-built_in">nproc</span> 32000<br>    * hard <span class="hljs-built_in">nproc</span> 32000<br><span class="hljs-comment">#---</span><br></code></pre></td></tr></table></figure><h2 id="6-编辑MongoDB-conf-文件"><a href="#6-编辑MongoDB-conf-文件" class="headerlink" title="6.编辑MongoDB.conf 文件"></a>6.编辑MongoDB.conf 文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;/app/mongodb/conf/mongodb.conf&lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>systemLog:<br>   destination: file<br>   path: <span class="hljs-string">&quot;/app/mongodb/log/mongod.log&quot;</span><br>   logAppend: <span class="hljs-literal">true</span><br>processManagement:<br>   fork: <span class="hljs-literal">true</span><br>   pidFilePath: /app/mongodb/mongod.pid<br>storage:<br>   journal:<br>      enabled: <span class="hljs-literal">true</span><br>   dbPath: <span class="hljs-string">&quot;/app/mongodb/data&quot;</span><br>   directoryPerDB: <span class="hljs-literal">true</span><br>   <span class="hljs-comment">#engine: wiredTiger</span><br>   wiredTiger:<br>      engineConfig:<br>         cacheSizeGB: 1<br>         directoryForIndexes: <span class="hljs-literal">true</span><br>      collectionConfig:<br>         blockCompressor: zlib<br>      indexConfig:<br>         prefixCompression: <span class="hljs-literal">true</span><br>net:   <br>   port: 9009<br><span class="hljs-comment">#security:</span><br><span class="hljs-comment">#   authorization: enabled    </span><br>EOF<br></code></pre></td></tr></table></figure><p>配置文件详解：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;/app/mongodb/conf/mongodb.conf&lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>systemLog:<br>   destination: file<br>   path: <span class="hljs-string">&quot;/app/mongodb/log/mongod.log&quot;</span> <span class="hljs-comment">##日志存储位置</span><br>   logAppend: <span class="hljs-literal">true</span><br>processManagement:<br>   fork: <span class="hljs-literal">true</span><br>   pidFilePath: /app/mongodb/mongod.pid<br>storage:<br>   journal: <span class="hljs-comment">##journal配置</span><br>      enabled: <span class="hljs-literal">true</span><br>   dbPath: <span class="hljs-string">&quot;/app/mongodb/data&quot;</span> <span class="hljs-comment">##数据文件存储位置</span><br>   directoryPerDB: <span class="hljs-literal">true</span>   <span class="hljs-comment">##是否一个库一个文件夹</span><br>   <span class="hljs-comment">#engine: wiredTiger ##数据引擎</span><br>   wiredTiger: <span class="hljs-comment">##WT引擎配置</span><br>      engineConfig:<br>         cacheSizeGB: 1 <span class="hljs-comment">##WT最大使用cache（根据服务器实际情况调节）</span><br>         directoryForIndexes: <span class="hljs-literal">true</span> <span class="hljs-comment">##是否将索引也按数据库名单独存储</span><br>      collectionConfig: <span class="hljs-comment">##表压缩配置</span><br>         blockCompressor: zlib<br>      indexConfig: <span class="hljs-comment">##索引配置</span><br>         prefixCompression: <span class="hljs-literal">true</span><br>net:   <br>   port: 9009<br>   bindIp: 192.168.94.205  <span class="hljs-comment">#mongodb所在机器地址</span><br><span class="hljs-comment">#replication:   #配置副本集重要参数</span><br><span class="hljs-comment">#   oplogSizeMB: 2048  #oplog的大小单位MB</span><br><span class="hljs-comment">#   replSetName: mongo-cluster  #副本集名称，同一个副本集，名称必须一致 </span><br>security:  <span class="hljs-comment">#配置安全选项</span><br>   keyFile: /app/mongodb/conf/KeyFile.file <span class="hljs-comment">##集群需要加keyfile</span><br>   authorization: enabled    <span class="hljs-comment">#开启注释为启动安全选项，建议启动mongodb时先注释，设置完用户名和密码后再取消注释</span><br>EOF<br></code></pre></td></tr></table></figure><h2 id="7-添加环境变量"><a href="#7-添加环境变量" class="headerlink" title="7.添加环境变量"></a>7.添加环境变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /etc/profile.d/mongod.sh&lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br><span class="hljs-built_in">export</span> PATH=/app/mongodb/bin/:<span class="hljs-variable">$PATH</span><br>EOF<br><br><span class="hljs-built_in">source</span> /etc/profile.d/mongod.sh<br></code></pre></td></tr></table></figure><h2 id="8-启动MongoDB"><a href="#8-启动MongoDB" class="headerlink" title="8.启动MongoDB"></a>8.启动MongoDB</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#root账户时执行：</span><br>/app/mongodb/bin/mongod -f /app/mongodb/conf/mongodb.conf<br><br><span class="hljs-comment">#非root用户执行：</span><br><span class="hljs-comment">#su - mongod -c &quot;/app/mongodb/bin/mongod -f /app/mongodb/conf/mongodb.conf&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="9-连接MongoDB"><a href="#9-连接MongoDB" class="headerlink" title="9.连接MongoDB"></a>9.连接MongoDB</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mongo --host 192.168.94.205  --port 9009<br></code></pre></td></tr></table></figure><h2 id="10-连接mongodb-创建user"><a href="#10-连接mongodb-创建user" class="headerlink" title="10.连接mongodb 创建user"></a>10.连接mongodb 创建user</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; use admin<br>&gt; db.createUser( &#123;user: <span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-built_in">pwd</span>: <span class="hljs-string">&quot;123456&quot;</span>,roles: [ &#123; role: <span class="hljs-string">&quot;root&quot;</span>, db: <span class="hljs-string">&quot;admin&quot;</span> &#125; ]&#125;)<br><br><span class="hljs-comment">#创建pipiguai数据库登录用户root，并配置密码</span><br><span class="hljs-comment">#&gt;use pipiguai</span><br><span class="hljs-comment">#&gt;db.createUser(&#123;user: &quot;root&quot;,pwd: &quot;123456&quot;,roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;pipiguai&quot; &#125; ]&#125;)</span><br></code></pre></td></tr></table></figure><h2 id="11-关闭mong"><a href="#11-关闭mong" class="headerlink" title="11.关闭mong"></a>11.关闭mong</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">/app/mongodb/bin/mongod --shutdown  -f /app/mongodb/conf/mongodb.conf<br>或者连接mongod的时候:<br>&gt; db.shutdownServer()<br></code></pre></td></tr></table></figure><h2 id="12-开启数据库认证登录"><a href="#12-开启数据库认证登录" class="headerlink" title="12.开启数据库认证登录"></a>12.开启数据库认证登录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /app/mongodb/conf/mongodb.conf<br><span class="hljs-comment">#取消如下两行注释</span><br>security:<br>   authorization: enabled<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#连接数据库</span><br>mongo --host 192.168.94.205  --port 9009 -u admin  <span class="hljs-comment">#//mongodb.conf设置了bindip的话加host测试连接</span><br><br></code></pre></td></tr></table></figure><p>mongodb启动参数说明：<a href="https://www.jb51.net/article/95310.htm">https://www.jb51.net/article/95310.htm</a></p><h2 id="13-安装客户端连接"><a href="#13-安装客户端连接" class="headerlink" title="13.安装客户端连接"></a>13.安装客户端连接</h2><h3 id="只安装客户端进行数据库连接，可使用源文件方式安装mongodb-client"><a href="#只安装客户端进行数据库连接，可使用源文件方式安装mongodb-client" class="headerlink" title="只安装客户端进行数据库连接，可使用源文件方式安装mongodb client"></a>只安装客户端进行数据库连接，可使用源文件方式安装mongodb client</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">系统为 CentOS 7，架构为 x86_64 ，就可以去 `https://repo.mongodb.org/yum/redhat/7/mongodb-org/`路径下寻找对应的包<br>rpm -i mongodb-org-shell-4.4.4-1.el7.x86_64.rpm<br><br>如果系统为 Ubuntu 或者 Debain 则可以去 `https://repo.mongodb.org/apt/` 路径下寻找对应的包<br><span class="hljs-comment">#https://repo.mongodb.org/apt/ubuntu/dists/bionic/mongodb-org/5.0/multiverse/binary-amd64/</span><br>dpkg -i mongodb-org-shell_5.0.0_amd64.deb<br><br></code></pre></td></tr></table></figure><h3 id="mongoshell快速下载安装-https-www-csdn-net-tags-OtTacg2sOTY4OS1ibG9n-html"><a href="#mongoshell快速下载安装-https-www-csdn-net-tags-OtTacg2sOTY4OS1ibG9n-html" class="headerlink" title="mongoshell快速下载安装:https://www.csdn.net/tags/OtTacg2sOTY4OS1ibG9n.html"></a>mongoshell快速下载安装:<a href="https://www.csdn.net/tags/OtTacg2sOTY4OS1ibG9n.html">https://www.csdn.net/tags/OtTacg2sOTY4OS1ibG9n.html</a></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>centos:<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;[mongodb-org-3.6] \nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/3.6/x86_64/\ngpgcheck=1 \nenabled=1 \ngpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/yum.repos.d/mongodb-org-3.6.repo<br>sudo yum install -y mongodb-org-shell<br><br>ubuntu :<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/mongodb-org-3.4.list<br>apt-get install -y mongodb-org-shell --allow-unauthenticated<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用keepalive实现postgresql高可用主从切换</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/%E4%BD%BF%E7%94%A8keepalive%E5%AE%9E%E7%8E%B0PostgreSQL%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/%E4%BD%BF%E7%94%A8keepalive%E5%AE%9E%E7%8E%B0PostgreSQL%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用keepalive实现postgresql高可用主从切换"><a href="#使用keepalive实现postgresql高可用主从切换" class="headerlink" title="使用keepalive实现postgresql高可用主从切换"></a>使用keepalive实现postgresql高可用主从切换</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://cloud.tencent.com/developer/article/1894340<br></code></pre></td></tr></table></figure><h2 id="一、机器规划、环境准备"><a href="#一、机器规划、环境准备" class="headerlink" title="一、机器规划、环境准备"></a>一、机器规划、环境准备</h2><p>基于keepalived实现postgresql高可用，这里用两台服务器作一主一从示例</p><table><thead><tr><th>主机名</th><th>IP</th><th>备注</th></tr></thead><tbody><tr><td>pgsql-1</td><td>192.168.62.129</td><td>主库</td></tr><tr><td>pgsql-2</td><td>192.168.62.130</td><td>从库</td></tr><tr><td>VIP</td><td>192.168.62.123</td><td>VIP（虚拟ip）</td></tr></tbody></table><p>备注：机器均时间同步、关闭了防火墙和selinux</p><h2 id="二、整体架构"><a href="#二、整体架构" class="headerlink" title="二、整体架构"></a>二、整体架构</h2><p><img src="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/%E4%BD%BF%E7%94%A8keepalive%E5%AE%9E%E7%8E%B0PostgreSQL%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2/image-20230329110234099.png" alt="image-20230329110234099"></p><h2 id="三、安装Keepalived"><a href="#三、安装Keepalived" class="headerlink" title="三、安装Keepalived"></a>三、安装Keepalived</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#安装依赖</span><br>yum install gcc openssl openssl‐devel libnl libnl‐devel ipvsadm -y<br><br><span class="hljs-comment">#在线安装</span><br>yum install -y keepalived<br></code></pre></td></tr></table></figure><h2 id="四、安装postgresql"><a href="#四、安装postgresql" class="headerlink" title="四、安装postgresql"></a>四、安装postgresql</h2><h3 id="安装postgresql-14"><a href="#安装postgresql-14" class="headerlink" title="安装postgresql-14"></a>安装postgresql-14</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm<br><br><span class="hljs-comment"># 安装 PostgreSQL：</span><br>sudo yum install -y postgresql14-server<br><br><span class="hljs-comment"># 安装核心数据库服务器</span><br>yum install postgresql14-server postgresql14-contrib -y<br><br><span class="hljs-comment"># 可选择初始化数据库并启用自动启动：</span><br>sudo /usr/pgsql-14/bin/postgresql-14-setup initdb<br>sudo systemctl <span class="hljs-built_in">enable</span> postgresql-14<br>sudo systemctl start postgresql-14<br><br><span class="hljs-comment">#postgresql相关路径</span><br>/var/lib/pgsql/14/data/  <span class="hljs-comment">#conf文件路径</span><br>/usr/pgsql-14/bin/      <span class="hljs-comment">#pg相关工具路径</span><br><br><span class="hljs-comment">#测试是否能正常连接</span><br>su - postgres<br>psql<br></code></pre></td></tr></table></figure><h2 id="五、搭建主从环境"><a href="#五、搭建主从环境" class="headerlink" title="五、搭建主从环境"></a>五、搭建主从环境</h2><h3 id="5-1、主节点配置"><a href="#5-1、主节点配置" class="headerlink" title="5.1、主节点配置"></a>5.1、主节点配置</h3><h4 id="5-1-1）创建用于主从访问的用户，-修改postgres用户的密码，用于远程登录。-切换到postgres用户操作"><a href="#5-1-1）创建用于主从访问的用户，-修改postgres用户的密码，用于远程登录。-切换到postgres用户操作" class="headerlink" title="5.1.1）创建用于主从访问的用户， 修改postgres用户的密码，用于远程登录。(切换到postgres用户操作)"></a>5.1.1）创建用于主从访问的用户， 修改postgres用户的密码，用于远程登录。(切换到postgres用户操作)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#切换到postgres用户操作</span><br>su - postgres<br>psql<br><br><span class="hljs-comment">#创建用于主从访问的用户</span><br><span class="hljs-comment">#创建数据库账号replica并设置密码及登录权限和备份权限</span><br>create role replica login replication encrypted password <span class="hljs-string">&#x27;replica123&#x27;</span>;<br><br><span class="hljs-comment">#修改postgres用户的密码，用于远程登录</span><br>alter USER postgres with password <span class="hljs-string">&#x27;postgres&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="5-1-2）修改pg-hba-conf和postgresql-conf配置："><a href="#5-1-2）修改pg-hba-conf和postgresql-conf配置：" class="headerlink" title="5.1.2）修改pg_hba.conf和postgresql.conf配置："></a>5.1.2）修改pg_hba.conf和postgresql.conf配置：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#运行以下命令，打开pg_hba.conf文件，设置replica用户白名单</span><br>vim /var/lib/pgsql/14/data/pg_hba.conf<br><span class="hljs-comment">##添加以下数据：</span><br><br><span class="hljs-comment">#------------------------注释原有的，替换如下的----------------------</span><br><br><span class="hljs-built_in">local</span>   all             all                                     trust<br><span class="hljs-comment">#允许任意ip地址的用户使用md5加密方式认证连接</span><br>host    all             all            0.0.0.0/0                md5<br>host    all             all             ::1/128                 md5<br><span class="hljs-comment">#允许所有用户使用local方式连接replication</span><br><span class="hljs-built_in">local</span>   replication     all                                     trust<br><span class="hljs-comment">#允许所有的用户使用md5加密方式连接replication数据库</span><br>host    replication     all             0.0.0.0/0               md5<br>host    replication     all             ::1/128                 md5<br><br>备注：pg_hba.conf参照如下格式设置：<br><span class="hljs-comment">#详解文档：https://blog.csdn.net/hmxz2nn/article/details/83717663</span><br>连接方式  连接的数据库  连接的用户 连接的主机IP 认证方式<br>例如：<br><span class="hljs-comment">#允许固定ip地址的replica用户从replication数据库进行数据同步</span><br>host replication replica 192.168.62.129/24 trust<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#运行以下命令，打开postgresql.conf文件</span><br>vim /var/lib/pgsql/14/data/postgresql.conf<br><br>listen_addresses = <span class="hljs-string">&#x27;*&#x27;</span>     <span class="hljs-comment">#监听的IP地址</span><br>max_connections = 1000      <span class="hljs-comment">#最大连接数，从库的max_connections必须要大于主库的</span><br>archive_mode = on      <span class="hljs-comment"># 允许归档</span><br>archive_command = <span class="hljs-string">&#x27;cp %p /var/lib/pgsql/14/data/pg_archive/%f&#x27;</span> <span class="hljs-comment">## 通过命令指定归档路径/  路径需要存在，不存在日志将报错</span><br>wal_level = replica    <span class="hljs-comment">#写入WAL的级别(minimal:不能通过基础备份和wal日志恢复数据库; replica: 支持wal归档和复制; logical: 在replica级别添加了逻辑解码所需的信息)</span><br>wal_log_hints = on <br>max_wal_senders = 32       <span class="hljs-comment"># 允许最多的流复制连接发送数量， 根据从节点数量来设定</span><br>hot_standby = on           <span class="hljs-comment">#热备模式</span><br>archive_timeout = 3600  <span class="hljs-comment">#在此之后强制进行日志文件段切换</span><br><br><span class="hljs-comment">#synchronous_commit = on    #开启同步复制</span><br><span class="hljs-comment">#wal_sender_timeout = 60s   #流复制主机发送数据的超时时间</span><br><span class="hljs-comment">#如果postgresql.conf中的hot_standby参数设置为on（默认值），并且数据目录中存在Standby.signal文件，则replication slave将在“热备”模式下运行。</span><br></code></pre></td></tr></table></figure><h4 id="5-1-3）重启主节点服务"><a href="#5-1-3）重启主节点服务" class="headerlink" title="5.1.3）重启主节点服务"></a>5.1.3）重启主节点服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart postgresql-14.service<br></code></pre></td></tr></table></figure><h3 id="5-2、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）"><a href="#5-2、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）" class="headerlink" title="5.2、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）"></a>5.2、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）</h3><h4 id="5-2-1）切换postgres用户"><a href="#5-2-1）切换postgres用户" class="headerlink" title="5.2.1）切换postgres用户"></a>5.2.1）切换postgres用户</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br></code></pre></td></tr></table></figure><h4 id="5-2-2-将主节点的数据进行备份到从节点"><a href="#5-2-2-将主节点的数据进行备份到从节点" class="headerlink" title="5.2.2) 将主节点的数据进行备份到从节点"></a>5.2.2) 将主节点的数据进行备份到从节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">rm</span> -rf /var/lib/pgsql/14/data/*<br><br><span class="hljs-comment">#复制后从节点的配置文件会和主节点的一样，并且一并复制的还有数据库文件，里面的数据也一样，意味着主节点有什么用户数据从节点也有</span><br>pg_basebackup -h 192.168.62.129 -D /var/lib/pgsql/14/data -U replica -P -v  -R -X stream -C -S pgstandby1 <br><br>passwd&gt;replica123<br>参数详解：<br>-h –指定作为主服务器的主机。<br>-D –指定数据目录。<br>-U –指定连接用户。<br>-P –启用进度报告。<br>-v –启用详细模式。<br>-R –启用恢复配置的创建：创建一个standby.signal文件，并将连接设置附加到数据目录下的postgresql.auto.conf。<br>-X –用于在备份中包括所需的预写日志文件（WAL文件）。流的值表示在创建备份时流式传输WAL。<br>-C –在开始备份之前，允许创建由-S选项命名的复制插槽。<br>-S –指定复制插槽名称。<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#备份过程完成后，会在data目录下创建了一个standby.signal，并将primary_conninfo写入postgresql.auto.conf</span><br><span class="hljs-built_in">cat</span> /var/lib/pgsql/14/data/postgresql.auto.conf <br><span class="hljs-comment">#输出信息：</span><br><span class="hljs-comment"># Do not edit this file manually!</span><br><span class="hljs-comment"># It will be overwritten by the ALTER SYSTEM command.</span><br>primary_conninfo = <span class="hljs-string">&#x27;user=replica passfile=&#x27;</span><span class="hljs-string">&#x27;/var/lib/pgsql/.pgpass&#x27;</span><span class="hljs-string">&#x27; channel_binding=prefer host=192.168.62.129 port=5432 sslmode=prefer sslcompression=0 sslsni=1 ssl_min_protocol_version=TLSv1.2 gssencmode=prefer krbsrvname=postgres target_session_attrs=any&#x27;</span><br>primary_slot_name = <span class="hljs-string">&#x27;pgstandby1&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-3）启动从节点"><a href="#5-2-3）启动从节点" class="headerlink" title="5.2.3）启动从节点"></a>5.2.3）启动从节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start postgresql-14<br></code></pre></td></tr></table></figure><h3 id="5-3、查看主从信息"><a href="#5-3、查看主从信息" class="headerlink" title="5.3、查看主从信息"></a>5.3、查看主从信息</h3><h4 id="5-3-1）查看主节点复制插槽-主节点执行"><a href="#5-3-1）查看主节点复制插槽-主节点执行" class="headerlink" title="5.3.1）查看主节点复制插槽(主节点执行)"></a>5.3.1）查看主节点复制插槽(主节点执行)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br>psql -c <span class="hljs-string">&quot;SELECT * FROM pg_replication_slots;&quot;</span><br>psql -c <span class="hljs-string">&#x27;select client_addr,sync_state from pg_stat_replication;&#x27;</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h4 id="5-3-2）查看从节点接收状态：-此信息只有从节点才会有"><a href="#5-3-2）查看从节点接收状态：-此信息只有从节点才会有" class="headerlink" title="5.3.2）查看从节点接收状态：(#此信息只有从节点才会有)"></a>5.3.2）查看从节点接收状态：(#此信息只有从节点才会有)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br>psql -c <span class="hljs-string">&quot;\x&quot;</span> -c <span class="hljs-string">&quot;SELECT * FROM pg_stat_wal_receiver;&quot;</span><br><br></code></pre></td></tr></table></figure><h4 id="5-3-3）查看主节点发送状态：-此信息只有主节点才会有"><a href="#5-3-3）查看主节点发送状态：-此信息只有主节点才会有" class="headerlink" title="5.3.3）查看主节点发送状态：(此信息只有主节点才会有)"></a>5.3.3）查看主节点发送状态：(此信息只有主节点才会有)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br>psql -c <span class="hljs-string">&quot;\x&quot;</span> -c <span class="hljs-string">&quot;SELECT * FROM pg_stat_replication;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-4、读写测试"><a href="#5-4、读写测试" class="headerlink" title="5.4、读写测试"></a>5.4、读写测试</h3><h4 id="5-4-1）在主节点写数据，从节点读数据。"><a href="#5-4-1）在主节点写数据，从节点读数据。" class="headerlink" title="5.4.1）在主节点写数据，从节点读数据。"></a>5.4.1）在主节点写数据，从节点读数据。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">create database <span class="hljs-built_in">test</span>;<br>\l<br></code></pre></td></tr></table></figure><h4 id="5-4-2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。"><a href="#5-4-2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。" class="headerlink" title="5.4.2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。"></a>5.4.2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">\l<br></code></pre></td></tr></table></figure><h2 id="六、创建数据库Keepalived"><a href="#六、创建数据库Keepalived" class="headerlink" title="六、创建数据库Keepalived"></a>六、创建数据库Keepalived</h2><p><strong>创建数据库Keepalived，并且创建表探测表sr_delay，后续Keepalived探测，刷新sr_delay表的last_alive字段为当前探测时间。这张表用来判断主备延迟情况，数据库故障切换时会用到这张表。</strong></p><h3 id="6-1、创建keepalived数据库、表、账号密码。（主节点上操作，会同步）"><a href="#6-1、创建keepalived数据库、表、账号密码。（主节点上操作，会同步）" class="headerlink" title="6.1、创建keepalived数据库、表、账号密码。（主节点上操作，会同步）"></a>6.1、创建keepalived数据库、表、账号密码。（主节点上操作，会同步）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建用户并设置密码</span><br>create user keepalived password <span class="hljs-string">&#x27;123qwert&#x27;</span> CONNECTION LIMIT 4 ;<br><br><span class="hljs-comment">#创建数据库</span><br>create database keepalived owner keepalived;<br><br><span class="hljs-comment">#连接到keepalived数据库</span><br>\c keepalived keepalived<br><br><span class="hljs-comment">#创建探测表sr_delay</span><br>create table sr_delay(<span class="hljs-built_in">id</span> int4, last_alive timestamp(0) without time zone);<br></code></pre></td></tr></table></figure><h3 id="6-2、设置sr-delay表"><a href="#6-2、设置sr-delay表" class="headerlink" title="6.2、设置sr_delay表"></a>6.2、设置sr_delay表</h3><p><strong>只允许写入一条记录并且不允许删除此表数据，通过触发器实现。创建触发器函数</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#设置规则</span><br>CREATE FUNCTION cannt_delete () <br>RETURNS trigger <br>LANGUAGE plpgsql AS $$ <br>BEGIN <br>RAISE EXCEPTION <span class="hljs-string">&#x27;Table sr_delay can not delete !&#x27;</span>;<br>END; <br>$$;<br><br><span class="hljs-comment">#创建触发器函数</span><br>CREATE TRIGGER trigger_sr_delay_del <br>BEFORE DELETE ON sr_delay <br>FOR EACH ROW EXECUTE PROCEDURE cannt_delete() ; <br>CREATE TRIGGER trigger_sr_delay_tru BEFORE TRUNCATE ON sr_delay FOR STATEMENT EXECUTE PROCEDURE cannt_delete() ;<br><br>插入数据<br>INSERT INTO sr_delay VALUES(1,now()) ;<br><br></code></pre></td></tr></table></figure><h2 id="七、配置Keepalived"><a href="#七、配置Keepalived" class="headerlink" title="七、配置Keepalived"></a>七、配置Keepalived</h2><p>创建所会用到的目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#keepalive所用的的脚本存放路径</span><br><span class="hljs-built_in">mkdir</span> -p /etc/keepalived/scripts<br><br><span class="hljs-comment">#后文执行脚本过程中记录的日志文件存放路径</span><br><span class="hljs-built_in">mkdir</span> -p /etc/keepalived/log<br><br><span class="hljs-comment">#创建归档文件夹</span><br><span class="hljs-built_in">mkdir</span> -p /var/lib/pgsql/14/data/pg_archive<br><span class="hljs-built_in">chown</span> postgres:postgres /var/lib/pgsql/14/data/pg_archive<br></code></pre></td></tr></table></figure><h3 id="7-1、配置keepalive-conf文件"><a href="#7-1、配置keepalive-conf文件" class="headerlink" title="7.1、配置keepalive.conf文件"></a>7.1、配置keepalive.conf文件</h3><p>以下是Keepalived主节点的配置</p><p>备注：Keepalived备节点只需要priority参数为99，router_id改成主机名（pg-2)其余参数配置一样。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/keepalived/keepalived.conf<br><br>! Configuration File <span class="hljs-keyword">for</span> keepalived<br>global_defs &#123;<br><span class="hljs-comment">## 邮件通知信息</span><br><span class="hljs-comment">#  notification_email &#123;</span><br><span class="hljs-comment">#    # 定义收件人</span><br><span class="hljs-comment">#    1962821461@qq.com</span><br><span class="hljs-comment">#  &#125;</span><br><span class="hljs-comment">#  # SMTP服务器地址</span><br><span class="hljs-comment">#  smtp_server 192.168.62.129</span><br><span class="hljs-comment">#  smtp_connect_timeout 30</span><br>    <span class="hljs-comment">#路由器标识，一般不用改，也可以写成每个主机自己的主机名</span><br>   router_id pg-1<br>&#125;<br><br><span class="hljs-comment"># 定义用于实例执行的脚本内容，比如可以在线降低优先级，用于强制切换</span><br>vrrp_script check_pg_alived &#123;<br>        script <span class="hljs-string">&quot;/etc/keepalived/scripts/check_pg.sh&quot;</span><br>        interval 5<br>        fall 3 <span class="hljs-comment"># require 3 failures for KO</span><br>&#125;<br><br><span class="hljs-comment">#virtual_server 192.168.62.123 5432 &#123;</span><br><span class="hljs-comment">#    delay_loop 6 # 每个6秒查询Realserver状态</span><br><span class="hljs-comment">#    lb_algo rr   # lvs算法</span><br><span class="hljs-comment">#    lb_kind DR   # Direct Route</span><br><span class="hljs-comment">#    persistence_timeout 0 # 同一IP链接60秒内被分配到同一台realserver</span><br><span class="hljs-comment">#    protocol TCP            #用tcp协议检查realserver状态</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#    real_server 192.168.62.129 5432&#123;</span><br><span class="hljs-comment">#        weight 100</span><br><span class="hljs-comment">#        TCP_CHECK &#123;</span><br><span class="hljs-comment">#            connect_timeout 5 #10秒钟无响应超时</span><br><span class="hljs-comment">#            nb_get_retry 3</span><br><span class="hljs-comment">#            delay_before_retry 3</span><br><span class="hljs-comment">#            connect_port 5432</span><br><span class="hljs-comment">#        &#125;</span><br><span class="hljs-comment">#    &#125;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#    real_server 192.168.62.130 5432&#123;</span><br><span class="hljs-comment">#        weight 100</span><br><span class="hljs-comment">#        TCP_CHECK &#123;</span><br><span class="hljs-comment">#            connect_timeout 5 #10秒钟无响应超时</span><br><span class="hljs-comment">#            nb_get_retry 3</span><br><span class="hljs-comment">#            delay_before_retry 3</span><br><span class="hljs-comment">#            connect_port 5432</span><br><span class="hljs-comment">#        &#125;</span><br><span class="hljs-comment">#    &#125;</span><br><span class="hljs-comment">#&#125;</span><br><br><span class="hljs-comment"># 一个vrrp_instance就是定义一个虚拟路由器的，实例名称</span><br>vrrp_instance VI_1 &#123;<br>  <span class="hljs-comment"># 定义初始状态</span><br>    state BACKUP<br>    <span class="hljs-comment">#非抢占模式</span><br>    nopreempt<br>    <span class="hljs-comment"># 工作接口（网卡名），通告选举使用哪个接口进行</span><br>    interface ens33<br>    <span class="hljs-comment"># 虚拟路由ID，如果是一组虚拟路由就定义一个ID，如果是多组就要定义多个，而且这个虚拟</span><br>    <span class="hljs-comment"># ID还是虚拟MAC最后一段地址的信息，取值范围0-255</span><br>    virtual_router_id 51<br>    <span class="hljs-comment">#权重 备库的priority小于主库的，同时大于主库priority + weight 的值</span><br>    priority 100<br>    <span class="hljs-comment"># 通信认证机制，这里是明文认证还有一种是加密认证</span><br>    advert_int 1<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass abcdefgh<br>    &#125;<br>    <span class="hljs-comment"># 追踪脚本，通常用于去执行上面的vrrp_script定义的脚本内容</span><br>    track_script &#123;<br>        check_pg_alived<br>    &#125;<br>  <span class="hljs-comment"># 设置虚拟VIP地址</span><br>    virtual_ipaddress &#123;<br>        192.168.62.123<br>    &#125;<br>   smtp_alert<br>   <span class="hljs-comment"># 如果主机状态变成Master|Backup|Fault之后会去执行的通知脚本，脚本要自己写</span><br>      notify_master <span class="hljs-string">&quot;/etc/keepalived/scripts/failover.sh&quot;</span><br>      notify_fault <span class="hljs-string">&quot;/etc/keepalived/scripts/fault.sh&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2、-数据库监控脚本（check-pg-sh）"><a href="#7-2、-数据库监控脚本（check-pg-sh）" class="headerlink" title="7.2、 数据库监控脚本（check_pg.sh）"></a>7.2、 数据库监控脚本（check_pg.sh）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/keepalived/scripts/check_pg.sh<br><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment">#数据库、端口、用户名、数据库密码、日志文件路径</span><br><span class="hljs-built_in">export</span> PGDATABASE=keepalived<br><span class="hljs-built_in">export</span> PGPORT=5432<br><span class="hljs-built_in">export</span> PGUSER=keepalived<br><span class="hljs-built_in">export</span> PGHOME=/usr/pgsql-14/bin<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$PGHOME</span><br>pgpwd=<span class="hljs-string">&#x27;123qwert&#x27;</span><br><span class="hljs-built_in">export</span> PGPASSWORD=<span class="hljs-variable">$pgpwd</span><br><span class="hljs-built_in">export</span> PGMIP=127.0.0.1<br>LOGFILE=/etc/keepalived/log/pg_status.log<br>keeplognums=30000<br><br>SQL1=<span class="hljs-string">&#x27;SELECT pg_is_in_recovery from pg_is_in_recovery();&#x27;</span><br><span class="hljs-comment">#SQL2=&#x27;update sr_delay set sr_date = now() where id =1;&#x27;</span><br>SQL2=<span class="hljs-string">&#x27;UPDATE sr_delay SET last_alive= now();&#x27;</span><br>SQL3=<span class="hljs-string">&#x27;SELECT 1;&#x27;</span><br><br><span class="hljs-comment">#pg_port_status=`lsof -i :$PGPORT | grep LISTEN | wc -l`</span><br><span class="hljs-comment">#pg_port_status=`ps -ef | grep LISTEN | wc -l`</span><br><span class="hljs-comment">#if [ $pg_port_status -lt 1 ];then</span><br><span class="hljs-comment">#    echo -e `date +&quot;%F %T&quot;` &quot;ERROR：postgreSQL 没有运行，请检查 postgreSQL 服务器状态！&quot; &gt;&gt; $LOGFILE</span><br><span class="hljs-comment">#    exit 1</span><br><span class="hljs-comment">#fi</span><br><br><span class="hljs-comment"># 备库不检查存活,主库更新状态</span><br>db_role=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$SQL1</span>  | <span class="hljs-variable">$PGHOME</span>/psql  -d <span class="hljs-variable">$PGDATABASE</span> -U <span class="hljs-variable">$PGUSER</span> -At -w`<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$db_role</span> == <span class="hljs-string">&#x27;t&#x27;</span> ];<span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;注意：当前数据库为standby DB！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span><br>   <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment">#判断主库是否可用</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SQL3</span> | psql -p <span class="hljs-variable">$PGPORT</span> -d <span class="hljs-variable">$PGDATABASE</span> -U <span class="hljs-variable">$PGUSER</span> -At -w<br><span class="hljs-keyword">if</span> [ $? -eq 0 ] ;<span class="hljs-keyword">then</span><br>   <span class="hljs-comment">#当主库可用时，主库更新sr_delay 表</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-variable">$SQL2</span> | psql -p <span class="hljs-variable">$PGPORT</span> -d <span class="hljs-variable">$PGDATABASE</span> -U <span class="hljs-variable">$PGUSER</span> -At -w<br>   <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;Success：更新master sr_delay成功！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span><br>   <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;Error:服务是否正在运行？&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span><br>   <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment">#日志保留 keeplognums 行</span><br><span class="hljs-keyword">if</span> [ ! -f <span class="hljs-variable">$&#123;MONITOR_LOG&#125;</span> ] ;<span class="hljs-keyword">then</span> <span class="hljs-built_in">touch</span> <span class="hljs-variable">$&#123;MONITOR_LOG&#125;</span>;<span class="hljs-keyword">fi</span> <br>lognums=`<span class="hljs-built_in">cat</span> <span class="hljs-variable">$&#123;MONITOR_LOG&#125;</span> |<span class="hljs-built_in">wc</span> -l`<br>catnum=$((<span class="hljs-variable">$&#123;lognums&#125;</span> -<span class="hljs-variable">$&#123;keeplognums&#125;</span>))<br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$lognums</span> -gt <span class="hljs-variable">$&#123;keeplognums&#125;</span> ]] ; <span class="hljs-keyword">then</span> sed -i <span class="hljs-string">&quot;1,<span class="hljs-variable">$&#123;catnum&#125;</span>d&quot;</span> <span class="hljs-variable">$&#123;MONITOR_LOG&#125;</span>; <span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="7-3、当主库挂掉后，切换脚本-failover-sh"><a href="#7-3、当主库挂掉后，切换脚本-failover-sh" class="headerlink" title="7.3、当主库挂掉后，切换脚本 failover.sh"></a>7.3、当主库挂掉后，切换脚本 failover.sh</h3><p>此脚本每隔10秒执行一次，执行频率由keepalived.conf配置文件中interval参数设置， 脚本主要作用为：检测主库是否存活、更新sr_delay表last_alive字段为当前探测时间。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/keepalived/scripts/failover.sh<br><br><span class="hljs-comment">#!/bin/bash </span><br><span class="hljs-built_in">export</span> PGPORT=5432 <br><span class="hljs-built_in">export</span> PGUSER=keepalived <br><span class="hljs-built_in">export</span> PG_OS_USER=postgres <br><span class="hljs-built_in">export</span> PGDBNAME=keepalived <br><span class="hljs-built_in">export</span> LANG=en_US.UTF-8<br><span class="hljs-built_in">export</span> PGPATH=/usr/pgsql-14/bin/ <br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$PGPATH</span> <br><span class="hljs-built_in">export</span> PGMIP=127.0.0.1 <br>LOGFILE=<span class="hljs-string">&#x27;/etc/keepalived/log/failover.log&#x27;</span><br><span class="hljs-comment"># 主备数据库同步时延，单位为秒 </span><br>sr_allowed_delay_time=100<br><br>SQL1=<span class="hljs-string">&#x27;select pg_is_in_recovery from pg_is_in_recovery();&#x27;</span> <br>SQL2=<span class="hljs-string">&quot;select count(1) as delay_time from sr_delay where now()&lt;(last_alive + interval &#x27;<span class="hljs-variable">$&#123;sr_allowed_delay_time&#125;</span> seconds&#x27;);&quot;</span><br><span class="hljs-comment">#SQL2=&quot;select count(1) as delay_time from sr_delay where now()&lt;(last_alive + interval &#x27;100 seconds&#x27;);&quot; </span><br><span class="hljs-built_in">sleep</span> <span class="hljs-variable">$sr_allowed_delay_time</span><br>db_role=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$SQL1</span> | psql -At -p <span class="hljs-variable">$PGPORT</span> -U <span class="hljs-variable">$PGUSER</span> -d <span class="hljs-variable">$PGDBNAME</span> -w` <br>db_sr_delaytime=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$SQL2</span> | psql -p <span class="hljs-variable">$PGPORT</span> -d <span class="hljs-variable">$PGDBNAME</span> -U <span class="hljs-variable">$PGUSER</span> -At -w` <br><span class="hljs-comment">#执行命令 pg_ctl promote 激活备库</span><br>SWITCH_COMMAND=<span class="hljs-string">&#x27;/usr/pgsql-14/bin/pg_ctl promote -D /var/lib/pgsql/14/data/&#x27;</span> <br><span class="hljs-comment"># 如果为备库，且延迟大于指定时间则切换为主库</span><br>f 表示为主库<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;db_role&#125;</span> == <span class="hljs-string">&#x27;f&#x27;</span> ];<br><span class="hljs-keyword">then</span> <br>  <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;注意：当前postgreSQL DB为master数据库，不能切换！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span> <br>  <span class="hljs-built_in">exit</span> 0 <br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$db_sr_delaytime</span> -gt 0 ];<br><span class="hljs-keyword">then</span> <br>  <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;注意：当前主数据库健康，备用数据库不能切换！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span> <br>  <span class="hljs-built_in">exit</span> 0 <br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ !<span class="hljs-variable">$db_sr_delaytime</span> ];<br><span class="hljs-keyword">then</span> <br>  <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;注意：当前数据库为statndby，准备切换master数据库！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span> <br>  su - <span class="hljs-variable">$PG_OS_USER</span> -c <span class="hljs-string">&quot;<span class="hljs-variable">$SWITCH_COMMAND</span>&quot;</span> <br><span class="hljs-keyword">elif</span> [ $? -eq 0 ];<br><span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;success：当前备库切换主PG库成功！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span> <br>  <span class="hljs-built_in">exit</span> 0 <br><span class="hljs-keyword">else</span> <br>  <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;error：备库切换主PG库失败！，请查收！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span> <br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><h3 id="7-4、keepalived-进入错误状态时执行的脚本-fault-sh"><a href="#7-4、keepalived-进入错误状态时执行的脚本-fault-sh" class="headerlink" title="7.4、keepalived 进入错误状态时执行的脚本 fault.sh"></a>7.4、keepalived 进入错误状态时执行的脚本 fault.sh</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/keepalived/scripts/fault.sh<br><br><span class="hljs-comment">#!/bin/bash</span><br>LOGGFILE=/etc/keepalived/log/pg_db_fault.log<br>PGPORT=5432<br>PGMIP=192.168.62.129<br><span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;错误：由于主数据库发生了一些未知问题，所以关闭PostgreSQL数据库！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span><br><br><span class="hljs-comment">#PGCOUNT=`ps -ef|grep &#x27;/usr/pgsql-14/bin/postgres -D /var/lib/pgsql/14/data&#x27; |wc -l`</span><br><br><span class="hljs-comment">#if [ $PGCOUNT -gt 1 ];then</span><br><span class="hljs-comment">#  PGPID=&quot;`netstat -anp|grep $PGPORT |awk &#x27;&#123;printf $7&#125;&#x27;|cut -d/ -f1`&quot;</span><br><span class="hljs-comment">#  kill -9 $PGPID</span><br><span class="hljs-comment">#  echo -e `date +&quot;%F %T&quot;` &quot;ERROR：由于主数据库发生了一些未知问题，所以关闭PostgreSQL数据库！&quot; &gt;&gt; $LOGFILE</span><br><span class="hljs-comment">#  exit 1</span><br><span class="hljs-comment">#fi</span><br><br>PGPID=<span class="hljs-string">&quot;`netstat -anp|grep <span class="hljs-variable">$PGPORT</span> |awk &#x27;&#123;printf <span class="hljs-variable">$7</span>&#125;&#x27;|cut -d/ -f1`&quot;</span><br>systemctl stop keepalived<br><br><span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$PGPID</span><br><span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> -e `<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span>` <span class="hljs-string">&quot;ERROR：由于主数据库发生了一些未知问题，所以关闭PostgreSQL数据库！&quot;</span> &gt;&gt; <span class="hljs-variable">$LOGFILE</span><br>  systemctl stop keepalived <br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="7-5、配置权限并分发到备节点"><a href="#7-5、配置权限并分发到备节点" class="headerlink" title="7.5、配置权限并分发到备节点"></a>7.5、配置权限并分发到备节点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> 755 /etc/keepalived/scripts/*<br><br>scp /etc/keepalived/scripts/* root@192.168.62.130:/etc/keepalived/scripts/<br></code></pre></td></tr></table></figure><h3 id="7-6、启动keepalived"><a href="#7-6、启动keepalived" class="headerlink" title="7.6、启动keepalived"></a>7.6、启动keepalived</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start keepalived<br>systemctl <span class="hljs-built_in">enable</span> keepalived<br>systemctl status keepalived<br></code></pre></td></tr></table></figure><h2 id="八、测试主备是否切换"><a href="#八、测试主备是否切换" class="headerlink" title="八、测试主备是否切换"></a>八、测试主备是否切换</h2><p><strong>测试down掉主机后，查看备库是否能够写入数据</strong></p><h3 id="8-1、在192-168-62-129上停掉数据库"><a href="#8-1、在192-168-62-129上停掉数据库" class="headerlink" title="8.1、在192.168.62.129上停掉数据库"></a>8.1、在192.168.62.129上停掉数据库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl stop postgresql-14<br></code></pre></td></tr></table></figure><h3 id="8-2、测试备库是否能够写入数据"><a href="#8-2、测试备库是否能够写入数据" class="headerlink" title="8.2、测试备库是否能够写入数据"></a>8.2、测试备库是否能够写入数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看ip是否切换</span><br>ip add | grep 192.128.62.123<br><br><span class="hljs-comment">#如果有Navicat连接工具可直接测试是否能够连接并写入数据，没有的话按照下述步骤测试是否能写入数据！（因为执行切换时需要时间，所以请在down机后三分钟测试是否能写入数据）</span><br><span class="hljs-comment">#可通过查看/etc/keepalived/log/failover.log日志判断是否切换成功！</span><br><br><span class="hljs-comment">#无工具测试：</span><br><span class="hljs-comment">##切换完成后在130机器上，连接数据库</span><br><span class="hljs-comment">##创建测试表</span><br>CREATE TABLE <span class="hljs-built_in">test</span>(ID VARCHAR(20));<br><span class="hljs-comment">##插入测试数据</span><br>INSERT INTO <span class="hljs-built_in">test</span>(ID) VALUES (<span class="hljs-string">&#x27;1234554321&#x27;</span>);<br><span class="hljs-comment">##查询数据是否写入</span><br>SELECT * from <span class="hljs-built_in">test</span>;<br><span class="hljs-comment">##删除测试表</span><br>DROP TABLE IF EXISTS <span class="hljs-built_in">test</span>;<br><br></code></pre></td></tr></table></figure><h3 id="8-3、修复192-168-62-129"><a href="#8-3、修复192-168-62-129" class="headerlink" title="8.3、修复192.168.62.129"></a>8.3、修复192.168.62.129</h3><p>使用pg_rewind 同步新主库的数据到原主库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br><br>/usr/pgsql-14/bin/pg_rewind -R --target-pgdata <span class="hljs-string">&#x27;/var/lib/pgsql/14/data/&#x27;</span> --source-server <span class="hljs-string">&#x27;host=192.168.62.130 port=5432 user=postgres password=postgres dbname=postgres&#x27;</span><br><br></code></pre></td></tr></table></figure><p>如果这个地方咱们的wal日志已经被覆盖了了很多，那么就需要将我们的归档备份日志&#x2F;pg_archive&#x2F;给scp过来<br>注意：需要注意新主和备上面TimeLineID的差异</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">scp postgres@192.168.62.130:/var/lib/pgsql/14/data/pg_archive/00000002*  /var/lib/pgsql/14/data/pg_archive/<br></code></pre></td></tr></table></figure><p>启动数据库，然后检查主备是否正常</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start postgresql-14<br><br><span class="hljs-comment">#检查主备wal sender和receiver是否正常</span><br>ps axu |grep walreceiver<br><br>检查数据是否正常：根据5.3步骤来进行查看<br></code></pre></td></tr></table></figure><p>启动Keepalived，查看Keepalived状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl  start keepalived<br>systemctl status keepalived<br></code></pre></td></tr></table></figure><p><em><strong>再次切换测试数据是否正常</strong></em></p><h3 id="8-4、再次切换测试"><a href="#8-4、再次切换测试" class="headerlink" title="8.4、再次切换测试"></a>8.4、再次切换测试</h3><p>在做切换前，先要检查192.168.62.129和192.168.62.130上面的Keepalived正常以及vip和主从正常，在192.168.62.130上停掉数据库:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">192.168.62.130上停掉数据库:<br><br>systemctl stop postgresql-14<br></code></pre></td></tr></table></figure><h3 id="8-5、查看是否切换成功，测试是否能够写入数据"><a href="#8-5、查看是否切换成功，测试是否能够写入数据" class="headerlink" title="8.5、查看是否切换成功，测试是否能够写入数据"></a>8.5、查看是否切换成功，测试是否能够写入数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看ip是否切换</span><br>ip add | grep 192.128.62.123<br><br><span class="hljs-comment">#如果有Navicat连接工具可直接测试是否能够连接并写入数据，没有的话按照下述步骤测试是否能写入数据！（因为执行切换时需要时间，所以请在down机后三分钟测试是否能写入数据）</span><br><span class="hljs-comment">#可通过查看/etc/keepalived/log/failover.log日志判断是否切换成功！</span><br><br><span class="hljs-comment">#无工具测试：</span><br><span class="hljs-comment">##切换完成后在129机器上，连接数据库</span><br><span class="hljs-comment">##创建测试表</span><br>CREATE TABLE <span class="hljs-built_in">test</span>(ID VARCHAR(20));<br><span class="hljs-comment">##插入测试数据</span><br>INSERT INTO <span class="hljs-built_in">test</span>(ID) VALUES (<span class="hljs-string">&#x27;1234554321&#x27;</span>);<br><span class="hljs-comment">##查询数据是否写入</span><br>SELECT * from <span class="hljs-built_in">test</span>;<br><span class="hljs-comment">##删除测试表</span><br>DROP TABLE IF EXISTS <span class="hljs-built_in">test</span>;<br><br></code></pre></td></tr></table></figure><h3 id="8-6、修复192-168-62-130"><a href="#8-6、修复192-168-62-130" class="headerlink" title="8.6、修复192.168.62.130"></a>8.6、修复192.168.62.130</h3><p>使用pg_rewind 同步新主库的数据到原主库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br><br>/usr/pgsql-14/bin/pg_rewind -R --target-pgdata <span class="hljs-string">&#x27;/var/lib/pgsql/14/data/&#x27;</span> --source-server <span class="hljs-string">&#x27;host=192.168.62.129 port=5432 user=postgres password=postgres dbname=postgres&#x27;</span><br><br></code></pre></td></tr></table></figure><p>如果这个地方咱们的wal日志已经被覆盖了了很多，那么就需要将我们的归档备份日志&#x2F;pg_archive&#x2F;给scp过来<br>注意：需要注意新主和备上面TimeLineID的差异</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">scp postgres@192.168.62.129:/var/lib/pgsql/14/data/pg_archive/00000002*  /var/lib/pgsql/14/data/pg_archive/<br></code></pre></td></tr></table></figure><p>启动数据库，然后检查主备是否正常</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start postgresql-14<br><br><span class="hljs-comment">#检查主备wal sender和receiver是否正常</span><br>ps axu |grep walreceiver<br><br>检查数据是否正常：根据5.3步骤来进行查看<br></code></pre></td></tr></table></figure><p>启动Keepalived，查看Keepalived状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl  start keepalived<br>systemctl status keepalived<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>PostgreSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL单节点搭建</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/PostgreSQL%E5%8D%95%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/PostgreSQL%E5%8D%95%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PostgreSQL单节点搭建"><a href="#PostgreSQL单节点搭建" class="headerlink" title="PostgreSQL单节点搭建"></a>PostgreSQL单节点搭建</h1><p>PostgreSQL是一种特性非常齐全的自由软件的对象-关系型数据库管理系统(ORDBMS)，稳定性比MySQL要强，高并发情况下读写性能好。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">官网地址：https://www.postgresql.org/<br></code></pre></td></tr></table></figure><h2 id="一、在线安装"><a href="#一、在线安装" class="headerlink" title="一、在线安装"></a>一、在线安装</h2><p>在线安装地址：<a href="https://www.postgresql.org/download/linux/redhat/">https://www.postgresql.org/download/linux/redhat/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装存储库 RPM：</span><br>sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm<br><br><span class="hljs-comment"># 安装 PostgreSQL：</span><br>sudo yum install -y postgresql14-server<br><br><span class="hljs-comment"># 可选择初始化数据库并启用自动启动：</span><br>sudo /usr/pgsql-14/bin/postgresql-14-setup initdb<br>sudo systemctl <span class="hljs-built_in">enable</span> postgresql-14<br>sudo systemctl start postgresql-14<br><br><span class="hljs-comment"># 安装核心数据库服务器</span><br>yum install postgresql14-server postgresql14-contrib -y<br><br><span class="hljs-comment">#postgresql相关路径</span><br>/var/lib/pgsql/14/data/  <span class="hljs-comment">#conf文件路径</span><br><br><span class="hljs-comment">#测试是否能正常连接</span><br>su - postgres<br>psql<br></code></pre></td></tr></table></figure><h2 id="二、离线安装（下载安装包方式安装）"><a href="#二、离线安装（下载安装包方式安装）" class="headerlink" title="二、离线安装（下载安装包方式安装）"></a>二、离线安装（下载安装包方式安装）</h2><p>参考博主文档：<a href="https://blog.csdn.net/weixin_47980221/article/details/121124658">https://blog.csdn.net/weixin_47980221/article/details/121124658</a><br>离线安装包下载地址：<a href="https://ftp.postgresql.org/pub/source/">https://ftp.postgresql.org/pub/source/</a></p><h3 id="1、下载并解压安装包"><a href="#1、下载并解压安装包" class="headerlink" title="1、下载并解压安装包"></a>1、下载并解压安装包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /app &amp;&amp; <span class="hljs-built_in">cd</span> /app<br><br>wget https://ftp.postgresql.org/pub/source/v14.5/postgresql-14.5.tar.gz --no-check-certificate<br><br>tar -xnf postgresql-14.5.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> postgresql-14.5<br><br><span class="hljs-comment">#添加软链接</span><br><span class="hljs-built_in">ln</span> -s /app/postgresql-14.5/ /usr/local/pgsql/<br></code></pre></td></tr></table></figure><h3 id="2、创建postgresql用户，并设置密码"><a href="#2、创建postgresql用户，并设置密码" class="headerlink" title="2、创建postgresql用户，并设置密码"></a>2、创建postgresql用户，并设置密码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">useradd postgres<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;123123&quot;</span> |passwd<br><br></code></pre></td></tr></table></figure><h3 id="3、编译安装"><a href="#3、编译安装" class="headerlink" title="3、编译安装"></a>3、编译安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#安装必要依赖</span><br>yum install -y bison flex readline-devel zlib-devel<br>yum install docbook-dtds docbook-style-xsl fop libxslt -y<br>yum install -y gcc<br><br><span class="hljs-comment">#创建数据目录</span><br><span class="hljs-built_in">mkdir</span>  -p /usr/local/pgsql/data<br><br><span class="hljs-comment">#设置用户组</span><br><span class="hljs-built_in">chown</span> -R postgres.postgres /usr/local/pgsql/<br><br><span class="hljs-comment">#配置编译</span><br><span class="hljs-built_in">cd</span> /usr/local/pgsql/<br>./configure<br>make &amp;&amp; make install<br><br></code></pre></td></tr></table></figure><h3 id="4、初始化数据库"><a href="#4、初始化数据库" class="headerlink" title="4、初始化数据库"></a>4、初始化数据库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#切换为postgres用户</span><br>su - postgres<br><br><span class="hljs-comment">#初始化数据库</span><br>/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data/　　<br></code></pre></td></tr></table></figure><h3 id="5、启动数据库"><a href="#5、启动数据库" class="headerlink" title="5、启动数据库"></a>5、启动数据库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#启动数据库</span><br>/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data/ -l ./logfile start<br><span class="hljs-comment">#-l：指定日志文件位置，直接输出当前目录下的logfile，可以自己指定</span><br><span class="hljs-comment">#-D：指定数据目录，默认如果不加数据目录报错会找不到</span><br><br>停止数据库<br>/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data/ stop<br><br>重启数据库<br>/usr/local/pgsql/bin/pg_ctl restart -D /usr/local/pgsql/data/ -m fast<br></code></pre></td></tr></table></figure><h3 id="6、环境变量修改"><a href="#6、环境变量修改" class="headerlink" title="6、环境变量修改"></a>6、环境变量修改</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi ~/.bash_profile<br><span class="hljs-comment">#增加</span><br><span class="hljs-built_in">export</span> PGHOME=/usr/local/pgsql<br><span class="hljs-built_in">export</span> PGDATA=/usr/local/pgsql/data<br>PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HOME</span>/bin:<span class="hljs-variable">$PGHOME</span>/bin<br><br><span class="hljs-comment">#生效 </span><br><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure><h3 id="7、配置文件修改"><a href="#7、配置文件修改" class="headerlink" title="7、配置文件修改"></a>7、配置文件修改</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/local/pgsql/data<br><br><span class="hljs-comment">#备份文件</span><br><span class="hljs-built_in">cp</span> postgresql.conf&#123;,.bak&#125;<br><br><span class="hljs-comment">#修改配置文件</span><br>vim postgresql.conf<br><br>listen_addresses  <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-comment">#默认本机</span><br>max_connections   1000 <span class="hljs-comment">#默认100</span><br><br><span class="hljs-comment">##其他相关内存参数优化这里不做过多配置</span><br><br><span class="hljs-comment">#添加IP网段授权（可选）</span><br>vim /usr/local/pgsql/data/pg_hba.conf<br><span class="hljs-comment">#...</span><br>host    all             all             192.168.62.0/24         trust　　　　指定网段可连接<br>host    all             all             0.0.0.0/0               trust　　　　所有网段可连接<br></code></pre></td></tr></table></figure><h3 id="8、简单操作"><a href="#8、简单操作" class="headerlink" title="8、简单操作"></a>8、简单操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#连接数据库</span><br>psql -h 127.0.0.1 -U postgres -p 5432<br><span class="hljs-comment">## -d指定连接后选中的数据库，默认是postgres</span><br><br><span class="hljs-comment">##命令提示符前面为当前数据库，使用 \l (反斜杠+l)查看当前数据库列表</span><br><br><span class="hljs-comment">#为用户postgres设置密码，增强安全性:</span><br>ALTER USER postgres WITH PASSWORD <span class="hljs-string">&#x27;YourPassWord&#x27;</span>;<br><br><span class="hljs-comment">#查询账号</span><br>SELECT usename from pg_user;<br><br>CREATE DATABASE <span class="hljs-built_in">test</span> WITH OWNER=postgres ENCODING=<span class="hljs-string">&#x27;UTF-8&#x27;</span>; <span class="hljs-comment">#创建新的数据库 </span><br>create table 表名(字段 属性(),.....)  创建表 <br>\c <span class="hljs-built_in">test</span>   <span class="hljs-comment">#切换当前数据库为test</span><br>\d        <span class="hljs-comment">#查看当前数据库下所有表</span><br>\d 表名   <span class="hljs-comment">#查看表结构详细信息</span><br>\q　　    <span class="hljs-comment">#退出交互界面</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>PostgreSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>postgresql主从搭建</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/PostgreSQL%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/PostgreSQL%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PostgreSQL主从搭建"><a href="#PostgreSQL主从搭建" class="headerlink" title="PostgreSQL主从搭建"></a>PostgreSQL主从搭建</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://www.cnblogs.com/guapitomjoy/p/15330079.html<br>参考文档：https://www.cnblogs.com/ezgod/p/15843221.html<br></code></pre></td></tr></table></figure><h2 id="一、机器规划"><a href="#一、机器规划" class="headerlink" title="一、机器规划"></a>一、机器规划</h2><p>基于pgpool中间件实现postgresql一主多从集群部署，这里用两台服务器作一主一从示例</p><table><thead><tr><th>主机名</th><th>IP</th><th>主从划分</th></tr></thead><tbody><tr><td>pgsql-1</td><td>192.168.62.129</td><td>主库</td></tr><tr><td>pgsql-2</td><td>192.168.62.130</td><td>从库</td></tr></tbody></table><h2 id="二、整体架构"><a href="#二、整体架构" class="headerlink" title="二、整体架构"></a>二、整体架构</h2><p><img src="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/PostgreSQL%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA/image-20221028174953304.png" alt="image-20221028174953304"></p><h2 id="三、安装postgresql"><a href="#三、安装postgresql" class="headerlink" title="三、安装postgresql"></a>三、安装postgresql</h2><h3 id="3-1、安装postgresql-14"><a href="#3-1、安装postgresql-14" class="headerlink" title="3.1、安装postgresql-14"></a>3.1、安装postgresql-14</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm<br><br><span class="hljs-comment"># 安装 PostgreSQL：</span><br>sudo yum install -y postgresql14-server<br><br><span class="hljs-comment"># 可选择初始化数据库并启用自动启动：</span><br>sudo /usr/pgsql-14/bin/postgresql-14-setup initdb<br>sudo systemctl <span class="hljs-built_in">enable</span> postgresql-14<br>sudo systemctl start postgresql-14<br><br><span class="hljs-comment"># 安装核心数据库服务器</span><br>yum install postgresql14-server postgresql14-contrib -y<br><br><span class="hljs-comment">#postgresql相关路径</span><br>/var/lib/pgsql/14/data/  <span class="hljs-comment">#conf文件路径</span><br><br><span class="hljs-comment">#测试是否能正常连接</span><br>su - postgres<br>psql<br></code></pre></td></tr></table></figure><h3 id="3-2、主节点配置"><a href="#3-2、主节点配置" class="headerlink" title="3.2、主节点配置"></a>3.2、主节点配置</h3><h4 id="3-2-1）创建用于主从访问的用户，-修改postgres用户的密码，用于远程登录。-切换到postgres用户操作"><a href="#3-2-1）创建用于主从访问的用户，-修改postgres用户的密码，用于远程登录。-切换到postgres用户操作" class="headerlink" title="3.2.1）创建用于主从访问的用户， 修改postgres用户的密码，用于远程登录。(切换到postgres用户操作)"></a>3.2.1）创建用于主从访问的用户， 修改postgres用户的密码，用于远程登录。(切换到postgres用户操作)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#切换到postgres用户操作</span><br>su - postgres<br>psql<br><br><span class="hljs-comment">#创建用于主从访问的用户</span><br><span class="hljs-comment">#创建数据库账号replica并设置密码及登录权限和备份权限</span><br>create role replica login replication encrypted password <span class="hljs-string">&#x27;replica123&#x27;</span>;<br><br><span class="hljs-comment">#修改postgres用户的密码，用于远程登录</span><br>alter USER postgres with password <span class="hljs-string">&#x27;postgres&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="3-2-2）修改pg-hba-conf和postgresql-conf配置："><a href="#3-2-2）修改pg-hba-conf和postgresql-conf配置：" class="headerlink" title="3.2.2）修改pg_hba.conf和postgresql.conf配置："></a>3.2.2）修改pg_hba.conf和postgresql.conf配置：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#运行以下命令，打开pg_hba.conf文件，设置replica用户白名单</span><br>vim /var/lib/pgsql/14/data/pg_hba.conf<br><br><span class="hljs-comment">##添加以下数据</span><br><span class="hljs-comment">##允许replica用户从replication数据库进行数据同步</span><br>host replication replica 192.168.62.129/24 trust<br>host replication replica 192.168.62.130/24 trust<br><span class="hljs-comment">#允许VPC网段中md5密码认证连接</span><br>host    all    all    192.168.0.0/24    md5<br>host    all    all     0.0.0.0/0 md5<br><br><br><span class="hljs-comment">#运行以下命令，打开postgresql.conf文件</span><br>vim /var/lib/pgsql/14/data/postgresql.conf<br><br>listen_addresses = <span class="hljs-string">&#x27;*&#x27;</span>     <span class="hljs-comment">#监听的IP地址</span><br>max_connections = 100      <span class="hljs-comment">#最大连接数，从库的max_connections必须要大于主库的</span><br><span class="hljs-comment">#archive_mode = on  # 允许归档</span><br><span class="hljs-comment">#archive_command = &#x27;cp %p /opt/pgsql/pg_archive/%f&#x27; ## 通过命令指定归档路径/</span><br>wal_level = logical    <span class="hljs-comment">#写入WAL的级别(minimal:不能通过基础备份和wal日志恢复数据库; replica: 支持wal归档和复制; logical: 在replica级别添加了逻辑解码所需的信息)</span><br>synchronous_commit = on    <span class="hljs-comment">#开启同步复制</span><br>max_wal_senders = 32       <span class="hljs-comment"># 允许最多的流复制连接发送数量， 根据从节点数量来设定</span><br>wal_sender_timeout = 60s   <span class="hljs-comment">#流复制主机发送数据的超时时间</span><br><br><br><span class="hljs-comment">#如果postgresql.conf中的hot_standby参数设置为on（默认值），并且数据目录中存在Standby.signal文件，则replication slave将在“热备”模式下运行。</span><br></code></pre></td></tr></table></figure><h4 id="3-2-3）重启主节点服务"><a href="#3-2-3）重启主节点服务" class="headerlink" title="3.2.3）重启主节点服务"></a>3.2.3）重启主节点服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart postgresql-14.service<br></code></pre></td></tr></table></figure><h3 id="3-3、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）"><a href="#3-3、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）" class="headerlink" title="3.3、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）"></a>3.3、配置PostgreSQL从节点（从节点的操作建议全部在postgres用户下进行。）</h3><h4 id="3-3-1）切换postgres用户"><a href="#3-3-1）切换postgres用户" class="headerlink" title="3.3.1）切换postgres用户"></a>3.3.1）切换postgres用户</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br></code></pre></td></tr></table></figure><h4 id="3-3-2-将主节点的数据进行备份到从节点"><a href="#3-3-2-将主节点的数据进行备份到从节点" class="headerlink" title="3.3.2) 将主节点的数据进行备份到从节点"></a>3.3.2) 将主节点的数据进行备份到从节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">rm</span> -rf /var/lib/pgsql/14/data/*<br><br><span class="hljs-comment">#复制后从节点的配置文件会和主节点的一样，并且一并复制的还有数据库文件，里面的数据也一样，意味着主节点有什么用户数据从节点也有</span><br>pg_basebackup -h 192.168.62.129 -D /var/lib/pgsql/14/data -U replica -P -v  -R -X stream -C -S pgstandby1 <br><br>参数详解：<br>-h –指定作为主服务器的主机。<br>-D –指定数据目录。<br>-U –指定连接用户。<br>-P –启用进度报告。<br>-v –启用详细模式。<br>-R–启用恢复配置的创建：创建一个standby.signal文件，并将连接设置附加到数据目录下的postgresql.auto.conf。<br>-X–用于在备份中包括所需的预写日志文件（WAL文件）。流的值表示在创建备份时流式传输WAL。<br>-C –在开始备份之前，允许创建由-S选项命名的复制插槽。<br>-S –指定复制插槽名称。<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#备份过程完成后，会在data目录下创建了一个standby.signal，并将primary_conninfo写入postgresql.auto.conf</span><br><span class="hljs-built_in">cat</span> /var/lib/pgsql/14/data/postgresql.auto.conf <br><span class="hljs-comment">#输出信息：</span><br><span class="hljs-comment"># Do not edit this file manually!</span><br><span class="hljs-comment"># It will be overwritten by the ALTER SYSTEM command.</span><br>primary_conninfo = <span class="hljs-string">&#x27;user=replica passfile=&#x27;</span><span class="hljs-string">&#x27;/var/lib/pgsql/.pgpass&#x27;</span><span class="hljs-string">&#x27; channel_binding=prefer host=192.168.62.129 port=5432 sslmode=prefer sslcompression=0 sslsni=1 ssl_min_protocol_version=TLSv1.2 gssencmode=prefer krbsrvname=postgres target_session_attrs=any&#x27;</span><br>primary_slot_name = <span class="hljs-string">&#x27;pgstandby1&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-3）启动从节点"><a href="#3-3-3）启动从节点" class="headerlink" title="3.3.3）启动从节点"></a>3.3.3）启动从节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start postgresql-14<br></code></pre></td></tr></table></figure><h2 id="四、验证主从，读写测试"><a href="#四、验证主从，读写测试" class="headerlink" title="四、验证主从，读写测试"></a>四、验证主从，读写测试</h2><h3 id="4-1、验证主从信息"><a href="#4-1、验证主从信息" class="headerlink" title="4.1、验证主从信息"></a>4.1、验证主从信息</h3><h4 id="4-1-1）查看主节点复制插槽-主节点执行"><a href="#4-1-1）查看主节点复制插槽-主节点执行" class="headerlink" title="4.1.1）查看主节点复制插槽(主节点执行)"></a>4.1.1）查看主节点复制插槽(主节点执行)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br>psql -c <span class="hljs-string">&quot;SELECT * FROM pg_replication_slots;&quot;</span><br>psql -c <span class="hljs-string">&#x27;select client_addr,sync_state from pg_stat_replication;&#x27;</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h4 id="4-1-2）查看从节点接收状态：-此信息只有从节点才会有"><a href="#4-1-2）查看从节点接收状态：-此信息只有从节点才会有" class="headerlink" title="4.1.2）查看从节点接收状态：(#此信息只有从节点才会有)"></a>4.1.2）查看从节点接收状态：(#此信息只有从节点才会有)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br>psql -c <span class="hljs-string">&quot;\x&quot;</span> -c <span class="hljs-string">&quot;SELECT * FROM pg_stat_wal_receiver;&quot;</span><br><br></code></pre></td></tr></table></figure><h4 id="4-1-3）查看主节点发送状态：-此信息只有主节点才会有"><a href="#4-1-3）查看主节点发送状态：-此信息只有主节点才会有" class="headerlink" title="4.1.3）查看主节点发送状态：(#此信息只有主节点才会有)"></a>4.1.3）查看主节点发送状态：(#此信息只有主节点才会有)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">su - postgres<br>psql -c <span class="hljs-string">&quot;\x&quot;</span> -c <span class="hljs-string">&quot;SELECT * FROM pg_stat_replication;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-2、读写测试"><a href="#4-2、读写测试" class="headerlink" title="4.2、读写测试"></a>4.2、读写测试</h3><h4 id="4-2-1）在主节点写数据，从节点读数据。"><a href="#4-2-1）在主节点写数据，从节点读数据。" class="headerlink" title="4.2.1）在主节点写数据，从节点读数据。"></a>4.2.1）在主节点写数据，从节点读数据。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">create database <span class="hljs-built_in">test</span>;<br>\l<br></code></pre></td></tr></table></figure><h4 id="4-2-2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。"><a href="#4-2-2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。" class="headerlink" title="4.2.2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。"></a>4.2.2）在从节点上查看创建之后的数据库。可以看见，数据库同步了。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">\l<br></code></pre></td></tr></table></figure><hr><hr><h2 id="五、postgres用户间免密登录"><a href="#五、postgres用户间免密登录" class="headerlink" title="五、postgres用户间免密登录"></a>五、postgres用户间免密登录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#给postgres用户更改密码</span><br>passwd postgres<br><br><span class="hljs-comment">#生成并同步密钥</span><br>su postgres<br>ssh-keygen<br>ssh-copy-id 192.168.62.130<br><br><span class="hljs-comment">#测试免密</span><br>ssh  192.168.62.130<br>ip addr<br></code></pre></td></tr></table></figure><h2 id="六、安装pgpool"><a href="#六、安装pgpool" class="headerlink" title="六、安装pgpool"></a>六、安装pgpool</h2><p>pgpool介绍：<a href="https://blog.csdn.net/qq_35241223/article/details/105453826">https://blog.csdn.net/qq_35241223/article/details/105453826</a><br>简介：可以实现自动故障转移、负载均衡、在线恢复、连接池、复制、限制超出连接、看门狗、内存查询缓存</p><h3 id="6-1、安装-两台机器都需要安装"><a href="#6-1、安装-两台机器都需要安装" class="headerlink" title="6.1、安装(两台机器都需要安装)"></a>6.1、安装(两台机器都需要安装)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#Pgpool-II安装</span><br>vim /etc/yum.repos.d/pgdg-redhat-all.repo<br><span class="hljs-comment">#在pgdg后面添加exclude=pgpool*</span><br>[pgdg-common]<br>...<br>exclude=pgpool*<br>[pgdg14]<br>...<br>exclude=pgpool*<br>[pgdg13]<br>...<br>exclude=pgpool*<br>[pgdg12]<br>...<br>exclude=pgpool*<br>[pgdg11]<br><span class="hljs-comment">#...</span><br>exclude=pgpool*<br><br>[pgdg10]<br><span class="hljs-comment">#...</span><br>exclude=pgpool*<br>[pgdg9]<br>...<br>exclude=pgpool*<br><br><span class="hljs-comment"># 添加源</span><br>yum install -y https://www.pgpool.net/yum/rpms/4.3/redhat/rhel-7-x86_64/pgpool-II-release-4.3-1.noarch.rpm<br><span class="hljs-comment"># 安装</span><br>yum install -y pgpool-II-pg14-*<br><br><span class="hljs-comment">## 安装完之后pgpool的配置文件在/etc/pgpool-II/下</span><br></code></pre></td></tr></table></figure><h3 id="6-2、修改配置（两台机器都需要配置）"><a href="#6-2、修改配置（两台机器都需要配置）" class="headerlink" title="6.2、修改配置（两台机器都需要配置）"></a>6.2、修改配置（两台机器都需要配置）</h3><p>pool_hba.conf和之前配置的PostgreSQL中的配置时一样的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/pgpool-II/pool_hba.conf<br>host    replication replica     192.168.62.129/24    trust<br>host    replication replica     192.168.62.130/24    trust<br>host    all          all        192.168.0.0/24       md5<br>host    all          all        0.0.0.0/0      md5<br></code></pre></td></tr></table></figure><h3 id="6-3、对postgres的密码进行加密。将postgres的密码设置为和用户名相同"><a href="#6-3、对postgres的密码进行加密。将postgres的密码设置为和用户名相同" class="headerlink" title="6.3、对postgres的密码进行加密。将postgres的密码设置为和用户名相同"></a>6.3、对postgres的密码进行加密。将postgres的密码设置为和用户名相同</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#密码加密</span><br>pg_md5 postgres<br>&gt;&gt;e8a48653851e28c69d0506508fb27fc5<br><br><span class="hljs-comment">#将加密结果复制，并粘贴到pcp.conf中相应的位置，取消掉该行的注释</span><br>vim /etc/pgpool-II/pcp.conf<br>postgres:e8a48653851e28c69d0506508fb27fc5<br></code></pre></td></tr></table></figure><h3 id="6-4、执行命令-先切换到postgres用户再执行然后输入密码"><a href="#6-4、执行命令-先切换到postgres用户再执行然后输入密码" class="headerlink" title="6.4、执行命令(先切换到postgres用户再执行然后输入密码):"></a>6.4、执行命令(先切换到postgres用户再执行然后输入密码):</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pg_md5 -m -p -u postgres pool_passwd<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>PostgreSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装PostgreSQL</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/Docker%E5%AE%89%E8%A3%85PostgreSQL/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E5%BA%93/postgreSQL/Docker%E5%AE%89%E8%A3%85PostgreSQL/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker安装PostgreSQL"><a href="#Docker安装PostgreSQL" class="headerlink" title="Docker安装PostgreSQL"></a>Docker安装PostgreSQL</h1><h2 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1.拉取镜像"></a>1.拉取镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull postgres<br></code></pre></td></tr></table></figure><h2 id="2-启动镜像"><a href="#2-启动镜像" class="headerlink" title="2.启动镜像"></a>2.启动镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name mypostgres -d -p 5432:5432 -e POSTGRES_PASSWORD=123456 postgres<br><br>参数解释：<br>–name，指定创建的容器的名字<br>-e POSTGRES_PASSWORD=123456，设置环境变量，指定数据库的登录口令为password；<br>-p 54321:5432，端口映射将容器的5432端口映射到外部机器的54321端口；<br>-d 指定使用postgres:9.4作为镜像；<br>-e ALLOW_IP_RANGE=0.0.0.0/0 允许任何主机访问；<br></code></pre></td></tr></table></figure><h2 id="3-直接进入容器，连接"><a href="#3-直接进入容器，连接" class="headerlink" title="3.直接进入容器，连接"></a>3.直接进入容器，连接</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it mypostgres psql -U postgres -d postgres<br></code></pre></td></tr></table></figure><h2 id="4-使用终端命令连接"><a href="#4-使用终端命令连接" class="headerlink" title="4.使用终端命令连接"></a>4.使用终端命令连接</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">psql -U postgres -h ipaddress -d dbname<br></code></pre></td></tr></table></figure><h2 id="5-查看数据库所有表"><a href="#5-查看数据库所有表" class="headerlink" title="5.查看数据库所有表"></a>5.查看数据库所有表</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">select * from pg_tables;<br></code></pre></td></tr></table></figure><h2 id="6-创建数据库"><a href="#6-创建数据库" class="headerlink" title="6.创建数据库"></a>6.创建数据库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#进入容器</span><br>docker <span class="hljs-built_in">exec</span> -it mypostgres bash<br><br><span class="hljs-comment"># 切换postgres用户</span><br>su postgres<br><br><span class="hljs-comment"># 进入数据库</span><br>psql<br><br><span class="hljs-comment"># 创建sonar数据库</span><br>&gt; CREATE DATABASE sonar;<br><br><span class="hljs-comment"># 退出数据库</span><br>\q<br><br><span class="hljs-comment"># 退出postgres用户</span><br><span class="hljs-built_in">exit</span><br><br><span class="hljs-comment"># 退出容器</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建sonar用户</span><br>&gt; create user sonar with password <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-comment">#创建sonarqube数据库</span><br>&gt; create database sonarqube owner sonar;<br></code></pre></td></tr></table></figure><h2 id="7-其他安装参考："><a href="#7-其他安装参考：" class="headerlink" title="7.其他安装参考："></a>7.其他安装参考：</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">PostgreSql安装：<br>参考：https://blog.csdn.net/weixin_42450728/article/details/121904389<br>PostgreSql常见的错误处理<br>https://blog.csdn.net/zhu_xun/article/details/21234663<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>PostgreSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker搭建minio</title>
    <link href="/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/minio/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAminio/"/>
    <url>/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/minio/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAminio/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用docker搭建minio"><a href="#使用docker搭建minio" class="headerlink" title="使用docker搭建minio"></a>使用docker搭建minio</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://blog.csdn.net/networken/article/details/111500745<br></code></pre></td></tr></table></figure><h2 id="一、docker部署minio集群"><a href="#一、docker部署minio集群" class="headerlink" title="一、docker部署minio集群"></a>一、docker部署minio集群</h2><p><strong>前置条件：</strong></p><ul><li>准备3个节点，每个节点创建2个挂载点，由于集群模式下不能使用根磁盘，这里使用docker卷作为挂载点。</li><li>3节点的集群，故障一个节点时不影响对集群的读写操作。</li><li>所有节点均安装docker，时间同步，关闭防火墙以及selinux</li></ul><table><thead><tr><th>服务器ip</th><th>搭建服务</th></tr></thead><tbody><tr><td>192.168.92.10</td><td>minio-1、nginx、keepalive</td></tr><tr><td>192.168.92.11</td><td>minio-2、nginx、keepalive</td></tr><tr><td>192.168.92.12</td><td>minio-3、nginx、keepalive</td></tr><tr><td>192.168.92.50</td><td>虚拟ip</td></tr></tbody></table><h3 id="1、所有节点配置主机名解析："><a href="#1、所有节点配置主机名解析：" class="headerlink" title="1、所有节点配置主机名解析："></a>1、所有节点配置主机名解析：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">192.168.92.10 minio-1</span><br><span class="hljs-string">192.168.92.11 minio-2</span><br><span class="hljs-string">192.168.92.12 minio-3</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="2、部署minio集群，3个节点每个节点挂载2个目录"><a href="#2、部署minio集群，3个节点每个节点挂载2个目录" class="headerlink" title="2、部署minio集群，3个节点每个节点挂载2个目录"></a>2、部署minio集群，3个节点每个节点挂载2个目录</h3><p>注意：docker部署集群模式时必须指定–net&#x3D;host参数，使用主机网络，使用端口映射无法创建集群。</p><p><strong>minio-1节点执行:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name minio \<br>  --restart=always --net=host \<br>  -e MINIO_ACCESS_KEY=minio \<br>  -e MINIO_SECRET_KEY=minio123 \<br>  -v minio-data1:/data1 \<br>  -v minio-data2:/data2 \<br>  minio/minio server \<br>  --address 192.168.92.10:9000 \<br>  http://minio-&#123;1...3&#125;/data&#123;1...2&#125;<br></code></pre></td></tr></table></figure><p><strong>minio-2节点执行:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name minio \<br>  --restart=always --net=host \<br>  -e MINIO_ACCESS_KEY=minio \<br>  -e MINIO_SECRET_KEY=minio123 \<br>  -v minio-data1:/data1 \<br>  -v minio-data2:/data2 \<br>  minio/minio server \<br>  --address 192.168.92.11:9000 \<br>  http://minio-&#123;1...3&#125;/data&#123;1...2&#125;<br></code></pre></td></tr></table></figure><p><strong>minio-3节点执行:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name minio \<br>  --restart=always --net=host \<br>  -e MINIO_ACCESS_KEY=minio \<br>  -e MINIO_SECRET_KEY=minio123 \<br>  -v minio-data1:/data1 \<br>  -v minio-data2:/data2 \<br>  minio/minio server \<br>  --address 192.168.92.12:9000 \<br>  http://minio-&#123;1...3&#125;/data&#123;1...2&#125;<br></code></pre></td></tr></table></figure><h3 id="3、查看minio状态"><a href="#3、查看minio状态" class="headerlink" title="3、查看minio状态"></a>3、查看minio状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">mc config host add minio http://minio-1:9000 minio minio12<br><br>mc admin info minio<br><br><span class="hljs-comment">#3个节点及每个节点上的Drivers全部在线</span><br></code></pre></td></tr></table></figure><h3 id="4、使用nginx-keepalive实现负载均衡"><a href="#4、使用nginx-keepalive实现负载均衡" class="headerlink" title="4、使用nginx+keepalive实现负载均衡"></a>4、使用nginx+keepalive实现负载均衡</h3><h4 id="4-1、创建nginx配置文件-2个节点执行"><a href="#4-1、创建nginx配置文件-2个节点执行" class="headerlink" title="4.1、创建nginx配置文件,2个节点执行"></a>4.1、创建nginx配置文件,2个节点执行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /etc/nginx/conf.d<br><br><span class="hljs-built_in">cat</span> &gt; /etc/nginx/conf.d/minio-lb.conf &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span><br>upstream minio_server &#123;<br>    server 192.168.92.10:9000;<br>    server 192.168.92.11:9000;<br>    server 192.168.92.12:9000;<br>    &#125;<br><br>server &#123;<br>    listen 9001;<br>    server_name  localhost;<br>    ignore_invalid_headers off;<br>    client_max_body_size 0;<br>    proxy_buffering off;<br>    location / &#123;<br>        proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        proxy_set_header X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>        proxy_set_header Host <span class="hljs-variable">$http_host</span>;<br>        proxy_connect_timeout 300;<br>        proxy_http_version 1.1;<br>        proxy_set_header Connection <span class="hljs-string">&quot;&quot;</span>;<br>        chunked_transfer_encoding off;<br>        proxy_pass http://minio_server;<br>    &#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h4 id="4-2、部署nginx容器-2个节点执行"><a href="#4-2、部署nginx容器-2个节点执行" class="headerlink" title="4.2、部署nginx容器,2个节点执行"></a>4.2、部署nginx容器,2个节点执行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name nginx \<br>  --restart always -p 9001:9001 \<br>  -v /etc/nginx/conf.d:/etc/nginx/conf.d \<br>  nginx<br><br></code></pre></td></tr></table></figure><h4 id="4-3、准备keepalived配置文件-2个节点执行"><a href="#4-3、准备keepalived配置文件-2个节点执行" class="headerlink" title="4.3、准备keepalived配置文件,2个节点执行"></a>4.3、准备keepalived配置文件,2个节点执行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br><span class="hljs-built_in">mkdir</span> /etc/keepalived<br><br><span class="hljs-comment">#注意修改interface(机器网卡)及virtual_ipaddress(虚拟IP地址)参数</span><br><span class="hljs-built_in">cat</span> &gt; /etc/keepalived/keepalived.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">! Configuration File for keepalived</span><br><span class="hljs-string"></span><br><span class="hljs-string">global_defs &#123;</span><br><span class="hljs-string">   router_id minio</span><br><span class="hljs-string">   vrrp_version 2</span><br><span class="hljs-string">   vrrp_garp_master_delay 1</span><br><span class="hljs-string">   script_user root</span><br><span class="hljs-string">   enable_script_security   </span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">vrrp_script chk_nginx &#123;</span><br><span class="hljs-string">    script       &quot;/bin/sh -c &#x27;curl -I http://127.0.0.1:9001 &amp;&gt; /dev/null&#x27;&quot;</span><br><span class="hljs-string">    timeout 3</span><br><span class="hljs-string">    interval 1   # check every 1 second</span><br><span class="hljs-string">    fall 2       # require 2 failures for KO</span><br><span class="hljs-string">    rise 2       # require 2 successes for OK</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">vrrp_instance lb-minio &#123;</span><br><span class="hljs-string">    state BACKUP</span><br><span class="hljs-string">    interface ens33</span><br><span class="hljs-string">    virtual_router_id 51</span><br><span class="hljs-string">    priority 100</span><br><span class="hljs-string">    virtual_ipaddress &#123;</span><br><span class="hljs-string">        192.168.92.50  #虚拟ip地址</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    track_script &#123;</span><br><span class="hljs-string">        chk_nginx</span><br><span class="hljs-string">    &#125; </span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure><h4 id="4-4、部署keepalived容器，2个节点执行"><a href="#4-4、部署keepalived容器，2个节点执行" class="headerlink" title="4.4、部署keepalived容器，2个节点执行"></a>4.4、部署keepalived容器，2个节点执行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name keepalived \<br>  --restart always \<br>  --cap-add=NET_ADMIN \<br>  --net=host \<br>  -v /etc/keepalived/keepalived.conf:/container/service/keepalived/assets/keepalived.conf \<br>  --detach osixia/keepalived --copy-service<br></code></pre></td></tr></table></figure><p><strong>浏览器访问minio UI，使用vip地址和9001端口</strong></p><h2 id="二、docker-compose部署minio"><a href="#二、docker-compose部署minio" class="headerlink" title="二、docker-compose部署minio"></a>二、docker-compose部署minio</h2><h3 id="1、docker-compose-部署单机模式："><a href="#1、docker-compose-部署单机模式：" class="headerlink" title="1、docker-compose 部署单机模式："></a>1、docker-compose 部署单机模式：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">minio:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">minio/minio</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">&quot;minio&quot;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">9000</span><span class="hljs-string">:9000</span> <span class="hljs-comment"># api 端口</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">9001</span><span class="hljs-string">:9001</span> <span class="hljs-comment"># 控制台端口</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MINIO_ACCESS_KEY:</span> <span class="hljs-string">admin</span>    <span class="hljs-comment">#管理后台用户名</span><br>      <span class="hljs-attr">MINIO_SECRET_KEY:</span> <span class="hljs-string">admin123</span> <span class="hljs-comment">#管理后台密码，最小8个字符</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker/minio/data:/data</span>               <span class="hljs-comment">#映射当前目录下的data目录至容器内/data目录</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker/minio/config:/root/.minio/</span>     <span class="hljs-comment">#映射配置目录</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">server</span> <span class="hljs-string">--console-address</span> <span class="hljs-string">&#x27;:9001&#x27;</span> <span class="hljs-string">/data</span>  <span class="hljs-comment">#指定容器中的目录 /data</span><br>    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br></code></pre></td></tr></table></figure><h3 id="2、docker-compose-部署多分布式实例："><a href="#2、docker-compose-部署多分布式实例：" class="headerlink" title="2、docker-compose 部署多分布式实例："></a>2、docker-compose 部署多分布式实例：</h3><p>注意：docker-compose只能在单主机部署多个分布式MinIO实例，分布式MinIO实例将部署在同一主机上的多个容器中:<br>安装docker-compose后：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /date/minio<br><span class="hljs-built_in">cd</span> /date/minio<br><br>wget https://raw.githubusercontent.com/minio/minio/master/docs/orchestration/docker-compose/docker-compose.yaml<br>wget https://raw.githubusercontent.com/minio/minio/master/docs/orchestration/docker-compose/nginx.conf<br><br>docker-compose up -d<br><br></code></pre></td></tr></table></figure><p><strong>docker-compose.yaml:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.7&#x27;</span><br><br><span class="hljs-comment"># Settings and configurations that are common for all containers</span><br><span class="hljs-attr">x-minio-common:</span> <span class="hljs-string">&amp;minio-common</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">quay.io/minio/minio:RELEASE.2022-09-17T00-09-45Z</span><br>  <span class="hljs-attr">command:</span> <span class="hljs-string">server</span> <span class="hljs-string">--console-address</span> <span class="hljs-string">&quot;:9001&quot;</span> <span class="hljs-string">http://minio&#123;1...4&#125;/data&#123;1...2&#125;</span><br>  <span class="hljs-attr">expose:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9000&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9001&quot;</span><br>  <span class="hljs-comment"># environment:  账号密码，登录需要取消注释</span><br>    <span class="hljs-comment"># MINIO_ROOT_USER: minioadmin</span><br>    <span class="hljs-comment"># MINIO_ROOT_PASSWORD: minioadmin</span><br>  <span class="hljs-attr">healthcheck:</span><br>    <span class="hljs-attr">test:</span> [<span class="hljs-string">&quot;CMD&quot;</span>, <span class="hljs-string">&quot;curl&quot;</span>, <span class="hljs-string">&quot;-f&quot;</span>, <span class="hljs-string">&quot;http://localhost:9000/minio/health/live&quot;</span>]<br>    <span class="hljs-attr">interval:</span> <span class="hljs-string">30s</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-string">20s</span><br>    <span class="hljs-attr">retries:</span> <span class="hljs-number">3</span><br><br><span class="hljs-comment"># starts 4 docker containers running minio server instances.</span><br><span class="hljs-comment"># using nginx reverse proxy, load balancing, you can access</span><br><span class="hljs-comment"># it through port 9000.</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">minio1:</span><br>    <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-string">*minio-common</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">minio1</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data1-1:/data1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data1-2:/data2</span><br><br>  <span class="hljs-attr">minio2:</span><br>    <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-string">*minio-common</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">minio2</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data2-1:/data1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data2-2:/data2</span><br><br>  <span class="hljs-attr">minio3:</span><br>    <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-string">*minio-common</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">minio3</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data3-1:/data1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data3-2:/data2</span><br><br>  <span class="hljs-attr">minio4:</span><br>    <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-string">*minio-common</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">minio4</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data4-1:/data1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data4-2:/data2</span><br><br>  <span class="hljs-attr">nginx:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.19.2-alpine</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./nginx.conf:/etc/nginx/nginx.conf:ro</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9000:9000&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9001:9001&quot;</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">minio1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">minio2</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">minio3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">minio4</span><br><br><span class="hljs-comment">## By default this config uses default local driver,</span><br><span class="hljs-comment">## For custom volumes replace with volume driver configuration.</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">data1-1:</span><br>  <span class="hljs-attr">data1-2:</span><br>  <span class="hljs-attr">data2-1:</span><br>  <span class="hljs-attr">data2-2:</span><br>  <span class="hljs-attr">data3-1:</span><br>  <span class="hljs-attr">data3-2:</span><br>  <span class="hljs-attr">data4-1:</span><br>  <span class="hljs-attr">data4-2:</span><br></code></pre></td></tr></table></figure><p><strong>nginx.conf:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs conf">user  nginx;<br>worker_processes  auto;<br><br>error_log  /var/log/nginx/error.log warn;<br>pid        /var/run/nginx.pid;<br><br>events &#123;<br>    worker_connections  4096;<br>&#125;<br><br>http &#123;<br>    include       /etc/nginx/mime.types;<br>    default_type  application/octet-stream;<br><br>    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;<br>                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;<br>                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;<br><br>    access_log  /var/log/nginx/access.log  main;<br>    sendfile        on;<br>    keepalive_timeout  65;<br><br>    # include /etc/nginx/conf.d/*.conf;<br><br>    upstream minio &#123;<br>        server minio1:9000;<br>        server minio2:9000;<br>        server minio3:9000;<br>        server minio4:9000;<br>    &#125;<br><br>    upstream console &#123;<br>        ip_hash;<br>        server minio1:9001;<br>        server minio2:9001;<br>        server minio3:9001;<br>        server minio4:9001;<br>    &#125;<br><br>    server &#123;<br>        listen       9000;<br>        listen  [::]:9000;<br>        server_name  localhost;<br><br>        # To allow special characters in headers<br>        ignore_invalid_headers off;<br>        # Allow any size file to be uploaded.<br>        # Set to a value such as 1000m; to restrict file size to a specific value<br>        client_max_body_size 0;<br>        # To disable buffering<br>        proxy_buffering off;<br>        proxy_request_buffering off;<br><br>        location / &#123;<br>            proxy_set_header Host $http_host;<br>            proxy_set_header X-Real-IP $remote_addr;<br>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>            proxy_set_header X-Forwarded-Proto $scheme;<br><br>            proxy_connect_timeout 300;<br>            # Default is HTTP/1, keepalive is only enabled in HTTP/1.1<br>            proxy_http_version 1.1;<br>            proxy_set_header Connection &quot;&quot;;<br>            chunked_transfer_encoding off;<br><br>            proxy_pass http://minio;<br>        &#125;<br>    &#125;<br><br>    server &#123;<br>        listen       9001;<br>        listen  [::]:9001;<br>        server_name  localhost;<br><br>        # To allow special characters in headers<br>        ignore_invalid_headers off;<br>        # Allow any size file to be uploaded.<br>        # Set to a value such as 1000m; to restrict file size to a specific value<br>        client_max_body_size 0;<br>        # To disable buffering<br>        proxy_buffering off;<br>        proxy_request_buffering off;<br><br>        location / &#123;<br>            proxy_set_header Host $http_host;<br>            proxy_set_header X-Real-IP $remote_addr;<br>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>            proxy_set_header X-Forwarded-Proto $scheme;<br>            proxy_set_header X-NginX-Proxy true;<br><br>            # This is necessary to pass the correct IP to be hashed<br>            real_ip_header X-Real-IP;<br><br>            proxy_connect_timeout 300;<br>            <br>            # To support websocket<br>            proxy_http_version 1.1;<br>            proxy_set_header Upgrade $http_upgrade;<br>            proxy_set_header Connection &quot;upgrade&quot;;<br>            <br>            chunked_transfer_encoding off;<br><br>            proxy_pass http://console;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用nginx进行了负载均衡，浏览器访问http:localhost:9000，登录的账号密码需要将docker-compose中environment<code>取消注释</code>,<br>默认情况下会创建4个minio实例</strong></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>Minio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker-compose</tag>
      
      <tag>Minio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建分布式存储服务minio</title>
    <link href="/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/minio/%E6%90%AD%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1minio%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/"/>
    <url>/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/minio/%E6%90%AD%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1minio%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="搭建分布式存储服务minio详细过程"><a href="#搭建分布式存储服务minio详细过程" class="headerlink" title="搭建分布式存储服务minio详细过程"></a>搭建分布式存储服务minio详细过程</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://blog.csdn.net/yhj_911/article/details/122607159<br>参考文档：https://www.cnblogs.com/hahaha111122222/p/15990604.html<br>参考文档：https://blog.csdn.net/qq_43437874/article/details/109608069<br>minio分布式解决方案：https://blog.csdn.net/yujia_666/article/details/121637775<br></code></pre></td></tr></table></figure><p><strong>搭建环境：</strong></p><table><thead><tr><th>服务器ip</th><th>服务器配置</th></tr></thead><tbody><tr><td>192.168.62.128</td><td>4G+4CPU+40G</td></tr><tr><td>192.168.62.129</td><td>4G+4CPU+40G</td></tr></tbody></table><h2 id="1、创建目录"><a href="#1、创建目录" class="headerlink" title="1、创建目录"></a>1、创建目录</h2><p>本集群由2台服务器构成（官方推荐集群最小4台服务器），每个服务器上挂载四个磁盘目录，四个目录的原因：模拟由一台服务器扩容到两台服务器。</p><p>注意：在一台主机上创建4个不同的路径模拟4个不同的磁盘来进行。这种方式行不通!</p><p><img src="/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/minio/%E6%90%AD%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1minio%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/image-20220921161607211.png" alt="192.168.62.128机器"></p><p><img src="/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/minio/%E6%90%AD%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1minio%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/image-20220921160920315.png" alt="192.168.62.129机器"></p><p>数据存储目录（两台服务器）</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir -p /home/minio/data1<br>mkdir -p /home/minio/data2<br>mkdir -p /home/minio/data3<br>mkdir -p /home/minio/data4<br></code></pre></td></tr></table></figure><p>启动脚本目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/opt/mi</span>nio<br></code></pre></td></tr></table></figure><p>配置域名，在&#x2F;etc&#x2F;hosts中，追加如下内容（两台服务器）</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">cat &gt;&gt; /etc/hosts &lt;&lt; EOF<br><span class="hljs-number">192.168.62.128</span>  minio-<span class="hljs-number">1</span><br><span class="hljs-number">192.168.62.129</span>  minio-<span class="hljs-number">2</span><br>EOF<br></code></pre></td></tr></table></figure><h2 id="2、编写集群启动脚本（两台服务器）"><a href="#2、编写集群启动脚本（两台服务器）" class="headerlink" title="2、编写集群启动脚本（两台服务器）"></a>2、编写集群启动脚本（两台服务器）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /opt/minio/run.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>export MINIO_ACCESS_KEY=Minio<br>export MINIO_SECRET_KEY=Test123456<br> <br>/opt/minio/minio server --config-dir /etc/minio \<br>http://minio-&#123;1...2&#125;/home/minio/data&#123;1...4&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">http://minio-&#123;1...1&#125;/home/minio/data&#123;1...4&#125; http://minio-&#123;2...2&#125;/home/minio/data&#123;1...4&#125;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果以后想扩容，必须用这种方式&#123;&#125;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果只有一台服务器只执行http://minio-&#123;1...1&#125;/home/minio/data&#123;1...4&#125;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果两台服务器http://minio-&#123;1...2&#125;/home/minio/data&#123;1...4&#125;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">扩容时追加http://minio-&#123;2...2&#125;/home/minio/data&#123;1...4&#125;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">经过验证，一个文件要么存储到源存储中，要么存储到扩容后的存储中</span><br></code></pre></td></tr></table></figure><h2 id="3、编写服务脚本（两台服务器）"><a href="#3、编写服务脚本（两台服务器）" class="headerlink" title="3、编写服务脚本（两台服务器）"></a>3、编写服务脚本（两台服务器）</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vim /usr/lib/systemd/system/minio.service<br> <br>[Unit]<br><span class="hljs-attribute">Description</span>=Minio<span class="hljs-built_in"> service</span><br><span class="hljs-built_in"></span><span class="hljs-attribute">Documentation</span>=https://docs.minio.io/<br> <br>[Service]<br><span class="hljs-attribute">WorkingDirectory</span>=/opt/minio/<br><span class="hljs-attribute">ExecStart</span>=/opt/minio/run.sh<br> <br><span class="hljs-attribute">Restart</span>=on-failure<br><span class="hljs-attribute">RestartSec</span>=5<br> <br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h2 id="4、追加权限（两台服务器）"><a href="#4、追加权限（两台服务器）" class="headerlink" title="4、追加权限（两台服务器）"></a>4、追加权限（两台服务器）</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">chmod +x <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/minio.service<br><span class="hljs-comment">#刷新服务</span><br>systemctl daemon-reload<br><br>wget https:<span class="hljs-regexp">//</span>dl.minio.io<span class="hljs-regexp">/server/mi</span>nio<span class="hljs-regexp">/release/</span>linux-amd64<span class="hljs-regexp">/minio -P /</span>opt/minio<br><span class="hljs-comment">#-p 下载minio到/opt/minio中</span><br>chmod +x minio<br>chmod +x <span class="hljs-regexp">/opt/mi</span>nio/run.sh<br></code></pre></td></tr></table></figure><h2 id="5、启动（两台服务器）"><a href="#5、启动（两台服务器）" class="headerlink" title="5、启动（两台服务器）"></a>5、启动（两台服务器）</h2><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start minio<br><span class="hljs-params">system</span>ctl enable minio<br><span class="hljs-params">system</span>ctl stop minio<br></code></pre></td></tr></table></figure><h2 id="6、登录、测试（两个地址都可以看，部分主次）"><a href="#6、登录、测试（两个地址都可以看，部分主次）" class="headerlink" title="6、登录、测试（两个地址都可以看，部分主次）"></a>6、登录、测试（两个地址都可以看，部分主次）</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">62.128</span>:<span class="hljs-number">9000</span>  (输入账号密码即可，run.sh脚本内的MINIO_ACCESS_KEY、MINIO_SECRET_KEY就是账号和密码)<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">62.129</span>:<span class="hljs-number">9000</span><br></code></pre></td></tr></table></figure><h2 id="7、使用nginx实现负载均衡"><a href="#7、使用nginx实现负载均衡" class="headerlink" title="7、使用nginx实现负载均衡"></a>7、使用nginx实现负载均衡</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> minio&#123;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.62.128:9000</span>;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.62.129:9000</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">19000</span>;<br>        <span class="hljs-comment">#server_name minio;</span><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$http_host</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$remote_addr</span>;<br>            <span class="hljs-attribute">client_body_buffer_size</span> <span class="hljs-number">10M</span>;<br>            <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">10G</span>;<br>            <span class="hljs-attribute">proxy_buffers</span> <span class="hljs-number">1024</span> <span class="hljs-number">4k</span>;<br>            <span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">300</span>;<br>            <span class="hljs-attribute">proxy_next_upstream</span> <span class="hljs-literal">error</span> timeout http_404;<br>            <span class="hljs-attribute">proxy_pass</span> http://minio;<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>Minio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL使用binlog恢复数据</title>
    <link href="/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL%E4%BD%BF%E7%94%A8binlog%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE/"/>
    <url>/2023/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL%E4%BD%BF%E7%94%A8binlog%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL使用binlog恢复数据"><a href="#MySQL使用binlog恢复数据" class="headerlink" title="MySQL使用binlog恢复数据"></a>MySQL使用binlog恢复数据</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://blog.csdn.net/p2073123/article/details/126487588?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-126487588-blog-108519295.pc_relevant_default&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4<br>参考文档2：https://www.cnblogs.com/michael9/p/11923483.html<br></code></pre></td></tr></table></figure><p><strong>binlog的三种模式</strong></p><p>statement：记录每一条修改数据的sql<br>row：保存哪条记录被修改<br>mixed：兼顾前两者的优点。</p><h2 id="恢复数据到某个时间点"><a href="#恢复数据到某个时间点" class="headerlink" title="恢复数据到某个时间点"></a>恢复数据到某个时间点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看binlog有没有开启</span><br>SHOW VARIABLES LIKE <span class="hljs-string">&#x27;log_bin%&#x27;</span>;<br><span class="hljs-comment"># 查看当前binlog的模式</span><br>SHOW VARIABLES LIKE <span class="hljs-string">&#x27;binlog%&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看日志信息</span><br>mysqlbinlog --no-defaults --database=<span class="hljs-built_in">test</span> --base64-output=decode-rows --skip-gtids --stop-datetime=<span class="hljs-string">&#x27;2023-3-7 10:40:00&#x27;</span> /data/mysql-bin.000007 | less <br>:G <span class="hljs-comment">#可查看最后一行</span><br><br><br>注意：加上`--base64-output=decode-rows`参数导出的，我们可以用来分析，决定恢复哪些时间段内的，或者哪些 事务区间段内的。这样就能找到 第二步的 开始时间 结束时间 或者事务区间 的开始事务节点，结束事务节点。而导出恢复数据.sql文件时、一定不能在命令中加 --base64-output=decode-rows<br><br><br>找到相关信息后：<br><span class="hljs-comment">#使用binlog，基于时间点导出数据</span><br>mysqlbinlog --no-defaults --database=coinpay  --skip-gtids --stop-datetime=<span class="hljs-string">&#x27;2023-3-7 10:40:00&#x27;</span> /data/mysql-bin.000007 &gt; /opt/binlog.sql<br><br><br><span class="hljs-comment">#在 MySQL 客户端命令行进入</span><br><span class="hljs-comment">#命令行登录mysql执行</span><br>&gt; use <span class="hljs-built_in">test</span>、<br>&gt; <span class="hljs-built_in">source</span> /opt/binlog.sql<br></code></pre></td></tr></table></figure><h2 id="恢复数据可采用方式"><a href="#恢复数据可采用方式" class="headerlink" title="恢复数据可采用方式"></a>恢复数据可采用方式</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">基于时间点:<br><span class="hljs-comment"># 起始时间</span><br>mysqlbinlog --start-datetime=<span class="hljs-string">&#x27;2016-01-04 15:11:00&#x27;</span><br><span class="hljs-comment"># 结束时间</span><br>mysqlbinlog --stop-datetime=<span class="hljs-string">&#x27;2016-01-04 15:11:00&#x27;</span> <br><br>基于定位符:<br><span class="hljs-comment"># 起始定位符</span><br>mysqlbinlog --start-position=249 binlog.000006<br><span class="hljs-comment"># 结束定位符</span><br>mysqlbinlog --stop-position=249 binlog.000006<br> <br><span class="hljs-comment">#指定表</span><br><span class="hljs-comment">#使用 grep 命令抽取二进制日志：</span><br>grep -B3 -w tb_name db_name.sql &gt; tb_name.sql<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL5.7升级到最新版</title>
    <link href="/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL5.7%E5%8D%87%E7%BA%A7%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88/"/>
    <url>/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL5.7%E5%8D%87%E7%BA%A7%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL5-7升级到最新版"><a href="#MySQL5-7升级到最新版" class="headerlink" title="MySQL5.7升级到最新版"></a>MySQL5.7升级到最新版</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">参考文档：https://blog.csdn.net/qq_41788609/article/details/118147232<br></code></pre></td></tr></table></figure><h2 id="一、用mysqldump备份，再安装新版本，恢复sql文件（用于数据量小的升级）"><a href="#一、用mysqldump备份，再安装新版本，恢复sql文件（用于数据量小的升级）" class="headerlink" title="一、用mysqldump备份，再安装新版本，恢复sql文件（用于数据量小的升级）"></a>一、用mysqldump备份，再安装新版本，恢复sql文件（用于数据量小的升级）</h2><p>mysqldump -uroot -p’123456’ –single-transaction –master-data&#x3D;1 –all-databases &gt; all.sql</p><h2 id="二、以下通过mysql-upgrade升级："><a href="#二、以下通过mysql-upgrade升级：" class="headerlink" title="二、以下通过mysql_upgrade升级："></a>二、以下通过mysql_upgrade升级：</h2><p>说明：<br>mysql_upgrade是官方提供的MySQL升级工具，支持跨大版本升级，如5.0升级到5.7。但为了数据安全，在升级前务必做好备份。<br>如果是主从架构，按照先升级从库–&gt;再升级主库的步骤实现升级。主库版本不能高于从库，避免新特性在从库上不支持。<br>mysql_upgrade检查所有数据库中与mysql服务器当前版本不兼容的所有表.。<br>mysql_upgrade也会升级系统表，以便你能使用新添加的权限或功能。<br>如果mysql_upgrade发现一张表可能不兼容，将该表进行检查，如果发现问题，则试图对其进行修复。如果不能修复，则需要人工进行表和索引重建或修复。<br>每次升级mysql，都需要运行mysql_upgrade。</p><p><strong>mysql安装路径为&#x2F;app&#x2F;mysql下，使用文档：《二进制安装mysql》</strong></p><h3 id="1-停服"><a href="#1-停服" class="headerlink" title="1. 停服"></a>1. 停服</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">service mysqld stop<br></code></pre></td></tr></table></figure><h3 id="2-备份："><a href="#2-备份：" class="headerlink" title="2. 备份："></a>2. 备份：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#进入二进制安装路径</span><br><span class="hljs-built_in">cd</span> /app/mysql/<br><br><span class="hljs-comment">#备份数据目录</span><br><span class="hljs-built_in">cp</span> -a data/ /root/data<br><br><span class="hljs-comment">#备份整个安装包文件</span><br><span class="hljs-built_in">mv</span> mysql-5.7.32 mysql-5.7.32-bak<br><br><span class="hljs-comment">#备份my.cnf</span><br><span class="hljs-built_in">mv</span> /etc/my.cnf /etc/my.cnfbak<br><br><span class="hljs-comment">#备份mysqld</span><br><span class="hljs-built_in">mv</span> /etc/init.d/mysqld /etc/init.d/mysqldbak<br></code></pre></td></tr></table></figure><h3 id="3-安装新版本："><a href="#3-安装新版本：" class="headerlink" title="3. 安装新版本："></a>3. 安装新版本：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#解压上传的新版本文件</span><br>tar -xnf mysql-5.7.38-el7-x86_64.tar.gz<br><br><span class="hljs-comment">#更名</span><br><span class="hljs-built_in">mv</span> mysql-5.7.38-el7-x86_64 mysql-5.7.38<br><br><span class="hljs-comment">#删除旧的软链接，设置新的软链接（如果之前版本未设置软链接，则跳过该步骤）</span><br><span class="hljs-built_in">rm</span> -r /app/mysql <br><span class="hljs-built_in">ln</span> -sv /app/mysql-5.7.38 /app/mysql<br><span class="hljs-built_in">chown</span> -R mysql.mysql /app/mysql<br><br><span class="hljs-comment">#恢复my.cnf</span><br><span class="hljs-built_in">cp</span> /etc/my.cnfbak /etc/my.cnf<br><br><span class="hljs-comment">#初始化 mysqld</span><br>/app/mysql/bin/mysqld --initialize --user=mysql --basedir=/app/mysql --datadir=/app/mysql/data<br><br><span class="hljs-comment">#将启动脚本放到开机初始化目录内</span><br><span class="hljs-built_in">cp</span> /app/mysql/support-files/mysql.server /etc/init.d/mysqld <br>sed -i <span class="hljs-string">&#x27;s#/usr/local#/app#g&#x27;</span> /app/mysql/bin/mysqld_safe /etc/init.d/mysqld<br>sed -i  <span class="hljs-string">&quot;47a basedir=/app/mysql\ndatadir=/app/mysql/data&quot;</span> /etc/init.d/mysqld <br></code></pre></td></tr></table></figure><h3 id="4-备份新版本数据目录data"><a href="#4-备份新版本数据目录data" class="headerlink" title="4. 备份新版本数据目录data"></a>4. 备份新版本数据目录data</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> data/ databak<br></code></pre></td></tr></table></figure><h3 id="5-还原旧版本数据目录data"><a href="#5-还原旧版本数据目录data" class="headerlink" title="5. 还原旧版本数据目录data"></a>5. 还原旧版本数据目录data</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> /root/data /app/mysql<br></code></pre></td></tr></table></figure><h3 id="6-启动"><a href="#6-启动" class="headerlink" title="6. 启动"></a>6. 启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">service mysqld start<br></code></pre></td></tr></table></figure><h3 id="7-执行mysql-upgrade升级"><a href="#7-执行mysql-upgrade升级" class="headerlink" title="7. 执行mysql_upgrade升级"></a>7. 执行mysql_upgrade升级</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#作用：检查所有表是否与当前版本兼容，并更新系统库</span><br><br>/app/mysql/bin/mysql_upgrade -uroot -p123456 <span class="hljs-comment">#原密码</span><br></code></pre></td></tr></table></figure><h3 id="8-查看版本"><a href="#8-查看版本" class="headerlink" title="8. 查看版本"></a>8. 查看版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql -V<br></code></pre></td></tr></table></figure><h3 id="9-登录检查"><a href="#9-登录检查" class="headerlink" title="9. 登录检查"></a>9. 登录检查</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql -uroot -p123456<br>&gt;show databases;<br></code></pre></td></tr></table></figure><h3 id="10-注意的问题"><a href="#10-注意的问题" class="headerlink" title="10. 注意的问题"></a>10. 注意的问题</h3><p>1、原来是rpm安装的话先卸载，rpm -qa | grep mysql<br>2、如果目录不是&#x2F;app&#x2F;mysql&#x2F;注意修改&#x2F;etc&#x2F;init.d&#x2F;mysqld的数据目录和pid文件路径<br>3、连接数据库的时候报错cant connect to mysql server through socket ‘&#x2F;tmp&#x2F;mysql.sock’，修改修改my.cnf的socket路径<br>4、mysql_upgrade报错找不到sock，可以用-S指定sock</p><h2 id="三、主从架构数据库升级实例："><a href="#三、主从架构数据库升级实例：" class="headerlink" title="三、主从架构数据库升级实例："></a>三、主从架构数据库升级实例：</h2><p>1.一主一从升级：<br>    先停掉主库mysql，再停掉从库mysql，然后操作从库机器进行升级，从库升级后，再升级主库。<br>2.双主+一从升级：<br>    先停掉VIP（先停VIP没在的一方）systemctl stop keeplived<br>    再停掉VIP没在的主库数据库，然后停掉主库数据库，再停掉从库数据库。<br>    再依次升级从库&gt;主库(vip未在）&gt;主库（vip在)的数据库<br>    最后启动VIP，然后先启动主库(vip在的) &gt;主库（vip未在)&gt;从库的数据库    </p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql主从复制</title>
    <link href="/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <url>/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mysql主从复制"><a href="#mysql主从复制" class="headerlink" title="mysql主从复制"></a>mysql主从复制</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">一主二从参考文档：https://blog.csdn.net/qq_38711927/article/details/107013588<br>mysql双主参考文档：https://www.cnblogs.com/jpfss/p/11577924.html<br></code></pre></td></tr></table></figure><p><strong>需：版本一致、初始化表，并在后台启动mysql、修改root的密码</strong></p><h2 id="一、mysql一主一从配置"><a href="#一、mysql一主一从配置" class="headerlink" title="一、mysql一主一从配置"></a>一、mysql一主一从配置</h2><h3 id="1-修改主服务器master"><a href="#1-修改主服务器master" class="headerlink" title="1.修改主服务器master"></a>1.修改主服务器master</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/my.cnf<br><span class="hljs-comment">#-----------------------------------</span><br>[mysqld]<br><br>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES<br><br>server-id=129   <span class="hljs-comment">#//[必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br>log-bin=mysql-bin <span class="hljs-comment">#//[必须]启用二进制日志</span><br>binlog_format=row  <span class="hljs-comment">#mysql复制主要有三种方式：基于SQL语句的复制(statement-based replication, SBR)，基于行的复制(row-based replication, RBR)，混合模式复制(mixed-based replication, MBR)。对应的，binlog的格式也有三种：STATEMENT，ROW，MIXED。https://www.cnblogs.com/langtianya/p/5504774.html</span><br>expire_logs_days=7<br><br>slow_query_log=ON  <span class="hljs-comment">#//开启binlog日志</span><br>slow_query_log_file=/app/data/slow.log<br>long_query_time=2<br>character-set-server=utf8mb4<br><span class="hljs-comment">#/开启gtid</span><br>gtid-mode = on  <br>enforce-gtid-consistency = <span class="hljs-literal">true</span><br><br>max_connections=2000<br>lower_case_table_names=1<br><span class="hljs-comment">#---------------------------------------</span><br><br>备注：关于binlog日志，当 row_format 为mixed或者statement格式时，binlog 的大小发生改变，不管是否真的更新数据，MySQL都记录执行的sql 到binlog。基于row模式时，server层匹配到要更新的记录，发现新值和旧值一致，不做更新，就直接返回，也不记录binlog。<br></code></pre></td></tr></table></figure><h3 id="2-修改从服务器slave"><a href="#2-修改从服务器slave" class="headerlink" title="2.修改从服务器slave"></a>2.修改从服务器slave</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/my.cnf<br><span class="hljs-comment">#-----------------------------------------------------</span><br>[mysqld]<br>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES<br><br>server-id=226      <span class="hljs-comment">#//[必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br>log-bin=mysql-bin  <span class="hljs-comment">#//[不是必须]启用二进制日志</span><br><br>basedir = /app/mysql<br>datadir = /app/mysql/data<br>port = 3306<br>socket = /tmp/mysql.sock<br>character-set-server=utf8<br><br>log-error = /app/mysql/mysql/data/mysqld.log<br>pid-file = /app/mysql/mysql/data/mysqld.pid<br><br><br><span class="hljs-comment">#//开启gtid</span><br>gtid-mode = on    <br>log_slave_updates = 1<br>slave-skip-errors = all<br>enforce-gtid-consistency = <span class="hljs-literal">true</span><br><span class="hljs-comment">#----------------------------------------------------------</span><br></code></pre></td></tr></table></figure><h3 id="3-重启两台服务器的mysql"><a href="#3-重启两台服务器的mysql" class="headerlink" title="3.重启两台服务器的mysql"></a>3.重启两台服务器的mysql</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">/etc/init.d/mysqld restart<br><span class="hljs-comment">#service mysqld restart</span><br></code></pre></td></tr></table></figure><h3 id="4-在主服务器上建立帐户并授权slave-连接mysql"><a href="#4-在主服务器上建立帐户并授权slave-连接mysql" class="headerlink" title="4.在主服务器上建立帐户并授权slave,连接mysql"></a>4.在主服务器上建立帐户并授权slave,连接mysql</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt;GRANT REPLICATION SLAVE ON *.* to <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>; <br><span class="hljs-comment">#一般不用root帐号，%表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.145.226，加强安全。</span><br></code></pre></td></tr></table></figure><h3 id="5-登录主服务器的mysql，查询master的状态"><a href="#5-登录主服务器的mysql，查询master的状态" class="headerlink" title="5.登录主服务器的mysql，查询master的状态"></a>5.登录主服务器的mysql，查询master的状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt;show master status;<br><span class="hljs-comment">#注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化</span><br></code></pre></td></tr></table></figure><h3 id="6-配置从服务器Slave"><a href="#6-配置从服务器Slave" class="headerlink" title="6.配置从服务器Slave"></a>6.配置从服务器Slave</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt;change master to master_host=<span class="hljs-string">&#x27;192.168.94.129&#x27;</span>,master_user=<span class="hljs-string">&#x27;repl&#x27;</span>,master_password=<span class="hljs-string">&#x27;123456&#x27;</span>,master_port=3306,MASTER_AUTO_POSITION=1;<br><br><span class="hljs-comment">#指定复制点</span><br>change master to master_host=<span class="hljs-string">&#x27;192.168.94.129&#x27;</span>,master_user=<span class="hljs-string">&#x27;repl&#x27;</span>,master_password=<span class="hljs-string">&#x27;123456&#x27;</span>,master_port=3306,MASTER_AUTO_POSITION=1,master_log_file=<span class="hljs-string">&#x27;mysql-bin.000006&#x27;</span>,master_log_pos=2192;<br><br>参数详解：<br>master_host :主服务器地址<br>master_port :端口地址<br>MASTER_AUTO_POSITION=1  :1是开启，0是关闭,开启gtid复制<br>master_log_file  :主master上show master status\G  获取的 File 一栏的信息<br>master_log_pos=2192; :主master上show master status\G 获取的Position 的信息;<br><br>       <br>Mysql&gt;start slave;    <span class="hljs-comment">#启动从服务器复制功能</span><br></code></pre></td></tr></table></figure><h3 id="7-检查从服务器复制功能状态"><a href="#7-检查从服务器复制功能状态" class="headerlink" title="7.检查从服务器复制功能状态"></a>7.检查从服务器复制功能状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">show slave status\G<br><br>Slave_IO_State: Waiting <span class="hljs-keyword">for</span> master to send event<br>              Master_Host: 192.168.2.222  //主服务器地址<br>              Master_User: mysync   //授权帐户名，尽量避免使用root<br>              Master_Port: 3306    //数据库端口，部分版本没有此行<br>              Connect_Retry: 60<br>              Master_Log_File: mysql-bin.000004<br>              Read_Master_Log_Pos: 600     //<span class="hljs-comment">#同步读取二进制日志的位置，大于等于Exec_Master_Log_Pos</span><br>              Relay_Log_File: ddte-relay-bin.000003<br>              Relay_Log_Pos: 251<br>              Relay_Master_Log_File: mysql-bin.000004<br>              Slave_IO_Running: Yes    //此状态必须YES<br>              Slave_SQL_Running: Yes     //此状态必须YES<br></code></pre></td></tr></table></figure><h3 id="8-一主多从注意bin-log日志"><a href="#8-一主多从注意bin-log日志" class="headerlink" title="8.一主多从注意bin_log日志"></a>8.一主多从注意bin_log日志</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看bin_log日志，同步需要使用bin_log日志</span><br>show binary logs;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker运行MySQL单节点和主从节点</title>
    <link href="/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/docker%E8%BF%90%E8%A1%8Cmysql%E5%8D%95%E8%8A%82%E7%82%B9%E5%92%8C%E4%B8%BB%E4%BB%8E%E8%8A%82%E7%82%B9/"/>
    <url>/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/docker%E8%BF%90%E8%A1%8Cmysql%E5%8D%95%E8%8A%82%E7%82%B9%E5%92%8C%E4%B8%BB%E4%BB%8E%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker运行MySQL"><a href="#docker运行MySQL" class="headerlink" title="docker运行MySQL"></a>docker运行MySQL</h1><h2 id="一、使用docker运行mysql单节点（对mysql性能有要求的，不建议使用docker运行mysql）"><a href="#一、使用docker运行mysql单节点（对mysql性能有要求的，不建议使用docker运行mysql）" class="headerlink" title="一、使用docker运行mysql单节点（对mysql性能有要求的，不建议使用docker运行mysql）"></a>一、使用docker运行mysql单节点（对mysql性能有要求的，不建议使用docker运行mysql）</h2><h3 id="持久化数据，创建配置文件、日志、以及数据目录"><a href="#持久化数据，创建配置文件、日志、以及数据目录" class="headerlink" title="持久化数据，创建配置文件、日志、以及数据目录"></a>持久化数据，创建配置文件、日志、以及数据目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /app/mysql/&#123;conf,<span class="hljs-built_in">log</span>,data&#125;<br><br><span class="hljs-comment">#/app/mysql/conf/文件目录中需要有相应的my.cnf，否则直接执行以下命令时会无法启动</span><br></code></pre></td></tr></table></figure><h3 id="docker运行mysql-单节点"><a href="#docker运行mysql-单节点" class="headerlink" title="docker运行mysql(单节点)"></a>docker运行mysql(单节点)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -p 3306:3306 \<br>--name mysql -e TZ=Asia/Shanghai \<br>--restart=always \<br>-v /app/mysql/conf:/etc/mysql/conf.d \<br>-v /app/mysql/log:/logs \<br>-v /app/mysql/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-e MYSQL_DATABASE=<span class="hljs-built_in">test</span> \<br>-d mysql:5.7<br><br><br>备注：<br>-v 将本地数据映射到容器内<br>-e 设置的环境变量，MYSQL_ROOT_PASSWORD为数据库密码，MYSQL_DATABASE为数据库名<br></code></pre></td></tr></table></figure><h3 id="使用过程中，测试、生产环境中，有时并不需要在本地安装一个mysql-server服务，只需要安装一个登录mysql-server-的mysql的客户端client，可使用如下方式："><a href="#使用过程中，测试、生产环境中，有时并不需要在本地安装一个mysql-server服务，只需要安装一个登录mysql-server-的mysql的客户端client，可使用如下方式：" class="headerlink" title="使用过程中，测试、生产环境中，有时并不需要在本地安装一个mysql server服务，只需要安装一个登录mysql server 的mysql的客户端client，可使用如下方式："></a>使用过程中，测试、生产环境中，有时并不需要在本地安装一个mysql server服务，只需要安装一个登录mysql server 的mysql的客户端client，可使用如下方式：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#centos6系统上安装mysql-client的方式：</span><br>yum install mysql-clent mysql-devel -y<br><span class="hljs-comment">#centos7的系统上安装mysql client的方式：</span><br>yum install -y mariadb.x86_64 mariadb-libs.x86_64<br></code></pre></td></tr></table></figure><h2 id="二、使用docker运行-mysql-主从-master和slave节点"><a href="#二、使用docker运行-mysql-主从-master和slave节点" class="headerlink" title="二、使用docker运行(mysql-主从)master和slave节点"></a>二、使用docker运行(mysql-主从)master和slave节点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建network</span><br>docker network create --subnet=172.18.0.0/16 mysqlnetwork<br><br><span class="hljs-comment">#主节点：</span><br>docker run -p 12347:3306 \<br>--restart=always \<br>--name mysql-master1 \<br>--net mysqlnetwork \<br>--ip 172.18.0.2 \<br>-v /app/mysql-master/conf:/etc/mysql/conf.d \<br>-v /app/mysql-master/logs:/var/log/mysql \<br>-v /app/mysql-master/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-d mysql:5.7 \<br>--character-set-server=utf8mb4 \<br>--collation-server=utf8mb4_unicode_ci<br><br><span class="hljs-comment">#连接master数据库执行</span><br>&gt;GRANT REPLICATION SLAVE ON *.* to <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>; <br>&gt;show master status;<br><br><span class="hljs-comment">#从节点：</span><br>docker run -p 12348:3306 \<br>--restart=always \<br>--name mysql-slave1 \<br>--net mysqlnetwork \<br>--ip 172.18.0.3 \<br>-v /home/coinpay/middlerware/mysql/slave1/conf:/etc/mysql/conf.d \<br>-v /home/coinpay/middlerware/mysql/slave1/logs:/var/log/mysql \<br>-v /home/coinpay/middlerware/mysql/slave1/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-d mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci<br><br><span class="hljs-comment">#连接slave数据库执行</span><br>&gt;change master to master_host=<span class="hljs-string">&#x27;172.18.0.2&#x27;</span>,master_user=<span class="hljs-string">&#x27;repl&#x27;</span>,master_password=<span class="hljs-string">&#x27;123456&#x27;</span>,master_port=3306,MASTER_AUTO_POSITION=1;<br>&gt;start slave;<br>&gt;show slave status\G<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制安装mysql</title>
    <link href="/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85mysql/"/>
    <url>/2023/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85mysql/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二进制安装MySQL"><a href="#二进制安装MySQL" class="headerlink" title="二进制安装MySQL"></a>二进制安装MySQL</h1><h2 id="1-安装前检查"><a href="#1-安装前检查" class="headerlink" title="1.安装前检查"></a>1.安装前检查</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#检查系统是否自带安装 MySQL，如果有的话&#x27;rpm -e&#x27;普通删除&#x27;rpm -e --nodeps&#x27;强制删除</span><br>rpm -qa | grep mysql<br><br><span class="hljs-comment">#检查系统是否自带安装 mariadb，如果有的话&#x27;rpm -e --nodeps&#x27;强制删除</span><br>rpm -qa | grep mariadb<br><br><span class="hljs-comment">#安装依赖包</span><br>yum install libaio* -y<br></code></pre></td></tr></table></figure><h2 id="2-安装mysql"><a href="#2-安装mysql" class="headerlink" title="2.安装mysql"></a>2.安装mysql</h2><p>前言:mysql安装在&#x2F;app中</p><h3 id="2-1-官网下载相关的mysql包"><a href="#2-1-官网下载相关的mysql包" class="headerlink" title="2.1 官网下载相关的mysql包"></a>2.1 官网下载相关的mysql包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.39-linux-glibc2.12-x86_64.tar.gz</span><br><span class="hljs-comment">#wget https://cdn.mysql.com/archives/mysql-5.7/mysql-5.7.39-linux-glibc2.12-x86_64.tar.gz</span><br><br>tar -xnf mysql-5.7.32.tar.gz   <span class="hljs-comment">#解压</span><br><span class="hljs-built_in">mv</span> mysql-5.7.32-linux-glibc2.12-x86_64 mysql-5.7.32  <span class="hljs-comment">#重命名 或者添加ln -s软链接</span><br></code></pre></td></tr></table></figure><h3 id="2-2-添加系统mysql组和mysql用户"><a href="#2-2-添加系统mysql组和mysql用户" class="headerlink" title="2.2 添加系统mysql组和mysql用户"></a>2.2 添加系统mysql组和mysql用户</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#检查是否含有mysql组，没有的话需要新建</span><br><span class="hljs-built_in">cat</span> /etc/group | grep mysql <br><span class="hljs-comment">#新建mysql组</span><br>groupadd mysql<br>useradd -r -g mysql mysql <span class="hljs-comment">#useradd -r参数表示mysql用户是系统用户，不可用于登录系统</span><br></code></pre></td></tr></table></figure><h3 id="2-3-创建data目录"><a href="#2-3-创建data目录" class="headerlink" title="2.3 创建data目录"></a>2.3 创建data目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/mysql-5.7.32<br><span class="hljs-built_in">mkdir</span> data<br></code></pre></td></tr></table></figure><h3 id="2-4-将mysql文件的所有者及所属组改为mysql"><a href="#2-4-将mysql文件的所有者及所属组改为mysql" class="headerlink" title="2.4 将mysql文件的所有者及所属组改为mysql"></a>2.4 将mysql文件的所有者及所属组改为mysql</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/<br><span class="hljs-built_in">chown</span> -R mysql.mysql /app/mysql-5.7.32   <span class="hljs-comment">#修改所属组 如果添加软链接的话，两个都要修改</span><br></code></pre></td></tr></table></figure><h3 id="2-5-设置my-cnf文件"><a href="#2-5-设置my-cnf文件" class="headerlink" title="2.5 设置my.cnf文件"></a>2.5 设置my.cnf文件</h3><p><strong>方法一</strong></p><p>在&#x2F;app&#x2F;mysql-5.7.32&#x2F;support-files目录下创建my_default.cnf</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /app/mysql-5.7.32/support-files/my_default.cnf<br><br>[mysqld]<br>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES <br> <br>basedir = /app/mysql-5.7.32/<br>datadir = /app/mysql-5.7.32/data<br>port = 3306<br>socket = /tmp/mysql.sock<br>character-set-server=utf8<br> <br>log-error = /app/mysql-5.7.32/data/mysqld.log<br>pid-file = /app/mysql-5.7.32/data/mysqld.pid<br></code></pre></td></tr></table></figure><p><strong>方法二</strong></p><p>将该文件拷贝覆盖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> support-files/my_default.cnf /etc/my.cnf<br></code></pre></td></tr></table></figure><p>直接建立&#x2F;etc&#x2F;my.cnf</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/my.cnf<br><br>[mysqld]<br>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES <br><br>server-id=59<br><br>basedir = /app/mysql/<br>datadir = /app/mysql/data<br><br><span class="hljs-comment">##pid-file = /app/mysql/data/mysqld.pid</span><br>log-bin = mysql-bin<br>binlog-format = row<br>slow_query_log = ON<br>slow_query_log_file = /app/mysql/data/slow.log<br>long_query_time = 1<br>gtid-mode = on<br>log_slave_updates = 1<br>slave-skip-errors = all<br>enforce-gtid-consistency = <span class="hljs-literal">true</span><br>log_timestamps = SYSTEM<br><br></code></pre></td></tr></table></figure><h3 id="2-6-初始化-mysqld"><a href="#2-6-初始化-mysqld" class="headerlink" title="2.6  初始化 mysqld"></a>2.6  初始化 mysqld</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /app/mysql-5.7.32<br>./bin/mysqld --initialize --user=mysql --basedir=/app/mysql-5.7.32 --datadir=/app/mysql-5.7.32/data/ <br><span class="hljs-comment">#初始化，生成日志，日志内有临时mysql密码</span><br><span class="hljs-comment">#查看日志</span><br><span class="hljs-built_in">cat</span> /app/mysql/data/mysqld.log<br></code></pre></td></tr></table></figure><h3 id="2-7-将脚本放到开机初始化目录内"><a href="#2-7-将脚本放到开机初始化目录内" class="headerlink" title="2.7  将脚本放到开机初始化目录内"></a>2.7  将脚本放到开机初始化目录内</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> support-files/mysql.server /etc/init.d/mysql<br></code></pre></td></tr></table></figure><h3 id="2-8-启动mysql服务"><a href="#2-8-启动mysql服务" class="headerlink" title="2.8 启动mysql服务"></a>2.8 启动mysql服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">service mysql start<br></code></pre></td></tr></table></figure><h3 id="2-9-添加环境变量"><a href="#2-9-添加环境变量" class="headerlink" title="2.9 添加环境变量"></a>2.9 添加环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#在环境变量的目录内新建一个mysql.sh脚本</span><br>vim /etc/profile.d/mysql.sh<br><br><span class="hljs-built_in">export</span> PATH=/app/mysql-5.7.32/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment">#使脚本生效</span><br><span class="hljs-built_in">source</span> ./mysql.sh  <br></code></pre></td></tr></table></figure><h3 id="2-10-连接数据库"><a href="#2-10-连接数据库" class="headerlink" title="2.10 连接数据库"></a>2.10 连接数据库</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -uroot -<span class="hljs-selector-tag">p</span>临时密码<br></code></pre></td></tr></table></figure><h4 id="2-10-1-如果初始化密码忘了或者没有保存："><a href="#2-10-1-如果初始化密码忘了或者没有保存：" class="headerlink" title="2.10.1  如果初始化密码忘了或者没有保存："></a>2.10.1  如果初始化密码忘了或者没有保存：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#注意：mysql如果已经开启了，请先关闭mysql</span><br>service mysqld stop<br><br><span class="hljs-comment">#在my.conf内[mysqld]后面任意一行添加“skip-grant-tables”   </span><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/my.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">skip-grant-tables</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">#启动mysql</span><br>service mysqld start<br><br><span class="hljs-comment">#连接mysql，直接输入mysql即可</span><br>mysql<br><br>mysql&gt; use mysql; <br><span class="hljs-comment">#修改密码</span><br>mysql&gt; update user <span class="hljs-built_in">set</span> authentication_string=passworD(<span class="hljs-string">&quot;你的新密码&quot;</span>) <span class="hljs-built_in">where</span> user=<span class="hljs-string">&#x27;root&#x27;</span>;<br>mysql&gt; flush privileges;<br><span class="hljs-comment">######或者########     </span><br>mysql&gt; update user <span class="hljs-built_in">set</span> password=password(<span class="hljs-string">&quot;你的新密码&quot;</span>) <span class="hljs-built_in">where</span> user=<span class="hljs-string">&quot;root&quot;</span>;<br>mysql&gt; flush privileges;<br><br><span class="hljs-comment">#修改密码后，注释/etc/my.cnf中skip-grant-tables并重启</span><br>service mysqld restart<br><br><span class="hljs-comment">#登录时提示：</span><br><span class="hljs-comment">#ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.则需要修改初始密码</span><br></code></pre></td></tr></table></figure><h3 id="2-11-修改初始密码"><a href="#2-11-修改初始密码" class="headerlink" title="2.11 修改初始密码"></a>2.11 修改初始密码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; <span class="hljs-built_in">set</span> password=password(<span class="hljs-string">&#x27;123456&#x27;</span>);<br>mysql&gt; grant all privileges on *.* to root@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>mysql&gt; flush privileges;<br></code></pre></td></tr></table></figure><h3 id="2-12-添加远程访问权限"><a href="#2-12-添加远程访问权限" class="headerlink" title="2.12 添加远程访问权限"></a>2.12 添加远程访问权限</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; use mysql;<br>mysql&gt; update user <span class="hljs-built_in">set</span> host=<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-built_in">where</span> user = <span class="hljs-string">&#x27;root&#x27;</span>;<br>mysql&gt; flush privileges;<br></code></pre></td></tr></table></figure><h3 id="2-13-测试（可忽略）"><a href="#2-13-测试（可忽略）" class="headerlink" title="2.13 测试（可忽略）"></a>2.13 测试（可忽略）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#插入上万行测试数据：</span><br>create database <span class="hljs-built_in">test</span>;<br><br>CREATE TABLE `t_user` (<br>  `<span class="hljs-built_in">id</span>` bigint(20) NOT NULL AUTO_INCREMENT,<br>  `name` varchar(255) DEFAULT NULL,<br>  `age` tinyint(4) DEFAULT NULL,<br>  `create_time` datetime DEFAULT NULL,<br>  `update_time` datetime DEFAULT NULL,<br>  PRIMARY KEY (`<span class="hljs-built_in">id</span>`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br><br><span class="hljs-comment">#下面的存储过程来插入100000条数据</span><br>delimiter //<br>DROP PROCEDURE IF EXISTS proc_batch_insert;<br>CREATE PROCEDURE proc_batch_insert()<br>BEGIN<br>DECLARE pre_name BIGINT;<br>DECLARE ageVal INT;<br>DECLARE i INT;<br>SET pre_name=187635267;<br>SET ageVal=100;<br>SET i=1;<br>WHILE i &lt;= 10000 DO<br>        INSERT INTO t_user(`name`,age,create_time,update_time) VALUES(CONCAT(pre_name,<span class="hljs-string">&#x27;@qq.com&#x27;</span>),(ageVal+1)%30,NOW(),NOW());<br>SET pre_name=pre_name+100;<br>SET i=i+1;<br>END WHILE;<br>END //<br> <br>delimiter ;<br>call proc_batch_insert();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx负载均衡实现策略</title>
    <link href="/2023/03/27/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0%E7%AD%96%E7%95%A5/"/>
    <url>/2023/03/27/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><table><thead><tr><th>轮询</th><th>默认方式</th></tr></thead><tbody><tr><td>weight</td><td>权重方式</td></tr><tr><td>ip_hash</td><td>依据ip分配方式</td></tr><tr><td>least_conn</td><td>最少连接方式</td></tr><tr><td>fair（第三方）</td><td>响应时间方式</td></tr><tr><td>url_hash（第三方）</td><td>依据URL分配方式</td></tr></tbody></table><h3 id="Nginx使用的配置详解"><a href="#Nginx使用的配置详解" class="headerlink" title="Nginx使用的配置详解:"></a>Nginx使用的配置详解:</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">(<span class="hljs-number">1</span>). down： 表示当前的server暂时不参与负载。<br>(<span class="hljs-number">2</span>). weight：  默认为<span class="hljs-number">1</span><span class="hljs-selector-class">.weight</span>越大，负载的权重就越大。<br>(<span class="hljs-number">3</span>). max_fails： 允许请求失败的次数默认为<span class="hljs-number">1</span>.当超过最大次数时，返回proxy_next_upstream 模块定义的错误<br>(<span class="hljs-number">4</span>). fail_timeout： max_fails 次失败后，暂停的时间。<br>(<span class="hljs-number">5</span>). backup： 其它所有的非backup机器down或者忙的时候，请求backup机器，所以这台机器压力会最轻。<br></code></pre></td></tr></table></figure><h2 id="轮询"><a href="#轮询" class="headerlink" title="轮询:"></a>轮询:</h2><p>每个请求按时间顺序逐一分配到不同的应用服务器，如果应用服务器down掉，自动剔除，剩下的继续轮询。它是upstream模块默认的负载均衡默认策略。每个请求会按时间顺序逐一分配到不同的后端服务器。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">upstream dynamic_name &#123;<br>        server localhost:8081;<br>        server localhost:8082;<br>        server localhost:8083;<br>&#125;<br>server &#123;<br><span class="hljs-comment">#...省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="weight-权重"><a href="#weight-权重" class="headerlink" title="weight(权重):"></a>weight(权重):</h2><p>权重方式，在轮询策略的基础上指定轮询的几率。权重和访问比率成正比，用于应用服务器性能不均的情况。使用weight&#x3D;x，来配置权重</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">upstream dynamic_name &#123;<br>        server localhost:8081 weight=9; <span class="hljs-comment">#设置为9，代表该服务器性能强，能够处理更多的请求</span><br>        server localhost:8082;<br>        server localhost:8083 max_fails=3 fail_timeout=20s;<br>&#125; <br>server &#123;<br><span class="hljs-comment">#...省略...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ip-hash："><a href="#ip-hash：" class="headerlink" title="ip_hash："></a>ip_hash：</h2><p>指定负载均衡器按照基于客户端IP的分配方式，这个方法确保了相同的客户端的请求一直发送到相同的服务器，以保证session会话。这样每个访客都固定访问一个后端服务器，可以解决session不能跨服务器的问题。<br>​</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">upstream dynamic_name &#123;<br>        ip_hash;    <span class="hljs-comment">#保证每个访客固定访问一个后端服务器</span><br>        server localhost:8081 weight=9;<br>        server localhost:8082; <br>        server localhost:8083   max_fails=3 fail_timeout=20s;<br>&#125;              <br>server &#123;<br><span class="hljs-comment">#...省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="least-conn："><a href="#least-conn：" class="headerlink" title="least_conn："></a>least_conn：</h2><p>把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同；但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least_conn这种方式就可以达到更好的负载均衡效果。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">upstream dynamic_name &#123;<br>        least_conn;    <span class="hljs-comment">#把请求转发给连接数较少的后端服务器</span><br>        server localhost:8081;<br>        server localhost:8082 backup;<br>        server localhost:8083   max_fails=3 fail_timeout=20s;<br>&#125; <br>server &#123;<br><span class="hljs-comment">#...省略...</span><br>&#125;           <br></code></pre></td></tr></table></figure><h2 id="第三方策略："><a href="#第三方策略：" class="headerlink" title="第三方策略："></a>第三方策略：</h2><p>第三方的负载均衡策略的实现需要安装第三方插件。</p><h3 id="fair："><a href="#fair：" class="headerlink" title="fair："></a>fair：</h3><p>按照服务器端的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">upstream dynamic_name &#123;<br>        server localhost:8081;<br>        server localhost:8082;<br>        server localhost:8083;<br>        fair;    <span class="hljs-comment">#实现响应时间短的优先分配</span><br>&#125;              <br>server &#123;<br><span class="hljs-comment">#...省略...</span><br>&#125;            <br></code></pre></td></tr></table></figure><h3 id="url-hash："><a href="#url-hash：" class="headerlink" title="url_hash："></a>url_hash：</h3><p>　按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，要配合缓存命中来使用。同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费。而使用url_hash，可以使得同一个url（也就是同一个资源请求）会到达同一台服务器，一旦缓存住了资源，再此收到请求，就可以从缓存中读取。　</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">upstream dynamic_name &#123;<br>        <span class="hljs-built_in">hash</span> <span class="hljs-variable">$request_uri</span>;    <span class="hljs-comment">#实现每个url定向到同一个后端服务器</span><br>        server localhost:8081;<br>        server localhost:8082;<br>        server localhost:8083;<br>&#125;<br>server &#123;<br><span class="hljs-comment">#...省略...</span><br>&#125;   <br></code></pre></td></tr></table></figure><p><strong>总结</strong></p><p>　　以上便是6种负载均衡策略的实现方式，其中除了轮询和轮询权重外，都是Nginx根据不同的算法实现的。在实际运用中，需要根据不同的场景选择性运用，大都是多种策略结合使用以达到实际需求。</p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx安装</title>
    <link href="/2023/03/27/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%AE%89%E8%A3%85/"/>
    <url>/2023/03/27/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h1><h2 id="一、二进制安装"><a href="#一、二进制安装" class="headerlink" title="一、二进制安装"></a>一、二进制安装</h2><h3 id="1-去nginx官网拉取源文件"><a href="#1-去nginx官网拉取源文件" class="headerlink" title="1.去nginx官网拉取源文件"></a>1.去nginx官网拉取源文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget http://nginx.org/download/nginx-1.18.0.tar.gz<br><span class="hljs-comment">#或者下载源文件到本地，建议放到/home/目录下</span><br></code></pre></td></tr></table></figure><h3 id="2-安装依赖环境"><a href="#2-安装依赖环境" class="headerlink" title="2.安装依赖环境"></a>2.安装依赖环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install gcc openssl-devel pcre pcre-devel zlib zlib-devel -y<br>或者<br>yum install -y gcc-c++ zlib zlib-devel openssl openssl--devel pcre pcre-devel <br></code></pre></td></tr></table></figure><h3 id="3-解压nginx源文件压缩包"><a href="#3-解压nginx源文件压缩包" class="headerlink" title="3.解压nginx源文件压缩包"></a>3.解压nginx源文件压缩包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -xf nginx-1.18.0.tar.gz<br></code></pre></td></tr></table></figure><h3 id="4-解压后进入nginx文件内"><a href="#4-解压后进入nginx文件内" class="headerlink" title="4.解压后进入nginx文件内"></a>4.解压后进入nginx文件内</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> nginx-1.18.0<br></code></pre></td></tr></table></figure><h3 id="5-配置nginx的安装路径"><a href="#5-配置nginx的安装路径" class="headerlink" title="5.配置nginx的安装路径"></a>5.配置nginx的安装路径</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">./configure --prefix=/usr/local/nginx<br><br><span class="hljs-comment">#如果--prefix安装的路径不是在环境变量PATH内，则需要添加软链接</span><br><span class="hljs-built_in">ln</span> -s ./nginx/sbin/nginx /usr/bin/nginx<br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="6-进行编译"><a href="#6-进行编译" class="headerlink" title="6.进行编译"></a>6.进行编译</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">make <br>make install<br></code></pre></td></tr></table></figure><h3 id="7-启动"><a href="#7-启动" class="headerlink" title="7.启动"></a>7.启动</h3><h4 id="7-1、普通启动"><a href="#7-1、普通启动" class="headerlink" title="7.1、普通启动"></a>7.1、普通启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/local/nginx/sbin<br><br>./nginx<br><br><span class="hljs-comment">#如果启动不了，查看一下是否启动了相关的进程，端口是否冲突，冲突的话使用kill +端口号，防火墙是否关闭</span><br><br><span class="hljs-comment">#查看启动的进程  master 和 worker两个进程</span><br>ps -ef |grep nginx <br><br><span class="hljs-comment">#查看防火墙状态 </span><br>systemctl status firewalld <br><br><span class="hljs-comment">#关闭防火墙</span><br>systemctl stop firewalld<br>systemctl <span class="hljs-built_in">disable</span> firewalld<br></code></pre></td></tr></table></figure><h4 id="7-2、配置文件启动，前面的是启动文件sbin地址，后面是nginx配置文件"><a href="#7-2、配置文件启动，前面的是启动文件sbin地址，后面是nginx配置文件" class="headerlink" title="7.2、配置文件启动，前面的是启动文件sbin地址，后面是nginx配置文件"></a>7.2、配置文件启动，前面的是启动文件sbin地址，后面是nginx配置文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">/usr/local/nginx/sbin/nginx  -c /usr/local/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure><h3 id="8-关闭nginx"><a href="#8-关闭nginx" class="headerlink" title="8.关闭nginx"></a>8.关闭nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看nginx的进程</span><br>ps  -ef|grep nginx<br><span class="hljs-comment">#处理请求后再关闭 进程</span><br><span class="hljs-built_in">kill</span> -QUIT 主pid<br><span class="hljs-comment">#直接关闭进程，不管请求是否处理完成</span><br><span class="hljs-built_in">kill</span> -TERM 主pid<br></code></pre></td></tr></table></figure><h3 id="9-重启nginx"><a href="#9-重启nginx" class="headerlink" title="9.重启nginx"></a>9.重启nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./nginx -s reload<br></code></pre></td></tr></table></figure><h3 id="10-配置检查"><a href="#10-配置检查" class="headerlink" title="10.配置检查"></a>10.配置检查</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#前面的是启动文件sbin地址，后面是nginx配置文件</span><br>/usr/local/nginx/sbin/nginx  -c /usr/local/nginx/conf/nginx.conf -t<br>或者<br>nginx -t<br></code></pre></td></tr></table></figure><h3 id="11-查看配置信息"><a href="#11-查看配置信息" class="headerlink" title="11.查看配置信息"></a>11.查看配置信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">./nginx -v    查看nginx的版本<br>./nginx -v    查看nginx的版本<br></code></pre></td></tr></table></figure><h2 id="二、rpm包安装nginx"><a href="#二、rpm包安装nginx" class="headerlink" title="二、rpm包安装nginx"></a>二、rpm包安装nginx</h2><h3 id="1-下载rpm包"><a href="#1-下载rpm包" class="headerlink" title="1.下载rpm包"></a>1.下载rpm包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.16.1-1.el7.ngx.x86_64.rpm<br></code></pre></td></tr></table></figure><h3 id="2-yum安装nginx"><a href="#2-yum安装nginx" class="headerlink" title="2.yum安装nginx"></a>2.yum安装nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install nginx-1.16.1-1.e17<br></code></pre></td></tr></table></figure><h3 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start nginx<br>systemctl <span class="hljs-built_in">enable</span> nginx  //设置开机自启<br></code></pre></td></tr></table></figure><h2 id="三、yum安装"><a href="#三、yum安装" class="headerlink" title="三、yum安装"></a>三、yum安装</h2><h3 id="1、添加源"><a href="#1、添加源" class="headerlink" title="1、添加源"></a>1、添加源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#默认情况Centos7中无Nginx的源，最近发现Nginx官网提供了Centos的源地址。因此可以如下执行命令添加源：</span><br>rpm -Uvh  http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm<br></code></pre></td></tr></table></figure><h3 id="2、安装Nginx"><a href="#2、安装Nginx" class="headerlink" title="2、安装Nginx"></a>2、安装Nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#通过yum search nginx看看是否已经添加源成功。如果成功则执行下列命令安装Nginx。</span><br>sudo yum install -y nginx<br></code></pre></td></tr></table></figure><h3 id="3、启动Nginx"><a href="#3、启动Nginx" class="headerlink" title="3、启动Nginx"></a>3、启动Nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#两种方式：</span><br>nginx -c /etc/nginx/nginx.conf<br><br>nginx -s reload<br><br><span class="hljs-comment">#设置开机自动运行</span><br>sudo systemctl start nginx.service<br>sudo systemctl <span class="hljs-built_in">enable</span> nginx.service<br></code></pre></td></tr></table></figure><h2 id="四、docker安装nginx"><a href="#四、docker安装nginx" class="headerlink" title="四、docker安装nginx"></a>四、docker安装nginx</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull nginx:latest<br><br>docker run --name nginx-docker -p 8080:80 -d nginx<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dockerfile详解</title>
    <link href="/2023/03/24/dockerfile/dockerfile%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/03/24/dockerfile/dockerfile%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Dockerfile-文件全面详解"><a href="#Dockerfile-文件全面详解" class="headerlink" title="Dockerfile 文件全面详解"></a>Dockerfile 文件全面详解</h1><p>Docker 可以通过读取 Dockerfile 中的指令自动构建镜像。Dockerfile 是一个文本文档，其中包含了用户创建镜像的所有命令和说明。</p><p><strong>一、 变量</strong></p><p>变量用 $variable_name 或者 ${variable_name} 表示。</p><ul><li>${variable:-word} 表示如果 variable 设置，则结果将是该值。如果 variable 未设置，word 则将是结果。</li><li>${variable:+word} 表示如果 variable 设置则为 word 结果，否则为空字符串。</li></ul><p>变量前加 \ 可以转义成普通字符串：$foo or ${foo}，表示转换为 $foo 和 ${foo} 文字。</p><p><strong>二、FROM</strong></p><p>初始化一个新的构建阶段，并设置基础镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM [--platform=&lt;platform&gt;] &lt;image&gt; [AS &lt;name&gt;]<br>FROM [--platform=&lt;platform&gt;] &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]<br>FROM [--platform=&lt;platform&gt;] &lt;image&gt;[@&lt;digest&gt;] [AS &lt;name&gt;]<br></code></pre></td></tr></table></figure><ul><li>单个 Dockfile 可以多次出现 FROM，以使用之前的构建阶段作为另一个构建阶段的依赖项</li><li>AS name 表示为构建阶段命名，在后续 FROM 和 COPY –from&#x3D;<name> 说明中可以使用这个名词，引用此阶段构建的映像</name></li><li>digest 其实就是就是根据镜像内容产生的一个 ID，只要镜像的内容不变 digest 也不会变</li><li>tag 或 digest 值是可选的。如果您省略其中任何一个，构建器默认使用一个 latest 标签。如果找不到该 tag 值，构建器将返回错误。</li><li>–platform 标志可用于在 FROM 引用多平台镜像的情况下指定平台。例如，linux&#x2F;amd64、linux&#x2F;arm64、 或 windows&#x2F;amd64。</li></ul><p><strong>三、RUN</strong></p><p>将在当前镜像之上的新层中执行命令，在 docker build时运行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">RUN /bin/bash -c <span class="hljs-string">&#x27;source $HOME/.bashrc; \</span><br><span class="hljs-string">echo $HOME&#x27;</span><br></code></pre></td></tr></table></figure><p>RUN 有两种形式：</p><ul><li>RUN<command>（shell 形式，命令在 shell 中运行，默认 &#x2F;bin&#x2F;sh -c 在 Linux 或 cmd &#x2F;S &#x2F;CWindows 上）</li><li>RUN [“executable”, “param1”, “param2”]（执行形式）</li></ul><p>说明：</p><ul><li>可以使用 \（反斜杠）将单个 RUN 指令延续到下一行</li><li>RUN 在下一次构建期间，指令缓存不会自动失效。可以使用 –no-cache 标志使指令缓存无效</li><li>Dockerfile 的指令每执行一次都会在 Docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大，可以使用 &amp;&amp; 符号连接命令，这样执行后，只会创建 1 层镜像</li></ul><p><strong>四、CMD</strong></p><p>运行程序，在 docker run 时运行，但是和 run 命令不同，RUN 是在 docker build 时运行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM ubuntu<br>CMD [<span class="hljs-string">&quot;/usr/bin/wc&quot;</span>,<span class="hljs-string">&quot;--help&quot;</span>]<br></code></pre></td></tr></table></figure><p>支持三种格式：</p><ul><li>CMD [“executable”,”param1”,”param2”] 使用 exec 执行，推荐方式；</li><li>CMD command param1 param2 在 &#x2F;bin&#x2F;sh 中执行，提供给需要交互的应用；</li><li>CMD [“param1”,”param2”] 提供给 ENTRYPOINT 的默认参数。</li></ul><p>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。</p><p>如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。</p><p><strong>五、LABEL</strong></p><p>添加元数据：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">LABEL multi.label1=<span class="hljs-string">&quot;value1&quot;</span> \<br>      multi.label2=<span class="hljs-string">&quot;value2&quot;</span> \<br>      other=<span class="hljs-string">&quot;value3&quot;</span><br></code></pre></td></tr></table></figure><p><strong>六、EXPOSE</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]<br></code></pre></td></tr></table></figure><p>Docker 容器在运行时侦听指定的网络端口。可以指定端口是监听TCP还是UDP，如果不指定协议，默认为TCP。</p><p>该 EXPOSE 指令实际上并未发布端口。要在运行容器时实际发布端口，docker run -P 来发布和映射一个或多个端口。</p><p>默认情况下，EXPOSE 假定 TCP。您还可以指定 UDP：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">EXPOSE 80/udp<br></code></pre></td></tr></table></figure><p><strong>七、ENV</strong></p><p>设置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ENV &lt;key&gt;=&lt;value&gt; ...<br></code></pre></td></tr></table></figure><p>设置的环境变量将持续存在，您可以使用 docker inspect 来查看。使用 docker run –env <key>&#x3D;<value> 来更改环境变量的值。</value></key></p><p>如果环境变量只在构建期间需要，请考虑为单个命令设置一个值：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">RUN DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y ...<br></code></pre></td></tr></table></figure><p>或者使用 ARG，它不会保留在最终镜像中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">ARG DEBIAN_FRONTEND=noninteractive<br>RUN apt-get update &amp;&amp; apt-get install -y ...<br></code></pre></td></tr></table></figure><p><strong>八、ADD</strong></p><p>复制新文件、目录或远程文件 URL <src> ，并将它们添加到 <dest> 中。</dest></src></p><p><src> 可以指定多个资源，但如果它们是文件或目录，则它们的路径被解释为相对于构建上下文的源，也就是 WORKDIR。</src></p><p>每个都 <src> 可能包含通配符，匹配将使用 Go 的 filepath.Match 规则。例如：</src></p><p>添加所有以“hom”开头的文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ADD hom* /mydir/<br></code></pre></td></tr></table></figure><p>在下面的示例中，? 被替换为任何单个字符，例如“home.txt”。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ADD hom?.txt /mydir/<br></code></pre></td></tr></table></figure><p><dest> 是一个绝对路径，或相对 WORKDIR 的相对路径。</dest></p><p><strong>九、COPY</strong></p><p>语法同ADD一致，复制拷贝文件。</p><p>COPY 指令和 ADD 指令的唯一区别在于：是否支持从远程URL获取资源。COPY 指令只能从执行 docker build 所在的主机上读取资源并复制到镜像中。而 ADD 指令还支持通过 URL 从远程服务器读取资源并复制到镜像中。</p><p>相同需求时，推荐使用 COPY 指令。ADD 指令更擅长读取本地tar文件并解压缩。</p><p><strong>十、ENTRYPOINT</strong></p><p>ENTRYPOINT 和 CMD 一样，都是在指定容器启动程序及参数，不过它不会被 docker run 的命令行参数指定的指令所覆盖。如果要覆盖的话，需要通过 docker run –entrypoint 来指定。</p><p>它有2种格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">ENTRYPOINT [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>]<br>ENTRYPOINT <span class="hljs-built_in">command</span> param1 param2<br></code></pre></td></tr></table></figure><p>指定了 ENTRYPOINT 后， CMD 的内容作为参数传给 ENTRYPOINT 指令，实际执行时，将变为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;ENTRYPOINT&gt; &lt;CMD&gt;<br></code></pre></td></tr></table></figure><p><strong>十一、VOLUME</strong></p><p>创建一个具有指定名称的挂载数据卷。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">VOLUME [<span class="hljs-string">&quot;/var/log/&quot;</span>]<br>VOLUME /var/log<br></code></pre></td></tr></table></figure><p>它的主要作用是：</p><ul><li>避免重要的数据，因容器重启而丢失</li><li>避免容器不断变大</li></ul><p><strong>十二、ARG</strong></p><p>定义变量，与 ENV 作用相同，不过 ARG 变量不会像 ENV 变量那样持久化到构建好的镜像中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ARG &lt;name&gt;[=&lt;default value&gt;]<br></code></pre></td></tr></table></figure><p>Docker 有一组预定义的 ARG 变量，您可以在 Dockerfile 中没有相应指令的情况下使用这些变量。</p><ul><li>HTTP_PROXY</li><li>http_proxy</li><li>HTTPS_PROXY</li><li>https_proxy</li><li>FTP_PROXY</li><li>ftp_proxy</li><li>NO_PROXY</li><li>no_proxy</li></ul><p>要使用这些，请使用 –build-arg 标志在命令行上传递它们，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker build --build-arg HTTPS_PROXY=https://my-proxy.example.com .<br></code></pre></td></tr></table></figure><p><strong>十三、ONBUILD</strong></p><p>将一个触发指令添加到镜像中，以便稍后在该镜像用作另一个构建的基础时执行。也就是另外一个 dockerfile FROM 了这个镜像的时候执行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">ONBUILD ADD . /app/src<br>ONBUILD RUN /usr/local/bin/python-build --<span class="hljs-built_in">dir</span> /app/src<br></code></pre></td></tr></table></figure><p><strong>十四、STOPSIGNAL</strong></p><p>设置将发送到容器退出的系统调用信号。该信号可以是与内核系统调用表中的位置匹配的有效无符号数，例如 9，或格式为 SIGNAME 的信号名称，例如 SIGKILL。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">STOPSIGNAL signal<br></code></pre></td></tr></table></figure><p>默认的 stop-signal 是 SIGTERM，在 docker stop 的时候会给容器内 PID 为 1 的进程发送这个 signal，通过 –stop-signal 可以设置自己需要的 signal，主要目的是为了让容器内的应用程序在接收到 signal 之后可以先处理一些事物，实现容器的平滑退出，如果不做任何处理，容器将在一段时间之后强制退出，会造成业务的强制中断，默认时间是 10s。</p><p><strong>十五、HEALTHCHECK</strong></p><p>用于指定某个程序或者指令来监控 Docker 容器服务的运行状态。该 HEALTHCHECK 指令有两种形式：</p><ul><li>HEALTHCHECK [OPTIONS] CMD command（通过在容器内运行命令来检查容器健康状况）</li><li>HEALTHCHECK NONE（禁用从基础镜像继承的任何健康检查）</li></ul><p><strong>十六、SHELL</strong></p><p>覆盖用于命令的 shell 形式的默认 shell。Linux 上的默认 shell 是 [“&#x2F;bin&#x2F;sh”, “-c”]，Windows 上是 [“cmd”, “&#x2F;S”, “&#x2F;C”]。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">SHELL [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;parameters&quot;</span>]<br></code></pre></td></tr></table></figure><p>该 SHELL 指令在 Windows 上特别有用，因为 Windows 有两种常用且截然不同的本机 SHELL：cmd 和 powershell，以及可用的备用 shell，包括 sh。该 SHELL 指令可以出现多次。每条 SHELL 指令都会覆盖所有先前的 SHELL 指令，并影响所有后续指令。</p><p><strong>十七、WORKDIR</strong></p><p>工作目录，如果 WORKDIR 不存在，即使它没有在后续 Dockerfile 指令中使用，它也会被创建。</p><p>docker build 构建镜像过程中，每一个 RUN 命令都会新建一层。只有通过 WORKDIR 创建的目录才会一直存在。</p><p>可以设置多个 WORKDIR，如果提供了相对路径，它将相对于前一条 WORKDIR 指令的路径。例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">WORKDIR /a<br>WORKDIR b<br>WORKDIR c<br>RUN <span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p>最终 pwd 命令的输出是 &#x2F;a&#x2F;b&#x2F;c。</p><p>该 WORKDIR 指令可以解析先前使用 ENV，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">ENV DIRPATH=/path<br>WORKDIR <span class="hljs-variable">$DIRPATH</span>/<span class="hljs-variable">$DIRNAME</span><br>RUN <span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p>最终 pwd 命令的输出是 &#x2F;path&#x2F;$DIRNAME。</p><p><strong>十八、USER</strong></p><p>设置用户名（或 UID）和可选的用户组（或 GID）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">USER &lt;user&gt;[:&lt;group&gt;]<br>USER &lt;UID&gt;[:&lt;GID&gt;]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>dockerfile</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dockerfile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker-compose安装</title>
    <link href="/2023/03/24/docker-compose/docker-compose%E5%AE%89%E8%A3%85/"/>
    <url>/2023/03/24/docker-compose/docker-compose%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker-compose的使用和安装"><a href="#docker-compose的使用和安装" class="headerlink" title="docker-compose的使用和安装:"></a>docker-compose的使用和安装:</h1><p>通过一个yaml文件  来启动和管理多个容器</p><h2 id="一、docker-compose的安装："><a href="#一、docker-compose的安装：" class="headerlink" title="一、docker-compose的安装："></a>一、docker-compose的安装：</h2><p>Linux 上我们可以从 Github 上下载它的二进制包来使用，最新发行的版本地址：<a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">下载二进制包:<br><span class="hljs-comment">##1.24.1版本的：下载路径https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</span><br><br>curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<br><span class="hljs-comment">#要安装其他版本的 Compose，可直接替换version：1.24.1。</span><br><br><br>将可执行权限应用于二进制文件：<br>sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br><br>创建软链：<br>sudo <span class="hljs-built_in">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose<br><br></code></pre></td></tr></table></figure><h2 id="二、docker-compose的使用："><a href="#二、docker-compose的使用：" class="headerlink" title="二、docker-compose的使用："></a>二、docker-compose的使用：</h2><h3 id="1-编写docker-compose-yml文件"><a href="#1-编写docker-compose-yml文件" class="headerlink" title="1.编写docker-compose.yml文件"></a>1.编写docker-compose.yml文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#例如：Docker-Compose管理MySQL和Tomcat容器，yml文件以key: value方式来指定配置信息，多个配置信息以换行+缩进的方式来区分</span><br><span class="hljs-comment">#在docker-compose.yml文件中，不要使用制表符</span><br> <br>version: <span class="hljs-string">&#x27;3.1&#x27;</span><br>services:<br>  mysql:           <span class="hljs-comment"># 服务的名称</span><br>    restart: always   <span class="hljs-comment"># 代表只要docker启动，那么这个容器就跟着一起启动</span><br>    image: daocloud.io/library/mysql:5.7.4  <span class="hljs-comment"># 指定镜像路径</span><br>    container_name: mysql  <span class="hljs-comment"># 指定容器名称</span><br>    ports:<br>      - 3306:3306   <span class="hljs-comment">#  指定端口号的映射</span><br>    environment:<br>      MYSQL_ROOT_PASSWORD: root   <span class="hljs-comment"># 指定MySQL的ROOT用户登录密码</span><br>      TZ: Asia/Shanghai        <span class="hljs-comment"># 指定时区</span><br>    volumes:<br>     - /opt/docker_mysql_tomcat/mysql_data:/var/lib/mysql   <span class="hljs-comment"># 映射数据卷</span><br>  tomcat:<br>    restart: always<br>    image: daocloud.io/library/tomcat:8.5.15-jre8<br>    container_name: tomcat<br>    ports:<br>      - 8080:8080<br>    environment:<br>      TZ: Asia/Shanghai<br>    volumes:<br>      - /opt/docker_mysql_tomcat/tomcat_webapps:/usr/local/tomcat/webapps<br>      - /opt/docker_mysql_tomcat/tomcat_logs:/usr/local/tomcat/logs<br><br></code></pre></td></tr></table></figure><h3 id="2-docker-compose相关命令"><a href="#2-docker-compose相关命令" class="headerlink" title="2.docker-compose相关命令"></a>2.docker-compose相关命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#使用docker-compose命令时，默认会在当前目录下寻找docker-compose.yml文件</span><br><br>docker-compose up -d<span class="hljs-comment">#启动管理的容器</span><br><br>docker-compose down <span class="hljs-comment">#关闭并删除容器</span><br><br>docker-compose start|restart|stop    <span class="hljs-comment">#开启|重启||关闭已经存在的由docker-compose维护的容器</span><br><br>docker-compose ps<span class="hljs-comment">#查看由docker-compose管理的容器</span><br><br>docker-compose logs -f<span class="hljs-comment">#查看日志</span><br><br>docker-compose -f consul-compose.yaml up -d  <span class="hljs-comment">#执行yaml文件启动</span><br><br>docker-compose -f consul-compose.yaml config <span class="hljs-comment">#检查yaml文件的错误</span><br></code></pre></td></tr></table></figure><h3 id="3-docker-compose配合Dockerfile使用"><a href="#3-docker-compose配合Dockerfile使用" class="headerlink" title="3.docker-compose配合Dockerfile使用"></a>3.docker-compose配合Dockerfile使用</h3><p>使用docker-compose.yml文件以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sh">例如：<br>docker-compose.yml文件：<br><br>version: <span class="hljs-string">&#x27;3.1&#x27;</span><br>services:                   <br>  ssm:                          <span class="hljs-comment">#服务的名称</span><br>    restart: always             <span class="hljs-comment">#代表docker启动，服务就启动</span><br>    build:                      <span class="hljs-comment">#构建自定义镜像</span><br>      context: ../              <span class="hljs-comment">#指定自定义的dockerfile文件所在的路径</span><br>      dockerfile: ssmfile       <span class="hljs-comment">#指定自定义的dockerfile文件的名称</span><br>    image: ssm:1.0.1            <span class="hljs-comment">#指定自定义的dockerfile想叫什么名称，不需要去中央仓库上取</span><br>    container_name: ssm       <br>    ports: <br>      8081:8081<br>    environment:<br>      TZ: Asia/Shanghai<br>      <br>dockerfile文件:<br><br>from daocloud.io/library/tomcat:7.0.56 <span class="hljs-comment">#依赖的Tomcat镜像地址</span><br>copy ssm.war /usr/local/tomcat/webapps <span class="hljs-comment">#将web文件ssm.war拷贝到Tomcat工作目录内</span><br><br><span class="hljs-comment">#将ssm.var  dockerfile docker-compose.yml 按照对应格式存放</span><br><br>然后进入到docker-compose目录下,可以直接启动基于docker-compose.yml以及dockerfile文件构建的自定义镜像<br>docker-compose up -d<br><span class="hljs-comment">#如果自定义镜像不存在，会帮助我们构建出自定义镜像，如果自定义镜像已经存在，会直接运行这个自定义镜像</span><br><br><br><span class="hljs-comment">#重新构建自定义镜像</span><br>docker-compose build <br><br><span class="hljs-comment">#运行当前内容，并重新构建</span><br>docker-compose up -d --build<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>docker-compose</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker-compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker-compose.yml 配置文件编写详解</title>
    <link href="/2023/03/24/docker-compose/docker-compose_yaml%E6%96%87%E4%BB%B6/"/>
    <url>/2023/03/24/docker-compose/docker-compose_yaml%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker-compose-yml-配置文件编写详解"><a href="#docker-compose-yml-配置文件编写详解" class="headerlink" title="docker-compose.yml 配置文件编写详解"></a>docker-compose.yml 配置文件编写详解</h1><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h2><p>关于 docker compose 技术可以查看官方文档 Docker Compose<br>撰写规范：<a href="https://github.com/compose-spec/compose-spec/blob/master/spec.md">https://github.com/compose-spec/compose-spec/blob/master/spec.md</a></p><p>以下的内容是确立在已经下载好 Docker 以及 Docker Compose，可参看 Docker Compose 的官方安装教程 Install Docker Compose</p><p>原文参考： [<a href="https://blog.csdn.net/qq_36148847/article/details/79427878]">https://blog.csdn.net/qq_36148847/article/details/79427878]</a><br>( <a href="https://blog.csdn.net/Aria_Miazzy/article/details/89326829">https://blog.csdn.net/Aria_Miazzy/article/details/89326829</a>)<br>( <a href="https://blog.csdn.net/qq_36148847/article/details/79427878">https://blog.csdn.net/qq_36148847/article/details/79427878</a>)</p><h2 id="二-Docker-Compose-配置文件的构建参数说明"><a href="#二-Docker-Compose-配置文件的构建参数说明" class="headerlink" title="二. Docker Compose 配置文件的构建参数说明"></a>二. Docker Compose 配置文件的构建参数说明</h2><p>首先，官方提供了一个 yaml Docker Compose 配置文件的标准例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:alpine</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6379&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">frontend</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">update_config:</span><br>        <span class="hljs-attr">parallelism:</span> <span class="hljs-number">2</span><br>        <span class="hljs-attr">delay:</span> <span class="hljs-string">10s</span><br>      <span class="hljs-attr">restart_policy:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span><br><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:9.4</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db-data:/var/lib/postgresql/data</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">placement:</span><br>        <span class="hljs-attr">constraints:</span> [<span class="hljs-string">node.role</span> <span class="hljs-string">==</span> <span class="hljs-string">manager</span>]<br><br>  <span class="hljs-attr">vote:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/examplevotingapp_vote:before</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">5000</span><span class="hljs-string">:80</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">frontend</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">update_config:</span><br>        <span class="hljs-attr">parallelism:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">restart_policy:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span><br><br>  <span class="hljs-attr">result:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/examplevotingapp_result:before</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">5001</span><span class="hljs-string">:80</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">update_config:</span><br>        <span class="hljs-attr">parallelism:</span> <span class="hljs-number">2</span><br>        <span class="hljs-attr">delay:</span> <span class="hljs-string">10s</span><br>      <span class="hljs-attr">restart_policy:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span><br><br>  <span class="hljs-attr">worker:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/examplevotingapp_worker</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">frontend</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">replicated</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">labels:</span> [<span class="hljs-string">APP=VOTING</span>]<br>      <span class="hljs-attr">restart_policy:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span><br>        <span class="hljs-attr">delay:</span> <span class="hljs-string">10s</span><br>        <span class="hljs-attr">max_attempts:</span> <span class="hljs-number">3</span><br>        <span class="hljs-attr">window:</span> <span class="hljs-string">120s</span><br>      <span class="hljs-attr">placement:</span><br>        <span class="hljs-attr">constraints:</span> [<span class="hljs-string">node.role</span> <span class="hljs-string">==</span> <span class="hljs-string">manager</span>]<br><br>  <span class="hljs-attr">visualizer:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/visualizer:stable</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8080:8080&quot;</span><br>    <span class="hljs-attr">stop_grace_period:</span> <span class="hljs-string">1m30s</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">placement:</span><br>        <span class="hljs-attr">constraints:</span> [<span class="hljs-string">node.role</span> <span class="hljs-string">==</span> <span class="hljs-string">manager</span>]<br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">frontend:</span><br>  <span class="hljs-attr">backend:</span><br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">db-data:</span><br><br></code></pre></td></tr></table></figure><p>此文件配置了多个服务，关于此配置文件的各个语句含义就需要弄懂配置选项的含义了</p><h3 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h3><p>compose 文件是一个定义服务、 网络和卷的 YAML 文件 。Compose 文件的默认路径是 .&#x2F;docker-compose.yml</p><blockquote><p>提示：可以是用 .yml 或 .yaml 作为文件扩展名</p></blockquote><p>服务定义包含应用于为该服务启动的每个容器的配置，就像传递命令行参数一样 <strong>docker container create</strong>。同样，网络和卷的定义类似于 docker network create 和 docker volume create。</p><p>正如 docker container create 在 Dockerfile 指定选项，如 CMD、 EXPOSE、VOLUME、ENV，在默认情况下，你不需要再次指定它们docker-compose.yml。</p><p>可以使用 Bash 类 ${VARIABLE} 语法在配置值中使用环境变量。</p><h3 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h3><h4 id="1-bulid"><a href="#1-bulid" class="headerlink" title="1.bulid"></a>1.bulid</h4><p>服务除了可以基于指定的镜像，还可以基于一份 Dockerfile，在使用 up 启动之时执行构建任务，这个构建标签就是 build，它可以指定 Dockerfile 所在文件夹的路径。Compose 将会利用它自动构建这个镜像，然后使用这个镜像启动服务容器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span> <span class="hljs-string">/path/to/build/dir</span><br></code></pre></td></tr></table></figure><p>也可以是相对路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span> <span class="hljs-string">./dir</span><br></code></pre></td></tr></table></figure><p>设定上下文根目录，然后以该目录为准指定 Dockerfile</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">../</span><br>  <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">path/of/Dockerfile</span><br>  <br><span class="hljs-comment"># 例子</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">webapp:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./dir</span><br></code></pre></td></tr></table></figure><p>如果 context 中有指定的路径，并且可以选定 Dockerfile 和 args。那么 arg 这个标签，就像 Dockerfile 中的 ARG 指令，它可以在构建过程中指定环境变量，但是在构建成功后取消，在 docker-compose.yml 文件中也支持这样的写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">webapp:</span><br>    <span class="hljs-attr">build:</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">./dir</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile-alternate</span><br>      <span class="hljs-attr">args:</span><br>        <span class="hljs-attr">buildno:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>与 ENV 不同的是，ARG 可以为空值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">args:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">buildno</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">password</span><br></code></pre></td></tr></table></figure><p>如果要指定 image 以及 build ，选项格式为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span> <span class="hljs-string">./dir</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">webapp:tag</span><br></code></pre></td></tr></table></figure><p>这会在 .&#x2F;dir 目录生成一个名为 webaapp 和标记为 tag 的镜像</p><blockquote><p>Note:当用(Version 3) Compose 文件在群集模式下部署堆栈时，该选项被忽略。因为 docker stack 命令只接受预先构建的镜像</p></blockquote><h4 id="2-context"><a href="#2-context" class="headerlink" title="2.context"></a>2.context</h4><p>context 选项可以是 Dockerfile 的文件路径，也可以是到链接到 git 仓库的 url</p><p>当提供的值是相对路径时，它被解析为相对于撰写文件的路径，此目录也是发送到 Docker 守护进程的 context</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">./dir</span><br></code></pre></td></tr></table></figure><h4 id="3-dockerfile"><a href="#3-dockerfile" class="headerlink" title="3.dockerfile"></a>3.dockerfile</h4><p>使用此 dockerfile 文件来构建，必须指定构建路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile-alternate</span><br></code></pre></td></tr></table></figure><h4 id="4-args"><a href="#4-args" class="headerlink" title="4.args"></a>4.args</h4><p>添加构建参数，这些参数是仅在构建过程中可访问的环境变量</p><p>首先， 在Dockerfile中指定参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">ARG buildno<br>ARG password<br><br>RUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Build number: <span class="hljs-variable">$buildno</span>&quot;</span><br>RUN script-requiring-password.sh <span class="hljs-string">&quot;<span class="hljs-variable">$password</span>&quot;</span><br></code></pre></td></tr></table></figure><p>然后指定 build 下的参数,可以传递映射或列表</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">args:</span><br>    <span class="hljs-attr">buildno:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">secret</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">args:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">buildno=1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">password=secret</span><br></code></pre></td></tr></table></figure><p>指定构建参数时可以省略该值，在这种情况下，构建时的值默认构成运行环境中的值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">args:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">buildno</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">password</span><br></code></pre></td></tr></table></figure><blockquote><p>Note： YAML 布尔值（true，false，yes，no，on，off）必须使用引号括起来，以为了能够正常被解析为字符串</p></blockquote><h4 id="5-cache-from"><a href="#5-cache-from" class="headerlink" title="5.cache_from"></a>5.cache_from</h4><p>编写缓存解析镜像列表</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">cache_from:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">alpine:latest</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">corp/web_app:3.14</span><br></code></pre></td></tr></table></figure><h4 id="6-labels"><a href="#6-labels" class="headerlink" title="6.labels"></a>6.labels</h4><p>使用 Docker标签 将元数据添加到生成的镜像中，可以使用数组或字典。</p><p>建议使用反向 DNS 标记来防止签名与其他软件所使用的签名冲突</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">com.example.description:</span> <span class="hljs-string">&quot;Accounting webapp&quot;</span><br>    <span class="hljs-attr">com.example.department:</span> <span class="hljs-string">&quot;Finance&quot;</span><br>    <span class="hljs-attr">com.example.label-with-empty-value:</span> <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;com.example.description=Accounting webapp&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;com.example.department=Finance&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;com.example.label-with-empty-value&quot;</span><br></code></pre></td></tr></table></figure><h4 id="7-shm-size"><a href="#7-shm-size" class="headerlink" title="7.shm_size"></a>7.shm_size</h4><p>设置容器 &#x2F;dev&#x2F;shm 分区的大小，值为表示字节的整数值或表示字符的字符串</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">shm_size:</span> <span class="hljs-string">&#x27;2gb&#x27;</span><br><br><span class="hljs-comment"># 或</span><br><br><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">shm_size:</span> <span class="hljs-number">10000000</span><br></code></pre></td></tr></table></figure><h4 id="8-target"><a href="#8-target" class="headerlink" title="8.target"></a>8.target</h4><p>根据对应的 Dockerfile 构建指定 Stage</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>    <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">target:</span> <span class="hljs-string">prod</span><br></code></pre></td></tr></table></figure><h4 id="9-cap-add、cap-drop"><a href="#9-cap-add、cap-drop" class="headerlink" title="9.cap_add、cap_drop"></a>9.cap_add、cap_drop</h4><p>添加或删除容器功能，可查看 man 7 capabilities</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cap_add:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ALL</span><br><br><span class="hljs-attr">cap_drop:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">NET_ADMIN</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">SYS_ADMIN</span><br></code></pre></td></tr></table></figure><blockquote><p>Note:当用(Version 3) Compose 文件在群集模式下部署堆栈时，该选项被忽略。因为 docker stack 命令只接受预先构建的镜像</p></blockquote><h4 id="10-command"><a href="#10-command" class="headerlink" title="10.command"></a>10.command</h4><p>覆盖容器启动后默认执行的命令</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">command:</span> <span class="hljs-string">bundle</span> <span class="hljs-string">exec</span> <span class="hljs-string">thin</span> <span class="hljs-string">-p</span> <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><p>该命令也可以是一个列表，方法类似于 dockerfile:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;bundle&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;thin&quot;</span>, <span class="hljs-string">&quot;-p&quot;</span>, <span class="hljs-string">&quot;3000&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="11-configs"><a href="#11-configs" class="headerlink" title="11.configs"></a>11.configs</h4><p>使用服务 configs 配置为每个服务赋予相应的访问权限，支持两种不同的语法。</p><blockquote><p>Note: 配置必须存在或在 configs 此堆栈文件的顶层中定义，否则堆栈部署失效</p></blockquote><h5 id="1-SHORT-语法"><a href="#1-SHORT-语法" class="headerlink" title="1.SHORT 语法"></a>1.SHORT 语法</h5><p>SHORT 语法只能指定配置名称，这允许容器访问配置并将其安装在 &#x2F;<config_name> 容器内，源名称和目标装入点都设为配置名称。</config_name></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">my_config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">my_other_config</span><br><span class="hljs-attr">configs:</span><br>  <span class="hljs-attr">my_config:</span><br>    <span class="hljs-attr">file:</span> <span class="hljs-string">./my_config.txt</span><br>  <span class="hljs-attr">my_other_config:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>以上实例使用 SHORT 语法将 redis 服务访问授予 my_config 和 my_other_config ,并被 my_other_config 定义为外部资源，这意味着它已经在 Docker 中定义。可以通过 docker config create 命令或通过另一个堆栈部署。如果外部部署配置都不存在，则堆栈部署会失败并出现 config not found 错误。</p><blockquote><p>Note: config 定义仅在 3.3 版本或在更高版本的撰写文件格式中受支持，YAML 的布尔值（true, false, yes, no, on, off）必须要使用引号引起来（单引号、双引号均可），否则会当成字符串解析。</p></blockquote><h5 id="2-LONG-语法"><a href="#2-LONG-语法" class="headerlink" title="2.LONG 语法"></a>2.LONG 语法</h5><p>LONG 语法提供了创建服务配置的更加详细的信息</p><ul><li><p>source:Docker 中存在的配置的名称</p></li><li><p>target:要在服务的任务中装载的文件的路径或名称。如果未指定则默认为 &#x2F;<source></p></li><li><p>uid 和 gid:在服务的任务容器中拥有安装的配置文件的数字 UID 或 GID。如果未指定，则默认为在Linux上。Windows不支持</p></li><li><p>mode:在服务的任务容器中安装的文件的权限，以八进制表示法。例如，0444 代表文件可读的。默认是 0444。如果配置文件无法写入，是因为它们安装在临时文件系统中，所以如果设置了可写位，它将被忽略。可执行位可以设置。如果您不熟悉 UNIX 文件权限模式，Unix Permissions Calculator</p><p>下面示例在容器中将 my_config 名称设置为 redis_config，将模式设置为 0440（group-readable）并将用户和组设置为 103。该　｀redis　服务无法访问 my_other_config 配置。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">my_config</span><br>        <span class="hljs-attr">target:</span> <span class="hljs-string">/redis_config</span><br>        <span class="hljs-attr">uid:</span> <span class="hljs-string">&#x27;103&#x27;</span><br>        <span class="hljs-attr">gid:</span> <span class="hljs-string">&#x27;103&#x27;</span><br>        <span class="hljs-attr">mode:</span> <span class="hljs-number">0440</span><br><span class="hljs-attr">configs:</span><br>  <span class="hljs-attr">my_config:</span><br>    <span class="hljs-attr">file:</span> <span class="hljs-string">./my_config.txt</span><br>  <span class="hljs-attr">my_other_config:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>可以同时授予多个配置的服务相应的访问权限，也可以混合使用 LONG 和 SHORT 语法。定义配置并不意味着授予服务访问权限。</p><h4 id="12-cgroup-parent"><a href="#12-cgroup-parent" class="headerlink" title="12.cgroup_parent"></a>12.cgroup_parent</h4><p>可以为容器选择一个可选的父 cgroup</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cgroup_parent:</span> <span class="hljs-string">m-executor-abcd</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：当 使用（Version 3）Compose 文件在群集模式下部署堆栈时，忽略此选项</p></blockquote><h4 id="13-container-name"><a href="#13-container-name" class="headerlink" title="13.container_name"></a>13.container_name</h4><p>为自定义的容器指定一个名称，而不是使用默认的名称</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">container_name:</span> <span class="hljs-string">my-web-container</span><br></code></pre></td></tr></table></figure><p>因为 docker 容器名称必须是唯一的，所以如果指定了一个自定义的名称，不能扩展一个服务超过 1 个容器</p><h4 id="14-credential-spec"><a href="#14-credential-spec" class="headerlink" title="14.credential_spec"></a>14.credential_spec</h4><p>为托管服务账户配置凭据规范，此选项仅适用于 Windows 容器服务</p><p>在 credential_spec 上的配置列表格式为 file:&#x2F;&#x2F;<filename> 或 registry:&#x2F;&#x2F;<value-name></value-name></filename></p><p>使用 file: 应该注意引用的文件必须存在于 <strong>CredentialSpecs,docker</strong>  数据目录的子目录中。在 Windows 上，该目录默认为 C:\ProgramData\Docker\ 。以下示例从名为  C:\ProgramData\Docker\CredentialSpecs\my-credential-spec.json  的文件加载凭证规范 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">credential_spec:</span><br>  <span class="hljs-attr">file:</span> <span class="hljs-string">my-credential-spec.json</span><br></code></pre></td></tr></table></figure><p>使用 registry: 将从守护进程主机上的 Windows 注册表中读取凭据规范。其注册表值必须位于：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Virtualization\Containers\CredentialSpecs<br></code></pre></td></tr></table></figure><p>下面的示例通过 my-credential-spec 注册表中指定的值加载凭证规范：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">credential_spec:</span><br>  <span class="hljs-attr">registry:</span> <span class="hljs-string">my-credential-spec</span><br></code></pre></td></tr></table></figure><h4 id="15-deploy"><a href="#15-deploy" class="headerlink" title="15.deploy"></a>15.deploy</h4><p>指定与部署和运行服务相关的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:alpine</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">6</span><br>      <span class="hljs-attr">update_config:</span><br>        <span class="hljs-attr">parallelism:</span> <span class="hljs-number">2</span><br>        <span class="hljs-attr">delay:</span> <span class="hljs-string">10s</span><br>      <span class="hljs-attr">restart_policy:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span><br></code></pre></td></tr></table></figure><p>这里有几个子选项</p><h5 id="1-endpoint-mode"><a href="#1-endpoint-mode" class="headerlink" title="1.endpoint_mode"></a>1.endpoint_mode</h5><p>指定连接到群组外部客户端服务发现方法</p><p><strong>endpoint_mode: vip</strong> ：Docker 为该服务分配了一个虚拟 IP(VIP),作为客户端的 “前端“ 部位用于访问网络上的服务。<br><strong>endpoint_mode: dnsrr</strong> : DNS轮询（DNSRR）服务发现不使用单个虚拟 IP。Docker为服务设置 DNS 条目，使得服务名称的 DNS 查询返回一个 IP 地址列表，并且客户端直接连接到其中的一个。如果想使用自己的负载平衡器，或者混合 Windows 和 Linux 应用程序，则 DNS 轮询调度（round-robin）功能就非常实用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.3&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">wordpress:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">wordpress</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:80</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">overlay</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">replicated</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">endpoint_mode:</span> <span class="hljs-string">vip</span><br><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">volumes:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">db-data:/var/lib/mysql/data</span><br>    <span class="hljs-attr">networks:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">overlay</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">replicated</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">endpoint_mode:</span> <span class="hljs-string">dnsrr</span><br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">db-data:</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">overlay:</span><br></code></pre></td></tr></table></figure><p>相关信息：Swarm 模式 CLI 命令 、Configure 服务发现</p><blockquote><p><strong>注意：</strong> 使用 <strong>deploy</strong> 字段配置时，该配置默认只在swarm模式下生效，如果不想开启swarm，</p><p>只要在 docker-compos 启动时加上 <strong>–compatibility</strong> 即可</p></blockquote><h5 id="2-labels"><a href="#2-labels" class="headerlink" title="2.labels"></a>2.labels</h5><p>指定服务的标签，这些标签仅在服务上设置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">com.example.description:</span> <span class="hljs-string">&quot;This label will appear on the web service&quot;</span><br></code></pre></td></tr></table></figure><p>通过将 deploy 外面的 labels 标签来设置容器上的 labels</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">com.example.description:</span> <span class="hljs-string">&quot;This label will appear on all containers for the web service&quot;</span><br></code></pre></td></tr></table></figure><h5 id="3-mode"><a href="#3-mode" class="headerlink" title="3.mode"></a>3.mode</h5><ul><li><p>global:每个集节点只有一个容器</p></li><li><p>replicated:指定容器数量（默认）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">worker:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/examplevotingapp_worker</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">global</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="4-placement"><a href="#4-placement" class="headerlink" title="4.placement"></a>4.placement</h5><p>指定 constraints 和 preferences</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">placement:</span><br>        <span class="hljs-attr">constraints:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">node.role</span> <span class="hljs-string">==</span> <span class="hljs-string">manager</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">engine.labels.operatingsystem</span> <span class="hljs-string">==</span> <span class="hljs-string">ubuntu</span> <span class="hljs-number">14.04</span><br>        <span class="hljs-attr">preferences:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">spread:</span> <span class="hljs-string">node.labels.zone</span><br></code></pre></td></tr></table></figure><h5 id="5-replicas"><a href="#5-replicas" class="headerlink" title="5.replicas"></a>5.replicas</h5><p>如果服务是 replicated（默认)，需要指定运行的容器数量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">worker:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/examplevotingapp_worker</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">frontend</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">replicated</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h5 id="6-resources"><a href="#6-resources" class="headerlink" title="6.resources"></a>6.resources</h5><p>配置资源限制</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:alpine</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;0.50&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">50M</span><br>        <span class="hljs-attr">reservations:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;0.25&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">20M</span><br></code></pre></td></tr></table></figure><p>此例子中，redis 服务限制使用不超过 50M 的内存和 0.50（50％）可用处理时间（CPU），并且 保留 20M 了内存和 0.25 CPU时间</p><h5 id="7-restart-policy"><a href="#7-restart-policy" class="headerlink" title="7.restart_policy"></a>7.restart_policy</h5><p>配置容器的重新启动，代替 restart</p><ul><li><p><strong>condition:</strong> 值可以为 <strong>none</strong> 、<strong>on-failure</strong> 以及 <strong>any</strong> (默认)</p></li><li><p><strong>delay:</strong>  尝试重启的等待时间，默认为 0</p></li><li><p><strong>max_attempts:</strong> 放弃之前尝试重新启动容器次数（默认：从不放弃）。如果重新启动在配置中没有成功 window，则此尝试不计入配置max_attempts 值。例如，如果 max_attempts 值为 2，并且第一次尝试重新启动失败，则可能会尝试重新启动两次以上。</p></li><li><p><strong>windows:</strong> 在决定重新启动是否成功之前的等时间，指定为持续时间（默认值：立即决定）。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:alpine</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">restart_policy:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span><br>        <span class="hljs-attr">delay:</span> <span class="hljs-string">5s</span><br>        <span class="hljs-attr">max_attempts:</span> <span class="hljs-number">3</span><br>        <span class="hljs-attr">window:</span> <span class="hljs-string">120s</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="8-update-config"><a href="#8-update-config" class="headerlink" title="8.update_config"></a>8.update_config</h5><p>配置更新服务，用于无缝更新应用（rolling update)</p><ul><li><p><strong>parallelism：</strong>一次性更新的容器数量</p></li><li><p><strong>delay</strong>：更新一组容器之间的等待时间。</p></li><li><p><strong>failure_action：</strong>如果更新失败，可以执行的的是 continue、rollback 或 pause （默认）</p></li><li><p><strong>monitor：</strong>每次任务更新后监视失败的时间 (ns|us|ms|s|m|h)（默认为0）</p></li><li><p><strong>max_failure_ratio：</strong>在更新期间能接受的失败率</p></li><li><p><strong>order：</strong>更新次序设置，top-first（旧的任务在开始新任务之前停止）、start-first（新的任务首先启动，并且正在运行的任务短暂重叠）（默认 stop-first）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.4&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">vote:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/examplevotingapp_vote:before</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">update_config:</span><br>        <span class="hljs-attr">parallelism:</span> <span class="hljs-number">2</span><br>        <span class="hljs-attr">delay:</span> <span class="hljs-string">10s</span><br>        <span class="hljs-attr">order:</span> <span class="hljs-string">stop-first</span><br></code></pre></td></tr></table></figure><p><strong>不支持 Docker stack desploy 的几个子选项</strong><br>build、cgroup_parent、container_name、devices、tmpfs、external_links、inks、network_mode、restart、security_opt、stop_signal、sysctls、userns_mode</p></li></ul><h4 id="16-devices"><a href="#16-devices" class="headerlink" title="16.devices"></a>16.devices</h4><p>设置映射列表，与 Docker 客户端的 –device 参数类似 :</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">devices:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/dev/ttyUSB0:/dev/ttyUSB0&quot;</span><br></code></pre></td></tr></table></figure><h4 id="17-depends-on"><a href="#17-depends-on" class="headerlink" title="17.depends_on"></a>17.depends_on</h4><p>此选项解决了启动顺序的问题</p><p>在使用 Compose 时，最大的好处就是少打启动命令，但是一般项目容器启动的顺序是有要求的，如果直接从上到下启动容器，必然会因为容器依赖问题而启动失败。例如在没启动数据库容器的时候启动了应用容器，这时候应用容器会因为找不到数据库而退出，为了避免这种情况我们需要加入一个标签，就是 depends_on，这个标签解决了容器的依赖、启动先后的问题。</p><p>指定服务之间的依赖关系，有两种效果</p><ul><li><p>docker-compose up 以依赖顺序启动服务，下面例子中 redis 和 db 服务在 web 启动前启动</p></li><li><p>docker-compose up SERVICE 自动包含 SERVICE 的依赖性，下面例子中，例如下面容器会先启动 redis 和 db<br>两个服务，最后才启动 web 服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres</span><br></code></pre></td></tr></table></figure><p>注意的是，默认情况下使用 docker-compose up web 这样的方式启动 web 服务时，也会启动 redis 和 db 两个服务，因为在配置文件中定义了依赖关系</p></li></ul><h4 id="18-dns"><a href="#18-dns" class="headerlink" title="18.dns"></a>18.dns</h4><p>自定义 DNS 服务器，与 –dns 具有一样的用途，可以是单个值或列表</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dns:</span> <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span><br><span class="hljs-attr">dns:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">9.9</span><span class="hljs-number">.9</span><span class="hljs-number">.9</span><br></code></pre></td></tr></table></figure><h4 id="19-dns-search"><a href="#19-dns-search" class="headerlink" title="19.dns_search"></a>19.dns_search</h4><p>自定义 DNS 搜索域，可以是单个值或列表</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dns_search:</span> <span class="hljs-string">example.com</span><br><span class="hljs-attr">dns_search:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">dc1.example.com</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">dc2.example.com</span><br></code></pre></td></tr></table></figure><h4 id="20-tmpfs"><a href="#20-tmpfs" class="headerlink" title="20.tmpfs"></a>20.tmpfs</h4><p>挂载临时文件目录到容器内部，与 run 的参数一样效果，可以是单个值或列表</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tmpfs:</span> <span class="hljs-string">/run</span><br><span class="hljs-attr">tmpfs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/run</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/tmp</span><br></code></pre></td></tr></table></figure><h4 id="21-entrypoint"><a href="#21-entrypoint" class="headerlink" title="21.entrypoint"></a>21.entrypoint</h4><p>在 Dockerfile 中有一个指令叫做 ENTRYPOINT 指令，用于指定接入点。在 docker-compose.yml 中可以定义接入点，覆盖 Dockerfile 中的定义：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">entrypoint:</span> <span class="hljs-string">/code/entrypoint.sh</span><br></code></pre></td></tr></table></figure><p><strong>entrypoint</strong> 也可以是一个列表，方法类似于 dockerfile</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">entrypoint:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">php</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-d</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-d</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">memory_limit=-1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">vendor/bin/phpunit</span><br></code></pre></td></tr></table></figure><h4 id="21-env-file"><a href="#21-env-file" class="headerlink" title="21.env_file"></a>21.env_file</h4><p>从文件中添加环境变量。可以是单个值或是列表<br>如果已经用 docker-compose -f FILE 指定了 Compose 文件，那么 env_file 路径值为相对于该文件所在的目录</p><p>但 environment 环境中的设置的变量会会覆盖这些值，无论这些值未定义还是为 None</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">env_file:</span> <span class="hljs-string">.env</span><br></code></pre></td></tr></table></figure><p>或者根据 docker-compose.yml 设置多个：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">env_file:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">./common.env</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">./apps/web.env</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/secrets.env</span><br></code></pre></td></tr></table></figure><p>环境配置文件 env_file 中的声明每行都是以 VAR&#x3D;VAL 格式，其中以 # 开头的被解析为注释而被忽略</p><blockquote><p>注意环境变量配置列表的顺序*,例如下面例子</p></blockquote><p>docker_compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">some-service:</span><br>    <span class="hljs-attr">env_file:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">a.env</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">b.env</span><br></code></pre></td></tr></table></figure><p>a.env 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># a.env</span><br><span class="hljs-string">VAR=1</span><br></code></pre></td></tr></table></figure><p>b.env文件</p><p>对于在文件a.env 中指定的相同变量但在文件 b.env 中分配了不同的值，如果 b.env 像下面列在 a.env 之后，则刚在 a.env 设置的值被 b.env 相同变量的值覆盖，此时 $VAR 值为 hello。此外，这里所说的环境变量是对宿主机的 Compose 而言的，如果在配置文件中有 build 操作，这些变量并不会进入构建过程中，如果要在构建中使用变量还是首选 arg 标签</p><h4 id="22-environment"><a href="#22-environment" class="headerlink" title="22.environment"></a>22.environment</h4><p>添加环境变量，可以使用数组或字典。与上面的 env_file 选项完全不同，反而和 arg 有几分类似，这个标签的作用是设置镜像变量，它可以保存变量到镜像里面，也就是说启动的容器也会包含这些变量设置，这是与 arg 最大的不同。<br>一般 arg 标签的变量仅用在构建过程中。而 environment 和 Dockerfile 中的 ENV 指令一样会把变量一直保存在镜像、容器中，类似 docker run -e 的效果</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">environment:</span><br>  <span class="hljs-attr">RACK_ENV:</span> <span class="hljs-string">development</span><br>  <span class="hljs-attr">SHOW:</span> <span class="hljs-string">&#x27;true&#x27;</span><br>  <span class="hljs-attr">SESSION_SECRET:</span><br><br><span class="hljs-comment"># 或</span><br><br><span class="hljs-attr">environment:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">RACK_ENV=development</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">SHOW=true</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">SESSION_SECRET</span><br></code></pre></td></tr></table></figure><h4 id="23-expose"><a href="#23-expose" class="headerlink" title="23.expose"></a>23.expose</h4><p>暴露端口，但不映射到宿主机，只被连接的服务访问。这个标签与 Dockerfile 中的 EXPOSE 指令一样，用于指定暴露的端口，但是只是作为一种参考，实际上 docker-compose.yml 的端口映射还得 ports 这样的标签</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">expose:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3000&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8000&quot;</span><br></code></pre></td></tr></table></figure><h4 id="24-external-links"><a href="#24-external-links" class="headerlink" title="24.external_links"></a>24.external_links</h4><p>链接到 docker-compose.yml 外部的容器，甚至 并非 Compose 项目文件管理的容器。参数格式跟 links 类似</p><blockquote><p>在使用Docker过程中，会有许多单独使用 docker run 启动的容器的情况，为了使 Compose 能够连接这些不在docker-compose.yml 配置文件中定义的容器，那么就需要一个特殊的标签，就是 external_links，它可以让Compose 项目里面的容器连接到那些项目配置外部的容器（前提是外部容器中必须至少有一个容器是连接到与项目内的服务的同一个网络里面）。</p></blockquote><p>格式如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">external_links:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">redis_1</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">project_db_1:mysql</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">project_db_1:postgresql</span><br></code></pre></td></tr></table></figure><h4 id="25-extra-hosts"><a href="#25-extra-hosts" class="headerlink" title="25.extra_hosts"></a>25.extra_hosts</h4><p>添加主机名的标签，就是往 &#x2F;etc&#x2F;hosts 文件中添加一些记录，与 Docker 客户端 中的 –add-host 类似：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">extra_hosts:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;somehost:162.242.195.82&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;otherhost:50.31.209.229&quot;</span><br></code></pre></td></tr></table></figure><p>具有 IP 地址和主机名的条目在 &#x2F;etc&#x2F;hosts 内部容器中创建。启动之后查看容器内部 hosts ，例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-number">162.242</span><span class="hljs-number">.195</span><span class="hljs-number">.82</span>  somehost<br><span class="hljs-number">50.31</span><span class="hljs-number">.209</span><span class="hljs-number">.229</span>   otherhost<br></code></pre></td></tr></table></figure><h4 id="26-healthcheck"><a href="#26-healthcheck" class="headerlink" title="26.healthcheck"></a>26.healthcheck</h4><p>用于检查测试服务使用的容器是否正常</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">healthcheck:</span><br><span class="hljs-symbol">  test:</span> [<span class="hljs-string">&quot;CMD&quot;</span>, <span class="hljs-string">&quot;curl&quot;</span>, <span class="hljs-string">&quot;-f&quot;</span>, <span class="hljs-string">&quot;http://localhost&quot;</span>]<br><span class="hljs-symbol">  interval:</span> <span class="hljs-number">1</span>m30s<br><span class="hljs-symbol">  timeout:</span> <span class="hljs-number">10</span>s<br><span class="hljs-symbol">  retries:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">  start_period:</span> <span class="hljs-number">40</span>s<br></code></pre></td></tr></table></figure><p><strong>interval，timeout</strong>  以及 <strong>start_period</strong> 都定为持续时间</p><p>test 必须是字符串或列表，如果它是一个列表，第一项必须是 NONE，CMD 或 CMD-SHELL ；如果它是一个字符串，则相当于指定CMD-SHELL 后跟该字符串。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit"># Hit the local web app<br><span class="hljs-keyword">test: </span>[&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost&quot;]<br><br># As above, but wrapped in /bin/sh. Both forms below are equivalent.<br><span class="hljs-keyword">test: </span>[&quot;CMD-SHELL&quot;, &quot;curl -f http://localhost || exit 1&quot;]<br><span class="hljs-keyword">test: </span>curl -f https://localhost || exit 1<br></code></pre></td></tr></table></figure><p>如果需要禁用镜像的所有检查项目，可以使用 disable:true,相当于 test:[“NONE”]</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">healthcheck:</span><br>  <span class="hljs-attr">disable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="27-image"><a href="#27-image" class="headerlink" title="27.image"></a>27.image</h4><p>从指定的镜像中启动容器，可以是存储仓库、标签以及镜像 ID</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">ubuntu:14.04</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">tutum/influxdb</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">example-registry.com:4000/postgresql</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">a4bc65fd</span><br></code></pre></td></tr></table></figure><p>如果镜像不存在，Compose 会自动拉去镜像</p><h4 id="28-isolation"><a href="#28-isolation" class="headerlink" title="28.isolation"></a>28.isolation</h4><p>Linux 上仅仅支持 default 值</p><h4 id="29-labels"><a href="#29-labels" class="headerlink" title="29.labels"></a>29.labels</h4><p>使用 Docker 标签将元数据添加到容器，可以使用数组或字典。与 Dockerfile 中的 LABELS 类似：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">labels:</span><br>  <span class="hljs-attr">com.example.description:</span> <span class="hljs-string">&quot;Accounting webapp&quot;</span><br>  <span class="hljs-attr">com.example.department:</span> <span class="hljs-string">&quot;Finance&quot;</span><br>  <span class="hljs-attr">com.example.label-with-empty-value:</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-attr">labels:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;com.example.description=Accounting webapp&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;com.example.department=Finance&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;com.example.label-with-empty-value&quot;</span><br></code></pre></td></tr></table></figure><h4 id="30-links"><a href="#30-links" class="headerlink" title="30.links"></a>30.links</h4><p>链接到其它服务的中的容器，可以指定服务名称也可以指定链接别名（SERVICE：ALIAS)，与 Docker 客户端的 –link 有一样效果，会连接到其它服务中的容器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">web:</span><br>  <span class="hljs-attr">links:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">db:database</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br></code></pre></td></tr></table></figure><p>使用的别名将会自动在服务容器中的 &#x2F;etc&#x2F;hosts 里创建。例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-number">172.12</span><span class="hljs-number">.2</span><span class="hljs-number">.186</span>  db<br><span class="hljs-number">172.12</span><span class="hljs-number">.2</span><span class="hljs-number">.186</span>  database<br><span class="hljs-number">172.12</span><span class="hljs-number">.2</span><span class="hljs-number">.187</span>  redis<br></code></pre></td></tr></table></figure><p>相应的环境变量也将被创建</p><h4 id="31-logging"><a href="#31-logging" class="headerlink" title="31.logging"></a>31.logging</h4><p>配置日志服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">driver:</span> <span class="hljs-string">syslog</span><br>  <span class="hljs-attr">options:</span><br>    <span class="hljs-attr">syslog-address:</span> <span class="hljs-string">&quot;tcp://192.168.0.42:123&quot;</span><br></code></pre></td></tr></table></figure><p>该 driver值是指定服务器的日志记录驱动程序，默认值为 json-file,与 –log-diver 选项一样</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">driver:</span> <span class="hljs-string">&quot;json-file&quot;</span><br><span class="hljs-attr">driver:</span> <span class="hljs-string">&quot;syslog&quot;</span><br><span class="hljs-attr">driver:</span> <span class="hljs-string">&quot;none&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：只有驱动程序 json-file 和 journald 驱动程序可以直接从 docker-compose up 和 docker-compose logs 获取日志。使用任何其他方式不会显示任何日志。</p></blockquote><p>对于可选值，可以使用 options 指定日志记录中的日志记录选项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">driver:</span> <span class="hljs-string">&quot;syslog&quot;</span><br><span class="hljs-attr">options:</span><br>  <span class="hljs-attr">syslog-address:</span> <span class="hljs-string">&quot;tcp://192.168.0.42:123&quot;</span><br></code></pre></td></tr></table></figure><p>默认驱动程序 json-file 具有限制存储日志量的选项，所以，使用键值对来获得最大存储大小以及最小存储数量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">options:</span><br>  <span class="hljs-attr">max-size:</span> <span class="hljs-string">&quot;200k&quot;</span><br>  <span class="hljs-attr">max-file:</span> <span class="hljs-string">&quot;10&quot;</span><br></code></pre></td></tr></table></figure><p>上面实例将存储日志文件，直到它们达到max-size:200kB，存储的单个日志文件的数量由该 max-file 值指定。随着日志增长超出最大限制，旧日志文件将被删除以存储新日志</p><p>docker-compose.yml 限制日志存储的示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">some-service:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">some-service</span><br>    <span class="hljs-attr">logging:</span><br>      <span class="hljs-attr">driver:</span> <span class="hljs-string">&quot;json-file&quot;</span><br>      <span class="hljs-attr">options:</span><br>        <span class="hljs-attr">max-size:</span> <span class="hljs-string">&quot;200k&quot;</span><br>        <span class="hljs-attr">max-file:</span> <span class="hljs-string">&quot;10&quot;</span><br></code></pre></td></tr></table></figure><h4 id="32-network-mode"><a href="#32-network-mode" class="headerlink" title="32.network_mode"></a>32.network_mode</h4><p>网络模式，用法类似于 Docke 客户端的 –net 选项，格式为：service:[service name]</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">network_mode:</span> <span class="hljs-string">&quot;bridge&quot;</span><br><span class="hljs-attr">network_mode:</span> <span class="hljs-string">&quot;host&quot;</span><br><span class="hljs-attr">network_mode:</span> <span class="hljs-string">&quot;none&quot;</span><br><span class="hljs-attr">network_mode:</span> <span class="hljs-string">&quot;service:[service name]&quot;</span><br><span class="hljs-attr">network_mode:</span> <span class="hljs-string">&quot;container:[container name/id]&quot;</span><br></code></pre></td></tr></table></figure><p>可以指定使用服务或者容器的网络</p><h4 id="33-networks"><a href="#33-networks" class="headerlink" title="33.networks"></a>33.networks</h4><p>加入指定网络</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">some-service:</span><br>    <span class="hljs-attr">networks:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">some-network</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">other-network</span><br></code></pre></td></tr></table></figure><h4 id="34-aliases"><a href="#34-aliases" class="headerlink" title="34.aliases"></a>34.aliases</h4><p>同一网络上的其他容器可以使用服务器名称或别名来连接到其他服务的容器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">some-service:</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">some-network:</span><br>        <span class="hljs-attr">aliases:</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-string">alias1</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-string">alias3</span><br>      <span class="hljs-attr">other-network:</span><br>        <span class="hljs-attr">aliases:</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-string">alias2</span><br></code></pre></td></tr></table></figure><p>下面实例中，提供 web 、worker以及db 服务，伴随着两个网络 new 和 legacy 。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./web</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">new</span><br><br>  <span class="hljs-attr">worker:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./worker</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">legacy</span><br><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">new:</span><br>        <span class="hljs-attr">aliases:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">database</span><br>      <span class="hljs-attr">legacy:</span><br>        <span class="hljs-attr">aliases:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">mysql</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">new:</span><br>  <span class="hljs-attr">legacy:</span><br></code></pre></td></tr></table></figure><p>相同的服务可以在不同的网络有不同的别名</p><h4 id="35-ipv4-address、ipv6-address"><a href="#35-ipv4-address、ipv6-address" class="headerlink" title="35.ipv4_address、ipv6_address"></a>35.ipv4_address、ipv6_address</h4><p>为服务的容器指定一个静态 IP 地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2.1&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">app:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">ifconfig</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">app_net:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.238</span><span class="hljs-number">.10</span><br>        <span class="hljs-attr">ipv6_address:</span> <span class="hljs-number">2001</span><span class="hljs-string">:3984:3989::10</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">app_net:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span><br>    <span class="hljs-attr">enable_ipv6:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">ipam:</span><br>      <span class="hljs-attr">driver:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">config:</span><br>      <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">subnet:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.238</span><span class="hljs-number">.0</span><span class="hljs-string">/24</span><br>      <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">subnet:</span> <span class="hljs-number">2001</span><span class="hljs-string">:3984:3989::/64</span><br></code></pre></td></tr></table></figure><h4 id="36-PID"><a href="#36-PID" class="headerlink" title="36.PID"></a>36.PID</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pid:</span> <span class="hljs-string">&quot;host&quot;</span><br></code></pre></td></tr></table></figure><p>将 PID 模式设置为主机 PID 模式，可以打开容器与主机操作系统之间的共享 PID 地址空间。使用此标志启动的容器可以访问和操作宿主机的其他容器，反之亦然。</p><h4 id="37-ports"><a href="#37-ports" class="headerlink" title="37. ports"></a>37. ports</h4><p>映射端口</p><h5 id="1-SHORT-语法-1"><a href="#1-SHORT-语法-1" class="headerlink" title="1.SHORT 语法"></a>1.SHORT 语法</h5><p>可以使用 HOST:CONTAINER 的方式指定端口，也可以指定容器端口（选择临时主机端口），宿主机会随机映射端口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ports:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3000&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3000-3005&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8000:8000&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9090-9091:8080-8081&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;49100:22&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;127.0.0.1:8001:8001&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;127.0.0.1:5000-5010:5000-5010&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6060:6060/udp&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：当使用 HOST:CONTAINER 格式来映射端口时，如果使用的容器端口小于 60 可能会得到错误得结果，因为YAML 将会解析 xx:yy 这种数字格式为 60 进制，所以建议采用字符串格式。</p></blockquote><h5 id="2-LONG-语法-1"><a href="#2-LONG-语法-1" class="headerlink" title="2.LONG 语法"></a>2.LONG 语法</h5><p>LONG 语法支持 SHORT 语法不支持的附加字段</p><ul><li><p>target：容器内的端口</p></li><li><p>published：公开的端口</p></li><li><p>protocol： 端口协议（tcp 或 udp）</p></li><li><p>mode：通过host 用在每个节点还是哪个发布的主机端口或使用 ingress 用于集群模式端口进行平衡负载，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">target:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">published:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">tcp</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">host</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="38-secrets"><a href="#38-secrets" class="headerlink" title="38.secrets"></a>38.secrets</h4><p>通过 secrets为每个服务授予相应的访问权限</p><h5 id="1-SHORT-语法-2"><a href="#1-SHORT-语法-2" class="headerlink" title="1.SHORT 语法"></a>1.SHORT 语法</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.1&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">secrets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">my_secret</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">my_other_secret</span><br><span class="hljs-attr">secrets:</span><br>  <span class="hljs-attr">my_secret:</span><br>    <span class="hljs-attr">file:</span> <span class="hljs-string">./my_secret.txt</span><br>  <span class="hljs-attr">my_other_secret:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h5 id="2-LONG-语法-2"><a href="#2-LONG-语法-2" class="headerlink" title="2.LONG 语法"></a>2.LONG 语法</h5><p>LONG 语法可以添加其他选项</p><ul><li><p>source：secret 名称</p></li><li><p>target：在服务任务容器中需要装载在 &#x2F;run&#x2F;secrets&#x2F; 中的文件名称，如果 source 未定义，那么默认为此值</p></li><li><p>uid&amp;gid：在服务的任务容器中拥有该文件的 UID 或 GID 。如果未指定，两者都默认为 0。</p></li><li><p>mode：以八进制表示法将文件装载到服务的任务容器中 &#x2F;run&#x2F;secrets&#x2F; 的权限。例如，0444 代表可读。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.1&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">secrets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">my_secret</span><br>        <span class="hljs-attr">target:</span> <span class="hljs-string">redis_secret</span><br>        <span class="hljs-attr">uid:</span> <span class="hljs-string">&#x27;103&#x27;</span><br>        <span class="hljs-attr">gid:</span> <span class="hljs-string">&#x27;103&#x27;</span><br>        <span class="hljs-attr">mode:</span> <span class="hljs-number">0440</span><br><span class="hljs-attr">secrets:</span><br>  <span class="hljs-attr">my_secret:</span><br>    <span class="hljs-attr">file:</span> <span class="hljs-string">./my_secret.txt</span><br>  <span class="hljs-attr">my_other_secret:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="39-security-opt"><a href="#39-security-opt" class="headerlink" title="39.security_opt"></a>39.security_opt</h4><p>为每个容器覆盖默认的标签。简单说来就是管理全部服务的标签，比如设置全部服务的 user 标签值为 USER</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">security_opt:<br>  - label:user:<span class="hljs-keyword">USER</span><br>  <span class="hljs-title">- label</span>:role:ROLE<br></code></pre></td></tr></table></figure><h5 id="40-stop-grace-period"><a href="#40-stop-grace-period" class="headerlink" title="40.stop_grace_period"></a>40.stop_grace_period</h5><p>在发送 SIGKILL 之前指定 stop_signal ，如果试图停止容器（如果它没有处理 SIGTERM（或指定的任何停止信号）），则需要等待的时间</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">stop_grace_period:</span> <span class="hljs-string">1s</span><br><span class="hljs-attr">stop_grace_period:</span> <span class="hljs-string">1m30s</span><br></code></pre></td></tr></table></figure><p>默认情况下，stop 在发送SIGKILL之前等待10秒钟容器退出</p><h4 id="41-stop-signal"><a href="#41-stop-signal" class="headerlink" title="41.stop_signal"></a>41.stop_signal</h4><p>设置另一个信号来停止容器。在默认情况下使用的 SIGTERM 来停止容器。设置另一个信号可以使用 stop_signal 标签：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">stop_signal:</span> <span class="hljs-string">SIGUSR1</span><br></code></pre></td></tr></table></figure><h4 id="42-sysctls"><a href="#42-sysctls" class="headerlink" title="42.sysctls"></a>42.sysctls</h4><p>在容器中设置的内核参数，可以为数组或字典</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sysctls:</span><br>  <span class="hljs-attr">net.core.somaxconn:</span> <span class="hljs-number">1024</span><br>  <span class="hljs-attr">net.ipv4.tcp_syncookies:</span> <span class="hljs-number">0</span><br><br><span class="hljs-attr">sysctls:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">net.core.somaxconn=1024</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">net.ipv4.tcp_syncookies=0</span><br></code></pre></td></tr></table></figure><h4 id="43-ulimits"><a href="#43-ulimits" class="headerlink" title="43.ulimits"></a>43.ulimits</h4><p>覆盖容器的默认限制，可以单一地将限制值设为一个整数，也可以将soft&#x2F;hard 限制指定为映射</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ulimits:</span><br>  <span class="hljs-attr">nproc:</span> <span class="hljs-number">65535</span><br>  <span class="hljs-attr">nofile:</span><br>    <span class="hljs-attr">soft:</span> <span class="hljs-number">20000</span><br>    <span class="hljs-attr">hard:</span> <span class="hljs-number">40000</span><br></code></pre></td></tr></table></figure><h4 id="44-userns-mode"><a href="#44-userns-mode" class="headerlink" title="44.userns_mode"></a>44.userns_mode</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">userns_mode:</span> <span class="hljs-string">&quot;host&quot;</span><br></code></pre></td></tr></table></figure><h4 id="45-volumes"><a href="#45-volumes" class="headerlink" title="45.volumes"></a>45.volumes</h4><p>挂载一个目录或者一个已存在的数据卷容器，可以直接使用 HOST:CONTAINER 这样的格式，或者使用 HOST:CONTAINER:ro 这样的格式，后者对于容器来说，数据卷是只读的，这样可以有效保护宿主机的文件系统</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.2&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:alpine</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">volume</span><br>        <span class="hljs-attr">source:</span> <span class="hljs-string">mydata</span><br>        <span class="hljs-attr">target:</span> <span class="hljs-string">/data</span><br>        <span class="hljs-attr">volume:</span><br>          <span class="hljs-attr">nocopy:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">bind</span><br>        <span class="hljs-attr">source:</span> <span class="hljs-string">./static</span><br>        <span class="hljs-attr">target:</span> <span class="hljs-string">/opt/app/static</span><br><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:latest</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;dbdata:/var/lib/postgresql/data&quot;</span><br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">mydata:</span><br>  <span class="hljs-attr">dbdata:</span><br></code></pre></td></tr></table></figure><p>Compose 的数据卷指定路径可以是相对路径，使用 . 或者 .. 来指定相对目录。</p><p>数据卷的格式可以是下面多种形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">volumes:</span><br>  <span class="hljs-comment"># 只是指定一个路径，Docker 会自动在创建一个数据卷（这个路径是容器内部的）。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/var/lib/mysql</span><br><br>  <span class="hljs-comment"># 使用绝对路径挂载数据卷</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/data:/var/lib/mysql</span><br><br>  <span class="hljs-comment"># 以 Compose 配置文件为中心的相对路径作为数据卷挂载到容器。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">./cache:/tmp/cache</span><br><br>  <span class="hljs-comment"># 使用用户的相对路径（~/ 表示的目录是 /home/&lt;用户目录&gt;/ 或者 /root/）。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">~/configs:/etc/configs/:ro</span><br><br>  <span class="hljs-comment"># 已经存在的命名的数据卷。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">datavolume:/var/lib/mysql</span><br><br></code></pre></td></tr></table></figure><p>如果你不使用宿主机的路径，可以指定一个 volume_driver</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">volume_driver:</span> <span class="hljs-string">mydriver</span><br></code></pre></td></tr></table></figure><h5 id="1-SHORT-语法-3"><a href="#1-SHORT-语法-3" class="headerlink" title="1.SHORT 语法"></a>1.SHORT 语法</h5><p>可以选择在主机（HOST:CONTAINER）或访问模式（HOST:CONTAINER:ro）上指定路径。</p><p>可以在主机上挂载相对路径，该路径相对于正在使用的 Compose 配置文件的目录进行扩展。相对路径应始终以 . 或 .. 开头</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">volumes:</span><br>  <span class="hljs-comment"># Just specify a path and let the Engine create a volume</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/var/lib/mysql</span><br><br>  <span class="hljs-comment"># Specify an absolute path mapping</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/data:/var/lib/mysql</span><br><br>  <span class="hljs-comment"># Path on the host, relative to the Compose file</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">./cache:/tmp/cache</span><br><br>  <span class="hljs-comment"># User-relative path</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">~/configs:/etc/configs/:ro</span><br><br>  <span class="hljs-comment"># Named volume</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">datavolume:/var/lib/mysql</span><br></code></pre></td></tr></table></figure><h5 id="2-LONG-语法-3"><a href="#2-LONG-语法-3" class="headerlink" title="2.LONG 语法"></a>2.LONG 语法</h5><p>LONG 语法有些附加字段</p><ul><li><p>type：安装类型，可以为 volume、bind 或 tmpfs</p></li><li><p>source：安装源，主机上用于绑定安装的路径或定义在顶级 volumes密钥中卷的名称 ,不适用于 tmpfs 类型安装。</p></li><li><p>target：卷安装在容器中的路径</p></li><li><p>read_only：标志将卷设置为只读</p></li><li><p>bind：配置额外的绑定选项</p></li><li><p>propagation：用于绑定的传播模式</p></li><li><p>volume：配置额外的音量选项</p></li><li><p>nocopy：创建卷时禁止从容器复制数据的标志</p></li><li><p>tmpfs：配置额外的 tmpfs 选项</p></li><li><p>size：tmpfs 的大小，以字节为单位</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.2&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:alpine</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">volume</span><br>        <span class="hljs-attr">source:</span> <span class="hljs-string">mydata</span><br>        <span class="hljs-attr">target:</span> <span class="hljs-string">/data</span><br>        <span class="hljs-attr">volume:</span><br>          <span class="hljs-attr">nocopy:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">bind</span><br>        <span class="hljs-attr">source:</span> <span class="hljs-string">./static</span><br>        <span class="hljs-attr">target:</span> <span class="hljs-string">/opt/app/static</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">webnet:</span><br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">mydata:</span><br></code></pre></td></tr></table></figure><h5 id="3-volumes-from"><a href="#3-volumes-from" class="headerlink" title="3.volumes_from"></a>3.volumes_from</h5><p>从其它容器或者服务挂载数据卷，可选的参数是 :ro 或 :rw，前者表示容器只读，后者表示容器对数据卷是可读可写的（默认情况为可读可写的）。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">volumes_from:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">service_name</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">service_name:ro</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">container:container_name</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">container:container_name:rw</span><br></code></pre></td></tr></table></figure><h5 id="4-用于服务、群集以及堆栈文件的卷"><a href="#4-用于服务、群集以及堆栈文件的卷" class="headerlink" title="4.用于服务、群集以及堆栈文件的卷"></a>4.用于服务、群集以及堆栈文件的卷</h5><p>在使用服务，群集和 docker-stack.yml 文件时，请记住支持服务的任务（容器）可以部署在群集中的任何节点上，并且每次更新服务时都可能是不同的节点。</p><p>在缺少指定源的命名卷的情况下，Docker 为支持服务的每个任务创建一个匿名卷。关联的容器被移除后，匿名卷不会保留。</p><p>如果希望数据持久存在，请使用可识别多主机的命名卷和卷驱动程序，以便可以从任何节点访问数据。或者，对该服务设置约束，以便将其任务部署在具有该卷的节点上。</p><p>下面一个例子，Docker Labs 中 votingapp 示例的 docker-stack.yml文件中定义了一个称为 db 的服务。它被配置为一个命名卷来保存群体上的数据， 并且仅限于在节点上运行。下面是来自该文件的部分内容：db postgres manager</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:9.4</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db-data:/var/lib/postgresql/data</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">placement:</span><br>        <span class="hljs-attr">constraints:</span> [<span class="hljs-string">node.role</span> <span class="hljs-string">==</span> <span class="hljs-string">manager</span>]<br></code></pre></td></tr></table></figure><h4 id="46-restart"><a href="#46-restart" class="headerlink" title="46.restart"></a>46.restart</h4><p>默认值为 no ，即在任何情况下都不会重新启动容器；当值为 always 时，容器总是重新启动；当值为 on-failure 时，当出现 on-failure 报错容器退出时，容器重新启动。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">restart:</span> <span class="hljs-string">&quot;no&quot;</span><br><span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br><span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br><span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br></code></pre></td></tr></table></figure><h4 id="47-其他选项"><a href="#47-其他选项" class="headerlink" title="47.其他选项"></a>47.其他选项</h4><p>关于标签：cpu_shares、cpu_quota、 cpuse、domainname、hostname、 ipc、 mac_address、privileged、 read_only、 shm_size、stdin_open、tty、 user、 working_dir</p><p>上面这些都是一个单值的标签，类似于使用 docker run 的效果</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cpu_shares:</span> <span class="hljs-number">73</span><br><span class="hljs-attr">cpu_quota:</span> <span class="hljs-number">50000</span><br><span class="hljs-attr">cpuset:</span> <span class="hljs-number">0</span><span class="hljs-string">,1</span><br><br><span class="hljs-attr">user:</span> <span class="hljs-string">postgresql</span><br><span class="hljs-attr">working_dir:</span> <span class="hljs-string">/code</span><br><br><span class="hljs-attr">domainname:</span> <span class="hljs-string">foo.com</span><br><span class="hljs-attr">hostname:</span> <span class="hljs-string">foo</span><br><span class="hljs-attr">ipc:</span> <span class="hljs-string">host</span><br><span class="hljs-attr">mac_address:</span> <span class="hljs-number">02</span><span class="hljs-string">:42:ac:11:65:43</span><br><br><span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br><br><br><span class="hljs-attr">read_only:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">shm_size:</span> <span class="hljs-string">64M</span><br><span class="hljs-attr">stdin_open:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">tty:</span> <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><h4 id="48-持续时间"><a href="#48-持续时间" class="headerlink" title="48.持续时间"></a>48.持续时间</h4><p>某些配置选项如 check 的子选项interval以及timeout 的设置格式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-number">2.</span>5s<br>10s<br>1m30s<br>2h32m<br>5h34m56s<br></code></pre></td></tr></table></figure><p>支持的单位有 us、ms、s、m 以及 h</p><h3 id="49-指定字节值"><a href="#49-指定字节值" class="headerlink" title="49.指定字节值"></a>49.指定字节值</h3><p>某些选项如 bulid 的子选项 shm_size</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript">2b<br>1024kb<br>2048k<br>300m<br>1gb<br></code></pre></td></tr></table></figure><p>支持的单位是 b，k，m 以及 g，或 kb， mb 和 gb。目前不支持十进制值</p><h3 id="50-extends"><a href="#50-extends" class="headerlink" title="50.extends"></a>50.extends</h3><p>这个标签可以扩展另一个服务，扩展内容可以是来自在当前文件，也可以是来自其他文件，相同服务的情况下，后来者会有选择地覆盖原有配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">extends:</span><br>  <span class="hljs-attr">file:</span> <span class="hljs-string">common.yml</span><br>  <span class="hljs-attr">service:</span> <span class="hljs-string">webapp</span><br></code></pre></td></tr></table></figure><p>用户可以在任何地方使用这个标签，只要标签内容包含 file 和 service 两个值就可以了。file 的值可以是相对或者绝对路径，如果不指定 file 的值，那么 Compose 会读取当前 YML 文件的信息。</p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>docker-compose</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker-compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker镜像操作，以及docker命令的使用</title>
    <link href="/2023/03/24/docker/docker%E9%95%9C%E5%83%8F%E6%93%8D%E4%BD%9C%EF%BC%8C%E4%BB%A5%E5%8F%8Adocker%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/24/docker/docker%E9%95%9C%E5%83%8F%E6%93%8D%E4%BD%9C%EF%BC%8C%E4%BB%A5%E5%8F%8Adocker%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker镜像操作，以及docker命令使用"><a href="#docker镜像操作，以及docker命令使用" class="headerlink" title="docker镜像操作，以及docker命令使用"></a>docker镜像操作，以及docker命令使用</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">参考文献：<br>Docker初学者的常用命令：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/weixin_43062251/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">103825065</span><br>Docker详细：https:<span class="hljs-regexp">//</span>jiajially.gitbooks.io<span class="hljs-regexp">/dockerguide/</span>content<span class="hljs-regexp">/chapter_fastlearn/</span>docker_run/index.html<br>http:<span class="hljs-regexp">//</span>docker.baoshu.red<span class="hljs-regexp">/network/m</span>ode.html<br></code></pre></td></tr></table></figure><h2 id="一、镜像的相关操作"><a href="#一、镜像的相关操作" class="headerlink" title="一、镜像的相关操作"></a>一、镜像的相关操作</h2><h3 id="1-拉取镜像到本地"><a href="#1-拉取镜像到本地" class="headerlink" title="1.拉取镜像到本地"></a>1.拉取镜像到本地</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull 镜像名称[:tag]<span class="hljs-comment">#链接可以在网上拉取</span><br><span class="hljs-comment"># 举个例子</span><br>docker pull tomcat daocloud.io/library/tomcat:8.5.15-jre8<br></code></pre></td></tr></table></figure><h3 id="2-查看全部本地的镜像"><a href="#2-查看全部本地的镜像" class="headerlink" title="2.查看全部本地的镜像"></a>2.查看全部本地的镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker images<br></code></pre></td></tr></table></figure><h3 id="3-删除本地镜像"><a href="#3-删除本地镜像" class="headerlink" title="3.删除本地镜像"></a>3.删除本地镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker rmi 镜像的标识 <br>docker rmi -f 镜像标识<br><span class="hljs-comment">#如果打了两个标签，同一标识，删除不了</span><br>docker rmi  镜像名称：镜像标识<br></code></pre></td></tr></table></figure><h3 id="4-镜像的导入导出（不规范）"><a href="#4-镜像的导入导出（不规范）" class="headerlink" title="4.镜像的导入导出（不规范）"></a>4.镜像的导入导出（不规范）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 将本地的镜像导出</span><br>docker save -o 导出的路径 镜像<span class="hljs-built_in">id</span><br><br>docker save 120.27.153.22:5000/rel/file_rel:1.1.114 |gzip &gt; file-rel-114.tar.gz  <span class="hljs-comment">#打包压缩</span><br><br><span class="hljs-comment"># 加载本地的镜像文件</span><br>docker load -i 镜像文件<br></code></pre></td></tr></table></figure><h3 id="5-修改镜像名称"><a href="#5-修改镜像名称" class="headerlink" title="5.修改镜像名称"></a>5.修改镜像名称</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker tag 镜像<span class="hljs-built_in">id</span> 新镜像名称:版本<br></code></pre></td></tr></table></figure><h2 id="二、docker运行相关容器的相关操作"><a href="#二、docker运行相关容器的相关操作" class="headerlink" title="二、docker运行相关容器的相关操作"></a>二、docker运行相关容器的相关操作</h2><h3 id="1-运行容器"><a href="#1-运行容器" class="headerlink" title="1.运行容器"></a>1.运行容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 简单操作</span><br>docker run 镜像的标识|镜像名称[:tag]<br><br>备注：<br>常用的参数docker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识|镜像名称[:tag]<br>-d：代表后台运行容器<br>-p 宿主机端口:容器端口：为了映射当前Linux端口和容器端口<br>--name 容器名称：指定容器的名称<br></code></pre></td></tr></table></figure><h3 id="2-查看正在运行的容器"><a href="#2-查看正在运行的容器" class="headerlink" title="2.查看正在运行的容器"></a>2.查看正在运行的容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker ps [-q,a]<br><br>-a 查看全部的容器，包括没有运行<br>-q 查看正在运行的标识<br></code></pre></td></tr></table></figure><h3 id="3-查看容器的日志"><a href="#3-查看容器的日志" class="headerlink" title="3.查看容器的日志"></a>3.查看容器的日志</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker logs -f 容器ID<br><br>-f：可以滚动查看日志的最后几行<br></code></pre></td></tr></table></figure><h3 id="4-执行容器内命令"><a href="#4-执行容器内命令" class="headerlink" title="4.执行容器内命令"></a>4.执行容器内命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#进入容器内执行：</span><br>docker <span class="hljs-built_in">exec</span> -it 容器ID bash  [等于=] docker <span class="hljs-built_in">exec</span> -it 容器ID /bin/bash<br><span class="hljs-comment">#或docker exec -it 容器ID sh  [等于=] docker exec -it /bin/sh </span><br><br><span class="hljs-comment">#Docker在容器外执行容器内命令或脚本:</span><br>docker <span class="hljs-built_in">exec</span> 容器ID /bin/bash -c <span class="hljs-string">&quot;XXX命令&quot;</span><br><span class="hljs-comment">#例如：</span><br>docker <span class="hljs-built_in">exec</span> 容器ID或容器名 /bin/sh -c <span class="hljs-string">&quot;mkdir /www/default/runtime; \</span><br><span class="hljs-string">                                 chmod +x /www/default/ank; \</span><br><span class="hljs-string">                                 /www/default/ank clearcache; \</span><br><span class="hljs-string">                                 chmod 754 -R /www/default/runtime;&quot;</span><br><br><span class="hljs-comment">#执行容器内shell脚本:</span><br>docker <span class="hljs-built_in">exec</span> web-blog /www/default/start.sh<br></code></pre></td></tr></table></figure><h3 id="5、删除容器（删除容器前，需要先停止容器运行）"><a href="#5、删除容器（删除容器前，需要先停止容器运行）" class="headerlink" title="5、删除容器（删除容器前，需要先停止容器运行）"></a>5、删除容器（删除容器前，需要先停止容器运行）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#停止指定的容器</span><br>docker stop 容器ID<br><br><span class="hljs-comment">#停止全部的容器</span><br>docker stop $(docker ps -qa)<br><br><span class="hljs-comment">#删除指定的容器</span><br>docker <span class="hljs-built_in">rm</span> 容器<span class="hljs-built_in">id</span><br><br><span class="hljs-comment">#删除全部的容器</span><br>docker <span class="hljs-built_in">rm</span> $(docker ps -qa)<br></code></pre></td></tr></table></figure><h3 id="6-启动容器"><a href="#6-启动容器" class="headerlink" title="6. #启动容器"></a>6. #启动容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker start 容器ID<br></code></pre></td></tr></table></figure><h3 id="7-docker容器中文件的上传与下载"><a href="#7-docker容器中文件的上传与下载" class="headerlink" title="7. #docker容器中文件的上传与下载"></a>7. #docker容器中文件的上传与下载</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#上传本机文件到镜像内:</span><br>docker <span class="hljs-built_in">cp</span> /root/test.txt ecef8319d2c8:/root/<br><span class="hljs-comment">#本机/root/test.txt 文件上传到容器ID为ecef8319d2c8的root目录</span><br><br><span class="hljs-comment">#下载容器内文件到本机：</span><br>docker <span class="hljs-built_in">cp</span> ecef8319d2c8:/root/test.txt /root/<br><span class="hljs-comment">#将容器ID：ecef8319d2c8 /root/目录下的test.txt文件下载到本机的root目录下</span><br><br><span class="hljs-comment">#复制整个文件夹：</span><br>docker container <span class="hljs-built_in">cp</span> -a flink_taskmanager_1:/opt/flink/conf/ /app/flink/conf/<br><br></code></pre></td></tr></table></figure><h3 id="8-docker-commit可以将容器的存储层保存下来成为镜像。"><a href="#8-docker-commit可以将容器的存储层保存下来成为镜像。" class="headerlink" title="8. docker commit可以将容器的存储层保存下来成为镜像。"></a>8. docker commit可以将容器的存储层保存下来成为镜像。</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">换句话说:在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。与dockerfile一样，但是dockerfile更加智能，能针对每一步进行记录，并根据每一步可生成不同依赖的镜像</span><br></code></pre></td></tr></table></figure><p>参考地址：<a href="https://blog.csdn.net/qq_28723681/article/details/107210775">https://blog.csdn.net/qq_28723681/article/details/107210775</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]<br><br><br>$ docker commit \<br>    --author <span class="hljs-string">&quot;jiangzhenzhou &lt;1962821461@qq.com&gt;&quot;</span> \<br>    --message <span class="hljs-string">&quot;修改了默认网页&quot;</span> \<br>    webserver \<br>    nginx:v2<br><br><span class="hljs-comment">#输出如下：</span><br>sha256:07e33465974800ce65751acc279adc6ed2dc5ed4e0838f8b86f0c87aa1795214<br><span class="hljs-comment">#可以在 docker image ls 中看到这个新定制的镜像</span><br><br><br>docker的详细实战：https://blog.csdn.net/weixin_43062251/article/details/103825065<br></code></pre></td></tr></table></figure><h3 id="9-设置环境变量（以mongo举例）"><a href="#9-设置环境变量（以mongo举例）" class="headerlink" title="9. 设置环境变量（以mongo举例）"></a>9. 设置环境变量（以mongo举例）</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis">当你开始 mongo镜像，你可以通过传递一个或多个环境变量来调整 MongoDB 实例的初始化 docker run命令行。请注意，如果您使用已经包含数据库的数据目录启动容器，则以下任何变量都不会产生任何影响：在容器启动时，任何预先存在的数据库将始终保持不变。<br>MONGO_INITDB_ROOT_USERNAME, MONGO_INITDB_ROOT_PASSWORD 这些变量结合使用，创建一个新用户并设置该用户的密码。 该用户创建于 <span class="hljs-literal">admin</span> 身份验证数据库 并赋予 角色 root，这是 一个“超级用户”角色 。下面是使用这两个变量创建一个MongoDB实例，然后使用 mongocli 连接到 <span class="hljs-literal">admin</span>身份验证数据库。<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看容器之间的内部通信</span><br>docker network <span class="hljs-built_in">ls</span> <br><br><span class="hljs-comment">#docker network创建一个桥接网络，在docker run的时候将容器指定到新创建的桥接网络中，这样同一桥接网络中的容器就可以通过互相访问。</span><br>docker network create some-network <br><br><span class="hljs-comment">#创建mongo实例</span><br>docker run -d --network some-network --name some-mongo \<br>    -e MONGO_INITDB_ROOT_USERNAME=mongoadmin \<br>    -e MONGO_INITDB_ROOT_PASSWORD=secret \<br>    mongo<br><br><span class="hljs-comment">#运行一个mongo临时容器，退出后即清除</span><br>docker run -it --<span class="hljs-built_in">rm</span> --network some-network mongo \<br>    mongo --host some-mongo \<br>        -u mongoadmin \<br>        -p secret \<br>        --authenticationDatabase admin \<br>        some-db<br><span class="hljs-comment">#查看查看当前使用的数据库    </span><br>&gt; db.getName(); <br><br>注意：<br>some-mongo 是定义的容器名<br>some-network 是创建的docker桥接网络<br>some-db 使用的数据库<br></code></pre></td></tr></table></figure><h3 id="10-查看docker详情"><a href="#10-查看docker详情" class="headerlink" title="10. 查看docker详情"></a>10. 查看docker详情</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker inspect  01193d2fb1b1   <span class="hljs-comment">#01193d2fb1b1代表docker运行的镜像id</span><br><br><span class="hljs-comment">#根据镜像筛选后五行数据</span><br>docker inspect  01193d2fb1b1 |grep -A 5 Binds    <br></code></pre></td></tr></table></figure><h3 id="11-查看容器的cpu、内存和PID"><a href="#11-查看容器的cpu、内存和PID" class="headerlink" title="11. 查看容器的cpu、内存和PID"></a>11. 查看容器的cpu、内存和PID</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker stats --no-stream --format <span class="hljs-string">&quot;table &#123;&#123;.Name&#125;&#125;\t&#123;&#123;.CPUPerc&#125;&#125;\t&#123;&#123;.MemUsage&#125;&#125;\t&#123;&#123;.PIDs&#125;&#125;&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="12-查看容器占用磁盘空间"><a href="#12-查看容器占用磁盘空间" class="headerlink" title="12. 查看容器占用磁盘空间"></a>12. 查看容器占用磁盘空间</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker ps -a --format <span class="hljs-string">&quot;table &#123;&#123;.Size&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><br><span class="hljs-comment">#查看占用空间的PID，以及对应的容器名称</span><br>docker ps -q | xargs docker inspect --format <span class="hljs-string">&#x27;&#123;&#123;.State.Pid&#125;&#125;, &#123;&#123;.Name&#125;&#125;, &#123;&#123;.GraphDriver.Data.WorkDir&#125;&#125;&#x27;</span> | grep <span class="hljs-string">&quot;ec3241de83a99bb8a18764142a1194a1b248ea7c53e39447ddf198d5b61b0099&quot;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker安装</title>
    <link href="/2023/03/24/docker/docker%E5%AE%89%E8%A3%85/"/>
    <url>/2023/03/24/docker/docker%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装docker："><a href="#安装docker：" class="headerlink" title="安装docker："></a>安装docker：</h1><h2 id="一、yum在线安装："><a href="#一、yum在线安装：" class="headerlink" title="一、yum在线安装："></a>一、yum在线安装：</h2><p>安装指定版可参考文档：<a href="https://www.cnblogs.com/lixie0215/p/14804777.html">https://www.cnblogs.com/lixie0215/p/14804777.html</a></p><h3 id="1、下载关于docker的依赖环境"><a href="#1、下载关于docker的依赖环境" class="headerlink" title="1、下载关于docker的依赖环境"></a>1、下载关于docker的依赖环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install yum-utils device-mapper-persistent-data lvm2<br><br>可以使用该插件更快编译补齐代码：<br><span class="hljs-comment"># yum -y install bash-completion.noarch</span><br>yum -y install bash-completion.noarch net-tools vim lrzsz wget tree screen lsof tcpdump nc telnet unzip <br></code></pre></td></tr></table></figure><h3 id="2、设置一下下载Docker的镜像源"><a href="#2、设置一下下载Docker的镜像源" class="headerlink" title="2、设置一下下载Docker的镜像源"></a>2、设置一下下载Docker的镜像源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><br></code></pre></td></tr></table></figure><h3 id="3-安装docker"><a href="#3-安装docker" class="headerlink" title="3.安装docker"></a>3.安装docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum makecache fast<br>yum -y install docker-ce<br></code></pre></td></tr></table></figure><h3 id="4、启动docker服务"><a href="#4、启动docker服务" class="headerlink" title="4、启动docker服务"></a>4、启动docker服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start docker<br></code></pre></td></tr></table></figure><h3 id="5-设置开机启动"><a href="#5-设置开机启动" class="headerlink" title="5.设置开机启动"></a>5.设置开机启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><h3 id="6-测试是否安装成功"><a href="#6-测试是否安装成功" class="headerlink" title="6.测试是否安装成功"></a>6.测试是否安装成功</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run hello-world<br></code></pre></td></tr></table></figure><h3 id="7-设置docker中央仓库"><a href="#7-设置docker中央仓库" class="headerlink" title="7.设置docker中央仓库"></a>7.设置docker中央仓库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">1、Docker官方的中央仓库：这个仓库是镜像最全的，但是下载速度很慢。https://hub.docker.com<br><br>2、国内的镜像网站：<br>https://c.163yun.com/hub<span class="hljs-comment">#/home</span><br>http://hub.daocloud.io <span class="hljs-comment">#(推荐使用)</span><br><br>3、在公司内部会采用私服的方式拉取镜像。（添加配置）<br>需要在/etc/docker/daemon.json中，如果没有的话，需要增加<br>&#123;<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>:[<span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>],<br>    <span class="hljs-string">&quot;insecure-registries&quot;</span>:[<span class="hljs-string">&quot;ip:port&quot;</span>]<br>    <span class="hljs-comment">#&quot;graph&quot;: &quot;/app&quot;  存放路径</span><br>&#125;<br><br>4、重启两个服务<br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="二、二进制安装"><a href="#二、二进制安装" class="headerlink" title="二、二进制安装"></a>二、二进制安装</h2><p>参考文献：<a href="https://blog.csdn.net/gzt19881123/article/details/109454467">https://blog.csdn.net/gzt19881123/article/details/109454467</a></p><h3 id="1-下载docker二进制版本"><a href="#1-下载docker二进制版本" class="headerlink" title="1. 下载docker二进制版本"></a>1. 下载docker二进制版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#请选择最新最稳定的CE版本</span><br>https://download.docker.com/linux/static/stable/x86_64/<br><br>例如 ：下载版本为18.06.3-ce的docker二进制压缩包到 /tmp目录下：<br>wget  https://download.docker.com/linux/static/stable/x86_64/docker-18.06.3-ce.tgz<br></code></pre></td></tr></table></figure><h3 id="2-解压出二进制文件"><a href="#2-解压出二进制文件" class="headerlink" title="2. 解压出二进制文件"></a>2. 解压出二进制文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">解压出的一个文件目录为 docker/<br><br>[root@localhost tmp]<span class="hljs-comment"># tar -xvf docker-18.06.3-ce.tgz</span><br>[root@localhost tmp]<span class="hljs-comment"># ls</span><br>docker  docker-18.06.3-ce.tgz<br></code></pre></td></tr></table></figure><h3 id="3-复制二进制文件到-x2F-usr-x2F-bin目录下"><a href="#3-复制二进制文件到-x2F-usr-x2F-bin目录下" class="headerlink" title="3. 复制二进制文件到&#x2F;usr&#x2F;bin目录下"></a>3. 复制二进制文件到&#x2F;usr&#x2F;bin目录下</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@localhost tmp]<span class="hljs-comment"># cp docker/* /usr/bin/</span><br><br>检查docker命令是否可用<br>[root@localhost tmp]<span class="hljs-comment"># docker --version</span><br>Docker version 18.06.3-ce, build d7080c1<br></code></pre></td></tr></table></figure><h3 id="4-配置systemctl-启动命令并设置开机启动"><a href="#4-配置systemctl-启动命令并设置开机启动" class="headerlink" title="4. 配置systemctl 启动命令并设置开机启动"></a>4. 配置systemctl 启动命令并设置开机启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh">以上步骤安装成功后，shell命令行下 sudo dockerd &amp; 即可启动docker，但一般我们采用 systemctl方式启动docker服务并设置开机启动，所以创建 /usr/lib/systemd/system/docker.service 文件<br><br>vim /usr/lib/systemd/system/docker.service<br><span class="hljs-comment">#并且在文件里面设置如下内容：</span><br><br>[Unit]<br>Description=Docker Application Container Engine<br>Documentation=https://docs.docker.com<br>After=network-online.target firewalld.service<br>Wants=network-online.target<br><br>[Service]<br>Type=notify<br>ExecStart=/usr/bin/dockerd<br>ExecReload=/bin/kill -s HUP <span class="hljs-variable">$MAINPID</span><br>LimitNOFILE=infinity<br>LimitNPROC=infinity<br>TimeoutStartSec=0<br>Delegate=<span class="hljs-built_in">yes</span><br>KillMode=process<br>Restart=on-failure<br>StartLimitBurst=3<br>StartLimitInterval=60s<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="5-采用-systemctl-设置自动重启"><a href="#5-采用-systemctl-设置自动重启" class="headerlink" title="5. 采用 systemctl 设置自动重启"></a>5. 采用 systemctl 设置自动重启</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl start docker.service<br><br><span class="hljs-comment"># --------------设置开机自动启动-------------------</span><br>systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
